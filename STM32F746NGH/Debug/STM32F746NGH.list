
STM32F746NGH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000886c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  08008a3c  08008a3c  00018a3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008af0  08008af0  00020184  2**0
                  CONTENTS
  4 .ARM          00000008  08008af0  08008af0  00018af0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008af8  08008af8  00020184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008af8  08008af8  00018af8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008afc  08008afc  00018afc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000184  20000000  08008b00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001628  20000184  08008c84  00020184  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200017ac  08008c84  000217ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001140f  00000000  00000000  000201b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003412  00000000  00000000  000315c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e30  00000000  00000000  000349d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c68  00000000  00000000  00035808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000291a6  00000000  00000000  00036470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000179f3  00000000  00000000  0005f616  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e58da  00000000  00000000  00077009  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015c8e3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a80  00000000  00000000  0015c934  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000184 	.word	0x20000184
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008a24 	.word	0x08008a24

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000188 	.word	0x20000188
 800020c:	08008a24 	.word	0x08008a24

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <apInit>:




void apInit(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
  uartOpen(_DEF_UART1, 9600);
 80005b8:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80005bc:	2000      	movs	r0, #0
 80005be:	f000 fa83 	bl	8000ac8 <uartOpen>
}
 80005c2:	bf00      	nop
 80005c4:	bd80      	pop	{r7, pc}
	...

080005c8 <apMain>:

void apMain(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b084      	sub	sp, #16
 80005cc:	af00      	add	r7, sp, #0
  uint32_t pre_time;
  uint32_t pre_baud;

  pre_baud = uartGetBaud(_DEF_UART1);
 80005ce:	2000      	movs	r0, #0
 80005d0:	f000 fb08 	bl	8000be4 <uartGetBaud>
 80005d4:	60b8      	str	r0, [r7, #8]
  pre_time = millis();
 80005d6:	f000 f877 	bl	80006c8 <millis>
 80005da:	60f8      	str	r0, [r7, #12]
  while(1)
  {
    if(millis() - pre_time >= 100)
 80005dc:	f000 f874 	bl	80006c8 <millis>
 80005e0:	4602      	mov	r2, r0
 80005e2:	68fb      	ldr	r3, [r7, #12]
 80005e4:	1ad3      	subs	r3, r2, r3
 80005e6:	2b63      	cmp	r3, #99	; 0x63
 80005e8:	d905      	bls.n	80005f6 <apMain+0x2e>
    {
      pre_time = millis();
 80005ea:	f000 f86d 	bl	80006c8 <millis>
 80005ee:	60f8      	str	r0, [r7, #12]
      ledToggle(_DEF_LED1);
 80005f0:	2000      	movs	r0, #0
 80005f2:	f000 fa33 	bl	8000a5c <ledToggle>
    }

    if(uartAvailable(_DEF_UART1) > 0)
 80005f6:	2000      	movs	r0, #0
 80005f8:	f000 fa82 	bl	8000b00 <uartAvailable>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d00a      	beq.n	8000618 <apMain+0x50>
    {
      uint8_t rx_data;

      rx_data = uartRead(_DEF_UART1);
 8000602:	2000      	movs	r0, #0
 8000604:	f000 fa8f 	bl	8000b26 <uartRead>
 8000608:	4603      	mov	r3, r0
 800060a:	71fb      	strb	r3, [r7, #7]
      uartPrintf(_DEF_UART1, "RxData : %c 0x%X\n", rx_data, rx_data);
 800060c:	79fa      	ldrb	r2, [r7, #7]
 800060e:	79fb      	ldrb	r3, [r7, #7]
 8000610:	490a      	ldr	r1, [pc, #40]	; (800063c <apMain+0x74>)
 8000612:	2000      	movs	r0, #0
 8000614:	f000 faae 	bl	8000b74 <uartPrintf>
    }

    if(uartGetBaud(_DEF_UART1) != pre_baud)
 8000618:	2000      	movs	r0, #0
 800061a:	f000 fae3 	bl	8000be4 <uartGetBaud>
 800061e:	4602      	mov	r2, r0
 8000620:	68bb      	ldr	r3, [r7, #8]
 8000622:	4293      	cmp	r3, r2
 8000624:	d0da      	beq.n	80005dc <apMain+0x14>
    {
      pre_baud = uartGetBaud(_DEF_UART1);
 8000626:	2000      	movs	r0, #0
 8000628:	f000 fadc 	bl	8000be4 <uartGetBaud>
 800062c:	60b8      	str	r0, [r7, #8]
      uartPrintf(_DEF_UART1, "ChangeBaud : %d\n", pre_baud);
 800062e:	68ba      	ldr	r2, [r7, #8]
 8000630:	4903      	ldr	r1, [pc, #12]	; (8000640 <apMain+0x78>)
 8000632:	2000      	movs	r0, #0
 8000634:	f000 fa9e 	bl	8000b74 <uartPrintf>
    if(millis() - pre_time >= 100)
 8000638:	e7d0      	b.n	80005dc <apMain+0x14>
 800063a:	bf00      	nop
 800063c:	08008a3c 	.word	0x08008a3c
 8000640:	08008a50 	.word	0x08008a50

08000644 <bspInit>:




void bspInit(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b084      	sub	sp, #16
 8000648:	af00      	add	r7, sp, #0
  HAL_Init();
 800064a:	f000 fae8 	bl	8000c1e <HAL_Init>
  MPU_Config();
 800064e:	f000 f8b3 	bl	80007b8 <MPU_Config>
  SystemClock_Config();
 8000652:	f000 f841 	bl	80006d8 <SystemClock_Config>

  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000656:	4b1b      	ldr	r3, [pc, #108]	; (80006c4 <bspInit+0x80>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065a:	4a1a      	ldr	r2, [pc, #104]	; (80006c4 <bspInit+0x80>)
 800065c:	f043 0301 	orr.w	r3, r3, #1
 8000660:	6313      	str	r3, [r2, #48]	; 0x30
 8000662:	4b18      	ldr	r3, [pc, #96]	; (80006c4 <bspInit+0x80>)
 8000664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000666:	f003 0301 	and.w	r3, r3, #1
 800066a:	60fb      	str	r3, [r7, #12]
 800066c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800066e:	4b15      	ldr	r3, [pc, #84]	; (80006c4 <bspInit+0x80>)
 8000670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000672:	4a14      	ldr	r2, [pc, #80]	; (80006c4 <bspInit+0x80>)
 8000674:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000678:	6313      	str	r3, [r2, #48]	; 0x30
 800067a:	4b12      	ldr	r3, [pc, #72]	; (80006c4 <bspInit+0x80>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000682:	60bb      	str	r3, [r7, #8]
 8000684:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000686:	4b0f      	ldr	r3, [pc, #60]	; (80006c4 <bspInit+0x80>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068a:	4a0e      	ldr	r2, [pc, #56]	; (80006c4 <bspInit+0x80>)
 800068c:	f043 0304 	orr.w	r3, r3, #4
 8000690:	6313      	str	r3, [r2, #48]	; 0x30
 8000692:	4b0c      	ldr	r3, [pc, #48]	; (80006c4 <bspInit+0x80>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000696:	f003 0304 	and.w	r3, r3, #4
 800069a:	607b      	str	r3, [r7, #4]
 800069c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800069e:	4b09      	ldr	r3, [pc, #36]	; (80006c4 <bspInit+0x80>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a2:	4a08      	ldr	r2, [pc, #32]	; (80006c4 <bspInit+0x80>)
 80006a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006a8:	6313      	str	r3, [r2, #48]	; 0x30
 80006aa:	4b06      	ldr	r3, [pc, #24]	; (80006c4 <bspInit+0x80>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006b2:	603b      	str	r3, [r7, #0]
 80006b4:	683b      	ldr	r3, [r7, #0]



  MX_USB_DEVICE_Init();
 80006b6:	f006 fe43 	bl	8007340 <MX_USB_DEVICE_Init>
}
 80006ba:	bf00      	nop
 80006bc:	3710      	adds	r7, #16
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	40023800 	.word	0x40023800

080006c8 <millis>:
{
  HAL_Delay(ms);
}

uint32_t millis(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80006cc:	f000 faf8 	bl	8000cc0 <HAL_GetTick>
 80006d0:	4603      	mov	r3, r0
}
 80006d2:	4618      	mov	r0, r3
 80006d4:	bd80      	pop	{r7, pc}
	...

080006d8 <SystemClock_Config>:
}



void SystemClock_Config(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b094      	sub	sp, #80	; 0x50
 80006dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006de:	f107 0320 	add.w	r3, r7, #32
 80006e2:	2230      	movs	r2, #48	; 0x30
 80006e4:	2100      	movs	r1, #0
 80006e6:	4618      	mov	r0, r3
 80006e8:	f007 fd0c 	bl	8008104 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ec:	f107 030c 	add.w	r3, r7, #12
 80006f0:	2200      	movs	r2, #0
 80006f2:	601a      	str	r2, [r3, #0]
 80006f4:	605a      	str	r2, [r3, #4]
 80006f6:	609a      	str	r2, [r3, #8]
 80006f8:	60da      	str	r2, [r3, #12]
 80006fa:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80006fc:	f002 f936 	bl	800296c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000700:	4b2b      	ldr	r3, [pc, #172]	; (80007b0 <SystemClock_Config+0xd8>)
 8000702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000704:	4a2a      	ldr	r2, [pc, #168]	; (80007b0 <SystemClock_Config+0xd8>)
 8000706:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800070a:	6413      	str	r3, [r2, #64]	; 0x40
 800070c:	4b28      	ldr	r3, [pc, #160]	; (80007b0 <SystemClock_Config+0xd8>)
 800070e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000710:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000714:	60bb      	str	r3, [r7, #8]
 8000716:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000718:	4b26      	ldr	r3, [pc, #152]	; (80007b4 <SystemClock_Config+0xdc>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	4a25      	ldr	r2, [pc, #148]	; (80007b4 <SystemClock_Config+0xdc>)
 800071e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000722:	6013      	str	r3, [r2, #0]
 8000724:	4b23      	ldr	r3, [pc, #140]	; (80007b4 <SystemClock_Config+0xdc>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800072c:	607b      	str	r3, [r7, #4]
 800072e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000730:	2301      	movs	r3, #1
 8000732:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000734:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000738:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800073a:	2302      	movs	r3, #2
 800073c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800073e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000742:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000744:	2319      	movs	r3, #25
 8000746:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
 8000748:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 800074c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800074e:	2302      	movs	r3, #2
 8000750:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000752:	2309      	movs	r3, #9
 8000754:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000756:	f107 0320 	add.w	r3, r7, #32
 800075a:	4618      	mov	r0, r3
 800075c:	f002 f966 	bl	8002a2c <HAL_RCC_OscConfig>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000766:	f000 f853 	bl	8000810 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800076a:	f002 f90f 	bl	800298c <HAL_PWREx_EnableOverDrive>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000774:	f000 f84c 	bl	8000810 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000778:	230f      	movs	r3, #15
 800077a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800077c:	2302      	movs	r3, #2
 800077e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000780:	2300      	movs	r3, #0
 8000782:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000784:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000788:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800078a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800078e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000790:	f107 030c 	add.w	r3, r7, #12
 8000794:	2107      	movs	r1, #7
 8000796:	4618      	mov	r0, r3
 8000798:	f002 fbec 	bl	8002f74 <HAL_RCC_ClockConfig>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <SystemClock_Config+0xce>
  {
    Error_Handler();
 80007a2:	f000 f835 	bl	8000810 <Error_Handler>
  }
}
 80007a6:	bf00      	nop
 80007a8:	3750      	adds	r7, #80	; 0x50
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	40023800 	.word	0x40023800
 80007b4:	40007000 	.word	0x40007000

080007b8 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b084      	sub	sp, #16
 80007bc:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80007be:	463b      	mov	r3, r7
 80007c0:	2200      	movs	r2, #0
 80007c2:	601a      	str	r2, [r3, #0]
 80007c4:	605a      	str	r2, [r3, #4]
 80007c6:	609a      	str	r2, [r3, #8]
 80007c8:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80007ca:	f000 fbbb 	bl	8000f44 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80007ce:	2301      	movs	r3, #1
 80007d0:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80007d2:	2300      	movs	r3, #0
 80007d4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80007d6:	2300      	movs	r3, #0
 80007d8:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80007da:	231f      	movs	r3, #31
 80007dc:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80007de:	2387      	movs	r3, #135	; 0x87
 80007e0:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80007e2:	2300      	movs	r3, #0
 80007e4:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80007e6:	2300      	movs	r3, #0
 80007e8:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80007ea:	2301      	movs	r3, #1
 80007ec:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80007ee:	2301      	movs	r3, #1
 80007f0:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80007f2:	2300      	movs	r3, #0
 80007f4:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80007f6:	2300      	movs	r3, #0
 80007f8:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80007fa:	463b      	mov	r3, r7
 80007fc:	4618      	mov	r0, r3
 80007fe:	f000 fbd9 	bl	8000fb4 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000802:	2004      	movs	r0, #4
 8000804:	f000 fbb6 	bl	8000f74 <HAL_MPU_Enable>

}
 8000808:	bf00      	nop
 800080a:	3710      	adds	r7, #16
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}

08000810 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000814:	b672      	cpsid	i
}
 8000816:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000818:	e7fe      	b.n	8000818 <Error_Handler+0x8>
	...

0800081c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800081c:	b480      	push	{r7}
 800081e:	b083      	sub	sp, #12
 8000820:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000822:	4b0f      	ldr	r3, [pc, #60]	; (8000860 <HAL_MspInit+0x44>)
 8000824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000826:	4a0e      	ldr	r2, [pc, #56]	; (8000860 <HAL_MspInit+0x44>)
 8000828:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800082c:	6413      	str	r3, [r2, #64]	; 0x40
 800082e:	4b0c      	ldr	r3, [pc, #48]	; (8000860 <HAL_MspInit+0x44>)
 8000830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000832:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000836:	607b      	str	r3, [r7, #4]
 8000838:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800083a:	4b09      	ldr	r3, [pc, #36]	; (8000860 <HAL_MspInit+0x44>)
 800083c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800083e:	4a08      	ldr	r2, [pc, #32]	; (8000860 <HAL_MspInit+0x44>)
 8000840:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000844:	6453      	str	r3, [r2, #68]	; 0x44
 8000846:	4b06      	ldr	r3, [pc, #24]	; (8000860 <HAL_MspInit+0x44>)
 8000848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800084a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800084e:	603b      	str	r3, [r7, #0]
 8000850:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000852:	bf00      	nop
 8000854:	370c      	adds	r7, #12
 8000856:	46bd      	mov	sp, r7
 8000858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085c:	4770      	bx	lr
 800085e:	bf00      	nop
 8000860:	40023800 	.word	0x40023800

08000864 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000868:	e7fe      	b.n	8000868 <NMI_Handler+0x4>

0800086a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800086a:	b480      	push	{r7}
 800086c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800086e:	e7fe      	b.n	800086e <HardFault_Handler+0x4>

08000870 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000874:	e7fe      	b.n	8000874 <MemManage_Handler+0x4>

08000876 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000876:	b480      	push	{r7}
 8000878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800087a:	e7fe      	b.n	800087a <BusFault_Handler+0x4>

0800087c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000880:	e7fe      	b.n	8000880 <UsageFault_Handler+0x4>

08000882 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000882:	b480      	push	{r7}
 8000884:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000886:	bf00      	nop
 8000888:	46bd      	mov	sp, r7
 800088a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088e:	4770      	bx	lr

08000890 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000894:	bf00      	nop
 8000896:	46bd      	mov	sp, r7
 8000898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089c:	4770      	bx	lr

0800089e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800089e:	b480      	push	{r7}
 80008a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008a2:	bf00      	nop
 80008a4:	46bd      	mov	sp, r7
 80008a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008aa:	4770      	bx	lr

080008ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008b0:	f000 f9f2 	bl	8000c98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008b4:	bf00      	nop
 80008b6:	bd80      	pop	{r7, pc}

080008b8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80008bc:	4802      	ldr	r0, [pc, #8]	; (80008c8 <OTG_FS_IRQHandler+0x10>)
 80008be:	f000 fee2 	bl	8001686 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80008c2:	bf00      	nop
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	20001294 	.word	0x20001294

080008cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b086      	sub	sp, #24
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008d4:	4a14      	ldr	r2, [pc, #80]	; (8000928 <_sbrk+0x5c>)
 80008d6:	4b15      	ldr	r3, [pc, #84]	; (800092c <_sbrk+0x60>)
 80008d8:	1ad3      	subs	r3, r2, r3
 80008da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008dc:	697b      	ldr	r3, [r7, #20]
 80008de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008e0:	4b13      	ldr	r3, [pc, #76]	; (8000930 <_sbrk+0x64>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d102      	bne.n	80008ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008e8:	4b11      	ldr	r3, [pc, #68]	; (8000930 <_sbrk+0x64>)
 80008ea:	4a12      	ldr	r2, [pc, #72]	; (8000934 <_sbrk+0x68>)
 80008ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008ee:	4b10      	ldr	r3, [pc, #64]	; (8000930 <_sbrk+0x64>)
 80008f0:	681a      	ldr	r2, [r3, #0]
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	4413      	add	r3, r2
 80008f6:	693a      	ldr	r2, [r7, #16]
 80008f8:	429a      	cmp	r2, r3
 80008fa:	d207      	bcs.n	800090c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008fc:	f007 fbc8 	bl	8008090 <__errno>
 8000900:	4603      	mov	r3, r0
 8000902:	220c      	movs	r2, #12
 8000904:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000906:	f04f 33ff 	mov.w	r3, #4294967295
 800090a:	e009      	b.n	8000920 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800090c:	4b08      	ldr	r3, [pc, #32]	; (8000930 <_sbrk+0x64>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000912:	4b07      	ldr	r3, [pc, #28]	; (8000930 <_sbrk+0x64>)
 8000914:	681a      	ldr	r2, [r3, #0]
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	4413      	add	r3, r2
 800091a:	4a05      	ldr	r2, [pc, #20]	; (8000930 <_sbrk+0x64>)
 800091c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800091e:	68fb      	ldr	r3, [r7, #12]
}
 8000920:	4618      	mov	r0, r3
 8000922:	3718      	adds	r7, #24
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	20050000 	.word	0x20050000
 800092c:	00000400 	.word	0x00000400
 8000930:	200001a0 	.word	0x200001a0
 8000934:	200017b0 	.word	0x200017b0

08000938 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800093c:	4b06      	ldr	r3, [pc, #24]	; (8000958 <SystemInit+0x20>)
 800093e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000942:	4a05      	ldr	r2, [pc, #20]	; (8000958 <SystemInit+0x20>)
 8000944:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000948:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800094c:	bf00      	nop
 800094e:	46bd      	mov	sp, r7
 8000950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000954:	4770      	bx	lr
 8000956:	bf00      	nop
 8000958:	e000ed00 	.word	0xe000ed00

0800095c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800095c:	480d      	ldr	r0, [pc, #52]	; (8000994 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800095e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000960:	f7ff ffea 	bl	8000938 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000964:	480c      	ldr	r0, [pc, #48]	; (8000998 <LoopForever+0x6>)
  ldr r1, =_edata
 8000966:	490d      	ldr	r1, [pc, #52]	; (800099c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000968:	4a0d      	ldr	r2, [pc, #52]	; (80009a0 <LoopForever+0xe>)
  movs r3, #0
 800096a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800096c:	e002      	b.n	8000974 <LoopCopyDataInit>

0800096e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800096e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000970:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000972:	3304      	adds	r3, #4

08000974 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000974:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000976:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000978:	d3f9      	bcc.n	800096e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800097a:	4a0a      	ldr	r2, [pc, #40]	; (80009a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800097c:	4c0a      	ldr	r4, [pc, #40]	; (80009a8 <LoopForever+0x16>)
  movs r3, #0
 800097e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000980:	e001      	b.n	8000986 <LoopFillZerobss>

08000982 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000982:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000984:	3204      	adds	r2, #4

08000986 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000986:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000988:	d3fb      	bcc.n	8000982 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800098a:	f007 fb87 	bl	800809c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800098e:	f007 fb73 	bl	8008078 <main>

08000992 <LoopForever>:

LoopForever:
  b LoopForever
 8000992:	e7fe      	b.n	8000992 <LoopForever>
  ldr   r0, =_estack
 8000994:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000998:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800099c:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 80009a0:	08008b00 	.word	0x08008b00
  ldr r2, =_sbss
 80009a4:	20000184 	.word	0x20000184
  ldr r4, =_ebss
 80009a8:	200017ac 	.word	0x200017ac

080009ac <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009ac:	e7fe      	b.n	80009ac <ADC_IRQHandler>
	...

080009b0 <ledInit>:
		{GPIOI, GPIO_PIN_1, GPIO_PIN_RESET, GPIO_PIN_SET}
	};


bool ledInit(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b088      	sub	sp, #32
 80009b4:	af00      	add	r7, sp, #0
	bool ret = true;
 80009b6:	2301      	movs	r3, #1
 80009b8:	76fb      	strb	r3, [r7, #27]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ba:	1d3b      	adds	r3, r7, #4
 80009bc:	2200      	movs	r2, #0
 80009be:	601a      	str	r2, [r3, #0]
 80009c0:	605a      	str	r2, [r3, #4]
 80009c2:	609a      	str	r2, [r3, #8]
 80009c4:	60da      	str	r2, [r3, #12]
 80009c6:	611a      	str	r2, [r3, #16]

	/*Configure GPIO pins : PB4 PB5 */
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c8:	2301      	movs	r3, #1
 80009ca:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009cc:	2300      	movs	r3, #0
 80009ce:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d0:	2300      	movs	r3, #0
 80009d2:	613b      	str	r3, [r7, #16]

	for(int i=0; i<LED_MAX_CH; i++)
 80009d4:	2300      	movs	r3, #0
 80009d6:	61fb      	str	r3, [r7, #28]
 80009d8:	e016      	b.n	8000a08 <ledInit+0x58>
	{
		GPIO_InitStruct.Pin = led_tbl[i].pin;
 80009da:	4a0f      	ldr	r2, [pc, #60]	; (8000a18 <ledInit+0x68>)
 80009dc:	69fb      	ldr	r3, [r7, #28]
 80009de:	00db      	lsls	r3, r3, #3
 80009e0:	4413      	add	r3, r2
 80009e2:	889b      	ldrh	r3, [r3, #4]
 80009e4:	607b      	str	r3, [r7, #4]
		HAL_GPIO_Init(led_tbl[i].port, &GPIO_InitStruct);
 80009e6:	4a0c      	ldr	r2, [pc, #48]	; (8000a18 <ledInit+0x68>)
 80009e8:	69fb      	ldr	r3, [r7, #28]
 80009ea:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80009ee:	1d3a      	adds	r2, r7, #4
 80009f0:	4611      	mov	r1, r2
 80009f2:	4618      	mov	r0, r3
 80009f4:	f000 fb22 	bl	800103c <HAL_GPIO_Init>

		ledOff(i);
 80009f8:	69fb      	ldr	r3, [r7, #28]
 80009fa:	b2db      	uxtb	r3, r3
 80009fc:	4618      	mov	r0, r3
 80009fe:	f000 f80d 	bl	8000a1c <ledOff>
	for(int i=0; i<LED_MAX_CH; i++)
 8000a02:	69fb      	ldr	r3, [r7, #28]
 8000a04:	3301      	adds	r3, #1
 8000a06:	61fb      	str	r3, [r7, #28]
 8000a08:	69fb      	ldr	r3, [r7, #28]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	dde5      	ble.n	80009da <ledInit+0x2a>
#ifdef _USE_HW_CLI
	cliAdd("led", cliLed);
#endif


	return ret;
 8000a0e:	7efb      	ldrb	r3, [r7, #27]
}
 8000a10:	4618      	mov	r0, r3
 8000a12:	3720      	adds	r7, #32
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	20000004 	.word	0x20000004

08000a1c <ledOff>:

	HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].on_state);
}

void ledOff(uint8_t ch)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	4603      	mov	r3, r0
 8000a24:	71fb      	strb	r3, [r7, #7]
	if(ch >= LED_MAX_CH)		return;
 8000a26:	79fb      	ldrb	r3, [r7, #7]
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d111      	bne.n	8000a50 <ledOff+0x34>

	HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].off_state);
 8000a2c:	79fb      	ldrb	r3, [r7, #7]
 8000a2e:	4a0a      	ldr	r2, [pc, #40]	; (8000a58 <ledOff+0x3c>)
 8000a30:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000a34:	79fb      	ldrb	r3, [r7, #7]
 8000a36:	4a08      	ldr	r2, [pc, #32]	; (8000a58 <ledOff+0x3c>)
 8000a38:	00db      	lsls	r3, r3, #3
 8000a3a:	4413      	add	r3, r2
 8000a3c:	8899      	ldrh	r1, [r3, #4]
 8000a3e:	79fb      	ldrb	r3, [r7, #7]
 8000a40:	4a05      	ldr	r2, [pc, #20]	; (8000a58 <ledOff+0x3c>)
 8000a42:	00db      	lsls	r3, r3, #3
 8000a44:	4413      	add	r3, r2
 8000a46:	79db      	ldrb	r3, [r3, #7]
 8000a48:	461a      	mov	r2, r3
 8000a4a:	f000 fca3 	bl	8001394 <HAL_GPIO_WritePin>
 8000a4e:	e000      	b.n	8000a52 <ledOff+0x36>
	if(ch >= LED_MAX_CH)		return;
 8000a50:	bf00      	nop
}
 8000a52:	3708      	adds	r7, #8
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	20000004 	.word	0x20000004

08000a5c <ledToggle>:
	}
}


void ledToggle(uint8_t ch)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	4603      	mov	r3, r0
 8000a64:	71fb      	strb	r3, [r7, #7]
	if(ch >= LED_MAX_CH)		return;
 8000a66:	79fb      	ldrb	r3, [r7, #7]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d10d      	bne.n	8000a88 <ledToggle+0x2c>

	HAL_GPIO_TogglePin(led_tbl[ch].port, led_tbl[ch].pin);
 8000a6c:	79fb      	ldrb	r3, [r7, #7]
 8000a6e:	4a08      	ldr	r2, [pc, #32]	; (8000a90 <ledToggle+0x34>)
 8000a70:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8000a74:	79fb      	ldrb	r3, [r7, #7]
 8000a76:	4906      	ldr	r1, [pc, #24]	; (8000a90 <ledToggle+0x34>)
 8000a78:	00db      	lsls	r3, r3, #3
 8000a7a:	440b      	add	r3, r1
 8000a7c:	889b      	ldrh	r3, [r3, #4]
 8000a7e:	4619      	mov	r1, r3
 8000a80:	4610      	mov	r0, r2
 8000a82:	f000 fca0 	bl	80013c6 <HAL_GPIO_TogglePin>
 8000a86:	e000      	b.n	8000a8a <ledToggle+0x2e>
	if(ch >= LED_MAX_CH)		return;
 8000a88:	bf00      	nop
}
 8000a8a:	3708      	adds	r7, #8
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	20000004 	.word	0x20000004

08000a94 <uartInit>:
extern uint32_t cdcWrite(uint8_t *p_data, uint32_t length);
extern uint32_t cdcGetBaud(void);


bool uartInit(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b083      	sub	sp, #12
 8000a98:	af00      	add	r7, sp, #0
  for(int i=0; i<UART_MAX_CH; i++)
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	607b      	str	r3, [r7, #4]
 8000a9e:	e007      	b.n	8000ab0 <uartInit+0x1c>
  {
    is_open[i] = false;
 8000aa0:	4a08      	ldr	r2, [pc, #32]	; (8000ac4 <uartInit+0x30>)
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	4413      	add	r3, r2
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	701a      	strb	r2, [r3, #0]
  for(int i=0; i<UART_MAX_CH; i++)
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	3301      	adds	r3, #1
 8000aae:	607b      	str	r3, [r7, #4]
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	ddf4      	ble.n	8000aa0 <uartInit+0xc>
  }

  return true;
 8000ab6:	2301      	movs	r3, #1
}
 8000ab8:	4618      	mov	r0, r3
 8000aba:	370c      	adds	r7, #12
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr
 8000ac4:	200001a4 	.word	0x200001a4

08000ac8 <uartOpen>:

bool uartOpen(uint8_t ch, uint32_t baud)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b085      	sub	sp, #20
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	4603      	mov	r3, r0
 8000ad0:	6039      	str	r1, [r7, #0]
 8000ad2:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	73fb      	strb	r3, [r7, #15]

  switch(ch)
 8000ad8:	79fb      	ldrb	r3, [r7, #7]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d106      	bne.n	8000aec <uartOpen+0x24>
  {
    case _DEF_UART1:
      is_open[ch] = true;
 8000ade:	79fb      	ldrb	r3, [r7, #7]
 8000ae0:	4a06      	ldr	r2, [pc, #24]	; (8000afc <uartOpen+0x34>)
 8000ae2:	2101      	movs	r1, #1
 8000ae4:	54d1      	strb	r1, [r2, r3]
      ret = true;
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	73fb      	strb	r3, [r7, #15]
      break;
 8000aea:	bf00      	nop
  }

  return ret;
 8000aec:	7bfb      	ldrb	r3, [r7, #15]
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	3714      	adds	r7, #20
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	200001a4 	.word	0x200001a4

08000b00 <uartAvailable>:

uint32_t uartAvailable(uint8_t ch)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b084      	sub	sp, #16
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	4603      	mov	r3, r0
 8000b08:	71fb      	strb	r3, [r7, #7]
  uint32_t ret = 0;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	60fb      	str	r3, [r7, #12]

  switch(ch)
 8000b0e:	79fb      	ldrb	r3, [r7, #7]
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d103      	bne.n	8000b1c <uartAvailable+0x1c>
  {
    case _DEF_UART1:
      ret = cdcAvailable();
 8000b14:	f006 fc44 	bl	80073a0 <cdcAvailable>
 8000b18:	60f8      	str	r0, [r7, #12]
      break;
 8000b1a:	bf00      	nop
  }

  return ret;
 8000b1c:	68fb      	ldr	r3, [r7, #12]
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	3710      	adds	r7, #16
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}

08000b26 <uartRead>:

uint8_t uartRead(uint8_t ch)
{
 8000b26:	b580      	push	{r7, lr}
 8000b28:	b084      	sub	sp, #16
 8000b2a:	af00      	add	r7, sp, #0
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	71fb      	strb	r3, [r7, #7]
  uint8_t ret;

  switch(ch)
 8000b30:	79fb      	ldrb	r3, [r7, #7]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d104      	bne.n	8000b40 <uartRead+0x1a>
  {
    case _DEF_UART1:
      ret = cdcRead();
 8000b36:	f006 fc51 	bl	80073dc <cdcRead>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	73fb      	strb	r3, [r7, #15]
      break;
 8000b3e:	bf00      	nop
  }

  return ret;
 8000b40:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	3710      	adds	r7, #16
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}

08000b4a <uartWrite>:

uint32_t uartWrite(uint8_t ch, uint8_t *p_data, uint32_t length)
{
 8000b4a:	b580      	push	{r7, lr}
 8000b4c:	b086      	sub	sp, #24
 8000b4e:	af00      	add	r7, sp, #0
 8000b50:	4603      	mov	r3, r0
 8000b52:	60b9      	str	r1, [r7, #8]
 8000b54:	607a      	str	r2, [r7, #4]
 8000b56:	73fb      	strb	r3, [r7, #15]
  uint32_t ret;

  switch(ch)
 8000b58:	7bfb      	ldrb	r3, [r7, #15]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d105      	bne.n	8000b6a <uartWrite+0x20>
  {
    case _DEF_UART1:
      ret = cdcWrite(p_data, length);
 8000b5e:	6879      	ldr	r1, [r7, #4]
 8000b60:	68b8      	ldr	r0, [r7, #8]
 8000b62:	f006 fc91 	bl	8007488 <cdcWrite>
 8000b66:	6178      	str	r0, [r7, #20]
      break;
 8000b68:	bf00      	nop
  }

  return ret;
 8000b6a:	697b      	ldr	r3, [r7, #20]
}
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	3718      	adds	r7, #24
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}

08000b74 <uartPrintf>:

uint32_t uartPrintf(uint8_t ch, char *fmt, ...)
{
 8000b74:	b40e      	push	{r1, r2, r3}
 8000b76:	b580      	push	{r7, lr}
 8000b78:	b0c7      	sub	sp, #284	; 0x11c
 8000b7a:	af00      	add	r7, sp, #0
 8000b7c:	4602      	mov	r2, r0
 8000b7e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000b82:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8000b86:	701a      	strb	r2, [r3, #0]
  char buf[256];
  va_list args;
  int len;
  uint32_t ret;

  va_start(args, fmt);
 8000b88:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8000b8c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000b90:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000b94:	601a      	str	r2, [r3, #0]
  len = vsnprintf(buf, 256, fmt, args);
 8000b96:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000b9a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000b9e:	f107 0010 	add.w	r0, r7, #16
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8000ba8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bac:	f007 fbce 	bl	800834c <vsniprintf>
 8000bb0:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114

  ret = uartWrite(ch, (uint8_t *)buf, len);
 8000bb4:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8000bb8:	f107 0110 	add.w	r1, r7, #16
 8000bbc:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8000bc0:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8000bc4:	781b      	ldrb	r3, [r3, #0]
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f7ff ffbf 	bl	8000b4a <uartWrite>
 8000bcc:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
  va_end(args);

  return ret;
 8000bd0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
}
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000be0:	b003      	add	sp, #12
 8000be2:	4770      	bx	lr

08000be4 <uartGetBaud>:

uint32_t uartGetBaud(uint8_t ch)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b084      	sub	sp, #16
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	4603      	mov	r3, r0
 8000bec:	71fb      	strb	r3, [r7, #7]
  uint32_t ret = 0;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	60fb      	str	r3, [r7, #12]

  switch(ch)
 8000bf2:	79fb      	ldrb	r3, [r7, #7]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d103      	bne.n	8000c00 <uartGetBaud+0x1c>
  {
    case _DEF_UART1:
      ret = cdcGetBaud();
 8000bf8:	f006 fc6e 	bl	80074d8 <cdcGetBaud>
 8000bfc:	60f8      	str	r0, [r7, #12]
      break;
 8000bfe:	bf00      	nop
  }

  return ret;
 8000c00:	68fb      	ldr	r3, [r7, #12]
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	3710      	adds	r7, #16
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}

08000c0a <hwInit>:




void hwInit(void)
{
 8000c0a:	b580      	push	{r7, lr}
 8000c0c:	af00      	add	r7, sp, #0
  bspInit();
 8000c0e:	f7ff fd19 	bl	8000644 <bspInit>

  ledInit();
 8000c12:	f7ff fecd 	bl	80009b0 <ledInit>
  uartInit();
 8000c16:	f7ff ff3d 	bl	8000a94 <uartInit>
}
 8000c1a:	bf00      	nop
 8000c1c:	bd80      	pop	{r7, pc}

08000c1e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c1e:	b580      	push	{r7, lr}
 8000c20:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c22:	2003      	movs	r0, #3
 8000c24:	f000 f94c 	bl	8000ec0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c28:	200f      	movs	r0, #15
 8000c2a:	f000 f805 	bl	8000c38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c2e:	f7ff fdf5 	bl	800081c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c32:	2300      	movs	r3, #0
}
 8000c34:	4618      	mov	r0, r3
 8000c36:	bd80      	pop	{r7, pc}

08000c38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c40:	4b12      	ldr	r3, [pc, #72]	; (8000c8c <HAL_InitTick+0x54>)
 8000c42:	681a      	ldr	r2, [r3, #0]
 8000c44:	4b12      	ldr	r3, [pc, #72]	; (8000c90 <HAL_InitTick+0x58>)
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	4619      	mov	r1, r3
 8000c4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c52:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c56:	4618      	mov	r0, r3
 8000c58:	f000 f967 	bl	8000f2a <HAL_SYSTICK_Config>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c62:	2301      	movs	r3, #1
 8000c64:	e00e      	b.n	8000c84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	2b0f      	cmp	r3, #15
 8000c6a:	d80a      	bhi.n	8000c82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	6879      	ldr	r1, [r7, #4]
 8000c70:	f04f 30ff 	mov.w	r0, #4294967295
 8000c74:	f000 f92f 	bl	8000ed6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c78:	4a06      	ldr	r2, [pc, #24]	; (8000c94 <HAL_InitTick+0x5c>)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	e000      	b.n	8000c84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c82:	2301      	movs	r3, #1
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	3708      	adds	r7, #8
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	20000000 	.word	0x20000000
 8000c90:	20000010 	.word	0x20000010
 8000c94:	2000000c 	.word	0x2000000c

08000c98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c9c:	4b06      	ldr	r3, [pc, #24]	; (8000cb8 <HAL_IncTick+0x20>)
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	461a      	mov	r2, r3
 8000ca2:	4b06      	ldr	r3, [pc, #24]	; (8000cbc <HAL_IncTick+0x24>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	4413      	add	r3, r2
 8000ca8:	4a04      	ldr	r2, [pc, #16]	; (8000cbc <HAL_IncTick+0x24>)
 8000caa:	6013      	str	r3, [r2, #0]
}
 8000cac:	bf00      	nop
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	20000010 	.word	0x20000010
 8000cbc:	200001a8 	.word	0x200001a8

08000cc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  return uwTick;
 8000cc4:	4b03      	ldr	r3, [pc, #12]	; (8000cd4 <HAL_GetTick+0x14>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	200001a8 	.word	0x200001a8

08000cd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b084      	sub	sp, #16
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ce0:	f7ff ffee 	bl	8000cc0 <HAL_GetTick>
 8000ce4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cf0:	d005      	beq.n	8000cfe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cf2:	4b0a      	ldr	r3, [pc, #40]	; (8000d1c <HAL_Delay+0x44>)
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	461a      	mov	r2, r3
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	4413      	add	r3, r2
 8000cfc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cfe:	bf00      	nop
 8000d00:	f7ff ffde 	bl	8000cc0 <HAL_GetTick>
 8000d04:	4602      	mov	r2, r0
 8000d06:	68bb      	ldr	r3, [r7, #8]
 8000d08:	1ad3      	subs	r3, r2, r3
 8000d0a:	68fa      	ldr	r2, [r7, #12]
 8000d0c:	429a      	cmp	r2, r3
 8000d0e:	d8f7      	bhi.n	8000d00 <HAL_Delay+0x28>
  {
  }
}
 8000d10:	bf00      	nop
 8000d12:	bf00      	nop
 8000d14:	3710      	adds	r7, #16
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	20000010 	.word	0x20000010

08000d20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b085      	sub	sp, #20
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	f003 0307 	and.w	r3, r3, #7
 8000d2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d30:	4b0b      	ldr	r3, [pc, #44]	; (8000d60 <__NVIC_SetPriorityGrouping+0x40>)
 8000d32:	68db      	ldr	r3, [r3, #12]
 8000d34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d36:	68ba      	ldr	r2, [r7, #8]
 8000d38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d44:	68bb      	ldr	r3, [r7, #8]
 8000d46:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000d48:	4b06      	ldr	r3, [pc, #24]	; (8000d64 <__NVIC_SetPriorityGrouping+0x44>)
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d4e:	4a04      	ldr	r2, [pc, #16]	; (8000d60 <__NVIC_SetPriorityGrouping+0x40>)
 8000d50:	68bb      	ldr	r3, [r7, #8]
 8000d52:	60d3      	str	r3, [r2, #12]
}
 8000d54:	bf00      	nop
 8000d56:	3714      	adds	r7, #20
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr
 8000d60:	e000ed00 	.word	0xe000ed00
 8000d64:	05fa0000 	.word	0x05fa0000

08000d68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d6c:	4b04      	ldr	r3, [pc, #16]	; (8000d80 <__NVIC_GetPriorityGrouping+0x18>)
 8000d6e:	68db      	ldr	r3, [r3, #12]
 8000d70:	0a1b      	lsrs	r3, r3, #8
 8000d72:	f003 0307 	and.w	r3, r3, #7
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr
 8000d80:	e000ed00 	.word	0xe000ed00

08000d84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	db0b      	blt.n	8000dae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d96:	79fb      	ldrb	r3, [r7, #7]
 8000d98:	f003 021f 	and.w	r2, r3, #31
 8000d9c:	4907      	ldr	r1, [pc, #28]	; (8000dbc <__NVIC_EnableIRQ+0x38>)
 8000d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da2:	095b      	lsrs	r3, r3, #5
 8000da4:	2001      	movs	r0, #1
 8000da6:	fa00 f202 	lsl.w	r2, r0, r2
 8000daa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000dae:	bf00      	nop
 8000db0:	370c      	adds	r7, #12
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	e000e100 	.word	0xe000e100

08000dc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b083      	sub	sp, #12
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	6039      	str	r1, [r7, #0]
 8000dca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	db0a      	blt.n	8000dea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	b2da      	uxtb	r2, r3
 8000dd8:	490c      	ldr	r1, [pc, #48]	; (8000e0c <__NVIC_SetPriority+0x4c>)
 8000dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dde:	0112      	lsls	r2, r2, #4
 8000de0:	b2d2      	uxtb	r2, r2
 8000de2:	440b      	add	r3, r1
 8000de4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000de8:	e00a      	b.n	8000e00 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	b2da      	uxtb	r2, r3
 8000dee:	4908      	ldr	r1, [pc, #32]	; (8000e10 <__NVIC_SetPriority+0x50>)
 8000df0:	79fb      	ldrb	r3, [r7, #7]
 8000df2:	f003 030f 	and.w	r3, r3, #15
 8000df6:	3b04      	subs	r3, #4
 8000df8:	0112      	lsls	r2, r2, #4
 8000dfa:	b2d2      	uxtb	r2, r2
 8000dfc:	440b      	add	r3, r1
 8000dfe:	761a      	strb	r2, [r3, #24]
}
 8000e00:	bf00      	nop
 8000e02:	370c      	adds	r7, #12
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr
 8000e0c:	e000e100 	.word	0xe000e100
 8000e10:	e000ed00 	.word	0xe000ed00

08000e14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b089      	sub	sp, #36	; 0x24
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	60f8      	str	r0, [r7, #12]
 8000e1c:	60b9      	str	r1, [r7, #8]
 8000e1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	f003 0307 	and.w	r3, r3, #7
 8000e26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e28:	69fb      	ldr	r3, [r7, #28]
 8000e2a:	f1c3 0307 	rsb	r3, r3, #7
 8000e2e:	2b04      	cmp	r3, #4
 8000e30:	bf28      	it	cs
 8000e32:	2304      	movcs	r3, #4
 8000e34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e36:	69fb      	ldr	r3, [r7, #28]
 8000e38:	3304      	adds	r3, #4
 8000e3a:	2b06      	cmp	r3, #6
 8000e3c:	d902      	bls.n	8000e44 <NVIC_EncodePriority+0x30>
 8000e3e:	69fb      	ldr	r3, [r7, #28]
 8000e40:	3b03      	subs	r3, #3
 8000e42:	e000      	b.n	8000e46 <NVIC_EncodePriority+0x32>
 8000e44:	2300      	movs	r3, #0
 8000e46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e48:	f04f 32ff 	mov.w	r2, #4294967295
 8000e4c:	69bb      	ldr	r3, [r7, #24]
 8000e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e52:	43da      	mvns	r2, r3
 8000e54:	68bb      	ldr	r3, [r7, #8]
 8000e56:	401a      	ands	r2, r3
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e5c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	fa01 f303 	lsl.w	r3, r1, r3
 8000e66:	43d9      	mvns	r1, r3
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e6c:	4313      	orrs	r3, r2
         );
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3724      	adds	r7, #36	; 0x24
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
	...

08000e7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	3b01      	subs	r3, #1
 8000e88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e8c:	d301      	bcc.n	8000e92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e8e:	2301      	movs	r3, #1
 8000e90:	e00f      	b.n	8000eb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e92:	4a0a      	ldr	r2, [pc, #40]	; (8000ebc <SysTick_Config+0x40>)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	3b01      	subs	r3, #1
 8000e98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e9a:	210f      	movs	r1, #15
 8000e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000ea0:	f7ff ff8e 	bl	8000dc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ea4:	4b05      	ldr	r3, [pc, #20]	; (8000ebc <SysTick_Config+0x40>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000eaa:	4b04      	ldr	r3, [pc, #16]	; (8000ebc <SysTick_Config+0x40>)
 8000eac:	2207      	movs	r2, #7
 8000eae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000eb0:	2300      	movs	r3, #0
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	3708      	adds	r7, #8
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	e000e010 	.word	0xe000e010

08000ec0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ec8:	6878      	ldr	r0, [r7, #4]
 8000eca:	f7ff ff29 	bl	8000d20 <__NVIC_SetPriorityGrouping>
}
 8000ece:	bf00      	nop
 8000ed0:	3708      	adds	r7, #8
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}

08000ed6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ed6:	b580      	push	{r7, lr}
 8000ed8:	b086      	sub	sp, #24
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	4603      	mov	r3, r0
 8000ede:	60b9      	str	r1, [r7, #8]
 8000ee0:	607a      	str	r2, [r7, #4]
 8000ee2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ee8:	f7ff ff3e 	bl	8000d68 <__NVIC_GetPriorityGrouping>
 8000eec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eee:	687a      	ldr	r2, [r7, #4]
 8000ef0:	68b9      	ldr	r1, [r7, #8]
 8000ef2:	6978      	ldr	r0, [r7, #20]
 8000ef4:	f7ff ff8e 	bl	8000e14 <NVIC_EncodePriority>
 8000ef8:	4602      	mov	r2, r0
 8000efa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000efe:	4611      	mov	r1, r2
 8000f00:	4618      	mov	r0, r3
 8000f02:	f7ff ff5d 	bl	8000dc0 <__NVIC_SetPriority>
}
 8000f06:	bf00      	nop
 8000f08:	3718      	adds	r7, #24
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}

08000f0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f0e:	b580      	push	{r7, lr}
 8000f10:	b082      	sub	sp, #8
 8000f12:	af00      	add	r7, sp, #0
 8000f14:	4603      	mov	r3, r0
 8000f16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f7ff ff31 	bl	8000d84 <__NVIC_EnableIRQ>
}
 8000f22:	bf00      	nop
 8000f24:	3708      	adds	r7, #8
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}

08000f2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f2a:	b580      	push	{r7, lr}
 8000f2c:	b082      	sub	sp, #8
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f32:	6878      	ldr	r0, [r7, #4]
 8000f34:	f7ff ffa2 	bl	8000e7c <SysTick_Config>
 8000f38:	4603      	mov	r3, r0
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3708      	adds	r7, #8
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
	...

08000f44 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000f48:	f3bf 8f5f 	dmb	sy
}
 8000f4c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000f4e:	4b07      	ldr	r3, [pc, #28]	; (8000f6c <HAL_MPU_Disable+0x28>)
 8000f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f52:	4a06      	ldr	r2, [pc, #24]	; (8000f6c <HAL_MPU_Disable+0x28>)
 8000f54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f58:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8000f5a:	4b05      	ldr	r3, [pc, #20]	; (8000f70 <HAL_MPU_Disable+0x2c>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	605a      	str	r2, [r3, #4]
}
 8000f60:	bf00      	nop
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	e000ed00 	.word	0xe000ed00
 8000f70:	e000ed90 	.word	0xe000ed90

08000f74 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8000f7c:	4a0b      	ldr	r2, [pc, #44]	; (8000fac <HAL_MPU_Enable+0x38>)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	f043 0301 	orr.w	r3, r3, #1
 8000f84:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000f86:	4b0a      	ldr	r3, [pc, #40]	; (8000fb0 <HAL_MPU_Enable+0x3c>)
 8000f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f8a:	4a09      	ldr	r2, [pc, #36]	; (8000fb0 <HAL_MPU_Enable+0x3c>)
 8000f8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f90:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8000f92:	f3bf 8f4f 	dsb	sy
}
 8000f96:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f98:	f3bf 8f6f 	isb	sy
}
 8000f9c:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8000f9e:	bf00      	nop
 8000fa0:	370c      	adds	r7, #12
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	e000ed90 	.word	0xe000ed90
 8000fb0:	e000ed00 	.word	0xe000ed00

08000fb4 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	785a      	ldrb	r2, [r3, #1]
 8000fc0:	4b1d      	ldr	r3, [pc, #116]	; (8001038 <HAL_MPU_ConfigRegion+0x84>)
 8000fc2:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d029      	beq.n	8001020 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 8000fcc:	4a1a      	ldr	r2, [pc, #104]	; (8001038 <HAL_MPU_ConfigRegion+0x84>)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	7b1b      	ldrb	r3, [r3, #12]
 8000fd8:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	7adb      	ldrb	r3, [r3, #11]
 8000fde:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000fe0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	7a9b      	ldrb	r3, [r3, #10]
 8000fe6:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000fe8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	7b5b      	ldrb	r3, [r3, #13]
 8000fee:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000ff0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	7b9b      	ldrb	r3, [r3, #14]
 8000ff6:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000ff8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	7bdb      	ldrb	r3, [r3, #15]
 8000ffe:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001000:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	7a5b      	ldrb	r3, [r3, #9]
 8001006:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001008:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	7a1b      	ldrb	r3, [r3, #8]
 800100e:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001010:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001012:	687a      	ldr	r2, [r7, #4]
 8001014:	7812      	ldrb	r2, [r2, #0]
 8001016:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001018:	4a07      	ldr	r2, [pc, #28]	; (8001038 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800101a:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800101c:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 800101e:	e005      	b.n	800102c <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8001020:	4b05      	ldr	r3, [pc, #20]	; (8001038 <HAL_MPU_ConfigRegion+0x84>)
 8001022:	2200      	movs	r2, #0
 8001024:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8001026:	4b04      	ldr	r3, [pc, #16]	; (8001038 <HAL_MPU_ConfigRegion+0x84>)
 8001028:	2200      	movs	r2, #0
 800102a:	611a      	str	r2, [r3, #16]
}
 800102c:	bf00      	nop
 800102e:	370c      	adds	r7, #12
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr
 8001038:	e000ed90 	.word	0xe000ed90

0800103c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800103c:	b480      	push	{r7}
 800103e:	b089      	sub	sp, #36	; 0x24
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001046:	2300      	movs	r3, #0
 8001048:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800104a:	2300      	movs	r3, #0
 800104c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800104e:	2300      	movs	r3, #0
 8001050:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001052:	2300      	movs	r3, #0
 8001054:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001056:	2300      	movs	r3, #0
 8001058:	61fb      	str	r3, [r7, #28]
 800105a:	e175      	b.n	8001348 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800105c:	2201      	movs	r2, #1
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	fa02 f303 	lsl.w	r3, r2, r3
 8001064:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	697a      	ldr	r2, [r7, #20]
 800106c:	4013      	ands	r3, r2
 800106e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001070:	693a      	ldr	r2, [r7, #16]
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	429a      	cmp	r2, r3
 8001076:	f040 8164 	bne.w	8001342 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	f003 0303 	and.w	r3, r3, #3
 8001082:	2b01      	cmp	r3, #1
 8001084:	d005      	beq.n	8001092 <HAL_GPIO_Init+0x56>
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	f003 0303 	and.w	r3, r3, #3
 800108e:	2b02      	cmp	r3, #2
 8001090:	d130      	bne.n	80010f4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	689b      	ldr	r3, [r3, #8]
 8001096:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001098:	69fb      	ldr	r3, [r7, #28]
 800109a:	005b      	lsls	r3, r3, #1
 800109c:	2203      	movs	r2, #3
 800109e:	fa02 f303 	lsl.w	r3, r2, r3
 80010a2:	43db      	mvns	r3, r3
 80010a4:	69ba      	ldr	r2, [r7, #24]
 80010a6:	4013      	ands	r3, r2
 80010a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	68da      	ldr	r2, [r3, #12]
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	005b      	lsls	r3, r3, #1
 80010b2:	fa02 f303 	lsl.w	r3, r2, r3
 80010b6:	69ba      	ldr	r2, [r7, #24]
 80010b8:	4313      	orrs	r3, r2
 80010ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	69ba      	ldr	r2, [r7, #24]
 80010c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010c8:	2201      	movs	r2, #1
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	fa02 f303 	lsl.w	r3, r2, r3
 80010d0:	43db      	mvns	r3, r3
 80010d2:	69ba      	ldr	r2, [r7, #24]
 80010d4:	4013      	ands	r3, r2
 80010d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	091b      	lsrs	r3, r3, #4
 80010de:	f003 0201 	and.w	r2, r3, #1
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	fa02 f303 	lsl.w	r3, r2, r3
 80010e8:	69ba      	ldr	r2, [r7, #24]
 80010ea:	4313      	orrs	r3, r2
 80010ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	69ba      	ldr	r2, [r7, #24]
 80010f2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	f003 0303 	and.w	r3, r3, #3
 80010fc:	2b03      	cmp	r3, #3
 80010fe:	d017      	beq.n	8001130 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	68db      	ldr	r3, [r3, #12]
 8001104:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	005b      	lsls	r3, r3, #1
 800110a:	2203      	movs	r2, #3
 800110c:	fa02 f303 	lsl.w	r3, r2, r3
 8001110:	43db      	mvns	r3, r3
 8001112:	69ba      	ldr	r2, [r7, #24]
 8001114:	4013      	ands	r3, r2
 8001116:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	689a      	ldr	r2, [r3, #8]
 800111c:	69fb      	ldr	r3, [r7, #28]
 800111e:	005b      	lsls	r3, r3, #1
 8001120:	fa02 f303 	lsl.w	r3, r2, r3
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	4313      	orrs	r3, r2
 8001128:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	69ba      	ldr	r2, [r7, #24]
 800112e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	f003 0303 	and.w	r3, r3, #3
 8001138:	2b02      	cmp	r3, #2
 800113a:	d123      	bne.n	8001184 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800113c:	69fb      	ldr	r3, [r7, #28]
 800113e:	08da      	lsrs	r2, r3, #3
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	3208      	adds	r2, #8
 8001144:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001148:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800114a:	69fb      	ldr	r3, [r7, #28]
 800114c:	f003 0307 	and.w	r3, r3, #7
 8001150:	009b      	lsls	r3, r3, #2
 8001152:	220f      	movs	r2, #15
 8001154:	fa02 f303 	lsl.w	r3, r2, r3
 8001158:	43db      	mvns	r3, r3
 800115a:	69ba      	ldr	r2, [r7, #24]
 800115c:	4013      	ands	r3, r2
 800115e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	691a      	ldr	r2, [r3, #16]
 8001164:	69fb      	ldr	r3, [r7, #28]
 8001166:	f003 0307 	and.w	r3, r3, #7
 800116a:	009b      	lsls	r3, r3, #2
 800116c:	fa02 f303 	lsl.w	r3, r2, r3
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	4313      	orrs	r3, r2
 8001174:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	08da      	lsrs	r2, r3, #3
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	3208      	adds	r2, #8
 800117e:	69b9      	ldr	r1, [r7, #24]
 8001180:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	005b      	lsls	r3, r3, #1
 800118e:	2203      	movs	r2, #3
 8001190:	fa02 f303 	lsl.w	r3, r2, r3
 8001194:	43db      	mvns	r3, r3
 8001196:	69ba      	ldr	r2, [r7, #24]
 8001198:	4013      	ands	r3, r2
 800119a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f003 0203 	and.w	r2, r3, #3
 80011a4:	69fb      	ldr	r3, [r7, #28]
 80011a6:	005b      	lsls	r3, r3, #1
 80011a8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ac:	69ba      	ldr	r2, [r7, #24]
 80011ae:	4313      	orrs	r3, r2
 80011b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	f000 80be 	beq.w	8001342 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011c6:	4b66      	ldr	r3, [pc, #408]	; (8001360 <HAL_GPIO_Init+0x324>)
 80011c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ca:	4a65      	ldr	r2, [pc, #404]	; (8001360 <HAL_GPIO_Init+0x324>)
 80011cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011d0:	6453      	str	r3, [r2, #68]	; 0x44
 80011d2:	4b63      	ldr	r3, [pc, #396]	; (8001360 <HAL_GPIO_Init+0x324>)
 80011d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011da:	60fb      	str	r3, [r7, #12]
 80011dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80011de:	4a61      	ldr	r2, [pc, #388]	; (8001364 <HAL_GPIO_Init+0x328>)
 80011e0:	69fb      	ldr	r3, [r7, #28]
 80011e2:	089b      	lsrs	r3, r3, #2
 80011e4:	3302      	adds	r3, #2
 80011e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80011ec:	69fb      	ldr	r3, [r7, #28]
 80011ee:	f003 0303 	and.w	r3, r3, #3
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	220f      	movs	r2, #15
 80011f6:	fa02 f303 	lsl.w	r3, r2, r3
 80011fa:	43db      	mvns	r3, r3
 80011fc:	69ba      	ldr	r2, [r7, #24]
 80011fe:	4013      	ands	r3, r2
 8001200:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4a58      	ldr	r2, [pc, #352]	; (8001368 <HAL_GPIO_Init+0x32c>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d037      	beq.n	800127a <HAL_GPIO_Init+0x23e>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	4a57      	ldr	r2, [pc, #348]	; (800136c <HAL_GPIO_Init+0x330>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d031      	beq.n	8001276 <HAL_GPIO_Init+0x23a>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	4a56      	ldr	r2, [pc, #344]	; (8001370 <HAL_GPIO_Init+0x334>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d02b      	beq.n	8001272 <HAL_GPIO_Init+0x236>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	4a55      	ldr	r2, [pc, #340]	; (8001374 <HAL_GPIO_Init+0x338>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d025      	beq.n	800126e <HAL_GPIO_Init+0x232>
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4a54      	ldr	r2, [pc, #336]	; (8001378 <HAL_GPIO_Init+0x33c>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d01f      	beq.n	800126a <HAL_GPIO_Init+0x22e>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4a53      	ldr	r2, [pc, #332]	; (800137c <HAL_GPIO_Init+0x340>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d019      	beq.n	8001266 <HAL_GPIO_Init+0x22a>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4a52      	ldr	r2, [pc, #328]	; (8001380 <HAL_GPIO_Init+0x344>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d013      	beq.n	8001262 <HAL_GPIO_Init+0x226>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4a51      	ldr	r2, [pc, #324]	; (8001384 <HAL_GPIO_Init+0x348>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d00d      	beq.n	800125e <HAL_GPIO_Init+0x222>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4a50      	ldr	r2, [pc, #320]	; (8001388 <HAL_GPIO_Init+0x34c>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d007      	beq.n	800125a <HAL_GPIO_Init+0x21e>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4a4f      	ldr	r2, [pc, #316]	; (800138c <HAL_GPIO_Init+0x350>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d101      	bne.n	8001256 <HAL_GPIO_Init+0x21a>
 8001252:	2309      	movs	r3, #9
 8001254:	e012      	b.n	800127c <HAL_GPIO_Init+0x240>
 8001256:	230a      	movs	r3, #10
 8001258:	e010      	b.n	800127c <HAL_GPIO_Init+0x240>
 800125a:	2308      	movs	r3, #8
 800125c:	e00e      	b.n	800127c <HAL_GPIO_Init+0x240>
 800125e:	2307      	movs	r3, #7
 8001260:	e00c      	b.n	800127c <HAL_GPIO_Init+0x240>
 8001262:	2306      	movs	r3, #6
 8001264:	e00a      	b.n	800127c <HAL_GPIO_Init+0x240>
 8001266:	2305      	movs	r3, #5
 8001268:	e008      	b.n	800127c <HAL_GPIO_Init+0x240>
 800126a:	2304      	movs	r3, #4
 800126c:	e006      	b.n	800127c <HAL_GPIO_Init+0x240>
 800126e:	2303      	movs	r3, #3
 8001270:	e004      	b.n	800127c <HAL_GPIO_Init+0x240>
 8001272:	2302      	movs	r3, #2
 8001274:	e002      	b.n	800127c <HAL_GPIO_Init+0x240>
 8001276:	2301      	movs	r3, #1
 8001278:	e000      	b.n	800127c <HAL_GPIO_Init+0x240>
 800127a:	2300      	movs	r3, #0
 800127c:	69fa      	ldr	r2, [r7, #28]
 800127e:	f002 0203 	and.w	r2, r2, #3
 8001282:	0092      	lsls	r2, r2, #2
 8001284:	4093      	lsls	r3, r2
 8001286:	69ba      	ldr	r2, [r7, #24]
 8001288:	4313      	orrs	r3, r2
 800128a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800128c:	4935      	ldr	r1, [pc, #212]	; (8001364 <HAL_GPIO_Init+0x328>)
 800128e:	69fb      	ldr	r3, [r7, #28]
 8001290:	089b      	lsrs	r3, r3, #2
 8001292:	3302      	adds	r3, #2
 8001294:	69ba      	ldr	r2, [r7, #24]
 8001296:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800129a:	4b3d      	ldr	r3, [pc, #244]	; (8001390 <HAL_GPIO_Init+0x354>)
 800129c:	689b      	ldr	r3, [r3, #8]
 800129e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012a0:	693b      	ldr	r3, [r7, #16]
 80012a2:	43db      	mvns	r3, r3
 80012a4:	69ba      	ldr	r2, [r7, #24]
 80012a6:	4013      	ands	r3, r2
 80012a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d003      	beq.n	80012be <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80012b6:	69ba      	ldr	r2, [r7, #24]
 80012b8:	693b      	ldr	r3, [r7, #16]
 80012ba:	4313      	orrs	r3, r2
 80012bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012be:	4a34      	ldr	r2, [pc, #208]	; (8001390 <HAL_GPIO_Init+0x354>)
 80012c0:	69bb      	ldr	r3, [r7, #24]
 80012c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012c4:	4b32      	ldr	r3, [pc, #200]	; (8001390 <HAL_GPIO_Init+0x354>)
 80012c6:	68db      	ldr	r3, [r3, #12]
 80012c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	43db      	mvns	r3, r3
 80012ce:	69ba      	ldr	r2, [r7, #24]
 80012d0:	4013      	ands	r3, r2
 80012d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d003      	beq.n	80012e8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80012e0:	69ba      	ldr	r2, [r7, #24]
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	4313      	orrs	r3, r2
 80012e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012e8:	4a29      	ldr	r2, [pc, #164]	; (8001390 <HAL_GPIO_Init+0x354>)
 80012ea:	69bb      	ldr	r3, [r7, #24]
 80012ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80012ee:	4b28      	ldr	r3, [pc, #160]	; (8001390 <HAL_GPIO_Init+0x354>)
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	43db      	mvns	r3, r3
 80012f8:	69ba      	ldr	r2, [r7, #24]
 80012fa:	4013      	ands	r3, r2
 80012fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001306:	2b00      	cmp	r3, #0
 8001308:	d003      	beq.n	8001312 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800130a:	69ba      	ldr	r2, [r7, #24]
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	4313      	orrs	r3, r2
 8001310:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001312:	4a1f      	ldr	r2, [pc, #124]	; (8001390 <HAL_GPIO_Init+0x354>)
 8001314:	69bb      	ldr	r3, [r7, #24]
 8001316:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001318:	4b1d      	ldr	r3, [pc, #116]	; (8001390 <HAL_GPIO_Init+0x354>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	43db      	mvns	r3, r3
 8001322:	69ba      	ldr	r2, [r7, #24]
 8001324:	4013      	ands	r3, r2
 8001326:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001330:	2b00      	cmp	r3, #0
 8001332:	d003      	beq.n	800133c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001334:	69ba      	ldr	r2, [r7, #24]
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	4313      	orrs	r3, r2
 800133a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800133c:	4a14      	ldr	r2, [pc, #80]	; (8001390 <HAL_GPIO_Init+0x354>)
 800133e:	69bb      	ldr	r3, [r7, #24]
 8001340:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	3301      	adds	r3, #1
 8001346:	61fb      	str	r3, [r7, #28]
 8001348:	69fb      	ldr	r3, [r7, #28]
 800134a:	2b0f      	cmp	r3, #15
 800134c:	f67f ae86 	bls.w	800105c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001350:	bf00      	nop
 8001352:	bf00      	nop
 8001354:	3724      	adds	r7, #36	; 0x24
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	40023800 	.word	0x40023800
 8001364:	40013800 	.word	0x40013800
 8001368:	40020000 	.word	0x40020000
 800136c:	40020400 	.word	0x40020400
 8001370:	40020800 	.word	0x40020800
 8001374:	40020c00 	.word	0x40020c00
 8001378:	40021000 	.word	0x40021000
 800137c:	40021400 	.word	0x40021400
 8001380:	40021800 	.word	0x40021800
 8001384:	40021c00 	.word	0x40021c00
 8001388:	40022000 	.word	0x40022000
 800138c:	40022400 	.word	0x40022400
 8001390:	40013c00 	.word	0x40013c00

08001394 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
 800139c:	460b      	mov	r3, r1
 800139e:	807b      	strh	r3, [r7, #2]
 80013a0:	4613      	mov	r3, r2
 80013a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013a4:	787b      	ldrb	r3, [r7, #1]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d003      	beq.n	80013b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013aa:	887a      	ldrh	r2, [r7, #2]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80013b0:	e003      	b.n	80013ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80013b2:	887b      	ldrh	r3, [r7, #2]
 80013b4:	041a      	lsls	r2, r3, #16
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	619a      	str	r2, [r3, #24]
}
 80013ba:	bf00      	nop
 80013bc:	370c      	adds	r7, #12
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr

080013c6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013c6:	b480      	push	{r7}
 80013c8:	b085      	sub	sp, #20
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	6078      	str	r0, [r7, #4]
 80013ce:	460b      	mov	r3, r1
 80013d0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	695b      	ldr	r3, [r3, #20]
 80013d6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80013d8:	887a      	ldrh	r2, [r7, #2]
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	4013      	ands	r3, r2
 80013de:	041a      	lsls	r2, r3, #16
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	43d9      	mvns	r1, r3
 80013e4:	887b      	ldrh	r3, [r7, #2]
 80013e6:	400b      	ands	r3, r1
 80013e8:	431a      	orrs	r2, r3
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	619a      	str	r2, [r3, #24]
}
 80013ee:	bf00      	nop
 80013f0:	3714      	adds	r7, #20
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr

080013fa <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80013fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013fc:	b08f      	sub	sp, #60	; 0x3c
 80013fe:	af0a      	add	r7, sp, #40	; 0x28
 8001400:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d101      	bne.n	800140c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001408:	2301      	movs	r3, #1
 800140a:	e116      	b.n	800163a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001418:	b2db      	uxtb	r3, r3
 800141a:	2b00      	cmp	r3, #0
 800141c:	d106      	bne.n	800142c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2200      	movs	r2, #0
 8001422:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001426:	6878      	ldr	r0, [r7, #4]
 8001428:	f006 fab8 	bl	800799c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2203      	movs	r2, #3
 8001430:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001438:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800143c:	2b00      	cmp	r3, #0
 800143e:	d102      	bne.n	8001446 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2200      	movs	r2, #0
 8001444:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4618      	mov	r0, r3
 800144c:	f002 fc4b 	bl	8003ce6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	603b      	str	r3, [r7, #0]
 8001456:	687e      	ldr	r6, [r7, #4]
 8001458:	466d      	mov	r5, sp
 800145a:	f106 0410 	add.w	r4, r6, #16
 800145e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001460:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001462:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001464:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001466:	e894 0003 	ldmia.w	r4, {r0, r1}
 800146a:	e885 0003 	stmia.w	r5, {r0, r1}
 800146e:	1d33      	adds	r3, r6, #4
 8001470:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001472:	6838      	ldr	r0, [r7, #0]
 8001474:	f002 fb2c 	bl	8003ad0 <USB_CoreInit>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d005      	beq.n	800148a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2202      	movs	r2, #2
 8001482:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001486:	2301      	movs	r3, #1
 8001488:	e0d7      	b.n	800163a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	2100      	movs	r1, #0
 8001490:	4618      	mov	r0, r3
 8001492:	f002 fc39 	bl	8003d08 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001496:	2300      	movs	r3, #0
 8001498:	73fb      	strb	r3, [r7, #15]
 800149a:	e04a      	b.n	8001532 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800149c:	7bfa      	ldrb	r2, [r7, #15]
 800149e:	6879      	ldr	r1, [r7, #4]
 80014a0:	4613      	mov	r3, r2
 80014a2:	00db      	lsls	r3, r3, #3
 80014a4:	4413      	add	r3, r2
 80014a6:	009b      	lsls	r3, r3, #2
 80014a8:	440b      	add	r3, r1
 80014aa:	333d      	adds	r3, #61	; 0x3d
 80014ac:	2201      	movs	r2, #1
 80014ae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80014b0:	7bfa      	ldrb	r2, [r7, #15]
 80014b2:	6879      	ldr	r1, [r7, #4]
 80014b4:	4613      	mov	r3, r2
 80014b6:	00db      	lsls	r3, r3, #3
 80014b8:	4413      	add	r3, r2
 80014ba:	009b      	lsls	r3, r3, #2
 80014bc:	440b      	add	r3, r1
 80014be:	333c      	adds	r3, #60	; 0x3c
 80014c0:	7bfa      	ldrb	r2, [r7, #15]
 80014c2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80014c4:	7bfa      	ldrb	r2, [r7, #15]
 80014c6:	7bfb      	ldrb	r3, [r7, #15]
 80014c8:	b298      	uxth	r0, r3
 80014ca:	6879      	ldr	r1, [r7, #4]
 80014cc:	4613      	mov	r3, r2
 80014ce:	00db      	lsls	r3, r3, #3
 80014d0:	4413      	add	r3, r2
 80014d2:	009b      	lsls	r3, r3, #2
 80014d4:	440b      	add	r3, r1
 80014d6:	3344      	adds	r3, #68	; 0x44
 80014d8:	4602      	mov	r2, r0
 80014da:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80014dc:	7bfa      	ldrb	r2, [r7, #15]
 80014de:	6879      	ldr	r1, [r7, #4]
 80014e0:	4613      	mov	r3, r2
 80014e2:	00db      	lsls	r3, r3, #3
 80014e4:	4413      	add	r3, r2
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	440b      	add	r3, r1
 80014ea:	3340      	adds	r3, #64	; 0x40
 80014ec:	2200      	movs	r2, #0
 80014ee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80014f0:	7bfa      	ldrb	r2, [r7, #15]
 80014f2:	6879      	ldr	r1, [r7, #4]
 80014f4:	4613      	mov	r3, r2
 80014f6:	00db      	lsls	r3, r3, #3
 80014f8:	4413      	add	r3, r2
 80014fa:	009b      	lsls	r3, r3, #2
 80014fc:	440b      	add	r3, r1
 80014fe:	3348      	adds	r3, #72	; 0x48
 8001500:	2200      	movs	r2, #0
 8001502:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001504:	7bfa      	ldrb	r2, [r7, #15]
 8001506:	6879      	ldr	r1, [r7, #4]
 8001508:	4613      	mov	r3, r2
 800150a:	00db      	lsls	r3, r3, #3
 800150c:	4413      	add	r3, r2
 800150e:	009b      	lsls	r3, r3, #2
 8001510:	440b      	add	r3, r1
 8001512:	334c      	adds	r3, #76	; 0x4c
 8001514:	2200      	movs	r2, #0
 8001516:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001518:	7bfa      	ldrb	r2, [r7, #15]
 800151a:	6879      	ldr	r1, [r7, #4]
 800151c:	4613      	mov	r3, r2
 800151e:	00db      	lsls	r3, r3, #3
 8001520:	4413      	add	r3, r2
 8001522:	009b      	lsls	r3, r3, #2
 8001524:	440b      	add	r3, r1
 8001526:	3354      	adds	r3, #84	; 0x54
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800152c:	7bfb      	ldrb	r3, [r7, #15]
 800152e:	3301      	adds	r3, #1
 8001530:	73fb      	strb	r3, [r7, #15]
 8001532:	7bfa      	ldrb	r2, [r7, #15]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	429a      	cmp	r2, r3
 800153a:	d3af      	bcc.n	800149c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800153c:	2300      	movs	r3, #0
 800153e:	73fb      	strb	r3, [r7, #15]
 8001540:	e044      	b.n	80015cc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001542:	7bfa      	ldrb	r2, [r7, #15]
 8001544:	6879      	ldr	r1, [r7, #4]
 8001546:	4613      	mov	r3, r2
 8001548:	00db      	lsls	r3, r3, #3
 800154a:	4413      	add	r3, r2
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	440b      	add	r3, r1
 8001550:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001554:	2200      	movs	r2, #0
 8001556:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001558:	7bfa      	ldrb	r2, [r7, #15]
 800155a:	6879      	ldr	r1, [r7, #4]
 800155c:	4613      	mov	r3, r2
 800155e:	00db      	lsls	r3, r3, #3
 8001560:	4413      	add	r3, r2
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	440b      	add	r3, r1
 8001566:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800156a:	7bfa      	ldrb	r2, [r7, #15]
 800156c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800156e:	7bfa      	ldrb	r2, [r7, #15]
 8001570:	6879      	ldr	r1, [r7, #4]
 8001572:	4613      	mov	r3, r2
 8001574:	00db      	lsls	r3, r3, #3
 8001576:	4413      	add	r3, r2
 8001578:	009b      	lsls	r3, r3, #2
 800157a:	440b      	add	r3, r1
 800157c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001580:	2200      	movs	r2, #0
 8001582:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001584:	7bfa      	ldrb	r2, [r7, #15]
 8001586:	6879      	ldr	r1, [r7, #4]
 8001588:	4613      	mov	r3, r2
 800158a:	00db      	lsls	r3, r3, #3
 800158c:	4413      	add	r3, r2
 800158e:	009b      	lsls	r3, r3, #2
 8001590:	440b      	add	r3, r1
 8001592:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001596:	2200      	movs	r2, #0
 8001598:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800159a:	7bfa      	ldrb	r2, [r7, #15]
 800159c:	6879      	ldr	r1, [r7, #4]
 800159e:	4613      	mov	r3, r2
 80015a0:	00db      	lsls	r3, r3, #3
 80015a2:	4413      	add	r3, r2
 80015a4:	009b      	lsls	r3, r3, #2
 80015a6:	440b      	add	r3, r1
 80015a8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80015ac:	2200      	movs	r2, #0
 80015ae:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80015b0:	7bfa      	ldrb	r2, [r7, #15]
 80015b2:	6879      	ldr	r1, [r7, #4]
 80015b4:	4613      	mov	r3, r2
 80015b6:	00db      	lsls	r3, r3, #3
 80015b8:	4413      	add	r3, r2
 80015ba:	009b      	lsls	r3, r3, #2
 80015bc:	440b      	add	r3, r1
 80015be:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80015c2:	2200      	movs	r2, #0
 80015c4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015c6:	7bfb      	ldrb	r3, [r7, #15]
 80015c8:	3301      	adds	r3, #1
 80015ca:	73fb      	strb	r3, [r7, #15]
 80015cc:	7bfa      	ldrb	r2, [r7, #15]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	429a      	cmp	r2, r3
 80015d4:	d3b5      	bcc.n	8001542 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	603b      	str	r3, [r7, #0]
 80015dc:	687e      	ldr	r6, [r7, #4]
 80015de:	466d      	mov	r5, sp
 80015e0:	f106 0410 	add.w	r4, r6, #16
 80015e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015ec:	e894 0003 	ldmia.w	r4, {r0, r1}
 80015f0:	e885 0003 	stmia.w	r5, {r0, r1}
 80015f4:	1d33      	adds	r3, r6, #4
 80015f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015f8:	6838      	ldr	r0, [r7, #0]
 80015fa:	f002 fbd1 	bl	8003da0 <USB_DevInit>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d005      	beq.n	8001610 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2202      	movs	r2, #2
 8001608:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800160c:	2301      	movs	r3, #1
 800160e:	e014      	b.n	800163a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2200      	movs	r2, #0
 8001614:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2201      	movs	r2, #1
 800161c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001624:	2b01      	cmp	r3, #1
 8001626:	d102      	bne.n	800162e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001628:	6878      	ldr	r0, [r7, #4]
 800162a:	f001 f97b 	bl	8002924 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4618      	mov	r0, r3
 8001634:	f003 fd1f 	bl	8005076 <USB_DevDisconnect>

  return HAL_OK;
 8001638:	2300      	movs	r3, #0
}
 800163a:	4618      	mov	r0, r3
 800163c:	3714      	adds	r7, #20
 800163e:	46bd      	mov	sp, r7
 8001640:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001642 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001642:	b580      	push	{r7, lr}
 8001644:	b082      	sub	sp, #8
 8001646:	af00      	add	r7, sp, #0
 8001648:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001650:	2b01      	cmp	r3, #1
 8001652:	d101      	bne.n	8001658 <HAL_PCD_Start+0x16>
 8001654:	2302      	movs	r3, #2
 8001656:	e012      	b.n	800167e <HAL_PCD_Start+0x3c>
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2201      	movs	r2, #1
 800165c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  __HAL_PCD_ENABLE(hpcd);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4618      	mov	r0, r3
 8001666:	f002 fb2d 	bl	8003cc4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4618      	mov	r0, r3
 8001670:	f003 fce0 	bl	8005034 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2200      	movs	r2, #0
 8001678:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800167c:	2300      	movs	r3, #0
}
 800167e:	4618      	mov	r0, r3
 8001680:	3708      	adds	r7, #8
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}

08001686 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001686:	b590      	push	{r4, r7, lr}
 8001688:	b08d      	sub	sp, #52	; 0x34
 800168a:	af00      	add	r7, sp, #0
 800168c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001694:	6a3b      	ldr	r3, [r7, #32]
 8001696:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4618      	mov	r0, r3
 800169e:	f003 fd9e 	bl	80051de <USB_GetMode>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	f040 84b7 	bne.w	8002018 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4618      	mov	r0, r3
 80016b0:	f003 fd02 	bl	80050b8 <USB_ReadInterrupts>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	f000 84ad 	beq.w	8002016 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80016bc:	69fb      	ldr	r3, [r7, #28]
 80016be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	0a1b      	lsrs	r3, r3, #8
 80016c6:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4618      	mov	r0, r3
 80016d6:	f003 fcef 	bl	80050b8 <USB_ReadInterrupts>
 80016da:	4603      	mov	r3, r0
 80016dc:	f003 0302 	and.w	r3, r3, #2
 80016e0:	2b02      	cmp	r3, #2
 80016e2:	d107      	bne.n	80016f4 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	695a      	ldr	r2, [r3, #20]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f002 0202 	and.w	r2, r2, #2
 80016f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4618      	mov	r0, r3
 80016fa:	f003 fcdd 	bl	80050b8 <USB_ReadInterrupts>
 80016fe:	4603      	mov	r3, r0
 8001700:	f003 0310 	and.w	r3, r3, #16
 8001704:	2b10      	cmp	r3, #16
 8001706:	d161      	bne.n	80017cc <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	699a      	ldr	r2, [r3, #24]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f022 0210 	bic.w	r2, r2, #16
 8001716:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001718:	6a3b      	ldr	r3, [r7, #32]
 800171a:	6a1b      	ldr	r3, [r3, #32]
 800171c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800171e:	69bb      	ldr	r3, [r7, #24]
 8001720:	f003 020f 	and.w	r2, r3, #15
 8001724:	4613      	mov	r3, r2
 8001726:	00db      	lsls	r3, r3, #3
 8001728:	4413      	add	r3, r2
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001730:	687a      	ldr	r2, [r7, #4]
 8001732:	4413      	add	r3, r2
 8001734:	3304      	adds	r3, #4
 8001736:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001738:	69bb      	ldr	r3, [r7, #24]
 800173a:	0c5b      	lsrs	r3, r3, #17
 800173c:	f003 030f 	and.w	r3, r3, #15
 8001740:	2b02      	cmp	r3, #2
 8001742:	d124      	bne.n	800178e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001744:	69ba      	ldr	r2, [r7, #24]
 8001746:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800174a:	4013      	ands	r3, r2
 800174c:	2b00      	cmp	r3, #0
 800174e:	d035      	beq.n	80017bc <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001754:	69bb      	ldr	r3, [r7, #24]
 8001756:	091b      	lsrs	r3, r3, #4
 8001758:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800175a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800175e:	b29b      	uxth	r3, r3
 8001760:	461a      	mov	r2, r3
 8001762:	6a38      	ldr	r0, [r7, #32]
 8001764:	f003 fb14 	bl	8004d90 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	691a      	ldr	r2, [r3, #16]
 800176c:	69bb      	ldr	r3, [r7, #24]
 800176e:	091b      	lsrs	r3, r3, #4
 8001770:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001774:	441a      	add	r2, r3
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	6a1a      	ldr	r2, [r3, #32]
 800177e:	69bb      	ldr	r3, [r7, #24]
 8001780:	091b      	lsrs	r3, r3, #4
 8001782:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001786:	441a      	add	r2, r3
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	621a      	str	r2, [r3, #32]
 800178c:	e016      	b.n	80017bc <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800178e:	69bb      	ldr	r3, [r7, #24]
 8001790:	0c5b      	lsrs	r3, r3, #17
 8001792:	f003 030f 	and.w	r3, r3, #15
 8001796:	2b06      	cmp	r3, #6
 8001798:	d110      	bne.n	80017bc <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80017a0:	2208      	movs	r2, #8
 80017a2:	4619      	mov	r1, r3
 80017a4:	6a38      	ldr	r0, [r7, #32]
 80017a6:	f003 faf3 	bl	8004d90 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	6a1a      	ldr	r2, [r3, #32]
 80017ae:	69bb      	ldr	r3, [r7, #24]
 80017b0:	091b      	lsrs	r3, r3, #4
 80017b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80017b6:	441a      	add	r2, r3
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	699a      	ldr	r2, [r3, #24]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f042 0210 	orr.w	r2, r2, #16
 80017ca:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4618      	mov	r0, r3
 80017d2:	f003 fc71 	bl	80050b8 <USB_ReadInterrupts>
 80017d6:	4603      	mov	r3, r0
 80017d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80017dc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80017e0:	f040 80a7 	bne.w	8001932 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80017e4:	2300      	movs	r3, #0
 80017e6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4618      	mov	r0, r3
 80017ee:	f003 fc76 	bl	80050de <USB_ReadDevAllOutEpInterrupt>
 80017f2:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80017f4:	e099      	b.n	800192a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80017f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017f8:	f003 0301 	and.w	r3, r3, #1
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	f000 808e 	beq.w	800191e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001808:	b2d2      	uxtb	r2, r2
 800180a:	4611      	mov	r1, r2
 800180c:	4618      	mov	r0, r3
 800180e:	f003 fc9a 	bl	8005146 <USB_ReadDevOutEPInterrupt>
 8001812:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	f003 0301 	and.w	r3, r3, #1
 800181a:	2b00      	cmp	r3, #0
 800181c:	d00c      	beq.n	8001838 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800181e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001820:	015a      	lsls	r2, r3, #5
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	4413      	add	r3, r2
 8001826:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800182a:	461a      	mov	r2, r3
 800182c:	2301      	movs	r3, #1
 800182e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001830:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001832:	6878      	ldr	r0, [r7, #4]
 8001834:	f000 fef0 	bl	8002618 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	f003 0308 	and.w	r3, r3, #8
 800183e:	2b00      	cmp	r3, #0
 8001840:	d00c      	beq.n	800185c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001844:	015a      	lsls	r2, r3, #5
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	4413      	add	r3, r2
 800184a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800184e:	461a      	mov	r2, r3
 8001850:	2308      	movs	r3, #8
 8001852:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001854:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001856:	6878      	ldr	r0, [r7, #4]
 8001858:	f000 ffc6 	bl	80027e8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	f003 0310 	and.w	r3, r3, #16
 8001862:	2b00      	cmp	r3, #0
 8001864:	d008      	beq.n	8001878 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001868:	015a      	lsls	r2, r3, #5
 800186a:	69fb      	ldr	r3, [r7, #28]
 800186c:	4413      	add	r3, r2
 800186e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001872:	461a      	mov	r2, r3
 8001874:	2310      	movs	r3, #16
 8001876:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	f003 0302 	and.w	r3, r3, #2
 800187e:	2b00      	cmp	r3, #0
 8001880:	d030      	beq.n	80018e4 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001882:	6a3b      	ldr	r3, [r7, #32]
 8001884:	695b      	ldr	r3, [r3, #20]
 8001886:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800188a:	2b80      	cmp	r3, #128	; 0x80
 800188c:	d109      	bne.n	80018a2 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800188e:	69fb      	ldr	r3, [r7, #28]
 8001890:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	69fa      	ldr	r2, [r7, #28]
 8001898:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800189c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018a0:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80018a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018a4:	4613      	mov	r3, r2
 80018a6:	00db      	lsls	r3, r3, #3
 80018a8:	4413      	add	r3, r2
 80018aa:	009b      	lsls	r3, r3, #2
 80018ac:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80018b0:	687a      	ldr	r2, [r7, #4]
 80018b2:	4413      	add	r3, r2
 80018b4:	3304      	adds	r3, #4
 80018b6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	78db      	ldrb	r3, [r3, #3]
 80018bc:	2b01      	cmp	r3, #1
 80018be:	d108      	bne.n	80018d2 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	2200      	movs	r2, #0
 80018c4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80018c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c8:	b2db      	uxtb	r3, r3
 80018ca:	4619      	mov	r1, r3
 80018cc:	6878      	ldr	r0, [r7, #4]
 80018ce:	f006 f989 	bl	8007be4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80018d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d4:	015a      	lsls	r2, r3, #5
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	4413      	add	r3, r2
 80018da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80018de:	461a      	mov	r2, r3
 80018e0:	2302      	movs	r3, #2
 80018e2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	f003 0320 	and.w	r3, r3, #32
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d008      	beq.n	8001900 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80018ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f0:	015a      	lsls	r2, r3, #5
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	4413      	add	r3, r2
 80018f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80018fa:	461a      	mov	r2, r3
 80018fc:	2320      	movs	r3, #32
 80018fe:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001906:	2b00      	cmp	r3, #0
 8001908:	d009      	beq.n	800191e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800190a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800190c:	015a      	lsls	r2, r3, #5
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	4413      	add	r3, r2
 8001912:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001916:	461a      	mov	r2, r3
 8001918:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800191c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800191e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001920:	3301      	adds	r3, #1
 8001922:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001926:	085b      	lsrs	r3, r3, #1
 8001928:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800192a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800192c:	2b00      	cmp	r3, #0
 800192e:	f47f af62 	bne.w	80017f6 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4618      	mov	r0, r3
 8001938:	f003 fbbe 	bl	80050b8 <USB_ReadInterrupts>
 800193c:	4603      	mov	r3, r0
 800193e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001942:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001946:	f040 80db 	bne.w	8001b00 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4618      	mov	r0, r3
 8001950:	f003 fbdf 	bl	8005112 <USB_ReadDevAllInEpInterrupt>
 8001954:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001956:	2300      	movs	r3, #0
 8001958:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800195a:	e0cd      	b.n	8001af8 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800195c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800195e:	f003 0301 	and.w	r3, r3, #1
 8001962:	2b00      	cmp	r3, #0
 8001964:	f000 80c2 	beq.w	8001aec <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800196e:	b2d2      	uxtb	r2, r2
 8001970:	4611      	mov	r1, r2
 8001972:	4618      	mov	r0, r3
 8001974:	f003 fc05 	bl	8005182 <USB_ReadDevInEPInterrupt>
 8001978:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	f003 0301 	and.w	r3, r3, #1
 8001980:	2b00      	cmp	r3, #0
 8001982:	d057      	beq.n	8001a34 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001986:	f003 030f 	and.w	r3, r3, #15
 800198a:	2201      	movs	r2, #1
 800198c:	fa02 f303 	lsl.w	r3, r2, r3
 8001990:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001992:	69fb      	ldr	r3, [r7, #28]
 8001994:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001998:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	43db      	mvns	r3, r3
 800199e:	69f9      	ldr	r1, [r7, #28]
 80019a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80019a4:	4013      	ands	r3, r2
 80019a6:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80019a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019aa:	015a      	lsls	r2, r3, #5
 80019ac:	69fb      	ldr	r3, [r7, #28]
 80019ae:	4413      	add	r3, r2
 80019b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80019b4:	461a      	mov	r2, r3
 80019b6:	2301      	movs	r3, #1
 80019b8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	691b      	ldr	r3, [r3, #16]
 80019be:	2b01      	cmp	r3, #1
 80019c0:	d132      	bne.n	8001a28 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80019c2:	6879      	ldr	r1, [r7, #4]
 80019c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019c6:	4613      	mov	r3, r2
 80019c8:	00db      	lsls	r3, r3, #3
 80019ca:	4413      	add	r3, r2
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	440b      	add	r3, r1
 80019d0:	334c      	adds	r3, #76	; 0x4c
 80019d2:	6819      	ldr	r1, [r3, #0]
 80019d4:	6878      	ldr	r0, [r7, #4]
 80019d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019d8:	4613      	mov	r3, r2
 80019da:	00db      	lsls	r3, r3, #3
 80019dc:	4413      	add	r3, r2
 80019de:	009b      	lsls	r3, r3, #2
 80019e0:	4403      	add	r3, r0
 80019e2:	3348      	adds	r3, #72	; 0x48
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4419      	add	r1, r3
 80019e8:	6878      	ldr	r0, [r7, #4]
 80019ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019ec:	4613      	mov	r3, r2
 80019ee:	00db      	lsls	r3, r3, #3
 80019f0:	4413      	add	r3, r2
 80019f2:	009b      	lsls	r3, r3, #2
 80019f4:	4403      	add	r3, r0
 80019f6:	334c      	adds	r3, #76	; 0x4c
 80019f8:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80019fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d113      	bne.n	8001a28 <HAL_PCD_IRQHandler+0x3a2>
 8001a00:	6879      	ldr	r1, [r7, #4]
 8001a02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a04:	4613      	mov	r3, r2
 8001a06:	00db      	lsls	r3, r3, #3
 8001a08:	4413      	add	r3, r2
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	440b      	add	r3, r1
 8001a0e:	3354      	adds	r3, #84	; 0x54
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d108      	bne.n	8001a28 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6818      	ldr	r0, [r3, #0]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001a20:	461a      	mov	r2, r3
 8001a22:	2101      	movs	r1, #1
 8001a24:	f003 fc0e 	bl	8005244 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a2a:	b2db      	uxtb	r3, r3
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	6878      	ldr	r0, [r7, #4]
 8001a30:	f006 f853 	bl	8007ada <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	f003 0308 	and.w	r3, r3, #8
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d008      	beq.n	8001a50 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a40:	015a      	lsls	r2, r3, #5
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	4413      	add	r3, r2
 8001a46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a4a:	461a      	mov	r2, r3
 8001a4c:	2308      	movs	r3, #8
 8001a4e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	f003 0310 	and.w	r3, r3, #16
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d008      	beq.n	8001a6c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a5c:	015a      	lsls	r2, r3, #5
 8001a5e:	69fb      	ldr	r3, [r7, #28]
 8001a60:	4413      	add	r3, r2
 8001a62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a66:	461a      	mov	r2, r3
 8001a68:	2310      	movs	r3, #16
 8001a6a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d008      	beq.n	8001a88 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a78:	015a      	lsls	r2, r3, #5
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	4413      	add	r3, r2
 8001a7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a82:	461a      	mov	r2, r3
 8001a84:	2340      	movs	r3, #64	; 0x40
 8001a86:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	f003 0302 	and.w	r3, r3, #2
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d023      	beq.n	8001ada <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001a92:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001a94:	6a38      	ldr	r0, [r7, #32]
 8001a96:	f002 fae1 	bl	800405c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001a9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a9c:	4613      	mov	r3, r2
 8001a9e:	00db      	lsls	r3, r3, #3
 8001aa0:	4413      	add	r3, r2
 8001aa2:	009b      	lsls	r3, r3, #2
 8001aa4:	3338      	adds	r3, #56	; 0x38
 8001aa6:	687a      	ldr	r2, [r7, #4]
 8001aa8:	4413      	add	r3, r2
 8001aaa:	3304      	adds	r3, #4
 8001aac:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	78db      	ldrb	r3, [r3, #3]
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	d108      	bne.n	8001ac8 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	2200      	movs	r2, #0
 8001aba:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001abe:	b2db      	uxtb	r3, r3
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	6878      	ldr	r0, [r7, #4]
 8001ac4:	f006 f8a0 	bl	8007c08 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aca:	015a      	lsls	r2, r3, #5
 8001acc:	69fb      	ldr	r3, [r7, #28]
 8001ace:	4413      	add	r3, r2
 8001ad0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ad4:	461a      	mov	r2, r3
 8001ad6:	2302      	movs	r3, #2
 8001ad8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d003      	beq.n	8001aec <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001ae4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f000 fd08 	bl	80024fc <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aee:	3301      	adds	r3, #1
 8001af0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001af4:	085b      	lsrs	r3, r3, #1
 8001af6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	f47f af2e 	bne.w	800195c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4618      	mov	r0, r3
 8001b06:	f003 fad7 	bl	80050b8 <USB_ReadInterrupts>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001b10:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001b14:	d122      	bne.n	8001b5c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	69fa      	ldr	r2, [r7, #28]
 8001b20:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b24:	f023 0301 	bic.w	r3, r3, #1
 8001b28:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d108      	bne.n	8001b46 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2200      	movs	r2, #0
 8001b38:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001b3c:	2100      	movs	r1, #0
 8001b3e:	6878      	ldr	r0, [r7, #4]
 8001b40:	f006 fa1a 	bl	8007f78 <HAL_PCDEx_LPM_Callback>
 8001b44:	e002      	b.n	8001b4c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f006 f83e 	bl	8007bc8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	695a      	ldr	r2, [r3, #20]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001b5a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4618      	mov	r0, r3
 8001b62:	f003 faa9 	bl	80050b8 <USB_ReadInterrupts>
 8001b66:	4603      	mov	r3, r0
 8001b68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001b70:	d112      	bne.n	8001b98 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	f003 0301 	and.w	r3, r3, #1
 8001b7e:	2b01      	cmp	r3, #1
 8001b80:	d102      	bne.n	8001b88 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001b82:	6878      	ldr	r0, [r7, #4]
 8001b84:	f005 fffa 	bl	8007b7c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	695a      	ldr	r2, [r3, #20]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001b96:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f003 fa8b 	bl	80050b8 <USB_ReadInterrupts>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001ba8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001bac:	d121      	bne.n	8001bf2 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	695a      	ldr	r2, [r3, #20]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8001bbc:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d111      	bne.n	8001bec <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2201      	movs	r2, #1
 8001bcc:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bd6:	089b      	lsrs	r3, r3, #2
 8001bd8:	f003 020f 	and.w	r2, r3, #15
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001be2:	2101      	movs	r1, #1
 8001be4:	6878      	ldr	r0, [r7, #4]
 8001be6:	f006 f9c7 	bl	8007f78 <HAL_PCDEx_LPM_Callback>
 8001bea:	e002      	b.n	8001bf2 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001bec:	6878      	ldr	r0, [r7, #4]
 8001bee:	f005 ffc5 	bl	8007b7c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f003 fa5e 	bl	80050b8 <USB_ReadInterrupts>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c06:	f040 80b7 	bne.w	8001d78 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	69fa      	ldr	r2, [r7, #28]
 8001c14:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c18:	f023 0301 	bic.w	r3, r3, #1
 8001c1c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	2110      	movs	r1, #16
 8001c24:	4618      	mov	r0, r3
 8001c26:	f002 fa19 	bl	800405c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c2e:	e046      	b.n	8001cbe <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c32:	015a      	lsls	r2, r3, #5
 8001c34:	69fb      	ldr	r3, [r7, #28]
 8001c36:	4413      	add	r3, r2
 8001c38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001c42:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c46:	015a      	lsls	r2, r3, #5
 8001c48:	69fb      	ldr	r3, [r7, #28]
 8001c4a:	4413      	add	r3, r2
 8001c4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c54:	0151      	lsls	r1, r2, #5
 8001c56:	69fa      	ldr	r2, [r7, #28]
 8001c58:	440a      	add	r2, r1
 8001c5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001c5e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001c62:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c66:	015a      	lsls	r2, r3, #5
 8001c68:	69fb      	ldr	r3, [r7, #28]
 8001c6a:	4413      	add	r3, r2
 8001c6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c70:	461a      	mov	r2, r3
 8001c72:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001c76:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c7a:	015a      	lsls	r2, r3, #5
 8001c7c:	69fb      	ldr	r3, [r7, #28]
 8001c7e:	4413      	add	r3, r2
 8001c80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c88:	0151      	lsls	r1, r2, #5
 8001c8a:	69fa      	ldr	r2, [r7, #28]
 8001c8c:	440a      	add	r2, r1
 8001c8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001c92:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001c96:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c9a:	015a      	lsls	r2, r3, #5
 8001c9c:	69fb      	ldr	r3, [r7, #28]
 8001c9e:	4413      	add	r3, r2
 8001ca0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ca8:	0151      	lsls	r1, r2, #5
 8001caa:	69fa      	ldr	r2, [r7, #28]
 8001cac:	440a      	add	r2, r1
 8001cae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001cb2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001cb6:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cba:	3301      	adds	r3, #1
 8001cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d3b3      	bcc.n	8001c30 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001cc8:	69fb      	ldr	r3, [r7, #28]
 8001cca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001cce:	69db      	ldr	r3, [r3, #28]
 8001cd0:	69fa      	ldr	r2, [r7, #28]
 8001cd2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001cd6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001cda:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d016      	beq.n	8001d12 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001ce4:	69fb      	ldr	r3, [r7, #28]
 8001ce6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001cea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001cee:	69fa      	ldr	r2, [r7, #28]
 8001cf0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001cf4:	f043 030b 	orr.w	r3, r3, #11
 8001cf8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001cfc:	69fb      	ldr	r3, [r7, #28]
 8001cfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d04:	69fa      	ldr	r2, [r7, #28]
 8001d06:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001d0a:	f043 030b 	orr.w	r3, r3, #11
 8001d0e:	6453      	str	r3, [r2, #68]	; 0x44
 8001d10:	e015      	b.n	8001d3e <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d18:	695a      	ldr	r2, [r3, #20]
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d20:	4619      	mov	r1, r3
 8001d22:	f242 032b 	movw	r3, #8235	; 0x202b
 8001d26:	4313      	orrs	r3, r2
 8001d28:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d30:	691b      	ldr	r3, [r3, #16]
 8001d32:	69fa      	ldr	r2, [r7, #28]
 8001d34:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001d38:	f043 030b 	orr.w	r3, r3, #11
 8001d3c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	69fa      	ldr	r2, [r7, #28]
 8001d48:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001d4c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001d50:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	6818      	ldr	r0, [r3, #0]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	691b      	ldr	r3, [r3, #16]
 8001d5a:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001d62:	461a      	mov	r2, r3
 8001d64:	f003 fa6e 	bl	8005244 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	695a      	ldr	r2, [r3, #20]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001d76:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f003 f99b 	bl	80050b8 <USB_ReadInterrupts>
 8001d82:	4603      	mov	r3, r0
 8001d84:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d8c:	d124      	bne.n	8001dd8 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4618      	mov	r0, r3
 8001d94:	f003 fa32 	bl	80051fc <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f002 f9da 	bl	8004156 <USB_GetDevSpeed>
 8001da2:	4603      	mov	r3, r0
 8001da4:	461a      	mov	r2, r3
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681c      	ldr	r4, [r3, #0]
 8001dae:	f001 fa93 	bl	80032d8 <HAL_RCC_GetHCLKFreq>
 8001db2:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	461a      	mov	r2, r3
 8001dbc:	4620      	mov	r0, r4
 8001dbe:	f001 fedf 	bl	8003b80 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f005 feb1 	bl	8007b2a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	695a      	ldr	r2, [r3, #20]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001dd6:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f003 f96b 	bl	80050b8 <USB_ReadInterrupts>
 8001de2:	4603      	mov	r3, r0
 8001de4:	f003 0308 	and.w	r3, r3, #8
 8001de8:	2b08      	cmp	r3, #8
 8001dea:	d10a      	bne.n	8001e02 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001dec:	6878      	ldr	r0, [r7, #4]
 8001dee:	f005 fe8e 	bl	8007b0e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	695a      	ldr	r2, [r3, #20]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f002 0208 	and.w	r2, r2, #8
 8001e00:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4618      	mov	r0, r3
 8001e08:	f003 f956 	bl	80050b8 <USB_ReadInterrupts>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e12:	2b80      	cmp	r3, #128	; 0x80
 8001e14:	d122      	bne.n	8001e5c <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001e16:	6a3b      	ldr	r3, [r7, #32]
 8001e18:	699b      	ldr	r3, [r3, #24]
 8001e1a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001e1e:	6a3b      	ldr	r3, [r7, #32]
 8001e20:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001e22:	2301      	movs	r3, #1
 8001e24:	627b      	str	r3, [r7, #36]	; 0x24
 8001e26:	e014      	b.n	8001e52 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001e28:	6879      	ldr	r1, [r7, #4]
 8001e2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e2c:	4613      	mov	r3, r2
 8001e2e:	00db      	lsls	r3, r3, #3
 8001e30:	4413      	add	r3, r2
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	440b      	add	r3, r1
 8001e36:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d105      	bne.n	8001e4c <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e42:	b2db      	uxtb	r3, r3
 8001e44:	4619      	mov	r1, r3
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f000 fb27 	bl	800249a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e4e:	3301      	adds	r3, #1
 8001e50:	627b      	str	r3, [r7, #36]	; 0x24
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	d3e5      	bcc.n	8001e28 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4618      	mov	r0, r3
 8001e62:	f003 f929 	bl	80050b8 <USB_ReadInterrupts>
 8001e66:	4603      	mov	r3, r0
 8001e68:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e6c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001e70:	d13b      	bne.n	8001eea <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001e72:	2301      	movs	r3, #1
 8001e74:	627b      	str	r3, [r7, #36]	; 0x24
 8001e76:	e02b      	b.n	8001ed0 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e7a:	015a      	lsls	r2, r3, #5
 8001e7c:	69fb      	ldr	r3, [r7, #28]
 8001e7e:	4413      	add	r3, r2
 8001e80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001e88:	6879      	ldr	r1, [r7, #4]
 8001e8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	00db      	lsls	r3, r3, #3
 8001e90:	4413      	add	r3, r2
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	440b      	add	r3, r1
 8001e96:	3340      	adds	r3, #64	; 0x40
 8001e98:	781b      	ldrb	r3, [r3, #0]
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d115      	bne.n	8001eca <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001e9e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	da12      	bge.n	8001eca <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001ea4:	6879      	ldr	r1, [r7, #4]
 8001ea6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ea8:	4613      	mov	r3, r2
 8001eaa:	00db      	lsls	r3, r3, #3
 8001eac:	4413      	add	r3, r2
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	440b      	add	r3, r1
 8001eb2:	333f      	adds	r3, #63	; 0x3f
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eba:	b2db      	uxtb	r3, r3
 8001ebc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	6878      	ldr	r0, [r7, #4]
 8001ec6:	f000 fae8 	bl	800249a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ecc:	3301      	adds	r3, #1
 8001ece:	627b      	str	r3, [r7, #36]	; 0x24
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ed6:	429a      	cmp	r2, r3
 8001ed8:	d3ce      	bcc.n	8001e78 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	695a      	ldr	r2, [r3, #20]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001ee8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f003 f8e2 	bl	80050b8 <USB_ReadInterrupts>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001efa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001efe:	d155      	bne.n	8001fac <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001f00:	2301      	movs	r3, #1
 8001f02:	627b      	str	r3, [r7, #36]	; 0x24
 8001f04:	e045      	b.n	8001f92 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f08:	015a      	lsls	r2, r3, #5
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	4413      	add	r3, r2
 8001f0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001f16:	6879      	ldr	r1, [r7, #4]
 8001f18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f1a:	4613      	mov	r3, r2
 8001f1c:	00db      	lsls	r3, r3, #3
 8001f1e:	4413      	add	r3, r2
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	440b      	add	r3, r1
 8001f24:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001f28:	781b      	ldrb	r3, [r3, #0]
 8001f2a:	2b01      	cmp	r3, #1
 8001f2c:	d12e      	bne.n	8001f8c <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001f2e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	da2b      	bge.n	8001f8c <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001f34:	69bb      	ldr	r3, [r7, #24]
 8001f36:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001f40:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d121      	bne.n	8001f8c <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001f48:	6879      	ldr	r1, [r7, #4]
 8001f4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f4c:	4613      	mov	r3, r2
 8001f4e:	00db      	lsls	r3, r3, #3
 8001f50:	4413      	add	r3, r2
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	440b      	add	r3, r1
 8001f56:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001f5e:	6a3b      	ldr	r3, [r7, #32]
 8001f60:	699b      	ldr	r3, [r3, #24]
 8001f62:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001f66:	6a3b      	ldr	r3, [r7, #32]
 8001f68:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001f6a:	6a3b      	ldr	r3, [r7, #32]
 8001f6c:	695b      	ldr	r3, [r3, #20]
 8001f6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d10a      	bne.n	8001f8c <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	69fa      	ldr	r2, [r7, #28]
 8001f80:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f84:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f88:	6053      	str	r3, [r2, #4]
            break;
 8001f8a:	e007      	b.n	8001f9c <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f8e:	3301      	adds	r3, #1
 8001f90:	627b      	str	r3, [r7, #36]	; 0x24
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d3b4      	bcc.n	8001f06 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	695a      	ldr	r2, [r3, #20]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001faa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f003 f881 	bl	80050b8 <USB_ReadInterrupts>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001fbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fc0:	d10a      	bne.n	8001fd8 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	f005 fe32 	bl	8007c2c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	695a      	ldr	r2, [r3, #20]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001fd6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f003 f86b 	bl	80050b8 <USB_ReadInterrupts>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	f003 0304 	and.w	r3, r3, #4
 8001fe8:	2b04      	cmp	r3, #4
 8001fea:	d115      	bne.n	8002018 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001ff4:	69bb      	ldr	r3, [r7, #24]
 8001ff6:	f003 0304 	and.w	r3, r3, #4
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d002      	beq.n	8002004 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	f005 fe22 	bl	8007c48 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	6859      	ldr	r1, [r3, #4]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	69ba      	ldr	r2, [r7, #24]
 8002010:	430a      	orrs	r2, r1
 8002012:	605a      	str	r2, [r3, #4]
 8002014:	e000      	b.n	8002018 <HAL_PCD_IRQHandler+0x992>
      return;
 8002016:	bf00      	nop
    }
  }
}
 8002018:	3734      	adds	r7, #52	; 0x34
 800201a:	46bd      	mov	sp, r7
 800201c:	bd90      	pop	{r4, r7, pc}

0800201e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800201e:	b580      	push	{r7, lr}
 8002020:	b082      	sub	sp, #8
 8002022:	af00      	add	r7, sp, #0
 8002024:	6078      	str	r0, [r7, #4]
 8002026:	460b      	mov	r3, r1
 8002028:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002030:	2b01      	cmp	r3, #1
 8002032:	d101      	bne.n	8002038 <HAL_PCD_SetAddress+0x1a>
 8002034:	2302      	movs	r3, #2
 8002036:	e013      	b.n	8002060 <HAL_PCD_SetAddress+0x42>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2201      	movs	r2, #1
 800203c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	78fa      	ldrb	r2, [r7, #3]
 8002044:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	78fa      	ldrb	r2, [r7, #3]
 800204e:	4611      	mov	r1, r2
 8002050:	4618      	mov	r0, r3
 8002052:	f002 ffc9 	bl	8004fe8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2200      	movs	r2, #0
 800205a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800205e:	2300      	movs	r3, #0
}
 8002060:	4618      	mov	r0, r3
 8002062:	3708      	adds	r7, #8
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}

08002068 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b084      	sub	sp, #16
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
 8002070:	4608      	mov	r0, r1
 8002072:	4611      	mov	r1, r2
 8002074:	461a      	mov	r2, r3
 8002076:	4603      	mov	r3, r0
 8002078:	70fb      	strb	r3, [r7, #3]
 800207a:	460b      	mov	r3, r1
 800207c:	803b      	strh	r3, [r7, #0]
 800207e:	4613      	mov	r3, r2
 8002080:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002082:	2300      	movs	r3, #0
 8002084:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002086:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800208a:	2b00      	cmp	r3, #0
 800208c:	da0f      	bge.n	80020ae <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800208e:	78fb      	ldrb	r3, [r7, #3]
 8002090:	f003 020f 	and.w	r2, r3, #15
 8002094:	4613      	mov	r3, r2
 8002096:	00db      	lsls	r3, r3, #3
 8002098:	4413      	add	r3, r2
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	3338      	adds	r3, #56	; 0x38
 800209e:	687a      	ldr	r2, [r7, #4]
 80020a0:	4413      	add	r3, r2
 80020a2:	3304      	adds	r3, #4
 80020a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	2201      	movs	r2, #1
 80020aa:	705a      	strb	r2, [r3, #1]
 80020ac:	e00f      	b.n	80020ce <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80020ae:	78fb      	ldrb	r3, [r7, #3]
 80020b0:	f003 020f 	and.w	r2, r3, #15
 80020b4:	4613      	mov	r3, r2
 80020b6:	00db      	lsls	r3, r3, #3
 80020b8:	4413      	add	r3, r2
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80020c0:	687a      	ldr	r2, [r7, #4]
 80020c2:	4413      	add	r3, r2
 80020c4:	3304      	adds	r3, #4
 80020c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	2200      	movs	r2, #0
 80020cc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80020ce:	78fb      	ldrb	r3, [r7, #3]
 80020d0:	f003 030f 	and.w	r3, r3, #15
 80020d4:	b2da      	uxtb	r2, r3
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80020da:	883a      	ldrh	r2, [r7, #0]
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	78ba      	ldrb	r2, [r7, #2]
 80020e4:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	785b      	ldrb	r3, [r3, #1]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d004      	beq.n	80020f8 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	781b      	ldrb	r3, [r3, #0]
 80020f2:	b29a      	uxth	r2, r3
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80020f8:	78bb      	ldrb	r3, [r7, #2]
 80020fa:	2b02      	cmp	r3, #2
 80020fc:	d102      	bne.n	8002104 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	2200      	movs	r2, #0
 8002102:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800210a:	2b01      	cmp	r3, #1
 800210c:	d101      	bne.n	8002112 <HAL_PCD_EP_Open+0xaa>
 800210e:	2302      	movs	r3, #2
 8002110:	e00e      	b.n	8002130 <HAL_PCD_EP_Open+0xc8>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2201      	movs	r2, #1
 8002116:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	68f9      	ldr	r1, [r7, #12]
 8002120:	4618      	mov	r0, r3
 8002122:	f002 f83d 	bl	80041a0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2200      	movs	r2, #0
 800212a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800212e:	7afb      	ldrb	r3, [r7, #11]
}
 8002130:	4618      	mov	r0, r3
 8002132:	3710      	adds	r7, #16
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}

08002138 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b084      	sub	sp, #16
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
 8002140:	460b      	mov	r3, r1
 8002142:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002144:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002148:	2b00      	cmp	r3, #0
 800214a:	da0f      	bge.n	800216c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800214c:	78fb      	ldrb	r3, [r7, #3]
 800214e:	f003 020f 	and.w	r2, r3, #15
 8002152:	4613      	mov	r3, r2
 8002154:	00db      	lsls	r3, r3, #3
 8002156:	4413      	add	r3, r2
 8002158:	009b      	lsls	r3, r3, #2
 800215a:	3338      	adds	r3, #56	; 0x38
 800215c:	687a      	ldr	r2, [r7, #4]
 800215e:	4413      	add	r3, r2
 8002160:	3304      	adds	r3, #4
 8002162:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	2201      	movs	r2, #1
 8002168:	705a      	strb	r2, [r3, #1]
 800216a:	e00f      	b.n	800218c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800216c:	78fb      	ldrb	r3, [r7, #3]
 800216e:	f003 020f 	and.w	r2, r3, #15
 8002172:	4613      	mov	r3, r2
 8002174:	00db      	lsls	r3, r3, #3
 8002176:	4413      	add	r3, r2
 8002178:	009b      	lsls	r3, r3, #2
 800217a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800217e:	687a      	ldr	r2, [r7, #4]
 8002180:	4413      	add	r3, r2
 8002182:	3304      	adds	r3, #4
 8002184:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	2200      	movs	r2, #0
 800218a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800218c:	78fb      	ldrb	r3, [r7, #3]
 800218e:	f003 030f 	and.w	r3, r3, #15
 8002192:	b2da      	uxtb	r2, r3
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d101      	bne.n	80021a6 <HAL_PCD_EP_Close+0x6e>
 80021a2:	2302      	movs	r3, #2
 80021a4:	e00e      	b.n	80021c4 <HAL_PCD_EP_Close+0x8c>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2201      	movs	r2, #1
 80021aa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	68f9      	ldr	r1, [r7, #12]
 80021b4:	4618      	mov	r0, r3
 80021b6:	f002 f87b 	bl	80042b0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2200      	movs	r2, #0
 80021be:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80021c2:	2300      	movs	r3, #0
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	3710      	adds	r7, #16
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}

080021cc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b086      	sub	sp, #24
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	60f8      	str	r0, [r7, #12]
 80021d4:	607a      	str	r2, [r7, #4]
 80021d6:	603b      	str	r3, [r7, #0]
 80021d8:	460b      	mov	r3, r1
 80021da:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80021dc:	7afb      	ldrb	r3, [r7, #11]
 80021de:	f003 020f 	and.w	r2, r3, #15
 80021e2:	4613      	mov	r3, r2
 80021e4:	00db      	lsls	r3, r3, #3
 80021e6:	4413      	add	r3, r2
 80021e8:	009b      	lsls	r3, r3, #2
 80021ea:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80021ee:	68fa      	ldr	r2, [r7, #12]
 80021f0:	4413      	add	r3, r2
 80021f2:	3304      	adds	r3, #4
 80021f4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	687a      	ldr	r2, [r7, #4]
 80021fa:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	683a      	ldr	r2, [r7, #0]
 8002200:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	2200      	movs	r2, #0
 8002206:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	2200      	movs	r2, #0
 800220c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800220e:	7afb      	ldrb	r3, [r7, #11]
 8002210:	f003 030f 	and.w	r3, r3, #15
 8002214:	b2da      	uxtb	r2, r3
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	691b      	ldr	r3, [r3, #16]
 800221e:	2b01      	cmp	r3, #1
 8002220:	d102      	bne.n	8002228 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002222:	687a      	ldr	r2, [r7, #4]
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002228:	7afb      	ldrb	r3, [r7, #11]
 800222a:	f003 030f 	and.w	r3, r3, #15
 800222e:	2b00      	cmp	r3, #0
 8002230:	d109      	bne.n	8002246 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	6818      	ldr	r0, [r3, #0]
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	691b      	ldr	r3, [r3, #16]
 800223a:	b2db      	uxtb	r3, r3
 800223c:	461a      	mov	r2, r3
 800223e:	6979      	ldr	r1, [r7, #20]
 8002240:	f002 fb62 	bl	8004908 <USB_EP0StartXfer>
 8002244:	e008      	b.n	8002258 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	6818      	ldr	r0, [r3, #0]
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	691b      	ldr	r3, [r3, #16]
 800224e:	b2db      	uxtb	r3, r3
 8002250:	461a      	mov	r2, r3
 8002252:	6979      	ldr	r1, [r7, #20]
 8002254:	f002 f908 	bl	8004468 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002258:	2300      	movs	r3, #0
}
 800225a:	4618      	mov	r0, r3
 800225c:	3718      	adds	r7, #24
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}

08002262 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002262:	b480      	push	{r7}
 8002264:	b083      	sub	sp, #12
 8002266:	af00      	add	r7, sp, #0
 8002268:	6078      	str	r0, [r7, #4]
 800226a:	460b      	mov	r3, r1
 800226c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800226e:	78fb      	ldrb	r3, [r7, #3]
 8002270:	f003 020f 	and.w	r2, r3, #15
 8002274:	6879      	ldr	r1, [r7, #4]
 8002276:	4613      	mov	r3, r2
 8002278:	00db      	lsls	r3, r3, #3
 800227a:	4413      	add	r3, r2
 800227c:	009b      	lsls	r3, r3, #2
 800227e:	440b      	add	r3, r1
 8002280:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002284:	681b      	ldr	r3, [r3, #0]
}
 8002286:	4618      	mov	r0, r3
 8002288:	370c      	adds	r7, #12
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr

08002292 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002292:	b580      	push	{r7, lr}
 8002294:	b086      	sub	sp, #24
 8002296:	af00      	add	r7, sp, #0
 8002298:	60f8      	str	r0, [r7, #12]
 800229a:	607a      	str	r2, [r7, #4]
 800229c:	603b      	str	r3, [r7, #0]
 800229e:	460b      	mov	r3, r1
 80022a0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022a2:	7afb      	ldrb	r3, [r7, #11]
 80022a4:	f003 020f 	and.w	r2, r3, #15
 80022a8:	4613      	mov	r3, r2
 80022aa:	00db      	lsls	r3, r3, #3
 80022ac:	4413      	add	r3, r2
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	3338      	adds	r3, #56	; 0x38
 80022b2:	68fa      	ldr	r2, [r7, #12]
 80022b4:	4413      	add	r3, r2
 80022b6:	3304      	adds	r3, #4
 80022b8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	687a      	ldr	r2, [r7, #4]
 80022be:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	683a      	ldr	r2, [r7, #0]
 80022c4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	2200      	movs	r2, #0
 80022ca:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	2201      	movs	r2, #1
 80022d0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80022d2:	7afb      	ldrb	r3, [r7, #11]
 80022d4:	f003 030f 	and.w	r3, r3, #15
 80022d8:	b2da      	uxtb	r2, r3
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	691b      	ldr	r3, [r3, #16]
 80022e2:	2b01      	cmp	r3, #1
 80022e4:	d102      	bne.n	80022ec <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80022e6:	687a      	ldr	r2, [r7, #4]
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80022ec:	7afb      	ldrb	r3, [r7, #11]
 80022ee:	f003 030f 	and.w	r3, r3, #15
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d109      	bne.n	800230a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	6818      	ldr	r0, [r3, #0]
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	691b      	ldr	r3, [r3, #16]
 80022fe:	b2db      	uxtb	r3, r3
 8002300:	461a      	mov	r2, r3
 8002302:	6979      	ldr	r1, [r7, #20]
 8002304:	f002 fb00 	bl	8004908 <USB_EP0StartXfer>
 8002308:	e008      	b.n	800231c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	6818      	ldr	r0, [r3, #0]
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	691b      	ldr	r3, [r3, #16]
 8002312:	b2db      	uxtb	r3, r3
 8002314:	461a      	mov	r2, r3
 8002316:	6979      	ldr	r1, [r7, #20]
 8002318:	f002 f8a6 	bl	8004468 <USB_EPStartXfer>
  }

  return HAL_OK;
 800231c:	2300      	movs	r3, #0
}
 800231e:	4618      	mov	r0, r3
 8002320:	3718      	adds	r7, #24
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}

08002326 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002326:	b580      	push	{r7, lr}
 8002328:	b084      	sub	sp, #16
 800232a:	af00      	add	r7, sp, #0
 800232c:	6078      	str	r0, [r7, #4]
 800232e:	460b      	mov	r3, r1
 8002330:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002332:	78fb      	ldrb	r3, [r7, #3]
 8002334:	f003 020f 	and.w	r2, r3, #15
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	429a      	cmp	r2, r3
 800233e:	d901      	bls.n	8002344 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	e050      	b.n	80023e6 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002344:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002348:	2b00      	cmp	r3, #0
 800234a:	da0f      	bge.n	800236c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800234c:	78fb      	ldrb	r3, [r7, #3]
 800234e:	f003 020f 	and.w	r2, r3, #15
 8002352:	4613      	mov	r3, r2
 8002354:	00db      	lsls	r3, r3, #3
 8002356:	4413      	add	r3, r2
 8002358:	009b      	lsls	r3, r3, #2
 800235a:	3338      	adds	r3, #56	; 0x38
 800235c:	687a      	ldr	r2, [r7, #4]
 800235e:	4413      	add	r3, r2
 8002360:	3304      	adds	r3, #4
 8002362:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	2201      	movs	r2, #1
 8002368:	705a      	strb	r2, [r3, #1]
 800236a:	e00d      	b.n	8002388 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800236c:	78fa      	ldrb	r2, [r7, #3]
 800236e:	4613      	mov	r3, r2
 8002370:	00db      	lsls	r3, r3, #3
 8002372:	4413      	add	r3, r2
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800237a:	687a      	ldr	r2, [r7, #4]
 800237c:	4413      	add	r3, r2
 800237e:	3304      	adds	r3, #4
 8002380:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	2200      	movs	r2, #0
 8002386:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	2201      	movs	r2, #1
 800238c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800238e:	78fb      	ldrb	r3, [r7, #3]
 8002390:	f003 030f 	and.w	r3, r3, #15
 8002394:	b2da      	uxtb	r2, r3
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d101      	bne.n	80023a8 <HAL_PCD_EP_SetStall+0x82>
 80023a4:	2302      	movs	r3, #2
 80023a6:	e01e      	b.n	80023e6 <HAL_PCD_EP_SetStall+0xc0>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2201      	movs	r2, #1
 80023ac:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	68f9      	ldr	r1, [r7, #12]
 80023b6:	4618      	mov	r0, r3
 80023b8:	f002 fd42 	bl	8004e40 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80023bc:	78fb      	ldrb	r3, [r7, #3]
 80023be:	f003 030f 	and.w	r3, r3, #15
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d10a      	bne.n	80023dc <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6818      	ldr	r0, [r3, #0]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	691b      	ldr	r3, [r3, #16]
 80023ce:	b2d9      	uxtb	r1, r3
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80023d6:	461a      	mov	r2, r3
 80023d8:	f002 ff34 	bl	8005244 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2200      	movs	r2, #0
 80023e0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80023e4:	2300      	movs	r3, #0
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3710      	adds	r7, #16
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}

080023ee <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80023ee:	b580      	push	{r7, lr}
 80023f0:	b084      	sub	sp, #16
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	6078      	str	r0, [r7, #4]
 80023f6:	460b      	mov	r3, r1
 80023f8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80023fa:	78fb      	ldrb	r3, [r7, #3]
 80023fc:	f003 020f 	and.w	r2, r3, #15
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	429a      	cmp	r2, r3
 8002406:	d901      	bls.n	800240c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e042      	b.n	8002492 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800240c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002410:	2b00      	cmp	r3, #0
 8002412:	da0f      	bge.n	8002434 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002414:	78fb      	ldrb	r3, [r7, #3]
 8002416:	f003 020f 	and.w	r2, r3, #15
 800241a:	4613      	mov	r3, r2
 800241c:	00db      	lsls	r3, r3, #3
 800241e:	4413      	add	r3, r2
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	3338      	adds	r3, #56	; 0x38
 8002424:	687a      	ldr	r2, [r7, #4]
 8002426:	4413      	add	r3, r2
 8002428:	3304      	adds	r3, #4
 800242a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	2201      	movs	r2, #1
 8002430:	705a      	strb	r2, [r3, #1]
 8002432:	e00f      	b.n	8002454 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002434:	78fb      	ldrb	r3, [r7, #3]
 8002436:	f003 020f 	and.w	r2, r3, #15
 800243a:	4613      	mov	r3, r2
 800243c:	00db      	lsls	r3, r3, #3
 800243e:	4413      	add	r3, r2
 8002440:	009b      	lsls	r3, r3, #2
 8002442:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	4413      	add	r3, r2
 800244a:	3304      	adds	r3, #4
 800244c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	2200      	movs	r2, #0
 8002452:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	2200      	movs	r2, #0
 8002458:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800245a:	78fb      	ldrb	r3, [r7, #3]
 800245c:	f003 030f 	and.w	r3, r3, #15
 8002460:	b2da      	uxtb	r2, r3
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800246c:	2b01      	cmp	r3, #1
 800246e:	d101      	bne.n	8002474 <HAL_PCD_EP_ClrStall+0x86>
 8002470:	2302      	movs	r3, #2
 8002472:	e00e      	b.n	8002492 <HAL_PCD_EP_ClrStall+0xa4>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2201      	movs	r2, #1
 8002478:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	68f9      	ldr	r1, [r7, #12]
 8002482:	4618      	mov	r0, r3
 8002484:	f002 fd4a 	bl	8004f1c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2200      	movs	r2, #0
 800248c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002490:	2300      	movs	r3, #0
}
 8002492:	4618      	mov	r0, r3
 8002494:	3710      	adds	r7, #16
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}

0800249a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800249a:	b580      	push	{r7, lr}
 800249c:	b084      	sub	sp, #16
 800249e:	af00      	add	r7, sp, #0
 80024a0:	6078      	str	r0, [r7, #4]
 80024a2:	460b      	mov	r3, r1
 80024a4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80024a6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	da0c      	bge.n	80024c8 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80024ae:	78fb      	ldrb	r3, [r7, #3]
 80024b0:	f003 020f 	and.w	r2, r3, #15
 80024b4:	4613      	mov	r3, r2
 80024b6:	00db      	lsls	r3, r3, #3
 80024b8:	4413      	add	r3, r2
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	3338      	adds	r3, #56	; 0x38
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	4413      	add	r3, r2
 80024c2:	3304      	adds	r3, #4
 80024c4:	60fb      	str	r3, [r7, #12]
 80024c6:	e00c      	b.n	80024e2 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80024c8:	78fb      	ldrb	r3, [r7, #3]
 80024ca:	f003 020f 	and.w	r2, r3, #15
 80024ce:	4613      	mov	r3, r2
 80024d0:	00db      	lsls	r3, r3, #3
 80024d2:	4413      	add	r3, r2
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80024da:	687a      	ldr	r2, [r7, #4]
 80024dc:	4413      	add	r3, r2
 80024de:	3304      	adds	r3, #4
 80024e0:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	68f9      	ldr	r1, [r7, #12]
 80024e8:	4618      	mov	r0, r3
 80024ea:	f002 fb69 	bl	8004bc0 <USB_EPStopXfer>
 80024ee:	4603      	mov	r3, r0
 80024f0:	72fb      	strb	r3, [r7, #11]

  return ret;
 80024f2:	7afb      	ldrb	r3, [r7, #11]
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	3710      	adds	r7, #16
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}

080024fc <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b08a      	sub	sp, #40	; 0x28
 8002500:	af02      	add	r7, sp, #8
 8002502:	6078      	str	r0, [r7, #4]
 8002504:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002510:	683a      	ldr	r2, [r7, #0]
 8002512:	4613      	mov	r3, r2
 8002514:	00db      	lsls	r3, r3, #3
 8002516:	4413      	add	r3, r2
 8002518:	009b      	lsls	r3, r3, #2
 800251a:	3338      	adds	r3, #56	; 0x38
 800251c:	687a      	ldr	r2, [r7, #4]
 800251e:	4413      	add	r3, r2
 8002520:	3304      	adds	r3, #4
 8002522:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	6a1a      	ldr	r2, [r3, #32]
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	699b      	ldr	r3, [r3, #24]
 800252c:	429a      	cmp	r2, r3
 800252e:	d901      	bls.n	8002534 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	e06c      	b.n	800260e <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	699a      	ldr	r2, [r3, #24]
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	6a1b      	ldr	r3, [r3, #32]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	69fa      	ldr	r2, [r7, #28]
 8002546:	429a      	cmp	r2, r3
 8002548:	d902      	bls.n	8002550 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	68db      	ldr	r3, [r3, #12]
 800254e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002550:	69fb      	ldr	r3, [r7, #28]
 8002552:	3303      	adds	r3, #3
 8002554:	089b      	lsrs	r3, r3, #2
 8002556:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002558:	e02b      	b.n	80025b2 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	699a      	ldr	r2, [r3, #24]
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	6a1b      	ldr	r3, [r3, #32]
 8002562:	1ad3      	subs	r3, r2, r3
 8002564:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	68db      	ldr	r3, [r3, #12]
 800256a:	69fa      	ldr	r2, [r7, #28]
 800256c:	429a      	cmp	r2, r3
 800256e:	d902      	bls.n	8002576 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	3303      	adds	r3, #3
 800257a:	089b      	lsrs	r3, r3, #2
 800257c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	6919      	ldr	r1, [r3, #16]
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	b2da      	uxtb	r2, r3
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800258e:	b2db      	uxtb	r3, r3
 8002590:	9300      	str	r3, [sp, #0]
 8002592:	4603      	mov	r3, r0
 8002594:	6978      	ldr	r0, [r7, #20]
 8002596:	f002 fbbd 	bl	8004d14 <USB_WritePacket>

    ep->xfer_buff  += len;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	691a      	ldr	r2, [r3, #16]
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	441a      	add	r2, r3
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	6a1a      	ldr	r2, [r3, #32]
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	441a      	add	r2, r3
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	015a      	lsls	r2, r3, #5
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	4413      	add	r3, r2
 80025ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80025be:	699b      	ldr	r3, [r3, #24]
 80025c0:	b29b      	uxth	r3, r3
 80025c2:	69ba      	ldr	r2, [r7, #24]
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d809      	bhi.n	80025dc <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	6a1a      	ldr	r2, [r3, #32]
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d203      	bcs.n	80025dc <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	699b      	ldr	r3, [r3, #24]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d1be      	bne.n	800255a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	699a      	ldr	r2, [r3, #24]
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	6a1b      	ldr	r3, [r3, #32]
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d811      	bhi.n	800260c <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	f003 030f 	and.w	r3, r3, #15
 80025ee:	2201      	movs	r2, #1
 80025f0:	fa02 f303 	lsl.w	r3, r2, r3
 80025f4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	43db      	mvns	r3, r3
 8002602:	6939      	ldr	r1, [r7, #16]
 8002604:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002608:	4013      	ands	r3, r2
 800260a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800260c:	2300      	movs	r3, #0
}
 800260e:	4618      	mov	r0, r3
 8002610:	3720      	adds	r7, #32
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
	...

08002618 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b088      	sub	sp, #32
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
 8002620:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002628:	69fb      	ldr	r3, [r7, #28]
 800262a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	333c      	adds	r3, #60	; 0x3c
 8002630:	3304      	adds	r3, #4
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	015a      	lsls	r2, r3, #5
 800263a:	69bb      	ldr	r3, [r7, #24]
 800263c:	4413      	add	r3, r2
 800263e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	691b      	ldr	r3, [r3, #16]
 800264a:	2b01      	cmp	r3, #1
 800264c:	d17b      	bne.n	8002746 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	f003 0308 	and.w	r3, r3, #8
 8002654:	2b00      	cmp	r3, #0
 8002656:	d015      	beq.n	8002684 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	4a61      	ldr	r2, [pc, #388]	; (80027e0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800265c:	4293      	cmp	r3, r2
 800265e:	f240 80b9 	bls.w	80027d4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002668:	2b00      	cmp	r3, #0
 800266a:	f000 80b3 	beq.w	80027d4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	015a      	lsls	r2, r3, #5
 8002672:	69bb      	ldr	r3, [r7, #24]
 8002674:	4413      	add	r3, r2
 8002676:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800267a:	461a      	mov	r2, r3
 800267c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002680:	6093      	str	r3, [r2, #8]
 8002682:	e0a7      	b.n	80027d4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	f003 0320 	and.w	r3, r3, #32
 800268a:	2b00      	cmp	r3, #0
 800268c:	d009      	beq.n	80026a2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	015a      	lsls	r2, r3, #5
 8002692:	69bb      	ldr	r3, [r7, #24]
 8002694:	4413      	add	r3, r2
 8002696:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800269a:	461a      	mov	r2, r3
 800269c:	2320      	movs	r3, #32
 800269e:	6093      	str	r3, [r2, #8]
 80026a0:	e098      	b.n	80027d4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	f040 8093 	bne.w	80027d4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	4a4b      	ldr	r2, [pc, #300]	; (80027e0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d90f      	bls.n	80026d6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d00a      	beq.n	80026d6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	015a      	lsls	r2, r3, #5
 80026c4:	69bb      	ldr	r3, [r7, #24]
 80026c6:	4413      	add	r3, r2
 80026c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026cc:	461a      	mov	r2, r3
 80026ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80026d2:	6093      	str	r3, [r2, #8]
 80026d4:	e07e      	b.n	80027d4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80026d6:	683a      	ldr	r2, [r7, #0]
 80026d8:	4613      	mov	r3, r2
 80026da:	00db      	lsls	r3, r3, #3
 80026dc:	4413      	add	r3, r2
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80026e4:	687a      	ldr	r2, [r7, #4]
 80026e6:	4413      	add	r3, r2
 80026e8:	3304      	adds	r3, #4
 80026ea:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	69da      	ldr	r2, [r3, #28]
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	0159      	lsls	r1, r3, #5
 80026f4:	69bb      	ldr	r3, [r7, #24]
 80026f6:	440b      	add	r3, r1
 80026f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80026fc:	691b      	ldr	r3, [r3, #16]
 80026fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002702:	1ad2      	subs	r2, r2, r3
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d114      	bne.n	8002738 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	699b      	ldr	r3, [r3, #24]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d109      	bne.n	800272a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6818      	ldr	r0, [r3, #0]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002720:	461a      	mov	r2, r3
 8002722:	2101      	movs	r1, #1
 8002724:	f002 fd8e 	bl	8005244 <USB_EP0_OutStart>
 8002728:	e006      	b.n	8002738 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	691a      	ldr	r2, [r3, #16]
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	6a1b      	ldr	r3, [r3, #32]
 8002732:	441a      	add	r2, r3
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	b2db      	uxtb	r3, r3
 800273c:	4619      	mov	r1, r3
 800273e:	6878      	ldr	r0, [r7, #4]
 8002740:	f005 f9b0 	bl	8007aa4 <HAL_PCD_DataOutStageCallback>
 8002744:	e046      	b.n	80027d4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	4a26      	ldr	r2, [pc, #152]	; (80027e4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d124      	bne.n	8002798 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002754:	2b00      	cmp	r3, #0
 8002756:	d00a      	beq.n	800276e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	015a      	lsls	r2, r3, #5
 800275c:	69bb      	ldr	r3, [r7, #24]
 800275e:	4413      	add	r3, r2
 8002760:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002764:	461a      	mov	r2, r3
 8002766:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800276a:	6093      	str	r3, [r2, #8]
 800276c:	e032      	b.n	80027d4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	f003 0320 	and.w	r3, r3, #32
 8002774:	2b00      	cmp	r3, #0
 8002776:	d008      	beq.n	800278a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	015a      	lsls	r2, r3, #5
 800277c:	69bb      	ldr	r3, [r7, #24]
 800277e:	4413      	add	r3, r2
 8002780:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002784:	461a      	mov	r2, r3
 8002786:	2320      	movs	r3, #32
 8002788:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	b2db      	uxtb	r3, r3
 800278e:	4619      	mov	r1, r3
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	f005 f987 	bl	8007aa4 <HAL_PCD_DataOutStageCallback>
 8002796:	e01d      	b.n	80027d4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d114      	bne.n	80027c8 <PCD_EP_OutXfrComplete_int+0x1b0>
 800279e:	6879      	ldr	r1, [r7, #4]
 80027a0:	683a      	ldr	r2, [r7, #0]
 80027a2:	4613      	mov	r3, r2
 80027a4:	00db      	lsls	r3, r3, #3
 80027a6:	4413      	add	r3, r2
 80027a8:	009b      	lsls	r3, r3, #2
 80027aa:	440b      	add	r3, r1
 80027ac:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d108      	bne.n	80027c8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6818      	ldr	r0, [r3, #0]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80027c0:	461a      	mov	r2, r3
 80027c2:	2100      	movs	r1, #0
 80027c4:	f002 fd3e 	bl	8005244 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	4619      	mov	r1, r3
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	f005 f968 	bl	8007aa4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80027d4:	2300      	movs	r3, #0
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3720      	adds	r7, #32
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop
 80027e0:	4f54300a 	.word	0x4f54300a
 80027e4:	4f54310a 	.word	0x4f54310a

080027e8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b086      	sub	sp, #24
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	333c      	adds	r3, #60	; 0x3c
 8002800:	3304      	adds	r3, #4
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	015a      	lsls	r2, r3, #5
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	4413      	add	r3, r2
 800280e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	4a15      	ldr	r2, [pc, #84]	; (8002870 <PCD_EP_OutSetupPacket_int+0x88>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d90e      	bls.n	800283c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002824:	2b00      	cmp	r3, #0
 8002826:	d009      	beq.n	800283c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	015a      	lsls	r2, r3, #5
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	4413      	add	r3, r2
 8002830:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002834:	461a      	mov	r2, r3
 8002836:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800283a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800283c:	6878      	ldr	r0, [r7, #4]
 800283e:	f005 f91f 	bl	8007a80 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	4a0a      	ldr	r2, [pc, #40]	; (8002870 <PCD_EP_OutSetupPacket_int+0x88>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d90c      	bls.n	8002864 <PCD_EP_OutSetupPacket_int+0x7c>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	691b      	ldr	r3, [r3, #16]
 800284e:	2b01      	cmp	r3, #1
 8002850:	d108      	bne.n	8002864 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6818      	ldr	r0, [r3, #0]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800285c:	461a      	mov	r2, r3
 800285e:	2101      	movs	r1, #1
 8002860:	f002 fcf0 	bl	8005244 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002864:	2300      	movs	r3, #0
}
 8002866:	4618      	mov	r0, r3
 8002868:	3718      	adds	r7, #24
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	4f54300a 	.word	0x4f54300a

08002874 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002874:	b480      	push	{r7}
 8002876:	b085      	sub	sp, #20
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
 800287c:	460b      	mov	r3, r1
 800287e:	70fb      	strb	r3, [r7, #3]
 8002880:	4613      	mov	r3, r2
 8002882:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800288a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800288c:	78fb      	ldrb	r3, [r7, #3]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d107      	bne.n	80028a2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002892:	883b      	ldrh	r3, [r7, #0]
 8002894:	0419      	lsls	r1, r3, #16
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	68ba      	ldr	r2, [r7, #8]
 800289c:	430a      	orrs	r2, r1
 800289e:	629a      	str	r2, [r3, #40]	; 0x28
 80028a0:	e028      	b.n	80028f4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028a8:	0c1b      	lsrs	r3, r3, #16
 80028aa:	68ba      	ldr	r2, [r7, #8]
 80028ac:	4413      	add	r3, r2
 80028ae:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80028b0:	2300      	movs	r3, #0
 80028b2:	73fb      	strb	r3, [r7, #15]
 80028b4:	e00d      	b.n	80028d2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	7bfb      	ldrb	r3, [r7, #15]
 80028bc:	3340      	adds	r3, #64	; 0x40
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	4413      	add	r3, r2
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	0c1b      	lsrs	r3, r3, #16
 80028c6:	68ba      	ldr	r2, [r7, #8]
 80028c8:	4413      	add	r3, r2
 80028ca:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80028cc:	7bfb      	ldrb	r3, [r7, #15]
 80028ce:	3301      	adds	r3, #1
 80028d0:	73fb      	strb	r3, [r7, #15]
 80028d2:	7bfa      	ldrb	r2, [r7, #15]
 80028d4:	78fb      	ldrb	r3, [r7, #3]
 80028d6:	3b01      	subs	r3, #1
 80028d8:	429a      	cmp	r2, r3
 80028da:	d3ec      	bcc.n	80028b6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80028dc:	883b      	ldrh	r3, [r7, #0]
 80028de:	0418      	lsls	r0, r3, #16
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6819      	ldr	r1, [r3, #0]
 80028e4:	78fb      	ldrb	r3, [r7, #3]
 80028e6:	3b01      	subs	r3, #1
 80028e8:	68ba      	ldr	r2, [r7, #8]
 80028ea:	4302      	orrs	r2, r0
 80028ec:	3340      	adds	r3, #64	; 0x40
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	440b      	add	r3, r1
 80028f2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80028f4:	2300      	movs	r3, #0
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3714      	adds	r7, #20
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr

08002902 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002902:	b480      	push	{r7}
 8002904:	b083      	sub	sp, #12
 8002906:	af00      	add	r7, sp, #0
 8002908:	6078      	str	r0, [r7, #4]
 800290a:	460b      	mov	r3, r1
 800290c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	887a      	ldrh	r2, [r7, #2]
 8002914:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002916:	2300      	movs	r3, #0
}
 8002918:	4618      	mov	r0, r3
 800291a:	370c      	adds	r7, #12
 800291c:	46bd      	mov	sp, r7
 800291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002922:	4770      	bx	lr

08002924 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002924:	b480      	push	{r7}
 8002926:	b085      	sub	sp, #20
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2201      	movs	r2, #1
 8002936:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2200      	movs	r2, #0
 800293e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	699b      	ldr	r3, [r3, #24]
 8002946:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002952:	4b05      	ldr	r3, [pc, #20]	; (8002968 <HAL_PCDEx_ActivateLPM+0x44>)
 8002954:	4313      	orrs	r3, r2
 8002956:	68fa      	ldr	r2, [r7, #12]
 8002958:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800295a:	2300      	movs	r3, #0
}
 800295c:	4618      	mov	r0, r3
 800295e:	3714      	adds	r7, #20
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr
 8002968:	10000003 	.word	0x10000003

0800296c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800296c:	b480      	push	{r7}
 800296e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002970:	4b05      	ldr	r3, [pc, #20]	; (8002988 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a04      	ldr	r2, [pc, #16]	; (8002988 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002976:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800297a:	6013      	str	r3, [r2, #0]
}
 800297c:	bf00      	nop
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr
 8002986:	bf00      	nop
 8002988:	40007000 	.word	0x40007000

0800298c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b082      	sub	sp, #8
 8002990:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002992:	2300      	movs	r3, #0
 8002994:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002996:	4b23      	ldr	r3, [pc, #140]	; (8002a24 <HAL_PWREx_EnableOverDrive+0x98>)
 8002998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299a:	4a22      	ldr	r2, [pc, #136]	; (8002a24 <HAL_PWREx_EnableOverDrive+0x98>)
 800299c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029a0:	6413      	str	r3, [r2, #64]	; 0x40
 80029a2:	4b20      	ldr	r3, [pc, #128]	; (8002a24 <HAL_PWREx_EnableOverDrive+0x98>)
 80029a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029aa:	603b      	str	r3, [r7, #0]
 80029ac:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80029ae:	4b1e      	ldr	r3, [pc, #120]	; (8002a28 <HAL_PWREx_EnableOverDrive+0x9c>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a1d      	ldr	r2, [pc, #116]	; (8002a28 <HAL_PWREx_EnableOverDrive+0x9c>)
 80029b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029b8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80029ba:	f7fe f981 	bl	8000cc0 <HAL_GetTick>
 80029be:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80029c0:	e009      	b.n	80029d6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80029c2:	f7fe f97d 	bl	8000cc0 <HAL_GetTick>
 80029c6:	4602      	mov	r2, r0
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	1ad3      	subs	r3, r2, r3
 80029cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80029d0:	d901      	bls.n	80029d6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80029d2:	2303      	movs	r3, #3
 80029d4:	e022      	b.n	8002a1c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80029d6:	4b14      	ldr	r3, [pc, #80]	; (8002a28 <HAL_PWREx_EnableOverDrive+0x9c>)
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029e2:	d1ee      	bne.n	80029c2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80029e4:	4b10      	ldr	r3, [pc, #64]	; (8002a28 <HAL_PWREx_EnableOverDrive+0x9c>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a0f      	ldr	r2, [pc, #60]	; (8002a28 <HAL_PWREx_EnableOverDrive+0x9c>)
 80029ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029ee:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80029f0:	f7fe f966 	bl	8000cc0 <HAL_GetTick>
 80029f4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80029f6:	e009      	b.n	8002a0c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80029f8:	f7fe f962 	bl	8000cc0 <HAL_GetTick>
 80029fc:	4602      	mov	r2, r0
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	1ad3      	subs	r3, r2, r3
 8002a02:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002a06:	d901      	bls.n	8002a0c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002a08:	2303      	movs	r3, #3
 8002a0a:	e007      	b.n	8002a1c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002a0c:	4b06      	ldr	r3, [pc, #24]	; (8002a28 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a14:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002a18:	d1ee      	bne.n	80029f8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002a1a:	2300      	movs	r3, #0
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3708      	adds	r7, #8
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	40023800 	.word	0x40023800
 8002a28:	40007000 	.word	0x40007000

08002a2c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b086      	sub	sp, #24
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002a34:	2300      	movs	r3, #0
 8002a36:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d101      	bne.n	8002a42 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e291      	b.n	8002f66 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0301 	and.w	r3, r3, #1
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	f000 8087 	beq.w	8002b5e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a50:	4b96      	ldr	r3, [pc, #600]	; (8002cac <HAL_RCC_OscConfig+0x280>)
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	f003 030c 	and.w	r3, r3, #12
 8002a58:	2b04      	cmp	r3, #4
 8002a5a:	d00c      	beq.n	8002a76 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a5c:	4b93      	ldr	r3, [pc, #588]	; (8002cac <HAL_RCC_OscConfig+0x280>)
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	f003 030c 	and.w	r3, r3, #12
 8002a64:	2b08      	cmp	r3, #8
 8002a66:	d112      	bne.n	8002a8e <HAL_RCC_OscConfig+0x62>
 8002a68:	4b90      	ldr	r3, [pc, #576]	; (8002cac <HAL_RCC_OscConfig+0x280>)
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a70:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a74:	d10b      	bne.n	8002a8e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a76:	4b8d      	ldr	r3, [pc, #564]	; (8002cac <HAL_RCC_OscConfig+0x280>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d06c      	beq.n	8002b5c <HAL_RCC_OscConfig+0x130>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d168      	bne.n	8002b5c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e26b      	b.n	8002f66 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a96:	d106      	bne.n	8002aa6 <HAL_RCC_OscConfig+0x7a>
 8002a98:	4b84      	ldr	r3, [pc, #528]	; (8002cac <HAL_RCC_OscConfig+0x280>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a83      	ldr	r2, [pc, #524]	; (8002cac <HAL_RCC_OscConfig+0x280>)
 8002a9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002aa2:	6013      	str	r3, [r2, #0]
 8002aa4:	e02e      	b.n	8002b04 <HAL_RCC_OscConfig+0xd8>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d10c      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x9c>
 8002aae:	4b7f      	ldr	r3, [pc, #508]	; (8002cac <HAL_RCC_OscConfig+0x280>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a7e      	ldr	r2, [pc, #504]	; (8002cac <HAL_RCC_OscConfig+0x280>)
 8002ab4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ab8:	6013      	str	r3, [r2, #0]
 8002aba:	4b7c      	ldr	r3, [pc, #496]	; (8002cac <HAL_RCC_OscConfig+0x280>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a7b      	ldr	r2, [pc, #492]	; (8002cac <HAL_RCC_OscConfig+0x280>)
 8002ac0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ac4:	6013      	str	r3, [r2, #0]
 8002ac6:	e01d      	b.n	8002b04 <HAL_RCC_OscConfig+0xd8>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ad0:	d10c      	bne.n	8002aec <HAL_RCC_OscConfig+0xc0>
 8002ad2:	4b76      	ldr	r3, [pc, #472]	; (8002cac <HAL_RCC_OscConfig+0x280>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a75      	ldr	r2, [pc, #468]	; (8002cac <HAL_RCC_OscConfig+0x280>)
 8002ad8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002adc:	6013      	str	r3, [r2, #0]
 8002ade:	4b73      	ldr	r3, [pc, #460]	; (8002cac <HAL_RCC_OscConfig+0x280>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a72      	ldr	r2, [pc, #456]	; (8002cac <HAL_RCC_OscConfig+0x280>)
 8002ae4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ae8:	6013      	str	r3, [r2, #0]
 8002aea:	e00b      	b.n	8002b04 <HAL_RCC_OscConfig+0xd8>
 8002aec:	4b6f      	ldr	r3, [pc, #444]	; (8002cac <HAL_RCC_OscConfig+0x280>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a6e      	ldr	r2, [pc, #440]	; (8002cac <HAL_RCC_OscConfig+0x280>)
 8002af2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002af6:	6013      	str	r3, [r2, #0]
 8002af8:	4b6c      	ldr	r3, [pc, #432]	; (8002cac <HAL_RCC_OscConfig+0x280>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a6b      	ldr	r2, [pc, #428]	; (8002cac <HAL_RCC_OscConfig+0x280>)
 8002afe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d013      	beq.n	8002b34 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b0c:	f7fe f8d8 	bl	8000cc0 <HAL_GetTick>
 8002b10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b12:	e008      	b.n	8002b26 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b14:	f7fe f8d4 	bl	8000cc0 <HAL_GetTick>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	2b64      	cmp	r3, #100	; 0x64
 8002b20:	d901      	bls.n	8002b26 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002b22:	2303      	movs	r3, #3
 8002b24:	e21f      	b.n	8002f66 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b26:	4b61      	ldr	r3, [pc, #388]	; (8002cac <HAL_RCC_OscConfig+0x280>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d0f0      	beq.n	8002b14 <HAL_RCC_OscConfig+0xe8>
 8002b32:	e014      	b.n	8002b5e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b34:	f7fe f8c4 	bl	8000cc0 <HAL_GetTick>
 8002b38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b3a:	e008      	b.n	8002b4e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b3c:	f7fe f8c0 	bl	8000cc0 <HAL_GetTick>
 8002b40:	4602      	mov	r2, r0
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	1ad3      	subs	r3, r2, r3
 8002b46:	2b64      	cmp	r3, #100	; 0x64
 8002b48:	d901      	bls.n	8002b4e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002b4a:	2303      	movs	r3, #3
 8002b4c:	e20b      	b.n	8002f66 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b4e:	4b57      	ldr	r3, [pc, #348]	; (8002cac <HAL_RCC_OscConfig+0x280>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d1f0      	bne.n	8002b3c <HAL_RCC_OscConfig+0x110>
 8002b5a:	e000      	b.n	8002b5e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 0302 	and.w	r3, r3, #2
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d069      	beq.n	8002c3e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b6a:	4b50      	ldr	r3, [pc, #320]	; (8002cac <HAL_RCC_OscConfig+0x280>)
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	f003 030c 	and.w	r3, r3, #12
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d00b      	beq.n	8002b8e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b76:	4b4d      	ldr	r3, [pc, #308]	; (8002cac <HAL_RCC_OscConfig+0x280>)
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	f003 030c 	and.w	r3, r3, #12
 8002b7e:	2b08      	cmp	r3, #8
 8002b80:	d11c      	bne.n	8002bbc <HAL_RCC_OscConfig+0x190>
 8002b82:	4b4a      	ldr	r3, [pc, #296]	; (8002cac <HAL_RCC_OscConfig+0x280>)
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d116      	bne.n	8002bbc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b8e:	4b47      	ldr	r3, [pc, #284]	; (8002cac <HAL_RCC_OscConfig+0x280>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 0302 	and.w	r3, r3, #2
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d005      	beq.n	8002ba6 <HAL_RCC_OscConfig+0x17a>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	68db      	ldr	r3, [r3, #12]
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d001      	beq.n	8002ba6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e1df      	b.n	8002f66 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ba6:	4b41      	ldr	r3, [pc, #260]	; (8002cac <HAL_RCC_OscConfig+0x280>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	691b      	ldr	r3, [r3, #16]
 8002bb2:	00db      	lsls	r3, r3, #3
 8002bb4:	493d      	ldr	r1, [pc, #244]	; (8002cac <HAL_RCC_OscConfig+0x280>)
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bba:	e040      	b.n	8002c3e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	68db      	ldr	r3, [r3, #12]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d023      	beq.n	8002c0c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bc4:	4b39      	ldr	r3, [pc, #228]	; (8002cac <HAL_RCC_OscConfig+0x280>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a38      	ldr	r2, [pc, #224]	; (8002cac <HAL_RCC_OscConfig+0x280>)
 8002bca:	f043 0301 	orr.w	r3, r3, #1
 8002bce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bd0:	f7fe f876 	bl	8000cc0 <HAL_GetTick>
 8002bd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bd6:	e008      	b.n	8002bea <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bd8:	f7fe f872 	bl	8000cc0 <HAL_GetTick>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	2b02      	cmp	r3, #2
 8002be4:	d901      	bls.n	8002bea <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002be6:	2303      	movs	r3, #3
 8002be8:	e1bd      	b.n	8002f66 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bea:	4b30      	ldr	r3, [pc, #192]	; (8002cac <HAL_RCC_OscConfig+0x280>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 0302 	and.w	r3, r3, #2
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d0f0      	beq.n	8002bd8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bf6:	4b2d      	ldr	r3, [pc, #180]	; (8002cac <HAL_RCC_OscConfig+0x280>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	691b      	ldr	r3, [r3, #16]
 8002c02:	00db      	lsls	r3, r3, #3
 8002c04:	4929      	ldr	r1, [pc, #164]	; (8002cac <HAL_RCC_OscConfig+0x280>)
 8002c06:	4313      	orrs	r3, r2
 8002c08:	600b      	str	r3, [r1, #0]
 8002c0a:	e018      	b.n	8002c3e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c0c:	4b27      	ldr	r3, [pc, #156]	; (8002cac <HAL_RCC_OscConfig+0x280>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a26      	ldr	r2, [pc, #152]	; (8002cac <HAL_RCC_OscConfig+0x280>)
 8002c12:	f023 0301 	bic.w	r3, r3, #1
 8002c16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c18:	f7fe f852 	bl	8000cc0 <HAL_GetTick>
 8002c1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c1e:	e008      	b.n	8002c32 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c20:	f7fe f84e 	bl	8000cc0 <HAL_GetTick>
 8002c24:	4602      	mov	r2, r0
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	1ad3      	subs	r3, r2, r3
 8002c2a:	2b02      	cmp	r3, #2
 8002c2c:	d901      	bls.n	8002c32 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	e199      	b.n	8002f66 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c32:	4b1e      	ldr	r3, [pc, #120]	; (8002cac <HAL_RCC_OscConfig+0x280>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 0302 	and.w	r3, r3, #2
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d1f0      	bne.n	8002c20 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 0308 	and.w	r3, r3, #8
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d038      	beq.n	8002cbc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	695b      	ldr	r3, [r3, #20]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d019      	beq.n	8002c86 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c52:	4b16      	ldr	r3, [pc, #88]	; (8002cac <HAL_RCC_OscConfig+0x280>)
 8002c54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c56:	4a15      	ldr	r2, [pc, #84]	; (8002cac <HAL_RCC_OscConfig+0x280>)
 8002c58:	f043 0301 	orr.w	r3, r3, #1
 8002c5c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c5e:	f7fe f82f 	bl	8000cc0 <HAL_GetTick>
 8002c62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c64:	e008      	b.n	8002c78 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c66:	f7fe f82b 	bl	8000cc0 <HAL_GetTick>
 8002c6a:	4602      	mov	r2, r0
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	1ad3      	subs	r3, r2, r3
 8002c70:	2b02      	cmp	r3, #2
 8002c72:	d901      	bls.n	8002c78 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002c74:	2303      	movs	r3, #3
 8002c76:	e176      	b.n	8002f66 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c78:	4b0c      	ldr	r3, [pc, #48]	; (8002cac <HAL_RCC_OscConfig+0x280>)
 8002c7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c7c:	f003 0302 	and.w	r3, r3, #2
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d0f0      	beq.n	8002c66 <HAL_RCC_OscConfig+0x23a>
 8002c84:	e01a      	b.n	8002cbc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c86:	4b09      	ldr	r3, [pc, #36]	; (8002cac <HAL_RCC_OscConfig+0x280>)
 8002c88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c8a:	4a08      	ldr	r2, [pc, #32]	; (8002cac <HAL_RCC_OscConfig+0x280>)
 8002c8c:	f023 0301 	bic.w	r3, r3, #1
 8002c90:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c92:	f7fe f815 	bl	8000cc0 <HAL_GetTick>
 8002c96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c98:	e00a      	b.n	8002cb0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c9a:	f7fe f811 	bl	8000cc0 <HAL_GetTick>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	1ad3      	subs	r3, r2, r3
 8002ca4:	2b02      	cmp	r3, #2
 8002ca6:	d903      	bls.n	8002cb0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002ca8:	2303      	movs	r3, #3
 8002caa:	e15c      	b.n	8002f66 <HAL_RCC_OscConfig+0x53a>
 8002cac:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002cb0:	4b91      	ldr	r3, [pc, #580]	; (8002ef8 <HAL_RCC_OscConfig+0x4cc>)
 8002cb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cb4:	f003 0302 	and.w	r3, r3, #2
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d1ee      	bne.n	8002c9a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 0304 	and.w	r3, r3, #4
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	f000 80a4 	beq.w	8002e12 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cca:	4b8b      	ldr	r3, [pc, #556]	; (8002ef8 <HAL_RCC_OscConfig+0x4cc>)
 8002ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d10d      	bne.n	8002cf2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cd6:	4b88      	ldr	r3, [pc, #544]	; (8002ef8 <HAL_RCC_OscConfig+0x4cc>)
 8002cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cda:	4a87      	ldr	r2, [pc, #540]	; (8002ef8 <HAL_RCC_OscConfig+0x4cc>)
 8002cdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ce0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ce2:	4b85      	ldr	r3, [pc, #532]	; (8002ef8 <HAL_RCC_OscConfig+0x4cc>)
 8002ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cea:	60bb      	str	r3, [r7, #8]
 8002cec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cf2:	4b82      	ldr	r3, [pc, #520]	; (8002efc <HAL_RCC_OscConfig+0x4d0>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d118      	bne.n	8002d30 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002cfe:	4b7f      	ldr	r3, [pc, #508]	; (8002efc <HAL_RCC_OscConfig+0x4d0>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a7e      	ldr	r2, [pc, #504]	; (8002efc <HAL_RCC_OscConfig+0x4d0>)
 8002d04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d0a:	f7fd ffd9 	bl	8000cc0 <HAL_GetTick>
 8002d0e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d10:	e008      	b.n	8002d24 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d12:	f7fd ffd5 	bl	8000cc0 <HAL_GetTick>
 8002d16:	4602      	mov	r2, r0
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	1ad3      	subs	r3, r2, r3
 8002d1c:	2b64      	cmp	r3, #100	; 0x64
 8002d1e:	d901      	bls.n	8002d24 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002d20:	2303      	movs	r3, #3
 8002d22:	e120      	b.n	8002f66 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d24:	4b75      	ldr	r3, [pc, #468]	; (8002efc <HAL_RCC_OscConfig+0x4d0>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d0f0      	beq.n	8002d12 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d106      	bne.n	8002d46 <HAL_RCC_OscConfig+0x31a>
 8002d38:	4b6f      	ldr	r3, [pc, #444]	; (8002ef8 <HAL_RCC_OscConfig+0x4cc>)
 8002d3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d3c:	4a6e      	ldr	r2, [pc, #440]	; (8002ef8 <HAL_RCC_OscConfig+0x4cc>)
 8002d3e:	f043 0301 	orr.w	r3, r3, #1
 8002d42:	6713      	str	r3, [r2, #112]	; 0x70
 8002d44:	e02d      	b.n	8002da2 <HAL_RCC_OscConfig+0x376>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d10c      	bne.n	8002d68 <HAL_RCC_OscConfig+0x33c>
 8002d4e:	4b6a      	ldr	r3, [pc, #424]	; (8002ef8 <HAL_RCC_OscConfig+0x4cc>)
 8002d50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d52:	4a69      	ldr	r2, [pc, #420]	; (8002ef8 <HAL_RCC_OscConfig+0x4cc>)
 8002d54:	f023 0301 	bic.w	r3, r3, #1
 8002d58:	6713      	str	r3, [r2, #112]	; 0x70
 8002d5a:	4b67      	ldr	r3, [pc, #412]	; (8002ef8 <HAL_RCC_OscConfig+0x4cc>)
 8002d5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d5e:	4a66      	ldr	r2, [pc, #408]	; (8002ef8 <HAL_RCC_OscConfig+0x4cc>)
 8002d60:	f023 0304 	bic.w	r3, r3, #4
 8002d64:	6713      	str	r3, [r2, #112]	; 0x70
 8002d66:	e01c      	b.n	8002da2 <HAL_RCC_OscConfig+0x376>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	2b05      	cmp	r3, #5
 8002d6e:	d10c      	bne.n	8002d8a <HAL_RCC_OscConfig+0x35e>
 8002d70:	4b61      	ldr	r3, [pc, #388]	; (8002ef8 <HAL_RCC_OscConfig+0x4cc>)
 8002d72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d74:	4a60      	ldr	r2, [pc, #384]	; (8002ef8 <HAL_RCC_OscConfig+0x4cc>)
 8002d76:	f043 0304 	orr.w	r3, r3, #4
 8002d7a:	6713      	str	r3, [r2, #112]	; 0x70
 8002d7c:	4b5e      	ldr	r3, [pc, #376]	; (8002ef8 <HAL_RCC_OscConfig+0x4cc>)
 8002d7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d80:	4a5d      	ldr	r2, [pc, #372]	; (8002ef8 <HAL_RCC_OscConfig+0x4cc>)
 8002d82:	f043 0301 	orr.w	r3, r3, #1
 8002d86:	6713      	str	r3, [r2, #112]	; 0x70
 8002d88:	e00b      	b.n	8002da2 <HAL_RCC_OscConfig+0x376>
 8002d8a:	4b5b      	ldr	r3, [pc, #364]	; (8002ef8 <HAL_RCC_OscConfig+0x4cc>)
 8002d8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d8e:	4a5a      	ldr	r2, [pc, #360]	; (8002ef8 <HAL_RCC_OscConfig+0x4cc>)
 8002d90:	f023 0301 	bic.w	r3, r3, #1
 8002d94:	6713      	str	r3, [r2, #112]	; 0x70
 8002d96:	4b58      	ldr	r3, [pc, #352]	; (8002ef8 <HAL_RCC_OscConfig+0x4cc>)
 8002d98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d9a:	4a57      	ldr	r2, [pc, #348]	; (8002ef8 <HAL_RCC_OscConfig+0x4cc>)
 8002d9c:	f023 0304 	bic.w	r3, r3, #4
 8002da0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d015      	beq.n	8002dd6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002daa:	f7fd ff89 	bl	8000cc0 <HAL_GetTick>
 8002dae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002db0:	e00a      	b.n	8002dc8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002db2:	f7fd ff85 	bl	8000cc0 <HAL_GetTick>
 8002db6:	4602      	mov	r2, r0
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	1ad3      	subs	r3, r2, r3
 8002dbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d901      	bls.n	8002dc8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002dc4:	2303      	movs	r3, #3
 8002dc6:	e0ce      	b.n	8002f66 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dc8:	4b4b      	ldr	r3, [pc, #300]	; (8002ef8 <HAL_RCC_OscConfig+0x4cc>)
 8002dca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dcc:	f003 0302 	and.w	r3, r3, #2
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d0ee      	beq.n	8002db2 <HAL_RCC_OscConfig+0x386>
 8002dd4:	e014      	b.n	8002e00 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dd6:	f7fd ff73 	bl	8000cc0 <HAL_GetTick>
 8002dda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ddc:	e00a      	b.n	8002df4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dde:	f7fd ff6f 	bl	8000cc0 <HAL_GetTick>
 8002de2:	4602      	mov	r2, r0
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	1ad3      	subs	r3, r2, r3
 8002de8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d901      	bls.n	8002df4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002df0:	2303      	movs	r3, #3
 8002df2:	e0b8      	b.n	8002f66 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002df4:	4b40      	ldr	r3, [pc, #256]	; (8002ef8 <HAL_RCC_OscConfig+0x4cc>)
 8002df6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002df8:	f003 0302 	and.w	r3, r3, #2
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d1ee      	bne.n	8002dde <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002e00:	7dfb      	ldrb	r3, [r7, #23]
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d105      	bne.n	8002e12 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e06:	4b3c      	ldr	r3, [pc, #240]	; (8002ef8 <HAL_RCC_OscConfig+0x4cc>)
 8002e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0a:	4a3b      	ldr	r2, [pc, #236]	; (8002ef8 <HAL_RCC_OscConfig+0x4cc>)
 8002e0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e10:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	699b      	ldr	r3, [r3, #24]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	f000 80a4 	beq.w	8002f64 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e1c:	4b36      	ldr	r3, [pc, #216]	; (8002ef8 <HAL_RCC_OscConfig+0x4cc>)
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	f003 030c 	and.w	r3, r3, #12
 8002e24:	2b08      	cmp	r3, #8
 8002e26:	d06b      	beq.n	8002f00 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	699b      	ldr	r3, [r3, #24]
 8002e2c:	2b02      	cmp	r3, #2
 8002e2e:	d149      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e30:	4b31      	ldr	r3, [pc, #196]	; (8002ef8 <HAL_RCC_OscConfig+0x4cc>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a30      	ldr	r2, [pc, #192]	; (8002ef8 <HAL_RCC_OscConfig+0x4cc>)
 8002e36:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e3c:	f7fd ff40 	bl	8000cc0 <HAL_GetTick>
 8002e40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e42:	e008      	b.n	8002e56 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e44:	f7fd ff3c 	bl	8000cc0 <HAL_GetTick>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	d901      	bls.n	8002e56 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002e52:	2303      	movs	r3, #3
 8002e54:	e087      	b.n	8002f66 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e56:	4b28      	ldr	r3, [pc, #160]	; (8002ef8 <HAL_RCC_OscConfig+0x4cc>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d1f0      	bne.n	8002e44 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	69da      	ldr	r2, [r3, #28]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6a1b      	ldr	r3, [r3, #32]
 8002e6a:	431a      	orrs	r2, r3
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e70:	019b      	lsls	r3, r3, #6
 8002e72:	431a      	orrs	r2, r3
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e78:	085b      	lsrs	r3, r3, #1
 8002e7a:	3b01      	subs	r3, #1
 8002e7c:	041b      	lsls	r3, r3, #16
 8002e7e:	431a      	orrs	r2, r3
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e84:	061b      	lsls	r3, r3, #24
 8002e86:	4313      	orrs	r3, r2
 8002e88:	4a1b      	ldr	r2, [pc, #108]	; (8002ef8 <HAL_RCC_OscConfig+0x4cc>)
 8002e8a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002e8e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e90:	4b19      	ldr	r3, [pc, #100]	; (8002ef8 <HAL_RCC_OscConfig+0x4cc>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a18      	ldr	r2, [pc, #96]	; (8002ef8 <HAL_RCC_OscConfig+0x4cc>)
 8002e96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e9a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e9c:	f7fd ff10 	bl	8000cc0 <HAL_GetTick>
 8002ea0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ea2:	e008      	b.n	8002eb6 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ea4:	f7fd ff0c 	bl	8000cc0 <HAL_GetTick>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	1ad3      	subs	r3, r2, r3
 8002eae:	2b02      	cmp	r3, #2
 8002eb0:	d901      	bls.n	8002eb6 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002eb2:	2303      	movs	r3, #3
 8002eb4:	e057      	b.n	8002f66 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002eb6:	4b10      	ldr	r3, [pc, #64]	; (8002ef8 <HAL_RCC_OscConfig+0x4cc>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d0f0      	beq.n	8002ea4 <HAL_RCC_OscConfig+0x478>
 8002ec2:	e04f      	b.n	8002f64 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ec4:	4b0c      	ldr	r3, [pc, #48]	; (8002ef8 <HAL_RCC_OscConfig+0x4cc>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a0b      	ldr	r2, [pc, #44]	; (8002ef8 <HAL_RCC_OscConfig+0x4cc>)
 8002eca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ece:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ed0:	f7fd fef6 	bl	8000cc0 <HAL_GetTick>
 8002ed4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ed6:	e008      	b.n	8002eea <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ed8:	f7fd fef2 	bl	8000cc0 <HAL_GetTick>
 8002edc:	4602      	mov	r2, r0
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	1ad3      	subs	r3, r2, r3
 8002ee2:	2b02      	cmp	r3, #2
 8002ee4:	d901      	bls.n	8002eea <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002ee6:	2303      	movs	r3, #3
 8002ee8:	e03d      	b.n	8002f66 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eea:	4b03      	ldr	r3, [pc, #12]	; (8002ef8 <HAL_RCC_OscConfig+0x4cc>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d1f0      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x4ac>
 8002ef6:	e035      	b.n	8002f64 <HAL_RCC_OscConfig+0x538>
 8002ef8:	40023800 	.word	0x40023800
 8002efc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002f00:	4b1b      	ldr	r3, [pc, #108]	; (8002f70 <HAL_RCC_OscConfig+0x544>)
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	699b      	ldr	r3, [r3, #24]
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d028      	beq.n	8002f60 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d121      	bne.n	8002f60 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f26:	429a      	cmp	r2, r3
 8002f28:	d11a      	bne.n	8002f60 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f2a:	68fa      	ldr	r2, [r7, #12]
 8002f2c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002f30:	4013      	ands	r3, r2
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002f36:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d111      	bne.n	8002f60 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f46:	085b      	lsrs	r3, r3, #1
 8002f48:	3b01      	subs	r3, #1
 8002f4a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d107      	bne.n	8002f60 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f5a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	d001      	beq.n	8002f64 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	e000      	b.n	8002f66 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002f64:	2300      	movs	r3, #0
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	3718      	adds	r7, #24
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}
 8002f6e:	bf00      	nop
 8002f70:	40023800 	.word	0x40023800

08002f74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b084      	sub	sp, #16
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d101      	bne.n	8002f8c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	e0d0      	b.n	800312e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f8c:	4b6a      	ldr	r3, [pc, #424]	; (8003138 <HAL_RCC_ClockConfig+0x1c4>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f003 030f 	and.w	r3, r3, #15
 8002f94:	683a      	ldr	r2, [r7, #0]
 8002f96:	429a      	cmp	r2, r3
 8002f98:	d910      	bls.n	8002fbc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f9a:	4b67      	ldr	r3, [pc, #412]	; (8003138 <HAL_RCC_ClockConfig+0x1c4>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f023 020f 	bic.w	r2, r3, #15
 8002fa2:	4965      	ldr	r1, [pc, #404]	; (8003138 <HAL_RCC_ClockConfig+0x1c4>)
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002faa:	4b63      	ldr	r3, [pc, #396]	; (8003138 <HAL_RCC_ClockConfig+0x1c4>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 030f 	and.w	r3, r3, #15
 8002fb2:	683a      	ldr	r2, [r7, #0]
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d001      	beq.n	8002fbc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	e0b8      	b.n	800312e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 0302 	and.w	r3, r3, #2
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d020      	beq.n	800300a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 0304 	and.w	r3, r3, #4
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d005      	beq.n	8002fe0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002fd4:	4b59      	ldr	r3, [pc, #356]	; (800313c <HAL_RCC_ClockConfig+0x1c8>)
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	4a58      	ldr	r2, [pc, #352]	; (800313c <HAL_RCC_ClockConfig+0x1c8>)
 8002fda:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002fde:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 0308 	and.w	r3, r3, #8
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d005      	beq.n	8002ff8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002fec:	4b53      	ldr	r3, [pc, #332]	; (800313c <HAL_RCC_ClockConfig+0x1c8>)
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	4a52      	ldr	r2, [pc, #328]	; (800313c <HAL_RCC_ClockConfig+0x1c8>)
 8002ff2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002ff6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ff8:	4b50      	ldr	r3, [pc, #320]	; (800313c <HAL_RCC_ClockConfig+0x1c8>)
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	494d      	ldr	r1, [pc, #308]	; (800313c <HAL_RCC_ClockConfig+0x1c8>)
 8003006:	4313      	orrs	r3, r2
 8003008:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 0301 	and.w	r3, r3, #1
 8003012:	2b00      	cmp	r3, #0
 8003014:	d040      	beq.n	8003098 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	2b01      	cmp	r3, #1
 800301c:	d107      	bne.n	800302e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800301e:	4b47      	ldr	r3, [pc, #284]	; (800313c <HAL_RCC_ClockConfig+0x1c8>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003026:	2b00      	cmp	r3, #0
 8003028:	d115      	bne.n	8003056 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	e07f      	b.n	800312e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	2b02      	cmp	r3, #2
 8003034:	d107      	bne.n	8003046 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003036:	4b41      	ldr	r3, [pc, #260]	; (800313c <HAL_RCC_ClockConfig+0x1c8>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800303e:	2b00      	cmp	r3, #0
 8003040:	d109      	bne.n	8003056 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e073      	b.n	800312e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003046:	4b3d      	ldr	r3, [pc, #244]	; (800313c <HAL_RCC_ClockConfig+0x1c8>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 0302 	and.w	r3, r3, #2
 800304e:	2b00      	cmp	r3, #0
 8003050:	d101      	bne.n	8003056 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e06b      	b.n	800312e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003056:	4b39      	ldr	r3, [pc, #228]	; (800313c <HAL_RCC_ClockConfig+0x1c8>)
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	f023 0203 	bic.w	r2, r3, #3
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	4936      	ldr	r1, [pc, #216]	; (800313c <HAL_RCC_ClockConfig+0x1c8>)
 8003064:	4313      	orrs	r3, r2
 8003066:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003068:	f7fd fe2a 	bl	8000cc0 <HAL_GetTick>
 800306c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800306e:	e00a      	b.n	8003086 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003070:	f7fd fe26 	bl	8000cc0 <HAL_GetTick>
 8003074:	4602      	mov	r2, r0
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	f241 3288 	movw	r2, #5000	; 0x1388
 800307e:	4293      	cmp	r3, r2
 8003080:	d901      	bls.n	8003086 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003082:	2303      	movs	r3, #3
 8003084:	e053      	b.n	800312e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003086:	4b2d      	ldr	r3, [pc, #180]	; (800313c <HAL_RCC_ClockConfig+0x1c8>)
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	f003 020c 	and.w	r2, r3, #12
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	429a      	cmp	r2, r3
 8003096:	d1eb      	bne.n	8003070 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003098:	4b27      	ldr	r3, [pc, #156]	; (8003138 <HAL_RCC_ClockConfig+0x1c4>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 030f 	and.w	r3, r3, #15
 80030a0:	683a      	ldr	r2, [r7, #0]
 80030a2:	429a      	cmp	r2, r3
 80030a4:	d210      	bcs.n	80030c8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030a6:	4b24      	ldr	r3, [pc, #144]	; (8003138 <HAL_RCC_ClockConfig+0x1c4>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f023 020f 	bic.w	r2, r3, #15
 80030ae:	4922      	ldr	r1, [pc, #136]	; (8003138 <HAL_RCC_ClockConfig+0x1c4>)
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	4313      	orrs	r3, r2
 80030b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030b6:	4b20      	ldr	r3, [pc, #128]	; (8003138 <HAL_RCC_ClockConfig+0x1c4>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 030f 	and.w	r3, r3, #15
 80030be:	683a      	ldr	r2, [r7, #0]
 80030c0:	429a      	cmp	r2, r3
 80030c2:	d001      	beq.n	80030c8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	e032      	b.n	800312e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f003 0304 	and.w	r3, r3, #4
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d008      	beq.n	80030e6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030d4:	4b19      	ldr	r3, [pc, #100]	; (800313c <HAL_RCC_ClockConfig+0x1c8>)
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	4916      	ldr	r1, [pc, #88]	; (800313c <HAL_RCC_ClockConfig+0x1c8>)
 80030e2:	4313      	orrs	r3, r2
 80030e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 0308 	and.w	r3, r3, #8
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d009      	beq.n	8003106 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80030f2:	4b12      	ldr	r3, [pc, #72]	; (800313c <HAL_RCC_ClockConfig+0x1c8>)
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	691b      	ldr	r3, [r3, #16]
 80030fe:	00db      	lsls	r3, r3, #3
 8003100:	490e      	ldr	r1, [pc, #56]	; (800313c <HAL_RCC_ClockConfig+0x1c8>)
 8003102:	4313      	orrs	r3, r2
 8003104:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003106:	f000 f821 	bl	800314c <HAL_RCC_GetSysClockFreq>
 800310a:	4602      	mov	r2, r0
 800310c:	4b0b      	ldr	r3, [pc, #44]	; (800313c <HAL_RCC_ClockConfig+0x1c8>)
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	091b      	lsrs	r3, r3, #4
 8003112:	f003 030f 	and.w	r3, r3, #15
 8003116:	490a      	ldr	r1, [pc, #40]	; (8003140 <HAL_RCC_ClockConfig+0x1cc>)
 8003118:	5ccb      	ldrb	r3, [r1, r3]
 800311a:	fa22 f303 	lsr.w	r3, r2, r3
 800311e:	4a09      	ldr	r2, [pc, #36]	; (8003144 <HAL_RCC_ClockConfig+0x1d0>)
 8003120:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003122:	4b09      	ldr	r3, [pc, #36]	; (8003148 <HAL_RCC_ClockConfig+0x1d4>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4618      	mov	r0, r3
 8003128:	f7fd fd86 	bl	8000c38 <HAL_InitTick>

  return HAL_OK;
 800312c:	2300      	movs	r3, #0
}
 800312e:	4618      	mov	r0, r3
 8003130:	3710      	adds	r7, #16
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}
 8003136:	bf00      	nop
 8003138:	40023c00 	.word	0x40023c00
 800313c:	40023800 	.word	0x40023800
 8003140:	08008aac 	.word	0x08008aac
 8003144:	20000000 	.word	0x20000000
 8003148:	2000000c 	.word	0x2000000c

0800314c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800314c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003150:	b090      	sub	sp, #64	; 0x40
 8003152:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003154:	2300      	movs	r3, #0
 8003156:	637b      	str	r3, [r7, #52]	; 0x34
 8003158:	2300      	movs	r3, #0
 800315a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800315c:	2300      	movs	r3, #0
 800315e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8003160:	2300      	movs	r3, #0
 8003162:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003164:	4b59      	ldr	r3, [pc, #356]	; (80032cc <HAL_RCC_GetSysClockFreq+0x180>)
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	f003 030c 	and.w	r3, r3, #12
 800316c:	2b08      	cmp	r3, #8
 800316e:	d00d      	beq.n	800318c <HAL_RCC_GetSysClockFreq+0x40>
 8003170:	2b08      	cmp	r3, #8
 8003172:	f200 80a1 	bhi.w	80032b8 <HAL_RCC_GetSysClockFreq+0x16c>
 8003176:	2b00      	cmp	r3, #0
 8003178:	d002      	beq.n	8003180 <HAL_RCC_GetSysClockFreq+0x34>
 800317a:	2b04      	cmp	r3, #4
 800317c:	d003      	beq.n	8003186 <HAL_RCC_GetSysClockFreq+0x3a>
 800317e:	e09b      	b.n	80032b8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003180:	4b53      	ldr	r3, [pc, #332]	; (80032d0 <HAL_RCC_GetSysClockFreq+0x184>)
 8003182:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003184:	e09b      	b.n	80032be <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003186:	4b53      	ldr	r3, [pc, #332]	; (80032d4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003188:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800318a:	e098      	b.n	80032be <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800318c:	4b4f      	ldr	r3, [pc, #316]	; (80032cc <HAL_RCC_GetSysClockFreq+0x180>)
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003194:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003196:	4b4d      	ldr	r3, [pc, #308]	; (80032cc <HAL_RCC_GetSysClockFreq+0x180>)
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d028      	beq.n	80031f4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031a2:	4b4a      	ldr	r3, [pc, #296]	; (80032cc <HAL_RCC_GetSysClockFreq+0x180>)
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	099b      	lsrs	r3, r3, #6
 80031a8:	2200      	movs	r2, #0
 80031aa:	623b      	str	r3, [r7, #32]
 80031ac:	627a      	str	r2, [r7, #36]	; 0x24
 80031ae:	6a3b      	ldr	r3, [r7, #32]
 80031b0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80031b4:	2100      	movs	r1, #0
 80031b6:	4b47      	ldr	r3, [pc, #284]	; (80032d4 <HAL_RCC_GetSysClockFreq+0x188>)
 80031b8:	fb03 f201 	mul.w	r2, r3, r1
 80031bc:	2300      	movs	r3, #0
 80031be:	fb00 f303 	mul.w	r3, r0, r3
 80031c2:	4413      	add	r3, r2
 80031c4:	4a43      	ldr	r2, [pc, #268]	; (80032d4 <HAL_RCC_GetSysClockFreq+0x188>)
 80031c6:	fba0 1202 	umull	r1, r2, r0, r2
 80031ca:	62fa      	str	r2, [r7, #44]	; 0x2c
 80031cc:	460a      	mov	r2, r1
 80031ce:	62ba      	str	r2, [r7, #40]	; 0x28
 80031d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031d2:	4413      	add	r3, r2
 80031d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031d8:	2200      	movs	r2, #0
 80031da:	61bb      	str	r3, [r7, #24]
 80031dc:	61fa      	str	r2, [r7, #28]
 80031de:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80031e2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80031e6:	f7fd f863 	bl	80002b0 <__aeabi_uldivmod>
 80031ea:	4602      	mov	r2, r0
 80031ec:	460b      	mov	r3, r1
 80031ee:	4613      	mov	r3, r2
 80031f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031f2:	e053      	b.n	800329c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031f4:	4b35      	ldr	r3, [pc, #212]	; (80032cc <HAL_RCC_GetSysClockFreq+0x180>)
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	099b      	lsrs	r3, r3, #6
 80031fa:	2200      	movs	r2, #0
 80031fc:	613b      	str	r3, [r7, #16]
 80031fe:	617a      	str	r2, [r7, #20]
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003206:	f04f 0b00 	mov.w	fp, #0
 800320a:	4652      	mov	r2, sl
 800320c:	465b      	mov	r3, fp
 800320e:	f04f 0000 	mov.w	r0, #0
 8003212:	f04f 0100 	mov.w	r1, #0
 8003216:	0159      	lsls	r1, r3, #5
 8003218:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800321c:	0150      	lsls	r0, r2, #5
 800321e:	4602      	mov	r2, r0
 8003220:	460b      	mov	r3, r1
 8003222:	ebb2 080a 	subs.w	r8, r2, sl
 8003226:	eb63 090b 	sbc.w	r9, r3, fp
 800322a:	f04f 0200 	mov.w	r2, #0
 800322e:	f04f 0300 	mov.w	r3, #0
 8003232:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003236:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800323a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800323e:	ebb2 0408 	subs.w	r4, r2, r8
 8003242:	eb63 0509 	sbc.w	r5, r3, r9
 8003246:	f04f 0200 	mov.w	r2, #0
 800324a:	f04f 0300 	mov.w	r3, #0
 800324e:	00eb      	lsls	r3, r5, #3
 8003250:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003254:	00e2      	lsls	r2, r4, #3
 8003256:	4614      	mov	r4, r2
 8003258:	461d      	mov	r5, r3
 800325a:	eb14 030a 	adds.w	r3, r4, sl
 800325e:	603b      	str	r3, [r7, #0]
 8003260:	eb45 030b 	adc.w	r3, r5, fp
 8003264:	607b      	str	r3, [r7, #4]
 8003266:	f04f 0200 	mov.w	r2, #0
 800326a:	f04f 0300 	mov.w	r3, #0
 800326e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003272:	4629      	mov	r1, r5
 8003274:	028b      	lsls	r3, r1, #10
 8003276:	4621      	mov	r1, r4
 8003278:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800327c:	4621      	mov	r1, r4
 800327e:	028a      	lsls	r2, r1, #10
 8003280:	4610      	mov	r0, r2
 8003282:	4619      	mov	r1, r3
 8003284:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003286:	2200      	movs	r2, #0
 8003288:	60bb      	str	r3, [r7, #8]
 800328a:	60fa      	str	r2, [r7, #12]
 800328c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003290:	f7fd f80e 	bl	80002b0 <__aeabi_uldivmod>
 8003294:	4602      	mov	r2, r0
 8003296:	460b      	mov	r3, r1
 8003298:	4613      	mov	r3, r2
 800329a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800329c:	4b0b      	ldr	r3, [pc, #44]	; (80032cc <HAL_RCC_GetSysClockFreq+0x180>)
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	0c1b      	lsrs	r3, r3, #16
 80032a2:	f003 0303 	and.w	r3, r3, #3
 80032a6:	3301      	adds	r3, #1
 80032a8:	005b      	lsls	r3, r3, #1
 80032aa:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 80032ac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80032ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80032b4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80032b6:	e002      	b.n	80032be <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80032b8:	4b05      	ldr	r3, [pc, #20]	; (80032d0 <HAL_RCC_GetSysClockFreq+0x184>)
 80032ba:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80032bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	3740      	adds	r7, #64	; 0x40
 80032c4:	46bd      	mov	sp, r7
 80032c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80032ca:	bf00      	nop
 80032cc:	40023800 	.word	0x40023800
 80032d0:	00f42400 	.word	0x00f42400
 80032d4:	017d7840 	.word	0x017d7840

080032d8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032d8:	b480      	push	{r7}
 80032da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032dc:	4b03      	ldr	r3, [pc, #12]	; (80032ec <HAL_RCC_GetHCLKFreq+0x14>)
 80032de:	681b      	ldr	r3, [r3, #0]
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	46bd      	mov	sp, r7
 80032e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e8:	4770      	bx	lr
 80032ea:	bf00      	nop
 80032ec:	20000000 	.word	0x20000000

080032f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b088      	sub	sp, #32
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80032f8:	2300      	movs	r3, #0
 80032fa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80032fc:	2300      	movs	r3, #0
 80032fe:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003300:	2300      	movs	r3, #0
 8003302:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003304:	2300      	movs	r3, #0
 8003306:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003308:	2300      	movs	r3, #0
 800330a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 0301 	and.w	r3, r3, #1
 8003314:	2b00      	cmp	r3, #0
 8003316:	d012      	beq.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003318:	4b69      	ldr	r3, [pc, #420]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	4a68      	ldr	r2, [pc, #416]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800331e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003322:	6093      	str	r3, [r2, #8]
 8003324:	4b66      	ldr	r3, [pc, #408]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003326:	689a      	ldr	r2, [r3, #8]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800332c:	4964      	ldr	r1, [pc, #400]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800332e:	4313      	orrs	r3, r2
 8003330:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003336:	2b00      	cmp	r3, #0
 8003338:	d101      	bne.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800333a:	2301      	movs	r3, #1
 800333c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003346:	2b00      	cmp	r3, #0
 8003348:	d017      	beq.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800334a:	4b5d      	ldr	r3, [pc, #372]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800334c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003350:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003358:	4959      	ldr	r1, [pc, #356]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800335a:	4313      	orrs	r3, r2
 800335c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003364:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003368:	d101      	bne.n	800336e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800336a:	2301      	movs	r3, #1
 800336c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003372:	2b00      	cmp	r3, #0
 8003374:	d101      	bne.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003376:	2301      	movs	r3, #1
 8003378:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003382:	2b00      	cmp	r3, #0
 8003384:	d017      	beq.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003386:	4b4e      	ldr	r3, [pc, #312]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003388:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800338c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003394:	494a      	ldr	r1, [pc, #296]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003396:	4313      	orrs	r3, r2
 8003398:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80033a4:	d101      	bne.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80033a6:	2301      	movs	r3, #1
 80033a8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d101      	bne.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80033b2:	2301      	movs	r3, #1
 80033b4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d001      	beq.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80033c2:	2301      	movs	r3, #1
 80033c4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 0320 	and.w	r3, r3, #32
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	f000 808b 	beq.w	80034ea <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80033d4:	4b3a      	ldr	r3, [pc, #232]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d8:	4a39      	ldr	r2, [pc, #228]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033de:	6413      	str	r3, [r2, #64]	; 0x40
 80033e0:	4b37      	ldr	r3, [pc, #220]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033e8:	60bb      	str	r3, [r7, #8]
 80033ea:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80033ec:	4b35      	ldr	r3, [pc, #212]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a34      	ldr	r2, [pc, #208]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80033f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033f8:	f7fd fc62 	bl	8000cc0 <HAL_GetTick>
 80033fc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80033fe:	e008      	b.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003400:	f7fd fc5e 	bl	8000cc0 <HAL_GetTick>
 8003404:	4602      	mov	r2, r0
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	1ad3      	subs	r3, r2, r3
 800340a:	2b64      	cmp	r3, #100	; 0x64
 800340c:	d901      	bls.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800340e:	2303      	movs	r3, #3
 8003410:	e357      	b.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003412:	4b2c      	ldr	r3, [pc, #176]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800341a:	2b00      	cmp	r3, #0
 800341c:	d0f0      	beq.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800341e:	4b28      	ldr	r3, [pc, #160]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003420:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003422:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003426:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d035      	beq.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003432:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003436:	693a      	ldr	r2, [r7, #16]
 8003438:	429a      	cmp	r2, r3
 800343a:	d02e      	beq.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800343c:	4b20      	ldr	r3, [pc, #128]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800343e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003440:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003444:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003446:	4b1e      	ldr	r3, [pc, #120]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003448:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800344a:	4a1d      	ldr	r2, [pc, #116]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800344c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003450:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003452:	4b1b      	ldr	r3, [pc, #108]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003454:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003456:	4a1a      	ldr	r2, [pc, #104]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003458:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800345c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800345e:	4a18      	ldr	r2, [pc, #96]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003464:	4b16      	ldr	r3, [pc, #88]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003466:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003468:	f003 0301 	and.w	r3, r3, #1
 800346c:	2b01      	cmp	r3, #1
 800346e:	d114      	bne.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003470:	f7fd fc26 	bl	8000cc0 <HAL_GetTick>
 8003474:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003476:	e00a      	b.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003478:	f7fd fc22 	bl	8000cc0 <HAL_GetTick>
 800347c:	4602      	mov	r2, r0
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	1ad3      	subs	r3, r2, r3
 8003482:	f241 3288 	movw	r2, #5000	; 0x1388
 8003486:	4293      	cmp	r3, r2
 8003488:	d901      	bls.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800348a:	2303      	movs	r3, #3
 800348c:	e319      	b.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800348e:	4b0c      	ldr	r3, [pc, #48]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003490:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003492:	f003 0302 	and.w	r3, r3, #2
 8003496:	2b00      	cmp	r3, #0
 8003498:	d0ee      	beq.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800349e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80034a6:	d111      	bne.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80034a8:	4b05      	ldr	r3, [pc, #20]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80034b4:	4b04      	ldr	r3, [pc, #16]	; (80034c8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80034b6:	400b      	ands	r3, r1
 80034b8:	4901      	ldr	r1, [pc, #4]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034ba:	4313      	orrs	r3, r2
 80034bc:	608b      	str	r3, [r1, #8]
 80034be:	e00b      	b.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80034c0:	40023800 	.word	0x40023800
 80034c4:	40007000 	.word	0x40007000
 80034c8:	0ffffcff 	.word	0x0ffffcff
 80034cc:	4baa      	ldr	r3, [pc, #680]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	4aa9      	ldr	r2, [pc, #676]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034d2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80034d6:	6093      	str	r3, [r2, #8]
 80034d8:	4ba7      	ldr	r3, [pc, #668]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034da:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034e4:	49a4      	ldr	r1, [pc, #656]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034e6:	4313      	orrs	r3, r2
 80034e8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 0310 	and.w	r3, r3, #16
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d010      	beq.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80034f6:	4ba0      	ldr	r3, [pc, #640]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80034fc:	4a9e      	ldr	r2, [pc, #632]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003502:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003506:	4b9c      	ldr	r3, [pc, #624]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003508:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003510:	4999      	ldr	r1, [pc, #612]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003512:	4313      	orrs	r3, r2
 8003514:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003520:	2b00      	cmp	r3, #0
 8003522:	d00a      	beq.n	800353a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003524:	4b94      	ldr	r3, [pc, #592]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003526:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800352a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003532:	4991      	ldr	r1, [pc, #580]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003534:	4313      	orrs	r3, r2
 8003536:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003542:	2b00      	cmp	r3, #0
 8003544:	d00a      	beq.n	800355c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003546:	4b8c      	ldr	r3, [pc, #560]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003548:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800354c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003554:	4988      	ldr	r1, [pc, #544]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003556:	4313      	orrs	r3, r2
 8003558:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003564:	2b00      	cmp	r3, #0
 8003566:	d00a      	beq.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003568:	4b83      	ldr	r3, [pc, #524]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800356a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800356e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003576:	4980      	ldr	r1, [pc, #512]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003578:	4313      	orrs	r3, r2
 800357a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003586:	2b00      	cmp	r3, #0
 8003588:	d00a      	beq.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800358a:	4b7b      	ldr	r3, [pc, #492]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800358c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003590:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003598:	4977      	ldr	r1, [pc, #476]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800359a:	4313      	orrs	r3, r2
 800359c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d00a      	beq.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80035ac:	4b72      	ldr	r3, [pc, #456]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035b2:	f023 0203 	bic.w	r2, r3, #3
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ba:	496f      	ldr	r1, [pc, #444]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035bc:	4313      	orrs	r3, r2
 80035be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d00a      	beq.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80035ce:	4b6a      	ldr	r3, [pc, #424]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035d4:	f023 020c 	bic.w	r2, r3, #12
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035dc:	4966      	ldr	r1, [pc, #408]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035de:	4313      	orrs	r3, r2
 80035e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d00a      	beq.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80035f0:	4b61      	ldr	r3, [pc, #388]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035f6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035fe:	495e      	ldr	r1, [pc, #376]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003600:	4313      	orrs	r3, r2
 8003602:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800360e:	2b00      	cmp	r3, #0
 8003610:	d00a      	beq.n	8003628 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003612:	4b59      	ldr	r3, [pc, #356]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003614:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003618:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003620:	4955      	ldr	r1, [pc, #340]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003622:	4313      	orrs	r3, r2
 8003624:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003630:	2b00      	cmp	r3, #0
 8003632:	d00a      	beq.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003634:	4b50      	ldr	r3, [pc, #320]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003636:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800363a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003642:	494d      	ldr	r1, [pc, #308]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003644:	4313      	orrs	r3, r2
 8003646:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003652:	2b00      	cmp	r3, #0
 8003654:	d00a      	beq.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003656:	4b48      	ldr	r3, [pc, #288]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003658:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800365c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003664:	4944      	ldr	r1, [pc, #272]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003666:	4313      	orrs	r3, r2
 8003668:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003674:	2b00      	cmp	r3, #0
 8003676:	d00a      	beq.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003678:	4b3f      	ldr	r3, [pc, #252]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800367a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800367e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003686:	493c      	ldr	r1, [pc, #240]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003688:	4313      	orrs	r3, r2
 800368a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003696:	2b00      	cmp	r3, #0
 8003698:	d00a      	beq.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800369a:	4b37      	ldr	r3, [pc, #220]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800369c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036a0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036a8:	4933      	ldr	r1, [pc, #204]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036aa:	4313      	orrs	r3, r2
 80036ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d00a      	beq.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80036bc:	4b2e      	ldr	r3, [pc, #184]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036c2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80036ca:	492b      	ldr	r1, [pc, #172]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036cc:	4313      	orrs	r3, r2
 80036ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d011      	beq.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80036de:	4b26      	ldr	r3, [pc, #152]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036e4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80036ec:	4922      	ldr	r1, [pc, #136]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036ee:	4313      	orrs	r3, r2
 80036f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80036f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80036fc:	d101      	bne.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80036fe:	2301      	movs	r3, #1
 8003700:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 0308 	and.w	r3, r3, #8
 800370a:	2b00      	cmp	r3, #0
 800370c:	d001      	beq.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800370e:	2301      	movs	r3, #1
 8003710:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800371a:	2b00      	cmp	r3, #0
 800371c:	d00a      	beq.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800371e:	4b16      	ldr	r3, [pc, #88]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003720:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003724:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800372c:	4912      	ldr	r1, [pc, #72]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800372e:	4313      	orrs	r3, r2
 8003730:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800373c:	2b00      	cmp	r3, #0
 800373e:	d00b      	beq.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003740:	4b0d      	ldr	r3, [pc, #52]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003742:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003746:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003750:	4909      	ldr	r1, [pc, #36]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003752:	4313      	orrs	r3, r2
 8003754:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003758:	69fb      	ldr	r3, [r7, #28]
 800375a:	2b01      	cmp	r3, #1
 800375c:	d006      	beq.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003766:	2b00      	cmp	r3, #0
 8003768:	f000 80d9 	beq.w	800391e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800376c:	4b02      	ldr	r3, [pc, #8]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a01      	ldr	r2, [pc, #4]	; (8003778 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003772:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003776:	e001      	b.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8003778:	40023800 	.word	0x40023800
 800377c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800377e:	f7fd fa9f 	bl	8000cc0 <HAL_GetTick>
 8003782:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003784:	e008      	b.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003786:	f7fd fa9b 	bl	8000cc0 <HAL_GetTick>
 800378a:	4602      	mov	r2, r0
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	1ad3      	subs	r3, r2, r3
 8003790:	2b64      	cmp	r3, #100	; 0x64
 8003792:	d901      	bls.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003794:	2303      	movs	r3, #3
 8003796:	e194      	b.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003798:	4b6c      	ldr	r3, [pc, #432]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d1f0      	bne.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 0301 	and.w	r3, r3, #1
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d021      	beq.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d11d      	bne.n	80037f4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80037b8:	4b64      	ldr	r3, [pc, #400]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037be:	0c1b      	lsrs	r3, r3, #16
 80037c0:	f003 0303 	and.w	r3, r3, #3
 80037c4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80037c6:	4b61      	ldr	r3, [pc, #388]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037cc:	0e1b      	lsrs	r3, r3, #24
 80037ce:	f003 030f 	and.w	r3, r3, #15
 80037d2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	019a      	lsls	r2, r3, #6
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	041b      	lsls	r3, r3, #16
 80037de:	431a      	orrs	r2, r3
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	061b      	lsls	r3, r3, #24
 80037e4:	431a      	orrs	r2, r3
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	071b      	lsls	r3, r3, #28
 80037ec:	4957      	ldr	r1, [pc, #348]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037ee:	4313      	orrs	r3, r2
 80037f0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d004      	beq.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003804:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003808:	d00a      	beq.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003812:	2b00      	cmp	r3, #0
 8003814:	d02e      	beq.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800381a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800381e:	d129      	bne.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003820:	4b4a      	ldr	r3, [pc, #296]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003822:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003826:	0c1b      	lsrs	r3, r3, #16
 8003828:	f003 0303 	and.w	r3, r3, #3
 800382c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800382e:	4b47      	ldr	r3, [pc, #284]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003830:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003834:	0f1b      	lsrs	r3, r3, #28
 8003836:	f003 0307 	and.w	r3, r3, #7
 800383a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	019a      	lsls	r2, r3, #6
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	041b      	lsls	r3, r3, #16
 8003846:	431a      	orrs	r2, r3
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	68db      	ldr	r3, [r3, #12]
 800384c:	061b      	lsls	r3, r3, #24
 800384e:	431a      	orrs	r2, r3
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	071b      	lsls	r3, r3, #28
 8003854:	493d      	ldr	r1, [pc, #244]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003856:	4313      	orrs	r3, r2
 8003858:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800385c:	4b3b      	ldr	r3, [pc, #236]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800385e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003862:	f023 021f 	bic.w	r2, r3, #31
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800386a:	3b01      	subs	r3, #1
 800386c:	4937      	ldr	r1, [pc, #220]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800386e:	4313      	orrs	r3, r2
 8003870:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800387c:	2b00      	cmp	r3, #0
 800387e:	d01d      	beq.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003880:	4b32      	ldr	r3, [pc, #200]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003882:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003886:	0e1b      	lsrs	r3, r3, #24
 8003888:	f003 030f 	and.w	r3, r3, #15
 800388c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800388e:	4b2f      	ldr	r3, [pc, #188]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003890:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003894:	0f1b      	lsrs	r3, r3, #28
 8003896:	f003 0307 	and.w	r3, r3, #7
 800389a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	019a      	lsls	r2, r3, #6
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	691b      	ldr	r3, [r3, #16]
 80038a6:	041b      	lsls	r3, r3, #16
 80038a8:	431a      	orrs	r2, r3
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	061b      	lsls	r3, r3, #24
 80038ae:	431a      	orrs	r2, r3
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	071b      	lsls	r3, r3, #28
 80038b4:	4925      	ldr	r1, [pc, #148]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80038b6:	4313      	orrs	r3, r2
 80038b8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d011      	beq.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	019a      	lsls	r2, r3, #6
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	691b      	ldr	r3, [r3, #16]
 80038d2:	041b      	lsls	r3, r3, #16
 80038d4:	431a      	orrs	r2, r3
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	68db      	ldr	r3, [r3, #12]
 80038da:	061b      	lsls	r3, r3, #24
 80038dc:	431a      	orrs	r2, r3
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	071b      	lsls	r3, r3, #28
 80038e4:	4919      	ldr	r1, [pc, #100]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80038e6:	4313      	orrs	r3, r2
 80038e8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80038ec:	4b17      	ldr	r3, [pc, #92]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a16      	ldr	r2, [pc, #88]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80038f2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80038f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038f8:	f7fd f9e2 	bl	8000cc0 <HAL_GetTick>
 80038fc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80038fe:	e008      	b.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003900:	f7fd f9de 	bl	8000cc0 <HAL_GetTick>
 8003904:	4602      	mov	r2, r0
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	1ad3      	subs	r3, r2, r3
 800390a:	2b64      	cmp	r3, #100	; 0x64
 800390c:	d901      	bls.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800390e:	2303      	movs	r3, #3
 8003910:	e0d7      	b.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003912:	4b0e      	ldr	r3, [pc, #56]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800391a:	2b00      	cmp	r3, #0
 800391c:	d0f0      	beq.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800391e:	69bb      	ldr	r3, [r7, #24]
 8003920:	2b01      	cmp	r3, #1
 8003922:	f040 80cd 	bne.w	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003926:	4b09      	ldr	r3, [pc, #36]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a08      	ldr	r2, [pc, #32]	; (800394c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800392c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003930:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003932:	f7fd f9c5 	bl	8000cc0 <HAL_GetTick>
 8003936:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003938:	e00a      	b.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800393a:	f7fd f9c1 	bl	8000cc0 <HAL_GetTick>
 800393e:	4602      	mov	r2, r0
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	1ad3      	subs	r3, r2, r3
 8003944:	2b64      	cmp	r3, #100	; 0x64
 8003946:	d903      	bls.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003948:	2303      	movs	r3, #3
 800394a:	e0ba      	b.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800394c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003950:	4b5e      	ldr	r3, [pc, #376]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003958:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800395c:	d0ed      	beq.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003966:	2b00      	cmp	r3, #0
 8003968:	d003      	beq.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800396e:	2b00      	cmp	r3, #0
 8003970:	d009      	beq.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800397a:	2b00      	cmp	r3, #0
 800397c:	d02e      	beq.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003982:	2b00      	cmp	r3, #0
 8003984:	d12a      	bne.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003986:	4b51      	ldr	r3, [pc, #324]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003988:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800398c:	0c1b      	lsrs	r3, r3, #16
 800398e:	f003 0303 	and.w	r3, r3, #3
 8003992:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003994:	4b4d      	ldr	r3, [pc, #308]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003996:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800399a:	0f1b      	lsrs	r3, r3, #28
 800399c:	f003 0307 	and.w	r3, r3, #7
 80039a0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	695b      	ldr	r3, [r3, #20]
 80039a6:	019a      	lsls	r2, r3, #6
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	041b      	lsls	r3, r3, #16
 80039ac:	431a      	orrs	r2, r3
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	699b      	ldr	r3, [r3, #24]
 80039b2:	061b      	lsls	r3, r3, #24
 80039b4:	431a      	orrs	r2, r3
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	071b      	lsls	r3, r3, #28
 80039ba:	4944      	ldr	r1, [pc, #272]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80039bc:	4313      	orrs	r3, r2
 80039be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80039c2:	4b42      	ldr	r3, [pc, #264]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80039c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039c8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039d0:	3b01      	subs	r3, #1
 80039d2:	021b      	lsls	r3, r3, #8
 80039d4:	493d      	ldr	r1, [pc, #244]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80039d6:	4313      	orrs	r3, r2
 80039d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d022      	beq.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80039ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80039f0:	d11d      	bne.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80039f2:	4b36      	ldr	r3, [pc, #216]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80039f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039f8:	0e1b      	lsrs	r3, r3, #24
 80039fa:	f003 030f 	and.w	r3, r3, #15
 80039fe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003a00:	4b32      	ldr	r3, [pc, #200]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a06:	0f1b      	lsrs	r3, r3, #28
 8003a08:	f003 0307 	and.w	r3, r3, #7
 8003a0c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	695b      	ldr	r3, [r3, #20]
 8003a12:	019a      	lsls	r2, r3, #6
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6a1b      	ldr	r3, [r3, #32]
 8003a18:	041b      	lsls	r3, r3, #16
 8003a1a:	431a      	orrs	r2, r3
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	061b      	lsls	r3, r3, #24
 8003a20:	431a      	orrs	r2, r3
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	071b      	lsls	r3, r3, #28
 8003a26:	4929      	ldr	r1, [pc, #164]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f003 0308 	and.w	r3, r3, #8
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d028      	beq.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003a3a:	4b24      	ldr	r3, [pc, #144]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a40:	0e1b      	lsrs	r3, r3, #24
 8003a42:	f003 030f 	and.w	r3, r3, #15
 8003a46:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003a48:	4b20      	ldr	r3, [pc, #128]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a4e:	0c1b      	lsrs	r3, r3, #16
 8003a50:	f003 0303 	and.w	r3, r3, #3
 8003a54:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	695b      	ldr	r3, [r3, #20]
 8003a5a:	019a      	lsls	r2, r3, #6
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	041b      	lsls	r3, r3, #16
 8003a60:	431a      	orrs	r2, r3
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	061b      	lsls	r3, r3, #24
 8003a66:	431a      	orrs	r2, r3
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	69db      	ldr	r3, [r3, #28]
 8003a6c:	071b      	lsls	r3, r3, #28
 8003a6e:	4917      	ldr	r1, [pc, #92]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a70:	4313      	orrs	r3, r2
 8003a72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003a76:	4b15      	ldr	r3, [pc, #84]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a7c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a84:	4911      	ldr	r1, [pc, #68]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a86:	4313      	orrs	r3, r2
 8003a88:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003a8c:	4b0f      	ldr	r3, [pc, #60]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a0e      	ldr	r2, [pc, #56]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003a92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a96:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a98:	f7fd f912 	bl	8000cc0 <HAL_GetTick>
 8003a9c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003a9e:	e008      	b.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003aa0:	f7fd f90e 	bl	8000cc0 <HAL_GetTick>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	1ad3      	subs	r3, r2, r3
 8003aaa:	2b64      	cmp	r3, #100	; 0x64
 8003aac:	d901      	bls.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003aae:	2303      	movs	r3, #3
 8003ab0:	e007      	b.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003ab2:	4b06      	ldr	r3, [pc, #24]	; (8003acc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003aba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003abe:	d1ef      	bne.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003ac0:	2300      	movs	r3, #0
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	3720      	adds	r7, #32
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}
 8003aca:	bf00      	nop
 8003acc:	40023800 	.word	0x40023800

08003ad0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003ad0:	b084      	sub	sp, #16
 8003ad2:	b580      	push	{r7, lr}
 8003ad4:	b084      	sub	sp, #16
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	6078      	str	r0, [r7, #4]
 8003ada:	f107 001c 	add.w	r0, r7, #28
 8003ade:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d120      	bne.n	8003b2a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	68da      	ldr	r2, [r3, #12]
 8003af8:	4b20      	ldr	r3, [pc, #128]	; (8003b7c <USB_CoreInit+0xac>)
 8003afa:	4013      	ands	r3, r2
 8003afc:	687a      	ldr	r2, [r7, #4]
 8003afe:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	68db      	ldr	r3, [r3, #12]
 8003b04:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003b0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b0e:	2b01      	cmp	r3, #1
 8003b10:	d105      	bne.n	8003b1e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	68db      	ldr	r3, [r3, #12]
 8003b16:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f001 fbee 	bl	8005300 <USB_CoreReset>
 8003b24:	4603      	mov	r3, r0
 8003b26:	73fb      	strb	r3, [r7, #15]
 8003b28:	e010      	b.n	8003b4c <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	68db      	ldr	r3, [r3, #12]
 8003b2e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f001 fbe2 	bl	8005300 <USB_CoreReset>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b44:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8003b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b4e:	2b01      	cmp	r3, #1
 8003b50:	d10b      	bne.n	8003b6a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	f043 0206 	orr.w	r2, r3, #6
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	f043 0220 	orr.w	r2, r3, #32
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003b6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	3710      	adds	r7, #16
 8003b70:	46bd      	mov	sp, r7
 8003b72:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003b76:	b004      	add	sp, #16
 8003b78:	4770      	bx	lr
 8003b7a:	bf00      	nop
 8003b7c:	ffbdffbf 	.word	0xffbdffbf

08003b80 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b087      	sub	sp, #28
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	60f8      	str	r0, [r7, #12]
 8003b88:	60b9      	str	r1, [r7, #8]
 8003b8a:	4613      	mov	r3, r2
 8003b8c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003b8e:	79fb      	ldrb	r3, [r7, #7]
 8003b90:	2b02      	cmp	r3, #2
 8003b92:	d165      	bne.n	8003c60 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	4a41      	ldr	r2, [pc, #260]	; (8003c9c <USB_SetTurnaroundTime+0x11c>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d906      	bls.n	8003baa <USB_SetTurnaroundTime+0x2a>
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	4a40      	ldr	r2, [pc, #256]	; (8003ca0 <USB_SetTurnaroundTime+0x120>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d202      	bcs.n	8003baa <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003ba4:	230f      	movs	r3, #15
 8003ba6:	617b      	str	r3, [r7, #20]
 8003ba8:	e062      	b.n	8003c70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	4a3c      	ldr	r2, [pc, #240]	; (8003ca0 <USB_SetTurnaroundTime+0x120>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d306      	bcc.n	8003bc0 <USB_SetTurnaroundTime+0x40>
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	4a3b      	ldr	r2, [pc, #236]	; (8003ca4 <USB_SetTurnaroundTime+0x124>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d202      	bcs.n	8003bc0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003bba:	230e      	movs	r3, #14
 8003bbc:	617b      	str	r3, [r7, #20]
 8003bbe:	e057      	b.n	8003c70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	4a38      	ldr	r2, [pc, #224]	; (8003ca4 <USB_SetTurnaroundTime+0x124>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d306      	bcc.n	8003bd6 <USB_SetTurnaroundTime+0x56>
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	4a37      	ldr	r2, [pc, #220]	; (8003ca8 <USB_SetTurnaroundTime+0x128>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d202      	bcs.n	8003bd6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003bd0:	230d      	movs	r3, #13
 8003bd2:	617b      	str	r3, [r7, #20]
 8003bd4:	e04c      	b.n	8003c70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	4a33      	ldr	r2, [pc, #204]	; (8003ca8 <USB_SetTurnaroundTime+0x128>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d306      	bcc.n	8003bec <USB_SetTurnaroundTime+0x6c>
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	4a32      	ldr	r2, [pc, #200]	; (8003cac <USB_SetTurnaroundTime+0x12c>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d802      	bhi.n	8003bec <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003be6:	230c      	movs	r3, #12
 8003be8:	617b      	str	r3, [r7, #20]
 8003bea:	e041      	b.n	8003c70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	4a2f      	ldr	r2, [pc, #188]	; (8003cac <USB_SetTurnaroundTime+0x12c>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d906      	bls.n	8003c02 <USB_SetTurnaroundTime+0x82>
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	4a2e      	ldr	r2, [pc, #184]	; (8003cb0 <USB_SetTurnaroundTime+0x130>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d802      	bhi.n	8003c02 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003bfc:	230b      	movs	r3, #11
 8003bfe:	617b      	str	r3, [r7, #20]
 8003c00:	e036      	b.n	8003c70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	4a2a      	ldr	r2, [pc, #168]	; (8003cb0 <USB_SetTurnaroundTime+0x130>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d906      	bls.n	8003c18 <USB_SetTurnaroundTime+0x98>
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	4a29      	ldr	r2, [pc, #164]	; (8003cb4 <USB_SetTurnaroundTime+0x134>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d802      	bhi.n	8003c18 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003c12:	230a      	movs	r3, #10
 8003c14:	617b      	str	r3, [r7, #20]
 8003c16:	e02b      	b.n	8003c70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	4a26      	ldr	r2, [pc, #152]	; (8003cb4 <USB_SetTurnaroundTime+0x134>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d906      	bls.n	8003c2e <USB_SetTurnaroundTime+0xae>
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	4a25      	ldr	r2, [pc, #148]	; (8003cb8 <USB_SetTurnaroundTime+0x138>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d202      	bcs.n	8003c2e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003c28:	2309      	movs	r3, #9
 8003c2a:	617b      	str	r3, [r7, #20]
 8003c2c:	e020      	b.n	8003c70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	4a21      	ldr	r2, [pc, #132]	; (8003cb8 <USB_SetTurnaroundTime+0x138>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d306      	bcc.n	8003c44 <USB_SetTurnaroundTime+0xc4>
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	4a20      	ldr	r2, [pc, #128]	; (8003cbc <USB_SetTurnaroundTime+0x13c>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d802      	bhi.n	8003c44 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003c3e:	2308      	movs	r3, #8
 8003c40:	617b      	str	r3, [r7, #20]
 8003c42:	e015      	b.n	8003c70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	4a1d      	ldr	r2, [pc, #116]	; (8003cbc <USB_SetTurnaroundTime+0x13c>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d906      	bls.n	8003c5a <USB_SetTurnaroundTime+0xda>
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	4a1c      	ldr	r2, [pc, #112]	; (8003cc0 <USB_SetTurnaroundTime+0x140>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d202      	bcs.n	8003c5a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003c54:	2307      	movs	r3, #7
 8003c56:	617b      	str	r3, [r7, #20]
 8003c58:	e00a      	b.n	8003c70 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003c5a:	2306      	movs	r3, #6
 8003c5c:	617b      	str	r3, [r7, #20]
 8003c5e:	e007      	b.n	8003c70 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003c60:	79fb      	ldrb	r3, [r7, #7]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d102      	bne.n	8003c6c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003c66:	2309      	movs	r3, #9
 8003c68:	617b      	str	r3, [r7, #20]
 8003c6a:	e001      	b.n	8003c70 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003c6c:	2309      	movs	r3, #9
 8003c6e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	68db      	ldr	r3, [r3, #12]
 8003c74:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	68da      	ldr	r2, [r3, #12]
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	029b      	lsls	r3, r3, #10
 8003c84:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003c88:	431a      	orrs	r2, r3
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003c8e:	2300      	movs	r3, #0
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	371c      	adds	r7, #28
 8003c94:	46bd      	mov	sp, r7
 8003c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9a:	4770      	bx	lr
 8003c9c:	00d8acbf 	.word	0x00d8acbf
 8003ca0:	00e4e1c0 	.word	0x00e4e1c0
 8003ca4:	00f42400 	.word	0x00f42400
 8003ca8:	01067380 	.word	0x01067380
 8003cac:	011a499f 	.word	0x011a499f
 8003cb0:	01312cff 	.word	0x01312cff
 8003cb4:	014ca43f 	.word	0x014ca43f
 8003cb8:	016e3600 	.word	0x016e3600
 8003cbc:	01a6ab1f 	.word	0x01a6ab1f
 8003cc0:	01e84800 	.word	0x01e84800

08003cc4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b083      	sub	sp, #12
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	f043 0201 	orr.w	r2, r3, #1
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003cd8:	2300      	movs	r3, #0
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	370c      	adds	r7, #12
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce4:	4770      	bx	lr

08003ce6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003ce6:	b480      	push	{r7}
 8003ce8:	b083      	sub	sp, #12
 8003cea:	af00      	add	r7, sp, #0
 8003cec:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	f023 0201 	bic.w	r2, r3, #1
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003cfa:	2300      	movs	r3, #0
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	370c      	adds	r7, #12
 8003d00:	46bd      	mov	sp, r7
 8003d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d06:	4770      	bx	lr

08003d08 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b084      	sub	sp, #16
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
 8003d10:	460b      	mov	r3, r1
 8003d12:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003d14:	2300      	movs	r3, #0
 8003d16:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	68db      	ldr	r3, [r3, #12]
 8003d1c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003d24:	78fb      	ldrb	r3, [r7, #3]
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d115      	bne.n	8003d56 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	68db      	ldr	r3, [r3, #12]
 8003d2e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003d36:	2001      	movs	r0, #1
 8003d38:	f7fc ffce 	bl	8000cd8 <HAL_Delay>
      ms++;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	3301      	adds	r3, #1
 8003d40:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f001 fa4b 	bl	80051de <USB_GetMode>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	2b01      	cmp	r3, #1
 8003d4c:	d01e      	beq.n	8003d8c <USB_SetCurrentMode+0x84>
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2b31      	cmp	r3, #49	; 0x31
 8003d52:	d9f0      	bls.n	8003d36 <USB_SetCurrentMode+0x2e>
 8003d54:	e01a      	b.n	8003d8c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003d56:	78fb      	ldrb	r3, [r7, #3]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d115      	bne.n	8003d88 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003d68:	2001      	movs	r0, #1
 8003d6a:	f7fc ffb5 	bl	8000cd8 <HAL_Delay>
      ms++;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	3301      	adds	r3, #1
 8003d72:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003d74:	6878      	ldr	r0, [r7, #4]
 8003d76:	f001 fa32 	bl	80051de <USB_GetMode>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d005      	beq.n	8003d8c <USB_SetCurrentMode+0x84>
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2b31      	cmp	r3, #49	; 0x31
 8003d84:	d9f0      	bls.n	8003d68 <USB_SetCurrentMode+0x60>
 8003d86:	e001      	b.n	8003d8c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	e005      	b.n	8003d98 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2b32      	cmp	r3, #50	; 0x32
 8003d90:	d101      	bne.n	8003d96 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	e000      	b.n	8003d98 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003d96:	2300      	movs	r3, #0
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	3710      	adds	r7, #16
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}

08003da0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003da0:	b084      	sub	sp, #16
 8003da2:	b580      	push	{r7, lr}
 8003da4:	b086      	sub	sp, #24
 8003da6:	af00      	add	r7, sp, #0
 8003da8:	6078      	str	r0, [r7, #4]
 8003daa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003dae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003db2:	2300      	movs	r3, #0
 8003db4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003dba:	2300      	movs	r3, #0
 8003dbc:	613b      	str	r3, [r7, #16]
 8003dbe:	e009      	b.n	8003dd4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003dc0:	687a      	ldr	r2, [r7, #4]
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	3340      	adds	r3, #64	; 0x40
 8003dc6:	009b      	lsls	r3, r3, #2
 8003dc8:	4413      	add	r3, r2
 8003dca:	2200      	movs	r2, #0
 8003dcc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	3301      	adds	r3, #1
 8003dd2:	613b      	str	r3, [r7, #16]
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	2b0e      	cmp	r3, #14
 8003dd8:	d9f2      	bls.n	8003dc0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003dda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d11c      	bne.n	8003e1a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	68fa      	ldr	r2, [r7, #12]
 8003dea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003dee:	f043 0302 	orr.w	r3, r3, #2
 8003df2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003df8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	601a      	str	r2, [r3, #0]
 8003e18:	e005      	b.n	8003e26 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e1e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003e2c:	461a      	mov	r2, r3
 8003e2e:	2300      	movs	r3, #0
 8003e30:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e38:	4619      	mov	r1, r3
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e40:	461a      	mov	r2, r3
 8003e42:	680b      	ldr	r3, [r1, #0]
 8003e44:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	d10c      	bne.n	8003e66 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d104      	bne.n	8003e5c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003e52:	2100      	movs	r1, #0
 8003e54:	6878      	ldr	r0, [r7, #4]
 8003e56:	f000 f965 	bl	8004124 <USB_SetDevSpeed>
 8003e5a:	e008      	b.n	8003e6e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003e5c:	2101      	movs	r1, #1
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	f000 f960 	bl	8004124 <USB_SetDevSpeed>
 8003e64:	e003      	b.n	8003e6e <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003e66:	2103      	movs	r1, #3
 8003e68:	6878      	ldr	r0, [r7, #4]
 8003e6a:	f000 f95b 	bl	8004124 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003e6e:	2110      	movs	r1, #16
 8003e70:	6878      	ldr	r0, [r7, #4]
 8003e72:	f000 f8f3 	bl	800405c <USB_FlushTxFifo>
 8003e76:	4603      	mov	r3, r0
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d001      	beq.n	8003e80 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003e80:	6878      	ldr	r0, [r7, #4]
 8003e82:	f000 f91f 	bl	80040c4 <USB_FlushRxFifo>
 8003e86:	4603      	mov	r3, r0
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d001      	beq.n	8003e90 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e96:	461a      	mov	r2, r3
 8003e98:	2300      	movs	r3, #0
 8003e9a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ea2:	461a      	mov	r2, r3
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003eae:	461a      	mov	r2, r3
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	613b      	str	r3, [r7, #16]
 8003eb8:	e043      	b.n	8003f42 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	015a      	lsls	r2, r3, #5
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	4413      	add	r3, r2
 8003ec2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003ecc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ed0:	d118      	bne.n	8003f04 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d10a      	bne.n	8003eee <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	015a      	lsls	r2, r3, #5
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	4413      	add	r3, r2
 8003ee0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ee4:	461a      	mov	r2, r3
 8003ee6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003eea:	6013      	str	r3, [r2, #0]
 8003eec:	e013      	b.n	8003f16 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	015a      	lsls	r2, r3, #5
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	4413      	add	r3, r2
 8003ef6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003efa:	461a      	mov	r2, r3
 8003efc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003f00:	6013      	str	r3, [r2, #0]
 8003f02:	e008      	b.n	8003f16 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	015a      	lsls	r2, r3, #5
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	4413      	add	r3, r2
 8003f0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f10:	461a      	mov	r2, r3
 8003f12:	2300      	movs	r3, #0
 8003f14:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	015a      	lsls	r2, r3, #5
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	4413      	add	r3, r2
 8003f1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f22:	461a      	mov	r2, r3
 8003f24:	2300      	movs	r3, #0
 8003f26:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	015a      	lsls	r2, r3, #5
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	4413      	add	r3, r2
 8003f30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f34:	461a      	mov	r2, r3
 8003f36:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003f3a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	3301      	adds	r3, #1
 8003f40:	613b      	str	r3, [r7, #16]
 8003f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f44:	693a      	ldr	r2, [r7, #16]
 8003f46:	429a      	cmp	r2, r3
 8003f48:	d3b7      	bcc.n	8003eba <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	613b      	str	r3, [r7, #16]
 8003f4e:	e043      	b.n	8003fd8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	015a      	lsls	r2, r3, #5
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	4413      	add	r3, r2
 8003f58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003f62:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003f66:	d118      	bne.n	8003f9a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d10a      	bne.n	8003f84 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	015a      	lsls	r2, r3, #5
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	4413      	add	r3, r2
 8003f76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f7a:	461a      	mov	r2, r3
 8003f7c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003f80:	6013      	str	r3, [r2, #0]
 8003f82:	e013      	b.n	8003fac <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	015a      	lsls	r2, r3, #5
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	4413      	add	r3, r2
 8003f8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f90:	461a      	mov	r2, r3
 8003f92:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003f96:	6013      	str	r3, [r2, #0]
 8003f98:	e008      	b.n	8003fac <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	015a      	lsls	r2, r3, #5
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	4413      	add	r3, r2
 8003fa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fa6:	461a      	mov	r2, r3
 8003fa8:	2300      	movs	r3, #0
 8003faa:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	015a      	lsls	r2, r3, #5
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	4413      	add	r3, r2
 8003fb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fb8:	461a      	mov	r2, r3
 8003fba:	2300      	movs	r3, #0
 8003fbc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	015a      	lsls	r2, r3, #5
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	4413      	add	r3, r2
 8003fc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fca:	461a      	mov	r2, r3
 8003fcc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003fd0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	3301      	adds	r3, #1
 8003fd6:	613b      	str	r3, [r7, #16]
 8003fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fda:	693a      	ldr	r2, [r7, #16]
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	d3b7      	bcc.n	8003f50 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fe6:	691b      	ldr	r3, [r3, #16]
 8003fe8:	68fa      	ldr	r2, [r7, #12]
 8003fea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003fee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ff2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004000:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004004:	2b00      	cmp	r3, #0
 8004006:	d105      	bne.n	8004014 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	699b      	ldr	r3, [r3, #24]
 800400c:	f043 0210 	orr.w	r2, r3, #16
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	699a      	ldr	r2, [r3, #24]
 8004018:	4b0e      	ldr	r3, [pc, #56]	; (8004054 <USB_DevInit+0x2b4>)
 800401a:	4313      	orrs	r3, r2
 800401c:	687a      	ldr	r2, [r7, #4]
 800401e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004020:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004022:	2b00      	cmp	r3, #0
 8004024:	d005      	beq.n	8004032 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	699b      	ldr	r3, [r3, #24]
 800402a:	f043 0208 	orr.w	r2, r3, #8
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004032:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004034:	2b01      	cmp	r3, #1
 8004036:	d105      	bne.n	8004044 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	699a      	ldr	r2, [r3, #24]
 800403c:	4b06      	ldr	r3, [pc, #24]	; (8004058 <USB_DevInit+0x2b8>)
 800403e:	4313      	orrs	r3, r2
 8004040:	687a      	ldr	r2, [r7, #4]
 8004042:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004044:	7dfb      	ldrb	r3, [r7, #23]
}
 8004046:	4618      	mov	r0, r3
 8004048:	3718      	adds	r7, #24
 800404a:	46bd      	mov	sp, r7
 800404c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004050:	b004      	add	sp, #16
 8004052:	4770      	bx	lr
 8004054:	803c3800 	.word	0x803c3800
 8004058:	40000004 	.word	0x40000004

0800405c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800405c:	b480      	push	{r7}
 800405e:	b085      	sub	sp, #20
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
 8004064:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004066:	2300      	movs	r3, #0
 8004068:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	3301      	adds	r3, #1
 800406e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	4a13      	ldr	r2, [pc, #76]	; (80040c0 <USB_FlushTxFifo+0x64>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d901      	bls.n	800407c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004078:	2303      	movs	r3, #3
 800407a:	e01b      	b.n	80040b4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	691b      	ldr	r3, [r3, #16]
 8004080:	2b00      	cmp	r3, #0
 8004082:	daf2      	bge.n	800406a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004084:	2300      	movs	r3, #0
 8004086:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	019b      	lsls	r3, r3, #6
 800408c:	f043 0220 	orr.w	r2, r3, #32
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	3301      	adds	r3, #1
 8004098:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	4a08      	ldr	r2, [pc, #32]	; (80040c0 <USB_FlushTxFifo+0x64>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d901      	bls.n	80040a6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80040a2:	2303      	movs	r3, #3
 80040a4:	e006      	b.n	80040b4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	691b      	ldr	r3, [r3, #16]
 80040aa:	f003 0320 	and.w	r3, r3, #32
 80040ae:	2b20      	cmp	r3, #32
 80040b0:	d0f0      	beq.n	8004094 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80040b2:	2300      	movs	r3, #0
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	3714      	adds	r7, #20
 80040b8:	46bd      	mov	sp, r7
 80040ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040be:	4770      	bx	lr
 80040c0:	00030d40 	.word	0x00030d40

080040c4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b085      	sub	sp, #20
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80040cc:	2300      	movs	r3, #0
 80040ce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	3301      	adds	r3, #1
 80040d4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	4a11      	ldr	r2, [pc, #68]	; (8004120 <USB_FlushRxFifo+0x5c>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d901      	bls.n	80040e2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80040de:	2303      	movs	r3, #3
 80040e0:	e018      	b.n	8004114 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	691b      	ldr	r3, [r3, #16]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	daf2      	bge.n	80040d0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80040ea:	2300      	movs	r3, #0
 80040ec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2210      	movs	r2, #16
 80040f2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	3301      	adds	r3, #1
 80040f8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	4a08      	ldr	r2, [pc, #32]	; (8004120 <USB_FlushRxFifo+0x5c>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d901      	bls.n	8004106 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004102:	2303      	movs	r3, #3
 8004104:	e006      	b.n	8004114 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	691b      	ldr	r3, [r3, #16]
 800410a:	f003 0310 	and.w	r3, r3, #16
 800410e:	2b10      	cmp	r3, #16
 8004110:	d0f0      	beq.n	80040f4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004112:	2300      	movs	r3, #0
}
 8004114:	4618      	mov	r0, r3
 8004116:	3714      	adds	r7, #20
 8004118:	46bd      	mov	sp, r7
 800411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411e:	4770      	bx	lr
 8004120:	00030d40 	.word	0x00030d40

08004124 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004124:	b480      	push	{r7}
 8004126:	b085      	sub	sp, #20
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
 800412c:	460b      	mov	r3, r1
 800412e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	78fb      	ldrb	r3, [r7, #3]
 800413e:	68f9      	ldr	r1, [r7, #12]
 8004140:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004144:	4313      	orrs	r3, r2
 8004146:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004148:	2300      	movs	r3, #0
}
 800414a:	4618      	mov	r0, r3
 800414c:	3714      	adds	r7, #20
 800414e:	46bd      	mov	sp, r7
 8004150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004154:	4770      	bx	lr

08004156 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004156:	b480      	push	{r7}
 8004158:	b087      	sub	sp, #28
 800415a:	af00      	add	r7, sp, #0
 800415c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	f003 0306 	and.w	r3, r3, #6
 800416e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d102      	bne.n	800417c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004176:	2300      	movs	r3, #0
 8004178:	75fb      	strb	r3, [r7, #23]
 800417a:	e00a      	b.n	8004192 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	2b02      	cmp	r3, #2
 8004180:	d002      	beq.n	8004188 <USB_GetDevSpeed+0x32>
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	2b06      	cmp	r3, #6
 8004186:	d102      	bne.n	800418e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004188:	2302      	movs	r3, #2
 800418a:	75fb      	strb	r3, [r7, #23]
 800418c:	e001      	b.n	8004192 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800418e:	230f      	movs	r3, #15
 8004190:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004192:	7dfb      	ldrb	r3, [r7, #23]
}
 8004194:	4618      	mov	r0, r3
 8004196:	371c      	adds	r7, #28
 8004198:	46bd      	mov	sp, r7
 800419a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419e:	4770      	bx	lr

080041a0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80041a0:	b480      	push	{r7}
 80041a2:	b085      	sub	sp, #20
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
 80041a8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	781b      	ldrb	r3, [r3, #0]
 80041b2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	785b      	ldrb	r3, [r3, #1]
 80041b8:	2b01      	cmp	r3, #1
 80041ba:	d139      	bne.n	8004230 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041c2:	69da      	ldr	r2, [r3, #28]
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	781b      	ldrb	r3, [r3, #0]
 80041c8:	f003 030f 	and.w	r3, r3, #15
 80041cc:	2101      	movs	r1, #1
 80041ce:	fa01 f303 	lsl.w	r3, r1, r3
 80041d2:	b29b      	uxth	r3, r3
 80041d4:	68f9      	ldr	r1, [r7, #12]
 80041d6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80041da:	4313      	orrs	r3, r2
 80041dc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	015a      	lsls	r2, r3, #5
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	4413      	add	r3, r2
 80041e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d153      	bne.n	800429c <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	015a      	lsls	r2, r3, #5
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	4413      	add	r3, r2
 80041fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004200:	681a      	ldr	r2, [r3, #0]
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	68db      	ldr	r3, [r3, #12]
 8004206:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	791b      	ldrb	r3, [r3, #4]
 800420e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004210:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	059b      	lsls	r3, r3, #22
 8004216:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004218:	431a      	orrs	r2, r3
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	0159      	lsls	r1, r3, #5
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	440b      	add	r3, r1
 8004222:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004226:	4619      	mov	r1, r3
 8004228:	4b20      	ldr	r3, [pc, #128]	; (80042ac <USB_ActivateEndpoint+0x10c>)
 800422a:	4313      	orrs	r3, r2
 800422c:	600b      	str	r3, [r1, #0]
 800422e:	e035      	b.n	800429c <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004236:	69da      	ldr	r2, [r3, #28]
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	781b      	ldrb	r3, [r3, #0]
 800423c:	f003 030f 	and.w	r3, r3, #15
 8004240:	2101      	movs	r1, #1
 8004242:	fa01 f303 	lsl.w	r3, r1, r3
 8004246:	041b      	lsls	r3, r3, #16
 8004248:	68f9      	ldr	r1, [r7, #12]
 800424a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800424e:	4313      	orrs	r3, r2
 8004250:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	015a      	lsls	r2, r3, #5
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	4413      	add	r3, r2
 800425a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004264:	2b00      	cmp	r3, #0
 8004266:	d119      	bne.n	800429c <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	015a      	lsls	r2, r3, #5
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	4413      	add	r3, r2
 8004270:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004274:	681a      	ldr	r2, [r3, #0]
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	68db      	ldr	r3, [r3, #12]
 800427a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	791b      	ldrb	r3, [r3, #4]
 8004282:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004284:	430b      	orrs	r3, r1
 8004286:	431a      	orrs	r2, r3
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	0159      	lsls	r1, r3, #5
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	440b      	add	r3, r1
 8004290:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004294:	4619      	mov	r1, r3
 8004296:	4b05      	ldr	r3, [pc, #20]	; (80042ac <USB_ActivateEndpoint+0x10c>)
 8004298:	4313      	orrs	r3, r2
 800429a:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800429c:	2300      	movs	r3, #0
}
 800429e:	4618      	mov	r0, r3
 80042a0:	3714      	adds	r7, #20
 80042a2:	46bd      	mov	sp, r7
 80042a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a8:	4770      	bx	lr
 80042aa:	bf00      	nop
 80042ac:	10008000 	.word	0x10008000

080042b0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b085      	sub	sp, #20
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
 80042b8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	781b      	ldrb	r3, [r3, #0]
 80042c2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	785b      	ldrb	r3, [r3, #1]
 80042c8:	2b01      	cmp	r3, #1
 80042ca:	d161      	bne.n	8004390 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	015a      	lsls	r2, r3, #5
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	4413      	add	r3, r2
 80042d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80042de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80042e2:	d11f      	bne.n	8004324 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	015a      	lsls	r2, r3, #5
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	4413      	add	r3, r2
 80042ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	68ba      	ldr	r2, [r7, #8]
 80042f4:	0151      	lsls	r1, r2, #5
 80042f6:	68fa      	ldr	r2, [r7, #12]
 80042f8:	440a      	add	r2, r1
 80042fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042fe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004302:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	015a      	lsls	r2, r3, #5
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	4413      	add	r3, r2
 800430c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	68ba      	ldr	r2, [r7, #8]
 8004314:	0151      	lsls	r1, r2, #5
 8004316:	68fa      	ldr	r2, [r7, #12]
 8004318:	440a      	add	r2, r1
 800431a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800431e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004322:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800432a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	781b      	ldrb	r3, [r3, #0]
 8004330:	f003 030f 	and.w	r3, r3, #15
 8004334:	2101      	movs	r1, #1
 8004336:	fa01 f303 	lsl.w	r3, r1, r3
 800433a:	b29b      	uxth	r3, r3
 800433c:	43db      	mvns	r3, r3
 800433e:	68f9      	ldr	r1, [r7, #12]
 8004340:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004344:	4013      	ands	r3, r2
 8004346:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800434e:	69da      	ldr	r2, [r3, #28]
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	781b      	ldrb	r3, [r3, #0]
 8004354:	f003 030f 	and.w	r3, r3, #15
 8004358:	2101      	movs	r1, #1
 800435a:	fa01 f303 	lsl.w	r3, r1, r3
 800435e:	b29b      	uxth	r3, r3
 8004360:	43db      	mvns	r3, r3
 8004362:	68f9      	ldr	r1, [r7, #12]
 8004364:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004368:	4013      	ands	r3, r2
 800436a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	015a      	lsls	r2, r3, #5
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	4413      	add	r3, r2
 8004374:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004378:	681a      	ldr	r2, [r3, #0]
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	0159      	lsls	r1, r3, #5
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	440b      	add	r3, r1
 8004382:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004386:	4619      	mov	r1, r3
 8004388:	4b35      	ldr	r3, [pc, #212]	; (8004460 <USB_DeactivateEndpoint+0x1b0>)
 800438a:	4013      	ands	r3, r2
 800438c:	600b      	str	r3, [r1, #0]
 800438e:	e060      	b.n	8004452 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	015a      	lsls	r2, r3, #5
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	4413      	add	r3, r2
 8004398:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80043a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80043a6:	d11f      	bne.n	80043e8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	015a      	lsls	r2, r3, #5
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	4413      	add	r3, r2
 80043b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	68ba      	ldr	r2, [r7, #8]
 80043b8:	0151      	lsls	r1, r2, #5
 80043ba:	68fa      	ldr	r2, [r7, #12]
 80043bc:	440a      	add	r2, r1
 80043be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043c2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80043c6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	015a      	lsls	r2, r3, #5
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	4413      	add	r3, r2
 80043d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	68ba      	ldr	r2, [r7, #8]
 80043d8:	0151      	lsls	r1, r2, #5
 80043da:	68fa      	ldr	r2, [r7, #12]
 80043dc:	440a      	add	r2, r1
 80043de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043e2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80043e6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	781b      	ldrb	r3, [r3, #0]
 80043f4:	f003 030f 	and.w	r3, r3, #15
 80043f8:	2101      	movs	r1, #1
 80043fa:	fa01 f303 	lsl.w	r3, r1, r3
 80043fe:	041b      	lsls	r3, r3, #16
 8004400:	43db      	mvns	r3, r3
 8004402:	68f9      	ldr	r1, [r7, #12]
 8004404:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004408:	4013      	ands	r3, r2
 800440a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004412:	69da      	ldr	r2, [r3, #28]
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	781b      	ldrb	r3, [r3, #0]
 8004418:	f003 030f 	and.w	r3, r3, #15
 800441c:	2101      	movs	r1, #1
 800441e:	fa01 f303 	lsl.w	r3, r1, r3
 8004422:	041b      	lsls	r3, r3, #16
 8004424:	43db      	mvns	r3, r3
 8004426:	68f9      	ldr	r1, [r7, #12]
 8004428:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800442c:	4013      	ands	r3, r2
 800442e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	015a      	lsls	r2, r3, #5
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	4413      	add	r3, r2
 8004438:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800443c:	681a      	ldr	r2, [r3, #0]
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	0159      	lsls	r1, r3, #5
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	440b      	add	r3, r1
 8004446:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800444a:	4619      	mov	r1, r3
 800444c:	4b05      	ldr	r3, [pc, #20]	; (8004464 <USB_DeactivateEndpoint+0x1b4>)
 800444e:	4013      	ands	r3, r2
 8004450:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004452:	2300      	movs	r3, #0
}
 8004454:	4618      	mov	r0, r3
 8004456:	3714      	adds	r7, #20
 8004458:	46bd      	mov	sp, r7
 800445a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445e:	4770      	bx	lr
 8004460:	ec337800 	.word	0xec337800
 8004464:	eff37800 	.word	0xeff37800

08004468 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b08a      	sub	sp, #40	; 0x28
 800446c:	af02      	add	r7, sp, #8
 800446e:	60f8      	str	r0, [r7, #12]
 8004470:	60b9      	str	r1, [r7, #8]
 8004472:	4613      	mov	r3, r2
 8004474:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	781b      	ldrb	r3, [r3, #0]
 800447e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	785b      	ldrb	r3, [r3, #1]
 8004484:	2b01      	cmp	r3, #1
 8004486:	f040 8163 	bne.w	8004750 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	699b      	ldr	r3, [r3, #24]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d132      	bne.n	80044f8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004492:	69bb      	ldr	r3, [r7, #24]
 8004494:	015a      	lsls	r2, r3, #5
 8004496:	69fb      	ldr	r3, [r7, #28]
 8004498:	4413      	add	r3, r2
 800449a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800449e:	691a      	ldr	r2, [r3, #16]
 80044a0:	69bb      	ldr	r3, [r7, #24]
 80044a2:	0159      	lsls	r1, r3, #5
 80044a4:	69fb      	ldr	r3, [r7, #28]
 80044a6:	440b      	add	r3, r1
 80044a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044ac:	4619      	mov	r1, r3
 80044ae:	4ba5      	ldr	r3, [pc, #660]	; (8004744 <USB_EPStartXfer+0x2dc>)
 80044b0:	4013      	ands	r3, r2
 80044b2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80044b4:	69bb      	ldr	r3, [r7, #24]
 80044b6:	015a      	lsls	r2, r3, #5
 80044b8:	69fb      	ldr	r3, [r7, #28]
 80044ba:	4413      	add	r3, r2
 80044bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044c0:	691b      	ldr	r3, [r3, #16]
 80044c2:	69ba      	ldr	r2, [r7, #24]
 80044c4:	0151      	lsls	r1, r2, #5
 80044c6:	69fa      	ldr	r2, [r7, #28]
 80044c8:	440a      	add	r2, r1
 80044ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044ce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80044d2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80044d4:	69bb      	ldr	r3, [r7, #24]
 80044d6:	015a      	lsls	r2, r3, #5
 80044d8:	69fb      	ldr	r3, [r7, #28]
 80044da:	4413      	add	r3, r2
 80044dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044e0:	691a      	ldr	r2, [r3, #16]
 80044e2:	69bb      	ldr	r3, [r7, #24]
 80044e4:	0159      	lsls	r1, r3, #5
 80044e6:	69fb      	ldr	r3, [r7, #28]
 80044e8:	440b      	add	r3, r1
 80044ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044ee:	4619      	mov	r1, r3
 80044f0:	4b95      	ldr	r3, [pc, #596]	; (8004748 <USB_EPStartXfer+0x2e0>)
 80044f2:	4013      	ands	r3, r2
 80044f4:	610b      	str	r3, [r1, #16]
 80044f6:	e074      	b.n	80045e2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80044f8:	69bb      	ldr	r3, [r7, #24]
 80044fa:	015a      	lsls	r2, r3, #5
 80044fc:	69fb      	ldr	r3, [r7, #28]
 80044fe:	4413      	add	r3, r2
 8004500:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004504:	691a      	ldr	r2, [r3, #16]
 8004506:	69bb      	ldr	r3, [r7, #24]
 8004508:	0159      	lsls	r1, r3, #5
 800450a:	69fb      	ldr	r3, [r7, #28]
 800450c:	440b      	add	r3, r1
 800450e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004512:	4619      	mov	r1, r3
 8004514:	4b8c      	ldr	r3, [pc, #560]	; (8004748 <USB_EPStartXfer+0x2e0>)
 8004516:	4013      	ands	r3, r2
 8004518:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800451a:	69bb      	ldr	r3, [r7, #24]
 800451c:	015a      	lsls	r2, r3, #5
 800451e:	69fb      	ldr	r3, [r7, #28]
 8004520:	4413      	add	r3, r2
 8004522:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004526:	691a      	ldr	r2, [r3, #16]
 8004528:	69bb      	ldr	r3, [r7, #24]
 800452a:	0159      	lsls	r1, r3, #5
 800452c:	69fb      	ldr	r3, [r7, #28]
 800452e:	440b      	add	r3, r1
 8004530:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004534:	4619      	mov	r1, r3
 8004536:	4b83      	ldr	r3, [pc, #524]	; (8004744 <USB_EPStartXfer+0x2dc>)
 8004538:	4013      	ands	r3, r2
 800453a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800453c:	69bb      	ldr	r3, [r7, #24]
 800453e:	015a      	lsls	r2, r3, #5
 8004540:	69fb      	ldr	r3, [r7, #28]
 8004542:	4413      	add	r3, r2
 8004544:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004548:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	6999      	ldr	r1, [r3, #24]
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	68db      	ldr	r3, [r3, #12]
 8004552:	440b      	add	r3, r1
 8004554:	1e59      	subs	r1, r3, #1
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	68db      	ldr	r3, [r3, #12]
 800455a:	fbb1 f3f3 	udiv	r3, r1, r3
 800455e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004560:	4b7a      	ldr	r3, [pc, #488]	; (800474c <USB_EPStartXfer+0x2e4>)
 8004562:	400b      	ands	r3, r1
 8004564:	69b9      	ldr	r1, [r7, #24]
 8004566:	0148      	lsls	r0, r1, #5
 8004568:	69f9      	ldr	r1, [r7, #28]
 800456a:	4401      	add	r1, r0
 800456c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004570:	4313      	orrs	r3, r2
 8004572:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004574:	69bb      	ldr	r3, [r7, #24]
 8004576:	015a      	lsls	r2, r3, #5
 8004578:	69fb      	ldr	r3, [r7, #28]
 800457a:	4413      	add	r3, r2
 800457c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004580:	691a      	ldr	r2, [r3, #16]
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	699b      	ldr	r3, [r3, #24]
 8004586:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800458a:	69b9      	ldr	r1, [r7, #24]
 800458c:	0148      	lsls	r0, r1, #5
 800458e:	69f9      	ldr	r1, [r7, #28]
 8004590:	4401      	add	r1, r0
 8004592:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004596:	4313      	orrs	r3, r2
 8004598:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	791b      	ldrb	r3, [r3, #4]
 800459e:	2b01      	cmp	r3, #1
 80045a0:	d11f      	bne.n	80045e2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80045a2:	69bb      	ldr	r3, [r7, #24]
 80045a4:	015a      	lsls	r2, r3, #5
 80045a6:	69fb      	ldr	r3, [r7, #28]
 80045a8:	4413      	add	r3, r2
 80045aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045ae:	691b      	ldr	r3, [r3, #16]
 80045b0:	69ba      	ldr	r2, [r7, #24]
 80045b2:	0151      	lsls	r1, r2, #5
 80045b4:	69fa      	ldr	r2, [r7, #28]
 80045b6:	440a      	add	r2, r1
 80045b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045bc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80045c0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80045c2:	69bb      	ldr	r3, [r7, #24]
 80045c4:	015a      	lsls	r2, r3, #5
 80045c6:	69fb      	ldr	r3, [r7, #28]
 80045c8:	4413      	add	r3, r2
 80045ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045ce:	691b      	ldr	r3, [r3, #16]
 80045d0:	69ba      	ldr	r2, [r7, #24]
 80045d2:	0151      	lsls	r1, r2, #5
 80045d4:	69fa      	ldr	r2, [r7, #28]
 80045d6:	440a      	add	r2, r1
 80045d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045dc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80045e0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80045e2:	79fb      	ldrb	r3, [r7, #7]
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	d14b      	bne.n	8004680 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	695b      	ldr	r3, [r3, #20]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d009      	beq.n	8004604 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80045f0:	69bb      	ldr	r3, [r7, #24]
 80045f2:	015a      	lsls	r2, r3, #5
 80045f4:	69fb      	ldr	r3, [r7, #28]
 80045f6:	4413      	add	r3, r2
 80045f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045fc:	461a      	mov	r2, r3
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	695b      	ldr	r3, [r3, #20]
 8004602:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	791b      	ldrb	r3, [r3, #4]
 8004608:	2b01      	cmp	r3, #1
 800460a:	d128      	bne.n	800465e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800460c:	69fb      	ldr	r3, [r7, #28]
 800460e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004618:	2b00      	cmp	r3, #0
 800461a:	d110      	bne.n	800463e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800461c:	69bb      	ldr	r3, [r7, #24]
 800461e:	015a      	lsls	r2, r3, #5
 8004620:	69fb      	ldr	r3, [r7, #28]
 8004622:	4413      	add	r3, r2
 8004624:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	69ba      	ldr	r2, [r7, #24]
 800462c:	0151      	lsls	r1, r2, #5
 800462e:	69fa      	ldr	r2, [r7, #28]
 8004630:	440a      	add	r2, r1
 8004632:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004636:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800463a:	6013      	str	r3, [r2, #0]
 800463c:	e00f      	b.n	800465e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800463e:	69bb      	ldr	r3, [r7, #24]
 8004640:	015a      	lsls	r2, r3, #5
 8004642:	69fb      	ldr	r3, [r7, #28]
 8004644:	4413      	add	r3, r2
 8004646:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	69ba      	ldr	r2, [r7, #24]
 800464e:	0151      	lsls	r1, r2, #5
 8004650:	69fa      	ldr	r2, [r7, #28]
 8004652:	440a      	add	r2, r1
 8004654:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004658:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800465c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800465e:	69bb      	ldr	r3, [r7, #24]
 8004660:	015a      	lsls	r2, r3, #5
 8004662:	69fb      	ldr	r3, [r7, #28]
 8004664:	4413      	add	r3, r2
 8004666:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	69ba      	ldr	r2, [r7, #24]
 800466e:	0151      	lsls	r1, r2, #5
 8004670:	69fa      	ldr	r2, [r7, #28]
 8004672:	440a      	add	r2, r1
 8004674:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004678:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800467c:	6013      	str	r3, [r2, #0]
 800467e:	e137      	b.n	80048f0 <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004680:	69bb      	ldr	r3, [r7, #24]
 8004682:	015a      	lsls	r2, r3, #5
 8004684:	69fb      	ldr	r3, [r7, #28]
 8004686:	4413      	add	r3, r2
 8004688:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	69ba      	ldr	r2, [r7, #24]
 8004690:	0151      	lsls	r1, r2, #5
 8004692:	69fa      	ldr	r2, [r7, #28]
 8004694:	440a      	add	r2, r1
 8004696:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800469a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800469e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	791b      	ldrb	r3, [r3, #4]
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	d015      	beq.n	80046d4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	699b      	ldr	r3, [r3, #24]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	f000 811f 	beq.w	80048f0 <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80046b2:	69fb      	ldr	r3, [r7, #28]
 80046b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	781b      	ldrb	r3, [r3, #0]
 80046be:	f003 030f 	and.w	r3, r3, #15
 80046c2:	2101      	movs	r1, #1
 80046c4:	fa01 f303 	lsl.w	r3, r1, r3
 80046c8:	69f9      	ldr	r1, [r7, #28]
 80046ca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80046ce:	4313      	orrs	r3, r2
 80046d0:	634b      	str	r3, [r1, #52]	; 0x34
 80046d2:	e10d      	b.n	80048f0 <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80046d4:	69fb      	ldr	r3, [r7, #28]
 80046d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d110      	bne.n	8004706 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80046e4:	69bb      	ldr	r3, [r7, #24]
 80046e6:	015a      	lsls	r2, r3, #5
 80046e8:	69fb      	ldr	r3, [r7, #28]
 80046ea:	4413      	add	r3, r2
 80046ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	69ba      	ldr	r2, [r7, #24]
 80046f4:	0151      	lsls	r1, r2, #5
 80046f6:	69fa      	ldr	r2, [r7, #28]
 80046f8:	440a      	add	r2, r1
 80046fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046fe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004702:	6013      	str	r3, [r2, #0]
 8004704:	e00f      	b.n	8004726 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004706:	69bb      	ldr	r3, [r7, #24]
 8004708:	015a      	lsls	r2, r3, #5
 800470a:	69fb      	ldr	r3, [r7, #28]
 800470c:	4413      	add	r3, r2
 800470e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	69ba      	ldr	r2, [r7, #24]
 8004716:	0151      	lsls	r1, r2, #5
 8004718:	69fa      	ldr	r2, [r7, #28]
 800471a:	440a      	add	r2, r1
 800471c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004720:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004724:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	6919      	ldr	r1, [r3, #16]
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	781a      	ldrb	r2, [r3, #0]
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	699b      	ldr	r3, [r3, #24]
 8004732:	b298      	uxth	r0, r3
 8004734:	79fb      	ldrb	r3, [r7, #7]
 8004736:	9300      	str	r3, [sp, #0]
 8004738:	4603      	mov	r3, r0
 800473a:	68f8      	ldr	r0, [r7, #12]
 800473c:	f000 faea 	bl	8004d14 <USB_WritePacket>
 8004740:	e0d6      	b.n	80048f0 <USB_EPStartXfer+0x488>
 8004742:	bf00      	nop
 8004744:	e007ffff 	.word	0xe007ffff
 8004748:	fff80000 	.word	0xfff80000
 800474c:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004750:	69bb      	ldr	r3, [r7, #24]
 8004752:	015a      	lsls	r2, r3, #5
 8004754:	69fb      	ldr	r3, [r7, #28]
 8004756:	4413      	add	r3, r2
 8004758:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800475c:	691a      	ldr	r2, [r3, #16]
 800475e:	69bb      	ldr	r3, [r7, #24]
 8004760:	0159      	lsls	r1, r3, #5
 8004762:	69fb      	ldr	r3, [r7, #28]
 8004764:	440b      	add	r3, r1
 8004766:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800476a:	4619      	mov	r1, r3
 800476c:	4b63      	ldr	r3, [pc, #396]	; (80048fc <USB_EPStartXfer+0x494>)
 800476e:	4013      	ands	r3, r2
 8004770:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004772:	69bb      	ldr	r3, [r7, #24]
 8004774:	015a      	lsls	r2, r3, #5
 8004776:	69fb      	ldr	r3, [r7, #28]
 8004778:	4413      	add	r3, r2
 800477a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800477e:	691a      	ldr	r2, [r3, #16]
 8004780:	69bb      	ldr	r3, [r7, #24]
 8004782:	0159      	lsls	r1, r3, #5
 8004784:	69fb      	ldr	r3, [r7, #28]
 8004786:	440b      	add	r3, r1
 8004788:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800478c:	4619      	mov	r1, r3
 800478e:	4b5c      	ldr	r3, [pc, #368]	; (8004900 <USB_EPStartXfer+0x498>)
 8004790:	4013      	ands	r3, r2
 8004792:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	699b      	ldr	r3, [r3, #24]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d123      	bne.n	80047e4 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800479c:	69bb      	ldr	r3, [r7, #24]
 800479e:	015a      	lsls	r2, r3, #5
 80047a0:	69fb      	ldr	r3, [r7, #28]
 80047a2:	4413      	add	r3, r2
 80047a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047a8:	691a      	ldr	r2, [r3, #16]
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	68db      	ldr	r3, [r3, #12]
 80047ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047b2:	69b9      	ldr	r1, [r7, #24]
 80047b4:	0148      	lsls	r0, r1, #5
 80047b6:	69f9      	ldr	r1, [r7, #28]
 80047b8:	4401      	add	r1, r0
 80047ba:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80047be:	4313      	orrs	r3, r2
 80047c0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80047c2:	69bb      	ldr	r3, [r7, #24]
 80047c4:	015a      	lsls	r2, r3, #5
 80047c6:	69fb      	ldr	r3, [r7, #28]
 80047c8:	4413      	add	r3, r2
 80047ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047ce:	691b      	ldr	r3, [r3, #16]
 80047d0:	69ba      	ldr	r2, [r7, #24]
 80047d2:	0151      	lsls	r1, r2, #5
 80047d4:	69fa      	ldr	r2, [r7, #28]
 80047d6:	440a      	add	r2, r1
 80047d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047dc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80047e0:	6113      	str	r3, [r2, #16]
 80047e2:	e037      	b.n	8004854 <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	699a      	ldr	r2, [r3, #24]
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	68db      	ldr	r3, [r3, #12]
 80047ec:	4413      	add	r3, r2
 80047ee:	1e5a      	subs	r2, r3, #1
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	68db      	ldr	r3, [r3, #12]
 80047f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80047f8:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	68db      	ldr	r3, [r3, #12]
 80047fe:	8afa      	ldrh	r2, [r7, #22]
 8004800:	fb03 f202 	mul.w	r2, r3, r2
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004808:	69bb      	ldr	r3, [r7, #24]
 800480a:	015a      	lsls	r2, r3, #5
 800480c:	69fb      	ldr	r3, [r7, #28]
 800480e:	4413      	add	r3, r2
 8004810:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004814:	691a      	ldr	r2, [r3, #16]
 8004816:	8afb      	ldrh	r3, [r7, #22]
 8004818:	04d9      	lsls	r1, r3, #19
 800481a:	4b3a      	ldr	r3, [pc, #232]	; (8004904 <USB_EPStartXfer+0x49c>)
 800481c:	400b      	ands	r3, r1
 800481e:	69b9      	ldr	r1, [r7, #24]
 8004820:	0148      	lsls	r0, r1, #5
 8004822:	69f9      	ldr	r1, [r7, #28]
 8004824:	4401      	add	r1, r0
 8004826:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800482a:	4313      	orrs	r3, r2
 800482c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800482e:	69bb      	ldr	r3, [r7, #24]
 8004830:	015a      	lsls	r2, r3, #5
 8004832:	69fb      	ldr	r3, [r7, #28]
 8004834:	4413      	add	r3, r2
 8004836:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800483a:	691a      	ldr	r2, [r3, #16]
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	69db      	ldr	r3, [r3, #28]
 8004840:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004844:	69b9      	ldr	r1, [r7, #24]
 8004846:	0148      	lsls	r0, r1, #5
 8004848:	69f9      	ldr	r1, [r7, #28]
 800484a:	4401      	add	r1, r0
 800484c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004850:	4313      	orrs	r3, r2
 8004852:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004854:	79fb      	ldrb	r3, [r7, #7]
 8004856:	2b01      	cmp	r3, #1
 8004858:	d10d      	bne.n	8004876 <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	691b      	ldr	r3, [r3, #16]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d009      	beq.n	8004876 <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	6919      	ldr	r1, [r3, #16]
 8004866:	69bb      	ldr	r3, [r7, #24]
 8004868:	015a      	lsls	r2, r3, #5
 800486a:	69fb      	ldr	r3, [r7, #28]
 800486c:	4413      	add	r3, r2
 800486e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004872:	460a      	mov	r2, r1
 8004874:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	791b      	ldrb	r3, [r3, #4]
 800487a:	2b01      	cmp	r3, #1
 800487c:	d128      	bne.n	80048d0 <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800487e:	69fb      	ldr	r3, [r7, #28]
 8004880:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800488a:	2b00      	cmp	r3, #0
 800488c:	d110      	bne.n	80048b0 <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800488e:	69bb      	ldr	r3, [r7, #24]
 8004890:	015a      	lsls	r2, r3, #5
 8004892:	69fb      	ldr	r3, [r7, #28]
 8004894:	4413      	add	r3, r2
 8004896:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	69ba      	ldr	r2, [r7, #24]
 800489e:	0151      	lsls	r1, r2, #5
 80048a0:	69fa      	ldr	r2, [r7, #28]
 80048a2:	440a      	add	r2, r1
 80048a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048a8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80048ac:	6013      	str	r3, [r2, #0]
 80048ae:	e00f      	b.n	80048d0 <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80048b0:	69bb      	ldr	r3, [r7, #24]
 80048b2:	015a      	lsls	r2, r3, #5
 80048b4:	69fb      	ldr	r3, [r7, #28]
 80048b6:	4413      	add	r3, r2
 80048b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	69ba      	ldr	r2, [r7, #24]
 80048c0:	0151      	lsls	r1, r2, #5
 80048c2:	69fa      	ldr	r2, [r7, #28]
 80048c4:	440a      	add	r2, r1
 80048c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048ce:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80048d0:	69bb      	ldr	r3, [r7, #24]
 80048d2:	015a      	lsls	r2, r3, #5
 80048d4:	69fb      	ldr	r3, [r7, #28]
 80048d6:	4413      	add	r3, r2
 80048d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	69ba      	ldr	r2, [r7, #24]
 80048e0:	0151      	lsls	r1, r2, #5
 80048e2:	69fa      	ldr	r2, [r7, #28]
 80048e4:	440a      	add	r2, r1
 80048e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048ea:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80048ee:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80048f0:	2300      	movs	r3, #0
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	3720      	adds	r7, #32
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bd80      	pop	{r7, pc}
 80048fa:	bf00      	nop
 80048fc:	fff80000 	.word	0xfff80000
 8004900:	e007ffff 	.word	0xe007ffff
 8004904:	1ff80000 	.word	0x1ff80000

08004908 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004908:	b480      	push	{r7}
 800490a:	b087      	sub	sp, #28
 800490c:	af00      	add	r7, sp, #0
 800490e:	60f8      	str	r0, [r7, #12]
 8004910:	60b9      	str	r1, [r7, #8]
 8004912:	4613      	mov	r3, r2
 8004914:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	781b      	ldrb	r3, [r3, #0]
 800491e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	785b      	ldrb	r3, [r3, #1]
 8004924:	2b01      	cmp	r3, #1
 8004926:	f040 80ce 	bne.w	8004ac6 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	699b      	ldr	r3, [r3, #24]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d132      	bne.n	8004998 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	015a      	lsls	r2, r3, #5
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	4413      	add	r3, r2
 800493a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800493e:	691a      	ldr	r2, [r3, #16]
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	0159      	lsls	r1, r3, #5
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	440b      	add	r3, r1
 8004948:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800494c:	4619      	mov	r1, r3
 800494e:	4b9a      	ldr	r3, [pc, #616]	; (8004bb8 <USB_EP0StartXfer+0x2b0>)
 8004950:	4013      	ands	r3, r2
 8004952:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	015a      	lsls	r2, r3, #5
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	4413      	add	r3, r2
 800495c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004960:	691b      	ldr	r3, [r3, #16]
 8004962:	693a      	ldr	r2, [r7, #16]
 8004964:	0151      	lsls	r1, r2, #5
 8004966:	697a      	ldr	r2, [r7, #20]
 8004968:	440a      	add	r2, r1
 800496a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800496e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004972:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	015a      	lsls	r2, r3, #5
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	4413      	add	r3, r2
 800497c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004980:	691a      	ldr	r2, [r3, #16]
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	0159      	lsls	r1, r3, #5
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	440b      	add	r3, r1
 800498a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800498e:	4619      	mov	r1, r3
 8004990:	4b8a      	ldr	r3, [pc, #552]	; (8004bbc <USB_EP0StartXfer+0x2b4>)
 8004992:	4013      	ands	r3, r2
 8004994:	610b      	str	r3, [r1, #16]
 8004996:	e04e      	b.n	8004a36 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	015a      	lsls	r2, r3, #5
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	4413      	add	r3, r2
 80049a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049a4:	691a      	ldr	r2, [r3, #16]
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	0159      	lsls	r1, r3, #5
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	440b      	add	r3, r1
 80049ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049b2:	4619      	mov	r1, r3
 80049b4:	4b81      	ldr	r3, [pc, #516]	; (8004bbc <USB_EP0StartXfer+0x2b4>)
 80049b6:	4013      	ands	r3, r2
 80049b8:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	015a      	lsls	r2, r3, #5
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	4413      	add	r3, r2
 80049c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049c6:	691a      	ldr	r2, [r3, #16]
 80049c8:	693b      	ldr	r3, [r7, #16]
 80049ca:	0159      	lsls	r1, r3, #5
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	440b      	add	r3, r1
 80049d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049d4:	4619      	mov	r1, r3
 80049d6:	4b78      	ldr	r3, [pc, #480]	; (8004bb8 <USB_EP0StartXfer+0x2b0>)
 80049d8:	4013      	ands	r3, r2
 80049da:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	699a      	ldr	r2, [r3, #24]
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	68db      	ldr	r3, [r3, #12]
 80049e4:	429a      	cmp	r2, r3
 80049e6:	d903      	bls.n	80049f0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	68da      	ldr	r2, [r3, #12]
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80049f0:	693b      	ldr	r3, [r7, #16]
 80049f2:	015a      	lsls	r2, r3, #5
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	4413      	add	r3, r2
 80049f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049fc:	691b      	ldr	r3, [r3, #16]
 80049fe:	693a      	ldr	r2, [r7, #16]
 8004a00:	0151      	lsls	r1, r2, #5
 8004a02:	697a      	ldr	r2, [r7, #20]
 8004a04:	440a      	add	r2, r1
 8004a06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a0a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004a0e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	015a      	lsls	r2, r3, #5
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	4413      	add	r3, r2
 8004a18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a1c:	691a      	ldr	r2, [r3, #16]
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	699b      	ldr	r3, [r3, #24]
 8004a22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a26:	6939      	ldr	r1, [r7, #16]
 8004a28:	0148      	lsls	r0, r1, #5
 8004a2a:	6979      	ldr	r1, [r7, #20]
 8004a2c:	4401      	add	r1, r0
 8004a2e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004a32:	4313      	orrs	r3, r2
 8004a34:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004a36:	79fb      	ldrb	r3, [r7, #7]
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	d11e      	bne.n	8004a7a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	695b      	ldr	r3, [r3, #20]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d009      	beq.n	8004a58 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	015a      	lsls	r2, r3, #5
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	4413      	add	r3, r2
 8004a4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a50:	461a      	mov	r2, r3
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	695b      	ldr	r3, [r3, #20]
 8004a56:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004a58:	693b      	ldr	r3, [r7, #16]
 8004a5a:	015a      	lsls	r2, r3, #5
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	4413      	add	r3, r2
 8004a60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	693a      	ldr	r2, [r7, #16]
 8004a68:	0151      	lsls	r1, r2, #5
 8004a6a:	697a      	ldr	r2, [r7, #20]
 8004a6c:	440a      	add	r2, r1
 8004a6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a72:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004a76:	6013      	str	r3, [r2, #0]
 8004a78:	e097      	b.n	8004baa <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	015a      	lsls	r2, r3, #5
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	4413      	add	r3, r2
 8004a82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	693a      	ldr	r2, [r7, #16]
 8004a8a:	0151      	lsls	r1, r2, #5
 8004a8c:	697a      	ldr	r2, [r7, #20]
 8004a8e:	440a      	add	r2, r1
 8004a90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a94:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004a98:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	699b      	ldr	r3, [r3, #24]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	f000 8083 	beq.w	8004baa <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004aaa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	781b      	ldrb	r3, [r3, #0]
 8004ab0:	f003 030f 	and.w	r3, r3, #15
 8004ab4:	2101      	movs	r1, #1
 8004ab6:	fa01 f303 	lsl.w	r3, r1, r3
 8004aba:	6979      	ldr	r1, [r7, #20]
 8004abc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	634b      	str	r3, [r1, #52]	; 0x34
 8004ac4:	e071      	b.n	8004baa <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	015a      	lsls	r2, r3, #5
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	4413      	add	r3, r2
 8004ace:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ad2:	691a      	ldr	r2, [r3, #16]
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	0159      	lsls	r1, r3, #5
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	440b      	add	r3, r1
 8004adc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ae0:	4619      	mov	r1, r3
 8004ae2:	4b36      	ldr	r3, [pc, #216]	; (8004bbc <USB_EP0StartXfer+0x2b4>)
 8004ae4:	4013      	ands	r3, r2
 8004ae6:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	015a      	lsls	r2, r3, #5
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	4413      	add	r3, r2
 8004af0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004af4:	691a      	ldr	r2, [r3, #16]
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	0159      	lsls	r1, r3, #5
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	440b      	add	r3, r1
 8004afe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b02:	4619      	mov	r1, r3
 8004b04:	4b2c      	ldr	r3, [pc, #176]	; (8004bb8 <USB_EP0StartXfer+0x2b0>)
 8004b06:	4013      	ands	r3, r2
 8004b08:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	699b      	ldr	r3, [r3, #24]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d003      	beq.n	8004b1a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	68da      	ldr	r2, [r3, #12]
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	68da      	ldr	r2, [r3, #12]
 8004b1e:	68bb      	ldr	r3, [r7, #8]
 8004b20:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	015a      	lsls	r2, r3, #5
 8004b26:	697b      	ldr	r3, [r7, #20]
 8004b28:	4413      	add	r3, r2
 8004b2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b2e:	691b      	ldr	r3, [r3, #16]
 8004b30:	693a      	ldr	r2, [r7, #16]
 8004b32:	0151      	lsls	r1, r2, #5
 8004b34:	697a      	ldr	r2, [r7, #20]
 8004b36:	440a      	add	r2, r1
 8004b38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b3c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004b40:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	015a      	lsls	r2, r3, #5
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	4413      	add	r3, r2
 8004b4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b4e:	691a      	ldr	r2, [r3, #16]
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	69db      	ldr	r3, [r3, #28]
 8004b54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b58:	6939      	ldr	r1, [r7, #16]
 8004b5a:	0148      	lsls	r0, r1, #5
 8004b5c:	6979      	ldr	r1, [r7, #20]
 8004b5e:	4401      	add	r1, r0
 8004b60:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004b64:	4313      	orrs	r3, r2
 8004b66:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004b68:	79fb      	ldrb	r3, [r7, #7]
 8004b6a:	2b01      	cmp	r3, #1
 8004b6c:	d10d      	bne.n	8004b8a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	691b      	ldr	r3, [r3, #16]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d009      	beq.n	8004b8a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	6919      	ldr	r1, [r3, #16]
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	015a      	lsls	r2, r3, #5
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	4413      	add	r3, r2
 8004b82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b86:	460a      	mov	r2, r1
 8004b88:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	015a      	lsls	r2, r3, #5
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	4413      	add	r3, r2
 8004b92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	693a      	ldr	r2, [r7, #16]
 8004b9a:	0151      	lsls	r1, r2, #5
 8004b9c:	697a      	ldr	r2, [r7, #20]
 8004b9e:	440a      	add	r2, r1
 8004ba0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ba4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004ba8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004baa:	2300      	movs	r3, #0
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	371c      	adds	r7, #28
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb6:	4770      	bx	lr
 8004bb8:	e007ffff 	.word	0xe007ffff
 8004bbc:	fff80000 	.word	0xfff80000

08004bc0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b087      	sub	sp, #28
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
 8004bc8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004bce:	2300      	movs	r3, #0
 8004bd0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	785b      	ldrb	r3, [r3, #1]
 8004bda:	2b01      	cmp	r3, #1
 8004bdc:	d14a      	bne.n	8004c74 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	781b      	ldrb	r3, [r3, #0]
 8004be2:	015a      	lsls	r2, r3, #5
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	4413      	add	r3, r2
 8004be8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004bf2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004bf6:	f040 8086 	bne.w	8004d06 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	781b      	ldrb	r3, [r3, #0]
 8004bfe:	015a      	lsls	r2, r3, #5
 8004c00:	693b      	ldr	r3, [r7, #16]
 8004c02:	4413      	add	r3, r2
 8004c04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	683a      	ldr	r2, [r7, #0]
 8004c0c:	7812      	ldrb	r2, [r2, #0]
 8004c0e:	0151      	lsls	r1, r2, #5
 8004c10:	693a      	ldr	r2, [r7, #16]
 8004c12:	440a      	add	r2, r1
 8004c14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c18:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004c1c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	781b      	ldrb	r3, [r3, #0]
 8004c22:	015a      	lsls	r2, r3, #5
 8004c24:	693b      	ldr	r3, [r7, #16]
 8004c26:	4413      	add	r3, r2
 8004c28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	683a      	ldr	r2, [r7, #0]
 8004c30:	7812      	ldrb	r2, [r2, #0]
 8004c32:	0151      	lsls	r1, r2, #5
 8004c34:	693a      	ldr	r2, [r7, #16]
 8004c36:	440a      	add	r2, r1
 8004c38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c3c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004c40:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	3301      	adds	r3, #1
 8004c46:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	f242 7210 	movw	r2, #10000	; 0x2710
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d902      	bls.n	8004c58 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
 8004c54:	75fb      	strb	r3, [r7, #23]
          break;
 8004c56:	e056      	b.n	8004d06 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	781b      	ldrb	r3, [r3, #0]
 8004c5c:	015a      	lsls	r2, r3, #5
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	4413      	add	r3, r2
 8004c62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c6c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c70:	d0e7      	beq.n	8004c42 <USB_EPStopXfer+0x82>
 8004c72:	e048      	b.n	8004d06 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	781b      	ldrb	r3, [r3, #0]
 8004c78:	015a      	lsls	r2, r3, #5
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	4413      	add	r3, r2
 8004c7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c88:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c8c:	d13b      	bne.n	8004d06 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	781b      	ldrb	r3, [r3, #0]
 8004c92:	015a      	lsls	r2, r3, #5
 8004c94:	693b      	ldr	r3, [r7, #16]
 8004c96:	4413      	add	r3, r2
 8004c98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	683a      	ldr	r2, [r7, #0]
 8004ca0:	7812      	ldrb	r2, [r2, #0]
 8004ca2:	0151      	lsls	r1, r2, #5
 8004ca4:	693a      	ldr	r2, [r7, #16]
 8004ca6:	440a      	add	r2, r1
 8004ca8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004cac:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004cb0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	781b      	ldrb	r3, [r3, #0]
 8004cb6:	015a      	lsls	r2, r3, #5
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	4413      	add	r3, r2
 8004cbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	683a      	ldr	r2, [r7, #0]
 8004cc4:	7812      	ldrb	r2, [r2, #0]
 8004cc6:	0151      	lsls	r1, r2, #5
 8004cc8:	693a      	ldr	r2, [r7, #16]
 8004cca:	440a      	add	r2, r1
 8004ccc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004cd0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004cd4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	3301      	adds	r3, #1
 8004cda:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	f242 7210 	movw	r2, #10000	; 0x2710
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d902      	bls.n	8004cec <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	75fb      	strb	r3, [r7, #23]
          break;
 8004cea:	e00c      	b.n	8004d06 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	781b      	ldrb	r3, [r3, #0]
 8004cf0:	015a      	lsls	r2, r3, #5
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	4413      	add	r3, r2
 8004cf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d00:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d04:	d0e7      	beq.n	8004cd6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8004d06:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	371c      	adds	r7, #28
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d12:	4770      	bx	lr

08004d14 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b089      	sub	sp, #36	; 0x24
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	60f8      	str	r0, [r7, #12]
 8004d1c:	60b9      	str	r1, [r7, #8]
 8004d1e:	4611      	mov	r1, r2
 8004d20:	461a      	mov	r2, r3
 8004d22:	460b      	mov	r3, r1
 8004d24:	71fb      	strb	r3, [r7, #7]
 8004d26:	4613      	mov	r3, r2
 8004d28:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004d32:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d123      	bne.n	8004d82 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004d3a:	88bb      	ldrh	r3, [r7, #4]
 8004d3c:	3303      	adds	r3, #3
 8004d3e:	089b      	lsrs	r3, r3, #2
 8004d40:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004d42:	2300      	movs	r3, #0
 8004d44:	61bb      	str	r3, [r7, #24]
 8004d46:	e018      	b.n	8004d7a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004d48:	79fb      	ldrb	r3, [r7, #7]
 8004d4a:	031a      	lsls	r2, r3, #12
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	4413      	add	r3, r2
 8004d50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d54:	461a      	mov	r2, r3
 8004d56:	69fb      	ldr	r3, [r7, #28]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004d5c:	69fb      	ldr	r3, [r7, #28]
 8004d5e:	3301      	adds	r3, #1
 8004d60:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004d62:	69fb      	ldr	r3, [r7, #28]
 8004d64:	3301      	adds	r3, #1
 8004d66:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004d68:	69fb      	ldr	r3, [r7, #28]
 8004d6a:	3301      	adds	r3, #1
 8004d6c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004d6e:	69fb      	ldr	r3, [r7, #28]
 8004d70:	3301      	adds	r3, #1
 8004d72:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004d74:	69bb      	ldr	r3, [r7, #24]
 8004d76:	3301      	adds	r3, #1
 8004d78:	61bb      	str	r3, [r7, #24]
 8004d7a:	69ba      	ldr	r2, [r7, #24]
 8004d7c:	693b      	ldr	r3, [r7, #16]
 8004d7e:	429a      	cmp	r2, r3
 8004d80:	d3e2      	bcc.n	8004d48 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004d82:	2300      	movs	r3, #0
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	3724      	adds	r7, #36	; 0x24
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8e:	4770      	bx	lr

08004d90 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b08b      	sub	sp, #44	; 0x2c
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	60f8      	str	r0, [r7, #12]
 8004d98:	60b9      	str	r1, [r7, #8]
 8004d9a:	4613      	mov	r3, r2
 8004d9c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004da6:	88fb      	ldrh	r3, [r7, #6]
 8004da8:	089b      	lsrs	r3, r3, #2
 8004daa:	b29b      	uxth	r3, r3
 8004dac:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004dae:	88fb      	ldrh	r3, [r7, #6]
 8004db0:	f003 0303 	and.w	r3, r3, #3
 8004db4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004db6:	2300      	movs	r3, #0
 8004db8:	623b      	str	r3, [r7, #32]
 8004dba:	e014      	b.n	8004de6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004dbc:	69bb      	ldr	r3, [r7, #24]
 8004dbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004dc2:	681a      	ldr	r2, [r3, #0]
 8004dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc6:	601a      	str	r2, [r3, #0]
    pDest++;
 8004dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dca:	3301      	adds	r3, #1
 8004dcc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd0:	3301      	adds	r3, #1
 8004dd2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd6:	3301      	adds	r3, #1
 8004dd8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ddc:	3301      	adds	r3, #1
 8004dde:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004de0:	6a3b      	ldr	r3, [r7, #32]
 8004de2:	3301      	adds	r3, #1
 8004de4:	623b      	str	r3, [r7, #32]
 8004de6:	6a3a      	ldr	r2, [r7, #32]
 8004de8:	697b      	ldr	r3, [r7, #20]
 8004dea:	429a      	cmp	r2, r3
 8004dec:	d3e6      	bcc.n	8004dbc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004dee:	8bfb      	ldrh	r3, [r7, #30]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d01e      	beq.n	8004e32 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004df4:	2300      	movs	r3, #0
 8004df6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004df8:	69bb      	ldr	r3, [r7, #24]
 8004dfa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004dfe:	461a      	mov	r2, r3
 8004e00:	f107 0310 	add.w	r3, r7, #16
 8004e04:	6812      	ldr	r2, [r2, #0]
 8004e06:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004e08:	693a      	ldr	r2, [r7, #16]
 8004e0a:	6a3b      	ldr	r3, [r7, #32]
 8004e0c:	b2db      	uxtb	r3, r3
 8004e0e:	00db      	lsls	r3, r3, #3
 8004e10:	fa22 f303 	lsr.w	r3, r2, r3
 8004e14:	b2da      	uxtb	r2, r3
 8004e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e18:	701a      	strb	r2, [r3, #0]
      i++;
 8004e1a:	6a3b      	ldr	r3, [r7, #32]
 8004e1c:	3301      	adds	r3, #1
 8004e1e:	623b      	str	r3, [r7, #32]
      pDest++;
 8004e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e22:	3301      	adds	r3, #1
 8004e24:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004e26:	8bfb      	ldrh	r3, [r7, #30]
 8004e28:	3b01      	subs	r3, #1
 8004e2a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004e2c:	8bfb      	ldrh	r3, [r7, #30]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d1ea      	bne.n	8004e08 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	372c      	adds	r7, #44	; 0x2c
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3e:	4770      	bx	lr

08004e40 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004e40:	b480      	push	{r7}
 8004e42:	b085      	sub	sp, #20
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
 8004e48:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	781b      	ldrb	r3, [r3, #0]
 8004e52:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	785b      	ldrb	r3, [r3, #1]
 8004e58:	2b01      	cmp	r3, #1
 8004e5a:	d12c      	bne.n	8004eb6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	015a      	lsls	r2, r3, #5
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	4413      	add	r3, r2
 8004e64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	db12      	blt.n	8004e94 <USB_EPSetStall+0x54>
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d00f      	beq.n	8004e94 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	015a      	lsls	r2, r3, #5
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	4413      	add	r3, r2
 8004e7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	68ba      	ldr	r2, [r7, #8]
 8004e84:	0151      	lsls	r1, r2, #5
 8004e86:	68fa      	ldr	r2, [r7, #12]
 8004e88:	440a      	add	r2, r1
 8004e8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e8e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004e92:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	015a      	lsls	r2, r3, #5
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	4413      	add	r3, r2
 8004e9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	68ba      	ldr	r2, [r7, #8]
 8004ea4:	0151      	lsls	r1, r2, #5
 8004ea6:	68fa      	ldr	r2, [r7, #12]
 8004ea8:	440a      	add	r2, r1
 8004eaa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004eae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004eb2:	6013      	str	r3, [r2, #0]
 8004eb4:	e02b      	b.n	8004f0e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	015a      	lsls	r2, r3, #5
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	4413      	add	r3, r2
 8004ebe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	db12      	blt.n	8004eee <USB_EPSetStall+0xae>
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d00f      	beq.n	8004eee <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	015a      	lsls	r2, r3, #5
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	4413      	add	r3, r2
 8004ed6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	68ba      	ldr	r2, [r7, #8]
 8004ede:	0151      	lsls	r1, r2, #5
 8004ee0:	68fa      	ldr	r2, [r7, #12]
 8004ee2:	440a      	add	r2, r1
 8004ee4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ee8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004eec:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	015a      	lsls	r2, r3, #5
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	4413      	add	r3, r2
 8004ef6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	68ba      	ldr	r2, [r7, #8]
 8004efe:	0151      	lsls	r1, r2, #5
 8004f00:	68fa      	ldr	r2, [r7, #12]
 8004f02:	440a      	add	r2, r1
 8004f04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f08:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004f0c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004f0e:	2300      	movs	r3, #0
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	3714      	adds	r7, #20
 8004f14:	46bd      	mov	sp, r7
 8004f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1a:	4770      	bx	lr

08004f1c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b085      	sub	sp, #20
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
 8004f24:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	781b      	ldrb	r3, [r3, #0]
 8004f2e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	785b      	ldrb	r3, [r3, #1]
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	d128      	bne.n	8004f8a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	015a      	lsls	r2, r3, #5
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	4413      	add	r3, r2
 8004f40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	68ba      	ldr	r2, [r7, #8]
 8004f48:	0151      	lsls	r1, r2, #5
 8004f4a:	68fa      	ldr	r2, [r7, #12]
 8004f4c:	440a      	add	r2, r1
 8004f4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f52:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004f56:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	791b      	ldrb	r3, [r3, #4]
 8004f5c:	2b03      	cmp	r3, #3
 8004f5e:	d003      	beq.n	8004f68 <USB_EPClearStall+0x4c>
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	791b      	ldrb	r3, [r3, #4]
 8004f64:	2b02      	cmp	r3, #2
 8004f66:	d138      	bne.n	8004fda <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	015a      	lsls	r2, r3, #5
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	4413      	add	r3, r2
 8004f70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	68ba      	ldr	r2, [r7, #8]
 8004f78:	0151      	lsls	r1, r2, #5
 8004f7a:	68fa      	ldr	r2, [r7, #12]
 8004f7c:	440a      	add	r2, r1
 8004f7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f86:	6013      	str	r3, [r2, #0]
 8004f88:	e027      	b.n	8004fda <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	015a      	lsls	r2, r3, #5
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	4413      	add	r3, r2
 8004f92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	68ba      	ldr	r2, [r7, #8]
 8004f9a:	0151      	lsls	r1, r2, #5
 8004f9c:	68fa      	ldr	r2, [r7, #12]
 8004f9e:	440a      	add	r2, r1
 8004fa0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fa4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004fa8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	791b      	ldrb	r3, [r3, #4]
 8004fae:	2b03      	cmp	r3, #3
 8004fb0:	d003      	beq.n	8004fba <USB_EPClearStall+0x9e>
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	791b      	ldrb	r3, [r3, #4]
 8004fb6:	2b02      	cmp	r3, #2
 8004fb8:	d10f      	bne.n	8004fda <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	015a      	lsls	r2, r3, #5
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	4413      	add	r3, r2
 8004fc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	68ba      	ldr	r2, [r7, #8]
 8004fca:	0151      	lsls	r1, r2, #5
 8004fcc:	68fa      	ldr	r2, [r7, #12]
 8004fce:	440a      	add	r2, r1
 8004fd0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fd8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004fda:	2300      	movs	r3, #0
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	3714      	adds	r7, #20
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe6:	4770      	bx	lr

08004fe8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b085      	sub	sp, #20
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
 8004ff0:	460b      	mov	r3, r1
 8004ff2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	68fa      	ldr	r2, [r7, #12]
 8005002:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005006:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800500a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005012:	681a      	ldr	r2, [r3, #0]
 8005014:	78fb      	ldrb	r3, [r7, #3]
 8005016:	011b      	lsls	r3, r3, #4
 8005018:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800501c:	68f9      	ldr	r1, [r7, #12]
 800501e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005022:	4313      	orrs	r3, r2
 8005024:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005026:	2300      	movs	r3, #0
}
 8005028:	4618      	mov	r0, r3
 800502a:	3714      	adds	r7, #20
 800502c:	46bd      	mov	sp, r7
 800502e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005032:	4770      	bx	lr

08005034 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005034:	b480      	push	{r7}
 8005036:	b085      	sub	sp, #20
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	68fa      	ldr	r2, [r7, #12]
 800504a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800504e:	f023 0303 	bic.w	r3, r3, #3
 8005052:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	68fa      	ldr	r2, [r7, #12]
 800505e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005062:	f023 0302 	bic.w	r3, r3, #2
 8005066:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005068:	2300      	movs	r3, #0
}
 800506a:	4618      	mov	r0, r3
 800506c:	3714      	adds	r7, #20
 800506e:	46bd      	mov	sp, r7
 8005070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005074:	4770      	bx	lr

08005076 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005076:	b480      	push	{r7}
 8005078:	b085      	sub	sp, #20
 800507a:	af00      	add	r7, sp, #0
 800507c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	68fa      	ldr	r2, [r7, #12]
 800508c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005090:	f023 0303 	bic.w	r3, r3, #3
 8005094:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	68fa      	ldr	r2, [r7, #12]
 80050a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80050a4:	f043 0302 	orr.w	r3, r3, #2
 80050a8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80050aa:	2300      	movs	r3, #0
}
 80050ac:	4618      	mov	r0, r3
 80050ae:	3714      	adds	r7, #20
 80050b0:	46bd      	mov	sp, r7
 80050b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b6:	4770      	bx	lr

080050b8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80050b8:	b480      	push	{r7}
 80050ba:	b085      	sub	sp, #20
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	695b      	ldr	r3, [r3, #20]
 80050c4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	699b      	ldr	r3, [r3, #24]
 80050ca:	68fa      	ldr	r2, [r7, #12]
 80050cc:	4013      	ands	r3, r2
 80050ce:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80050d0:	68fb      	ldr	r3, [r7, #12]
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	3714      	adds	r7, #20
 80050d6:	46bd      	mov	sp, r7
 80050d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050dc:	4770      	bx	lr

080050de <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80050de:	b480      	push	{r7}
 80050e0:	b085      	sub	sp, #20
 80050e2:	af00      	add	r7, sp, #0
 80050e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050f0:	699b      	ldr	r3, [r3, #24]
 80050f2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050fa:	69db      	ldr	r3, [r3, #28]
 80050fc:	68ba      	ldr	r2, [r7, #8]
 80050fe:	4013      	ands	r3, r2
 8005100:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	0c1b      	lsrs	r3, r3, #16
}
 8005106:	4618      	mov	r0, r3
 8005108:	3714      	adds	r7, #20
 800510a:	46bd      	mov	sp, r7
 800510c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005110:	4770      	bx	lr

08005112 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005112:	b480      	push	{r7}
 8005114:	b085      	sub	sp, #20
 8005116:	af00      	add	r7, sp, #0
 8005118:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005124:	699b      	ldr	r3, [r3, #24]
 8005126:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800512e:	69db      	ldr	r3, [r3, #28]
 8005130:	68ba      	ldr	r2, [r7, #8]
 8005132:	4013      	ands	r3, r2
 8005134:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	b29b      	uxth	r3, r3
}
 800513a:	4618      	mov	r0, r3
 800513c:	3714      	adds	r7, #20
 800513e:	46bd      	mov	sp, r7
 8005140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005144:	4770      	bx	lr

08005146 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005146:	b480      	push	{r7}
 8005148:	b085      	sub	sp, #20
 800514a:	af00      	add	r7, sp, #0
 800514c:	6078      	str	r0, [r7, #4]
 800514e:	460b      	mov	r3, r1
 8005150:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005156:	78fb      	ldrb	r3, [r7, #3]
 8005158:	015a      	lsls	r2, r3, #5
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	4413      	add	r3, r2
 800515e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800516c:	695b      	ldr	r3, [r3, #20]
 800516e:	68ba      	ldr	r2, [r7, #8]
 8005170:	4013      	ands	r3, r2
 8005172:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005174:	68bb      	ldr	r3, [r7, #8]
}
 8005176:	4618      	mov	r0, r3
 8005178:	3714      	adds	r7, #20
 800517a:	46bd      	mov	sp, r7
 800517c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005180:	4770      	bx	lr

08005182 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005182:	b480      	push	{r7}
 8005184:	b087      	sub	sp, #28
 8005186:	af00      	add	r7, sp, #0
 8005188:	6078      	str	r0, [r7, #4]
 800518a:	460b      	mov	r3, r1
 800518c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005198:	691b      	ldr	r3, [r3, #16]
 800519a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051a4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80051a6:	78fb      	ldrb	r3, [r7, #3]
 80051a8:	f003 030f 	and.w	r3, r3, #15
 80051ac:	68fa      	ldr	r2, [r7, #12]
 80051ae:	fa22 f303 	lsr.w	r3, r2, r3
 80051b2:	01db      	lsls	r3, r3, #7
 80051b4:	b2db      	uxtb	r3, r3
 80051b6:	693a      	ldr	r2, [r7, #16]
 80051b8:	4313      	orrs	r3, r2
 80051ba:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80051bc:	78fb      	ldrb	r3, [r7, #3]
 80051be:	015a      	lsls	r2, r3, #5
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	4413      	add	r3, r2
 80051c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051c8:	689b      	ldr	r3, [r3, #8]
 80051ca:	693a      	ldr	r2, [r7, #16]
 80051cc:	4013      	ands	r3, r2
 80051ce:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80051d0:	68bb      	ldr	r3, [r7, #8]
}
 80051d2:	4618      	mov	r0, r3
 80051d4:	371c      	adds	r7, #28
 80051d6:	46bd      	mov	sp, r7
 80051d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051dc:	4770      	bx	lr

080051de <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80051de:	b480      	push	{r7}
 80051e0:	b083      	sub	sp, #12
 80051e2:	af00      	add	r7, sp, #0
 80051e4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	695b      	ldr	r3, [r3, #20]
 80051ea:	f003 0301 	and.w	r3, r3, #1
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	370c      	adds	r7, #12
 80051f2:	46bd      	mov	sp, r7
 80051f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f8:	4770      	bx	lr
	...

080051fc <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80051fc:	b480      	push	{r7}
 80051fe:	b085      	sub	sp, #20
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800520e:	681a      	ldr	r2, [r3, #0]
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005216:	4619      	mov	r1, r3
 8005218:	4b09      	ldr	r3, [pc, #36]	; (8005240 <USB_ActivateSetup+0x44>)
 800521a:	4013      	ands	r3, r2
 800521c:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	68fa      	ldr	r2, [r7, #12]
 8005228:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800522c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005230:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005232:	2300      	movs	r3, #0
}
 8005234:	4618      	mov	r0, r3
 8005236:	3714      	adds	r7, #20
 8005238:	46bd      	mov	sp, r7
 800523a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523e:	4770      	bx	lr
 8005240:	fffff800 	.word	0xfffff800

08005244 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005244:	b480      	push	{r7}
 8005246:	b087      	sub	sp, #28
 8005248:	af00      	add	r7, sp, #0
 800524a:	60f8      	str	r0, [r7, #12]
 800524c:	460b      	mov	r3, r1
 800524e:	607a      	str	r2, [r7, #4]
 8005250:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	333c      	adds	r3, #60	; 0x3c
 800525a:	3304      	adds	r3, #4
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005260:	693b      	ldr	r3, [r7, #16]
 8005262:	4a26      	ldr	r2, [pc, #152]	; (80052fc <USB_EP0_OutStart+0xb8>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d90a      	bls.n	800527e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005274:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005278:	d101      	bne.n	800527e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800527a:	2300      	movs	r3, #0
 800527c:	e037      	b.n	80052ee <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005284:	461a      	mov	r2, r3
 8005286:	2300      	movs	r3, #0
 8005288:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005290:	691b      	ldr	r3, [r3, #16]
 8005292:	697a      	ldr	r2, [r7, #20]
 8005294:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005298:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800529c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052a4:	691b      	ldr	r3, [r3, #16]
 80052a6:	697a      	ldr	r2, [r7, #20]
 80052a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052ac:	f043 0318 	orr.w	r3, r3, #24
 80052b0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052b8:	691b      	ldr	r3, [r3, #16]
 80052ba:	697a      	ldr	r2, [r7, #20]
 80052bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052c0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80052c4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80052c6:	7afb      	ldrb	r3, [r7, #11]
 80052c8:	2b01      	cmp	r3, #1
 80052ca:	d10f      	bne.n	80052ec <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80052cc:	697b      	ldr	r3, [r7, #20]
 80052ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052d2:	461a      	mov	r2, r3
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80052d8:	697b      	ldr	r3, [r7, #20]
 80052da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	697a      	ldr	r2, [r7, #20]
 80052e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052e6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80052ea:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80052ec:	2300      	movs	r3, #0
}
 80052ee:	4618      	mov	r0, r3
 80052f0:	371c      	adds	r7, #28
 80052f2:	46bd      	mov	sp, r7
 80052f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f8:	4770      	bx	lr
 80052fa:	bf00      	nop
 80052fc:	4f54300a 	.word	0x4f54300a

08005300 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005300:	b480      	push	{r7}
 8005302:	b085      	sub	sp, #20
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005308:	2300      	movs	r3, #0
 800530a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	3301      	adds	r3, #1
 8005310:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	4a13      	ldr	r2, [pc, #76]	; (8005364 <USB_CoreReset+0x64>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d901      	bls.n	800531e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800531a:	2303      	movs	r3, #3
 800531c:	e01b      	b.n	8005356 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	691b      	ldr	r3, [r3, #16]
 8005322:	2b00      	cmp	r3, #0
 8005324:	daf2      	bge.n	800530c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005326:	2300      	movs	r3, #0
 8005328:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	691b      	ldr	r3, [r3, #16]
 800532e:	f043 0201 	orr.w	r2, r3, #1
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	3301      	adds	r3, #1
 800533a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	4a09      	ldr	r2, [pc, #36]	; (8005364 <USB_CoreReset+0x64>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d901      	bls.n	8005348 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005344:	2303      	movs	r3, #3
 8005346:	e006      	b.n	8005356 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	691b      	ldr	r3, [r3, #16]
 800534c:	f003 0301 	and.w	r3, r3, #1
 8005350:	2b01      	cmp	r3, #1
 8005352:	d0f0      	beq.n	8005336 <USB_CoreReset+0x36>

  return HAL_OK;
 8005354:	2300      	movs	r3, #0
}
 8005356:	4618      	mov	r0, r3
 8005358:	3714      	adds	r7, #20
 800535a:	46bd      	mov	sp, r7
 800535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005360:	4770      	bx	lr
 8005362:	bf00      	nop
 8005364:	00030d40 	.word	0x00030d40

08005368 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b084      	sub	sp, #16
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
 8005370:	460b      	mov	r3, r1
 8005372:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005374:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005378:	f002 feb4 	bl	80080e4 <malloc>
 800537c:	4603      	mov	r3, r0
 800537e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d109      	bne.n	800539a <USBD_CDC_Init+0x32>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	32b0      	adds	r2, #176	; 0xb0
 8005390:	2100      	movs	r1, #0
 8005392:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005396:	2302      	movs	r3, #2
 8005398:	e0d4      	b.n	8005544 <USBD_CDC_Init+0x1dc>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800539a:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800539e:	2100      	movs	r1, #0
 80053a0:	68f8      	ldr	r0, [r7, #12]
 80053a2:	f002 feaf 	bl	8008104 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	32b0      	adds	r2, #176	; 0xb0
 80053b0:	68f9      	ldr	r1, [r7, #12]
 80053b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	32b0      	adds	r2, #176	; 0xb0
 80053c0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	7c1b      	ldrb	r3, [r3, #16]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d138      	bne.n	8005444 <USBD_CDC_Init+0xdc>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80053d2:	4b5e      	ldr	r3, [pc, #376]	; (800554c <USBD_CDC_Init+0x1e4>)
 80053d4:	7819      	ldrb	r1, [r3, #0]
 80053d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80053da:	2202      	movs	r2, #2
 80053dc:	6878      	ldr	r0, [r7, #4]
 80053de:	f002 fca8 	bl	8007d32 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80053e2:	4b5a      	ldr	r3, [pc, #360]	; (800554c <USBD_CDC_Init+0x1e4>)
 80053e4:	781b      	ldrb	r3, [r3, #0]
 80053e6:	f003 020f 	and.w	r2, r3, #15
 80053ea:	6879      	ldr	r1, [r7, #4]
 80053ec:	4613      	mov	r3, r2
 80053ee:	009b      	lsls	r3, r3, #2
 80053f0:	4413      	add	r3, r2
 80053f2:	009b      	lsls	r3, r3, #2
 80053f4:	440b      	add	r3, r1
 80053f6:	3324      	adds	r3, #36	; 0x24
 80053f8:	2201      	movs	r2, #1
 80053fa:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80053fc:	4b54      	ldr	r3, [pc, #336]	; (8005550 <USBD_CDC_Init+0x1e8>)
 80053fe:	7819      	ldrb	r1, [r3, #0]
 8005400:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005404:	2202      	movs	r2, #2
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f002 fc93 	bl	8007d32 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800540c:	4b50      	ldr	r3, [pc, #320]	; (8005550 <USBD_CDC_Init+0x1e8>)
 800540e:	781b      	ldrb	r3, [r3, #0]
 8005410:	f003 020f 	and.w	r2, r3, #15
 8005414:	6879      	ldr	r1, [r7, #4]
 8005416:	4613      	mov	r3, r2
 8005418:	009b      	lsls	r3, r3, #2
 800541a:	4413      	add	r3, r2
 800541c:	009b      	lsls	r3, r3, #2
 800541e:	440b      	add	r3, r1
 8005420:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005424:	2201      	movs	r2, #1
 8005426:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005428:	4b4a      	ldr	r3, [pc, #296]	; (8005554 <USBD_CDC_Init+0x1ec>)
 800542a:	781b      	ldrb	r3, [r3, #0]
 800542c:	f003 020f 	and.w	r2, r3, #15
 8005430:	6879      	ldr	r1, [r7, #4]
 8005432:	4613      	mov	r3, r2
 8005434:	009b      	lsls	r3, r3, #2
 8005436:	4413      	add	r3, r2
 8005438:	009b      	lsls	r3, r3, #2
 800543a:	440b      	add	r3, r1
 800543c:	3326      	adds	r3, #38	; 0x26
 800543e:	2210      	movs	r2, #16
 8005440:	801a      	strh	r2, [r3, #0]
 8005442:	e035      	b.n	80054b0 <USBD_CDC_Init+0x148>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005444:	4b41      	ldr	r3, [pc, #260]	; (800554c <USBD_CDC_Init+0x1e4>)
 8005446:	7819      	ldrb	r1, [r3, #0]
 8005448:	2340      	movs	r3, #64	; 0x40
 800544a:	2202      	movs	r2, #2
 800544c:	6878      	ldr	r0, [r7, #4]
 800544e:	f002 fc70 	bl	8007d32 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005452:	4b3e      	ldr	r3, [pc, #248]	; (800554c <USBD_CDC_Init+0x1e4>)
 8005454:	781b      	ldrb	r3, [r3, #0]
 8005456:	f003 020f 	and.w	r2, r3, #15
 800545a:	6879      	ldr	r1, [r7, #4]
 800545c:	4613      	mov	r3, r2
 800545e:	009b      	lsls	r3, r3, #2
 8005460:	4413      	add	r3, r2
 8005462:	009b      	lsls	r3, r3, #2
 8005464:	440b      	add	r3, r1
 8005466:	3324      	adds	r3, #36	; 0x24
 8005468:	2201      	movs	r2, #1
 800546a:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800546c:	4b38      	ldr	r3, [pc, #224]	; (8005550 <USBD_CDC_Init+0x1e8>)
 800546e:	7819      	ldrb	r1, [r3, #0]
 8005470:	2340      	movs	r3, #64	; 0x40
 8005472:	2202      	movs	r2, #2
 8005474:	6878      	ldr	r0, [r7, #4]
 8005476:	f002 fc5c 	bl	8007d32 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800547a:	4b35      	ldr	r3, [pc, #212]	; (8005550 <USBD_CDC_Init+0x1e8>)
 800547c:	781b      	ldrb	r3, [r3, #0]
 800547e:	f003 020f 	and.w	r2, r3, #15
 8005482:	6879      	ldr	r1, [r7, #4]
 8005484:	4613      	mov	r3, r2
 8005486:	009b      	lsls	r3, r3, #2
 8005488:	4413      	add	r3, r2
 800548a:	009b      	lsls	r3, r3, #2
 800548c:	440b      	add	r3, r1
 800548e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005492:	2201      	movs	r2, #1
 8005494:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005496:	4b2f      	ldr	r3, [pc, #188]	; (8005554 <USBD_CDC_Init+0x1ec>)
 8005498:	781b      	ldrb	r3, [r3, #0]
 800549a:	f003 020f 	and.w	r2, r3, #15
 800549e:	6879      	ldr	r1, [r7, #4]
 80054a0:	4613      	mov	r3, r2
 80054a2:	009b      	lsls	r3, r3, #2
 80054a4:	4413      	add	r3, r2
 80054a6:	009b      	lsls	r3, r3, #2
 80054a8:	440b      	add	r3, r1
 80054aa:	3326      	adds	r3, #38	; 0x26
 80054ac:	2210      	movs	r2, #16
 80054ae:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80054b0:	4b28      	ldr	r3, [pc, #160]	; (8005554 <USBD_CDC_Init+0x1ec>)
 80054b2:	7819      	ldrb	r1, [r3, #0]
 80054b4:	2308      	movs	r3, #8
 80054b6:	2203      	movs	r2, #3
 80054b8:	6878      	ldr	r0, [r7, #4]
 80054ba:	f002 fc3a 	bl	8007d32 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80054be:	4b25      	ldr	r3, [pc, #148]	; (8005554 <USBD_CDC_Init+0x1ec>)
 80054c0:	781b      	ldrb	r3, [r3, #0]
 80054c2:	f003 020f 	and.w	r2, r3, #15
 80054c6:	6879      	ldr	r1, [r7, #4]
 80054c8:	4613      	mov	r3, r2
 80054ca:	009b      	lsls	r3, r3, #2
 80054cc:	4413      	add	r3, r2
 80054ce:	009b      	lsls	r3, r3, #2
 80054d0:	440b      	add	r3, r1
 80054d2:	3324      	adds	r3, #36	; 0x24
 80054d4:	2201      	movs	r2, #1
 80054d6:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	2200      	movs	r2, #0
 80054dc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80054e6:	687a      	ldr	r2, [r7, #4]
 80054e8:	33b0      	adds	r3, #176	; 0xb0
 80054ea:	009b      	lsls	r3, r3, #2
 80054ec:	4413      	add	r3, r2
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	2200      	movs	r2, #0
 80054f8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	2200      	movs	r2, #0
 8005500:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800550a:	2b00      	cmp	r3, #0
 800550c:	d101      	bne.n	8005512 <USBD_CDC_Init+0x1aa>
  {
    return (uint8_t)USBD_EMEM;
 800550e:	2302      	movs	r3, #2
 8005510:	e018      	b.n	8005544 <USBD_CDC_Init+0x1dc>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	7c1b      	ldrb	r3, [r3, #16]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d10a      	bne.n	8005530 <USBD_CDC_Init+0x1c8>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800551a:	4b0d      	ldr	r3, [pc, #52]	; (8005550 <USBD_CDC_Init+0x1e8>)
 800551c:	7819      	ldrb	r1, [r3, #0]
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005524:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	f002 fcf1 	bl	8007f10 <USBD_LL_PrepareReceive>
 800552e:	e008      	b.n	8005542 <USBD_CDC_Init+0x1da>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005530:	4b07      	ldr	r3, [pc, #28]	; (8005550 <USBD_CDC_Init+0x1e8>)
 8005532:	7819      	ldrb	r1, [r3, #0]
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800553a:	2340      	movs	r3, #64	; 0x40
 800553c:	6878      	ldr	r0, [r7, #4]
 800553e:	f002 fce7 	bl	8007f10 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005542:	2300      	movs	r3, #0
}
 8005544:	4618      	mov	r0, r3
 8005546:	3710      	adds	r7, #16
 8005548:	46bd      	mov	sp, r7
 800554a:	bd80      	pop	{r7, pc}
 800554c:	2000009b 	.word	0x2000009b
 8005550:	2000009c 	.word	0x2000009c
 8005554:	2000009d 	.word	0x2000009d

08005558 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b082      	sub	sp, #8
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
 8005560:	460b      	mov	r3, r1
 8005562:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005564:	4b3a      	ldr	r3, [pc, #232]	; (8005650 <USBD_CDC_DeInit+0xf8>)
 8005566:	781b      	ldrb	r3, [r3, #0]
 8005568:	4619      	mov	r1, r3
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f002 fc07 	bl	8007d7e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8005570:	4b37      	ldr	r3, [pc, #220]	; (8005650 <USBD_CDC_DeInit+0xf8>)
 8005572:	781b      	ldrb	r3, [r3, #0]
 8005574:	f003 020f 	and.w	r2, r3, #15
 8005578:	6879      	ldr	r1, [r7, #4]
 800557a:	4613      	mov	r3, r2
 800557c:	009b      	lsls	r3, r3, #2
 800557e:	4413      	add	r3, r2
 8005580:	009b      	lsls	r3, r3, #2
 8005582:	440b      	add	r3, r1
 8005584:	3324      	adds	r3, #36	; 0x24
 8005586:	2200      	movs	r2, #0
 8005588:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800558a:	4b32      	ldr	r3, [pc, #200]	; (8005654 <USBD_CDC_DeInit+0xfc>)
 800558c:	781b      	ldrb	r3, [r3, #0]
 800558e:	4619      	mov	r1, r3
 8005590:	6878      	ldr	r0, [r7, #4]
 8005592:	f002 fbf4 	bl	8007d7e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8005596:	4b2f      	ldr	r3, [pc, #188]	; (8005654 <USBD_CDC_DeInit+0xfc>)
 8005598:	781b      	ldrb	r3, [r3, #0]
 800559a:	f003 020f 	and.w	r2, r3, #15
 800559e:	6879      	ldr	r1, [r7, #4]
 80055a0:	4613      	mov	r3, r2
 80055a2:	009b      	lsls	r3, r3, #2
 80055a4:	4413      	add	r3, r2
 80055a6:	009b      	lsls	r3, r3, #2
 80055a8:	440b      	add	r3, r1
 80055aa:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80055ae:	2200      	movs	r2, #0
 80055b0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80055b2:	4b29      	ldr	r3, [pc, #164]	; (8005658 <USBD_CDC_DeInit+0x100>)
 80055b4:	781b      	ldrb	r3, [r3, #0]
 80055b6:	4619      	mov	r1, r3
 80055b8:	6878      	ldr	r0, [r7, #4]
 80055ba:	f002 fbe0 	bl	8007d7e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80055be:	4b26      	ldr	r3, [pc, #152]	; (8005658 <USBD_CDC_DeInit+0x100>)
 80055c0:	781b      	ldrb	r3, [r3, #0]
 80055c2:	f003 020f 	and.w	r2, r3, #15
 80055c6:	6879      	ldr	r1, [r7, #4]
 80055c8:	4613      	mov	r3, r2
 80055ca:	009b      	lsls	r3, r3, #2
 80055cc:	4413      	add	r3, r2
 80055ce:	009b      	lsls	r3, r3, #2
 80055d0:	440b      	add	r3, r1
 80055d2:	3324      	adds	r3, #36	; 0x24
 80055d4:	2200      	movs	r2, #0
 80055d6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80055d8:	4b1f      	ldr	r3, [pc, #124]	; (8005658 <USBD_CDC_DeInit+0x100>)
 80055da:	781b      	ldrb	r3, [r3, #0]
 80055dc:	f003 020f 	and.w	r2, r3, #15
 80055e0:	6879      	ldr	r1, [r7, #4]
 80055e2:	4613      	mov	r3, r2
 80055e4:	009b      	lsls	r3, r3, #2
 80055e6:	4413      	add	r3, r2
 80055e8:	009b      	lsls	r3, r3, #2
 80055ea:	440b      	add	r3, r1
 80055ec:	3326      	adds	r3, #38	; 0x26
 80055ee:	2200      	movs	r2, #0
 80055f0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	32b0      	adds	r2, #176	; 0xb0
 80055fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d01f      	beq.n	8005644 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800560a:	687a      	ldr	r2, [r7, #4]
 800560c:	33b0      	adds	r3, #176	; 0xb0
 800560e:	009b      	lsls	r3, r3, #2
 8005610:	4413      	add	r3, r2
 8005612:	685b      	ldr	r3, [r3, #4]
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	32b0      	adds	r2, #176	; 0xb0
 8005622:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005626:	4618      	mov	r0, r3
 8005628:	f002 fd64 	bl	80080f4 <free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	32b0      	adds	r2, #176	; 0xb0
 8005636:	2100      	movs	r1, #0
 8005638:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2200      	movs	r2, #0
 8005640:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005644:	2300      	movs	r3, #0
}
 8005646:	4618      	mov	r0, r3
 8005648:	3708      	adds	r7, #8
 800564a:	46bd      	mov	sp, r7
 800564c:	bd80      	pop	{r7, pc}
 800564e:	bf00      	nop
 8005650:	2000009b 	.word	0x2000009b
 8005654:	2000009c 	.word	0x2000009c
 8005658:	2000009d 	.word	0x2000009d

0800565c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b086      	sub	sp, #24
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
 8005664:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	32b0      	adds	r2, #176	; 0xb0
 8005670:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005674:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005676:	2300      	movs	r3, #0
 8005678:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800567a:	2300      	movs	r3, #0
 800567c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800567e:	2300      	movs	r3, #0
 8005680:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d101      	bne.n	800568c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8005688:	2303      	movs	r3, #3
 800568a:	e0bf      	b.n	800580c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	781b      	ldrb	r3, [r3, #0]
 8005690:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005694:	2b00      	cmp	r3, #0
 8005696:	d050      	beq.n	800573a <USBD_CDC_Setup+0xde>
 8005698:	2b20      	cmp	r3, #32
 800569a:	f040 80af 	bne.w	80057fc <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	88db      	ldrh	r3, [r3, #6]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d03a      	beq.n	800571c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	781b      	ldrb	r3, [r3, #0]
 80056aa:	b25b      	sxtb	r3, r3
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	da1b      	bge.n	80056e8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80056b6:	687a      	ldr	r2, [r7, #4]
 80056b8:	33b0      	adds	r3, #176	; 0xb0
 80056ba:	009b      	lsls	r3, r3, #2
 80056bc:	4413      	add	r3, r2
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	689b      	ldr	r3, [r3, #8]
 80056c2:	683a      	ldr	r2, [r7, #0]
 80056c4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80056c6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80056c8:	683a      	ldr	r2, [r7, #0]
 80056ca:	88d2      	ldrh	r2, [r2, #6]
 80056cc:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	88db      	ldrh	r3, [r3, #6]
 80056d2:	2b07      	cmp	r3, #7
 80056d4:	bf28      	it	cs
 80056d6:	2307      	movcs	r3, #7
 80056d8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80056da:	693b      	ldr	r3, [r7, #16]
 80056dc:	89fa      	ldrh	r2, [r7, #14]
 80056de:	4619      	mov	r1, r3
 80056e0:	6878      	ldr	r0, [r7, #4]
 80056e2:	f001 fdad 	bl	8007240 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80056e6:	e090      	b.n	800580a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	785a      	ldrb	r2, [r3, #1]
 80056ec:	693b      	ldr	r3, [r7, #16]
 80056ee:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	88db      	ldrh	r3, [r3, #6]
 80056f6:	2b3f      	cmp	r3, #63	; 0x3f
 80056f8:	d803      	bhi.n	8005702 <USBD_CDC_Setup+0xa6>
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	88db      	ldrh	r3, [r3, #6]
 80056fe:	b2da      	uxtb	r2, r3
 8005700:	e000      	b.n	8005704 <USBD_CDC_Setup+0xa8>
 8005702:	2240      	movs	r2, #64	; 0x40
 8005704:	693b      	ldr	r3, [r7, #16]
 8005706:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800570a:	6939      	ldr	r1, [r7, #16]
 800570c:	693b      	ldr	r3, [r7, #16]
 800570e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8005712:	461a      	mov	r2, r3
 8005714:	6878      	ldr	r0, [r7, #4]
 8005716:	f001 fdbf 	bl	8007298 <USBD_CtlPrepareRx>
      break;
 800571a:	e076      	b.n	800580a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005722:	687a      	ldr	r2, [r7, #4]
 8005724:	33b0      	adds	r3, #176	; 0xb0
 8005726:	009b      	lsls	r3, r3, #2
 8005728:	4413      	add	r3, r2
 800572a:	685b      	ldr	r3, [r3, #4]
 800572c:	689b      	ldr	r3, [r3, #8]
 800572e:	683a      	ldr	r2, [r7, #0]
 8005730:	7850      	ldrb	r0, [r2, #1]
 8005732:	2200      	movs	r2, #0
 8005734:	6839      	ldr	r1, [r7, #0]
 8005736:	4798      	blx	r3
      break;
 8005738:	e067      	b.n	800580a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	785b      	ldrb	r3, [r3, #1]
 800573e:	2b0b      	cmp	r3, #11
 8005740:	d851      	bhi.n	80057e6 <USBD_CDC_Setup+0x18a>
 8005742:	a201      	add	r2, pc, #4	; (adr r2, 8005748 <USBD_CDC_Setup+0xec>)
 8005744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005748:	08005779 	.word	0x08005779
 800574c:	080057f5 	.word	0x080057f5
 8005750:	080057e7 	.word	0x080057e7
 8005754:	080057e7 	.word	0x080057e7
 8005758:	080057e7 	.word	0x080057e7
 800575c:	080057e7 	.word	0x080057e7
 8005760:	080057e7 	.word	0x080057e7
 8005764:	080057e7 	.word	0x080057e7
 8005768:	080057e7 	.word	0x080057e7
 800576c:	080057e7 	.word	0x080057e7
 8005770:	080057a3 	.word	0x080057a3
 8005774:	080057cd 	.word	0x080057cd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800577e:	b2db      	uxtb	r3, r3
 8005780:	2b03      	cmp	r3, #3
 8005782:	d107      	bne.n	8005794 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005784:	f107 030a 	add.w	r3, r7, #10
 8005788:	2202      	movs	r2, #2
 800578a:	4619      	mov	r1, r3
 800578c:	6878      	ldr	r0, [r7, #4]
 800578e:	f001 fd57 	bl	8007240 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005792:	e032      	b.n	80057fa <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005794:	6839      	ldr	r1, [r7, #0]
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	f001 fce1 	bl	800715e <USBD_CtlError>
            ret = USBD_FAIL;
 800579c:	2303      	movs	r3, #3
 800579e:	75fb      	strb	r3, [r7, #23]
          break;
 80057a0:	e02b      	b.n	80057fa <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80057a8:	b2db      	uxtb	r3, r3
 80057aa:	2b03      	cmp	r3, #3
 80057ac:	d107      	bne.n	80057be <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80057ae:	f107 030d 	add.w	r3, r7, #13
 80057b2:	2201      	movs	r2, #1
 80057b4:	4619      	mov	r1, r3
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	f001 fd42 	bl	8007240 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80057bc:	e01d      	b.n	80057fa <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80057be:	6839      	ldr	r1, [r7, #0]
 80057c0:	6878      	ldr	r0, [r7, #4]
 80057c2:	f001 fccc 	bl	800715e <USBD_CtlError>
            ret = USBD_FAIL;
 80057c6:	2303      	movs	r3, #3
 80057c8:	75fb      	strb	r3, [r7, #23]
          break;
 80057ca:	e016      	b.n	80057fa <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80057d2:	b2db      	uxtb	r3, r3
 80057d4:	2b03      	cmp	r3, #3
 80057d6:	d00f      	beq.n	80057f8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80057d8:	6839      	ldr	r1, [r7, #0]
 80057da:	6878      	ldr	r0, [r7, #4]
 80057dc:	f001 fcbf 	bl	800715e <USBD_CtlError>
            ret = USBD_FAIL;
 80057e0:	2303      	movs	r3, #3
 80057e2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80057e4:	e008      	b.n	80057f8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80057e6:	6839      	ldr	r1, [r7, #0]
 80057e8:	6878      	ldr	r0, [r7, #4]
 80057ea:	f001 fcb8 	bl	800715e <USBD_CtlError>
          ret = USBD_FAIL;
 80057ee:	2303      	movs	r3, #3
 80057f0:	75fb      	strb	r3, [r7, #23]
          break;
 80057f2:	e002      	b.n	80057fa <USBD_CDC_Setup+0x19e>
          break;
 80057f4:	bf00      	nop
 80057f6:	e008      	b.n	800580a <USBD_CDC_Setup+0x1ae>
          break;
 80057f8:	bf00      	nop
      }
      break;
 80057fa:	e006      	b.n	800580a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80057fc:	6839      	ldr	r1, [r7, #0]
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f001 fcad 	bl	800715e <USBD_CtlError>
      ret = USBD_FAIL;
 8005804:	2303      	movs	r3, #3
 8005806:	75fb      	strb	r3, [r7, #23]
      break;
 8005808:	bf00      	nop
  }

  return (uint8_t)ret;
 800580a:	7dfb      	ldrb	r3, [r7, #23]
}
 800580c:	4618      	mov	r0, r3
 800580e:	3718      	adds	r7, #24
 8005810:	46bd      	mov	sp, r7
 8005812:	bd80      	pop	{r7, pc}

08005814 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b084      	sub	sp, #16
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
 800581c:	460b      	mov	r3, r1
 800581e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8005826:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	32b0      	adds	r2, #176	; 0xb0
 8005832:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d101      	bne.n	800583e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800583a:	2303      	movs	r3, #3
 800583c:	e065      	b.n	800590a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	32b0      	adds	r2, #176	; 0xb0
 8005848:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800584c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800584e:	78fb      	ldrb	r3, [r7, #3]
 8005850:	f003 020f 	and.w	r2, r3, #15
 8005854:	6879      	ldr	r1, [r7, #4]
 8005856:	4613      	mov	r3, r2
 8005858:	009b      	lsls	r3, r3, #2
 800585a:	4413      	add	r3, r2
 800585c:	009b      	lsls	r3, r3, #2
 800585e:	440b      	add	r3, r1
 8005860:	3318      	adds	r3, #24
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d02f      	beq.n	80058c8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8005868:	78fb      	ldrb	r3, [r7, #3]
 800586a:	f003 020f 	and.w	r2, r3, #15
 800586e:	6879      	ldr	r1, [r7, #4]
 8005870:	4613      	mov	r3, r2
 8005872:	009b      	lsls	r3, r3, #2
 8005874:	4413      	add	r3, r2
 8005876:	009b      	lsls	r3, r3, #2
 8005878:	440b      	add	r3, r1
 800587a:	3318      	adds	r3, #24
 800587c:	681a      	ldr	r2, [r3, #0]
 800587e:	78fb      	ldrb	r3, [r7, #3]
 8005880:	f003 010f 	and.w	r1, r3, #15
 8005884:	68f8      	ldr	r0, [r7, #12]
 8005886:	460b      	mov	r3, r1
 8005888:	00db      	lsls	r3, r3, #3
 800588a:	440b      	add	r3, r1
 800588c:	009b      	lsls	r3, r3, #2
 800588e:	4403      	add	r3, r0
 8005890:	3348      	adds	r3, #72	; 0x48
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	fbb2 f1f3 	udiv	r1, r2, r3
 8005898:	fb01 f303 	mul.w	r3, r1, r3
 800589c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d112      	bne.n	80058c8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80058a2:	78fb      	ldrb	r3, [r7, #3]
 80058a4:	f003 020f 	and.w	r2, r3, #15
 80058a8:	6879      	ldr	r1, [r7, #4]
 80058aa:	4613      	mov	r3, r2
 80058ac:	009b      	lsls	r3, r3, #2
 80058ae:	4413      	add	r3, r2
 80058b0:	009b      	lsls	r3, r3, #2
 80058b2:	440b      	add	r3, r1
 80058b4:	3318      	adds	r3, #24
 80058b6:	2200      	movs	r2, #0
 80058b8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80058ba:	78f9      	ldrb	r1, [r7, #3]
 80058bc:	2300      	movs	r3, #0
 80058be:	2200      	movs	r2, #0
 80058c0:	6878      	ldr	r0, [r7, #4]
 80058c2:	f002 fb04 	bl	8007ece <USBD_LL_Transmit>
 80058c6:	e01f      	b.n	8005908 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	2200      	movs	r2, #0
 80058cc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80058d6:	687a      	ldr	r2, [r7, #4]
 80058d8:	33b0      	adds	r3, #176	; 0xb0
 80058da:	009b      	lsls	r3, r3, #2
 80058dc:	4413      	add	r3, r2
 80058de:	685b      	ldr	r3, [r3, #4]
 80058e0:	691b      	ldr	r3, [r3, #16]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d010      	beq.n	8005908 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80058ec:	687a      	ldr	r2, [r7, #4]
 80058ee:	33b0      	adds	r3, #176	; 0xb0
 80058f0:	009b      	lsls	r3, r3, #2
 80058f2:	4413      	add	r3, r2
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	691b      	ldr	r3, [r3, #16]
 80058f8:	68ba      	ldr	r2, [r7, #8]
 80058fa:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80058fe:	68ba      	ldr	r2, [r7, #8]
 8005900:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005904:	78fa      	ldrb	r2, [r7, #3]
 8005906:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005908:	2300      	movs	r3, #0
}
 800590a:	4618      	mov	r0, r3
 800590c:	3710      	adds	r7, #16
 800590e:	46bd      	mov	sp, r7
 8005910:	bd80      	pop	{r7, pc}

08005912 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005912:	b580      	push	{r7, lr}
 8005914:	b084      	sub	sp, #16
 8005916:	af00      	add	r7, sp, #0
 8005918:	6078      	str	r0, [r7, #4]
 800591a:	460b      	mov	r3, r1
 800591c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	32b0      	adds	r2, #176	; 0xb0
 8005928:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800592c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	32b0      	adds	r2, #176	; 0xb0
 8005938:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d101      	bne.n	8005944 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005940:	2303      	movs	r3, #3
 8005942:	e01a      	b.n	800597a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005944:	78fb      	ldrb	r3, [r7, #3]
 8005946:	4619      	mov	r1, r3
 8005948:	6878      	ldr	r0, [r7, #4]
 800594a:	f002 fb02 	bl	8007f52 <USBD_LL_GetRxDataSize>
 800594e:	4602      	mov	r2, r0
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800595c:	687a      	ldr	r2, [r7, #4]
 800595e:	33b0      	adds	r3, #176	; 0xb0
 8005960:	009b      	lsls	r3, r3, #2
 8005962:	4413      	add	r3, r2
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	68db      	ldr	r3, [r3, #12]
 8005968:	68fa      	ldr	r2, [r7, #12]
 800596a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800596e:	68fa      	ldr	r2, [r7, #12]
 8005970:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005974:	4611      	mov	r1, r2
 8005976:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005978:	2300      	movs	r3, #0
}
 800597a:	4618      	mov	r0, r3
 800597c:	3710      	adds	r7, #16
 800597e:	46bd      	mov	sp, r7
 8005980:	bd80      	pop	{r7, pc}

08005982 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005982:	b580      	push	{r7, lr}
 8005984:	b084      	sub	sp, #16
 8005986:	af00      	add	r7, sp, #0
 8005988:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	32b0      	adds	r2, #176	; 0xb0
 8005994:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005998:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d101      	bne.n	80059a4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80059a0:	2303      	movs	r3, #3
 80059a2:	e025      	b.n	80059f0 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80059aa:	687a      	ldr	r2, [r7, #4]
 80059ac:	33b0      	adds	r3, #176	; 0xb0
 80059ae:	009b      	lsls	r3, r3, #2
 80059b0:	4413      	add	r3, r2
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d01a      	beq.n	80059ee <USBD_CDC_EP0_RxReady+0x6c>
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80059be:	2bff      	cmp	r3, #255	; 0xff
 80059c0:	d015      	beq.n	80059ee <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80059c8:	687a      	ldr	r2, [r7, #4]
 80059ca:	33b0      	adds	r3, #176	; 0xb0
 80059cc:	009b      	lsls	r3, r3, #2
 80059ce:	4413      	add	r3, r2
 80059d0:	685b      	ldr	r3, [r3, #4]
 80059d2:	689b      	ldr	r3, [r3, #8]
 80059d4:	68fa      	ldr	r2, [r7, #12]
 80059d6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80059da:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80059dc:	68fa      	ldr	r2, [r7, #12]
 80059de:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80059e2:	b292      	uxth	r2, r2
 80059e4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	22ff      	movs	r2, #255	; 0xff
 80059ea:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80059ee:	2300      	movs	r3, #0
}
 80059f0:	4618      	mov	r0, r3
 80059f2:	3710      	adds	r7, #16
 80059f4:	46bd      	mov	sp, r7
 80059f6:	bd80      	pop	{r7, pc}

080059f8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b086      	sub	sp, #24
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005a00:	2182      	movs	r1, #130	; 0x82
 8005a02:	4818      	ldr	r0, [pc, #96]	; (8005a64 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005a04:	f000 fd49 	bl	800649a <USBD_GetEpDesc>
 8005a08:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005a0a:	2101      	movs	r1, #1
 8005a0c:	4815      	ldr	r0, [pc, #84]	; (8005a64 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005a0e:	f000 fd44 	bl	800649a <USBD_GetEpDesc>
 8005a12:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005a14:	2181      	movs	r1, #129	; 0x81
 8005a16:	4813      	ldr	r0, [pc, #76]	; (8005a64 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005a18:	f000 fd3f 	bl	800649a <USBD_GetEpDesc>
 8005a1c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d002      	beq.n	8005a2a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005a24:	697b      	ldr	r3, [r7, #20]
 8005a26:	2210      	movs	r2, #16
 8005a28:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005a2a:	693b      	ldr	r3, [r7, #16]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d006      	beq.n	8005a3e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005a30:	693b      	ldr	r3, [r7, #16]
 8005a32:	2200      	movs	r2, #0
 8005a34:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a38:	711a      	strb	r2, [r3, #4]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d006      	beq.n	8005a52 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	2200      	movs	r2, #0
 8005a48:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a4c:	711a      	strb	r2, [r3, #4]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2243      	movs	r2, #67	; 0x43
 8005a56:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005a58:	4b02      	ldr	r3, [pc, #8]	; (8005a64 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	3718      	adds	r7, #24
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bd80      	pop	{r7, pc}
 8005a62:	bf00      	nop
 8005a64:	20000058 	.word	0x20000058

08005a68 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b086      	sub	sp, #24
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005a70:	2182      	movs	r1, #130	; 0x82
 8005a72:	4818      	ldr	r0, [pc, #96]	; (8005ad4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005a74:	f000 fd11 	bl	800649a <USBD_GetEpDesc>
 8005a78:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005a7a:	2101      	movs	r1, #1
 8005a7c:	4815      	ldr	r0, [pc, #84]	; (8005ad4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005a7e:	f000 fd0c 	bl	800649a <USBD_GetEpDesc>
 8005a82:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005a84:	2181      	movs	r1, #129	; 0x81
 8005a86:	4813      	ldr	r0, [pc, #76]	; (8005ad4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005a88:	f000 fd07 	bl	800649a <USBD_GetEpDesc>
 8005a8c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d002      	beq.n	8005a9a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8005a94:	697b      	ldr	r3, [r7, #20]
 8005a96:	2210      	movs	r2, #16
 8005a98:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005a9a:	693b      	ldr	r3, [r7, #16]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d006      	beq.n	8005aae <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005aa0:	693b      	ldr	r3, [r7, #16]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	711a      	strb	r2, [r3, #4]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	f042 0202 	orr.w	r2, r2, #2
 8005aac:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d006      	beq.n	8005ac2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	711a      	strb	r2, [r3, #4]
 8005aba:	2200      	movs	r2, #0
 8005abc:	f042 0202 	orr.w	r2, r2, #2
 8005ac0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2243      	movs	r2, #67	; 0x43
 8005ac6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005ac8:	4b02      	ldr	r3, [pc, #8]	; (8005ad4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	3718      	adds	r7, #24
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}
 8005ad2:	bf00      	nop
 8005ad4:	20000058 	.word	0x20000058

08005ad8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b086      	sub	sp, #24
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005ae0:	2182      	movs	r1, #130	; 0x82
 8005ae2:	4818      	ldr	r0, [pc, #96]	; (8005b44 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005ae4:	f000 fcd9 	bl	800649a <USBD_GetEpDesc>
 8005ae8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005aea:	2101      	movs	r1, #1
 8005aec:	4815      	ldr	r0, [pc, #84]	; (8005b44 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005aee:	f000 fcd4 	bl	800649a <USBD_GetEpDesc>
 8005af2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005af4:	2181      	movs	r1, #129	; 0x81
 8005af6:	4813      	ldr	r0, [pc, #76]	; (8005b44 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005af8:	f000 fccf 	bl	800649a <USBD_GetEpDesc>
 8005afc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005afe:	697b      	ldr	r3, [r7, #20]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d002      	beq.n	8005b0a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005b04:	697b      	ldr	r3, [r7, #20]
 8005b06:	2210      	movs	r2, #16
 8005b08:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005b0a:	693b      	ldr	r3, [r7, #16]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d006      	beq.n	8005b1e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005b10:	693b      	ldr	r3, [r7, #16]
 8005b12:	2200      	movs	r2, #0
 8005b14:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b18:	711a      	strb	r2, [r3, #4]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d006      	beq.n	8005b32 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	2200      	movs	r2, #0
 8005b28:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b2c:	711a      	strb	r2, [r3, #4]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2243      	movs	r2, #67	; 0x43
 8005b36:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005b38:	4b02      	ldr	r3, [pc, #8]	; (8005b44 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	3718      	adds	r7, #24
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bd80      	pop	{r7, pc}
 8005b42:	bf00      	nop
 8005b44:	20000058 	.word	0x20000058

08005b48 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b083      	sub	sp, #12
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	220a      	movs	r2, #10
 8005b54:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005b56:	4b03      	ldr	r3, [pc, #12]	; (8005b64 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005b58:	4618      	mov	r0, r3
 8005b5a:	370c      	adds	r7, #12
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b62:	4770      	bx	lr
 8005b64:	20000014 	.word	0x20000014

08005b68 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005b68:	b480      	push	{r7}
 8005b6a:	b083      	sub	sp, #12
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
 8005b70:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d101      	bne.n	8005b7c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005b78:	2303      	movs	r3, #3
 8005b7a:	e009      	b.n	8005b90 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005b82:	687a      	ldr	r2, [r7, #4]
 8005b84:	33b0      	adds	r3, #176	; 0xb0
 8005b86:	009b      	lsls	r3, r3, #2
 8005b88:	4413      	add	r3, r2
 8005b8a:	683a      	ldr	r2, [r7, #0]
 8005b8c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8005b8e:	2300      	movs	r3, #0
}
 8005b90:	4618      	mov	r0, r3
 8005b92:	370c      	adds	r7, #12
 8005b94:	46bd      	mov	sp, r7
 8005b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9a:	4770      	bx	lr

08005b9c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b087      	sub	sp, #28
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	60f8      	str	r0, [r7, #12]
 8005ba4:	60b9      	str	r1, [r7, #8]
 8005ba6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	32b0      	adds	r2, #176	; 0xb0
 8005bb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bb6:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d101      	bne.n	8005bc2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005bbe:	2303      	movs	r3, #3
 8005bc0:	e008      	b.n	8005bd4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8005bc2:	697b      	ldr	r3, [r7, #20]
 8005bc4:	68ba      	ldr	r2, [r7, #8]
 8005bc6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	687a      	ldr	r2, [r7, #4]
 8005bce:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005bd2:	2300      	movs	r3, #0
}
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	371c      	adds	r7, #28
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bde:	4770      	bx	lr

08005be0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005be0:	b480      	push	{r7}
 8005be2:	b085      	sub	sp, #20
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
 8005be8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	32b0      	adds	r2, #176	; 0xb0
 8005bf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bf8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d101      	bne.n	8005c04 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8005c00:	2303      	movs	r3, #3
 8005c02:	e004      	b.n	8005c0e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	683a      	ldr	r2, [r7, #0]
 8005c08:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005c0c:	2300      	movs	r3, #0
}
 8005c0e:	4618      	mov	r0, r3
 8005c10:	3714      	adds	r7, #20
 8005c12:	46bd      	mov	sp, r7
 8005c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c18:	4770      	bx	lr
	...

08005c1c <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b084      	sub	sp, #16
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	32b0      	adds	r2, #176	; 0xb0
 8005c2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c32:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8005c34:	2301      	movs	r3, #1
 8005c36:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d101      	bne.n	8005c42 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005c3e:	2303      	movs	r3, #3
 8005c40:	e025      	b.n	8005c8e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d11f      	bne.n	8005c8c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	2201      	movs	r2, #1
 8005c50:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8005c54:	4b10      	ldr	r3, [pc, #64]	; (8005c98 <USBD_CDC_TransmitPacket+0x7c>)
 8005c56:	781b      	ldrb	r3, [r3, #0]
 8005c58:	f003 020f 	and.w	r2, r3, #15
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8005c62:	6878      	ldr	r0, [r7, #4]
 8005c64:	4613      	mov	r3, r2
 8005c66:	009b      	lsls	r3, r3, #2
 8005c68:	4413      	add	r3, r2
 8005c6a:	009b      	lsls	r3, r3, #2
 8005c6c:	4403      	add	r3, r0
 8005c6e:	3318      	adds	r3, #24
 8005c70:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8005c72:	4b09      	ldr	r3, [pc, #36]	; (8005c98 <USBD_CDC_TransmitPacket+0x7c>)
 8005c74:	7819      	ldrb	r1, [r3, #0]
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005c82:	6878      	ldr	r0, [r7, #4]
 8005c84:	f002 f923 	bl	8007ece <USBD_LL_Transmit>

    ret = USBD_OK;
 8005c88:	2300      	movs	r3, #0
 8005c8a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8005c8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	3710      	adds	r7, #16
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}
 8005c96:	bf00      	nop
 8005c98:	2000009b 	.word	0x2000009b

08005c9c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b084      	sub	sp, #16
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	32b0      	adds	r2, #176	; 0xb0
 8005cae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cb2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	32b0      	adds	r2, #176	; 0xb0
 8005cbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d101      	bne.n	8005cca <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8005cc6:	2303      	movs	r3, #3
 8005cc8:	e018      	b.n	8005cfc <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	7c1b      	ldrb	r3, [r3, #16]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d10a      	bne.n	8005ce8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005cd2:	4b0c      	ldr	r3, [pc, #48]	; (8005d04 <USBD_CDC_ReceivePacket+0x68>)
 8005cd4:	7819      	ldrb	r1, [r3, #0]
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005cdc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005ce0:	6878      	ldr	r0, [r7, #4]
 8005ce2:	f002 f915 	bl	8007f10 <USBD_LL_PrepareReceive>
 8005ce6:	e008      	b.n	8005cfa <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005ce8:	4b06      	ldr	r3, [pc, #24]	; (8005d04 <USBD_CDC_ReceivePacket+0x68>)
 8005cea:	7819      	ldrb	r1, [r3, #0]
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005cf2:	2340      	movs	r3, #64	; 0x40
 8005cf4:	6878      	ldr	r0, [r7, #4]
 8005cf6:	f002 f90b 	bl	8007f10 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005cfa:	2300      	movs	r3, #0
}
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	3710      	adds	r7, #16
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bd80      	pop	{r7, pc}
 8005d04:	2000009c 	.word	0x2000009c

08005d08 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b086      	sub	sp, #24
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	60f8      	str	r0, [r7, #12]
 8005d10:	60b9      	str	r1, [r7, #8]
 8005d12:	4613      	mov	r3, r2
 8005d14:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d101      	bne.n	8005d20 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005d1c:	2303      	movs	r3, #3
 8005d1e:	e01f      	b.n	8005d60 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	2200      	movs	r2, #0
 8005d24:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	2200      	movs	r2, #0
 8005d34:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d003      	beq.n	8005d46 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	68ba      	ldr	r2, [r7, #8]
 8005d42:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	2201      	movs	r2, #1
 8005d4a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	79fa      	ldrb	r2, [r7, #7]
 8005d52:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005d54:	68f8      	ldr	r0, [r7, #12]
 8005d56:	f001 ff85 	bl	8007c64 <USBD_LL_Init>
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005d5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	3718      	adds	r7, #24
 8005d64:	46bd      	mov	sp, r7
 8005d66:	bd80      	pop	{r7, pc}

08005d68 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b084      	sub	sp, #16
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
 8005d70:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005d72:	2300      	movs	r3, #0
 8005d74:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d101      	bne.n	8005d80 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005d7c:	2303      	movs	r3, #3
 8005d7e:	e025      	b.n	8005dcc <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	683a      	ldr	r2, [r7, #0]
 8005d84:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	32ae      	adds	r2, #174	; 0xae
 8005d92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d00f      	beq.n	8005dbc <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	32ae      	adds	r2, #174	; 0xae
 8005da6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dac:	f107 020e 	add.w	r2, r7, #14
 8005db0:	4610      	mov	r0, r2
 8005db2:	4798      	blx	r3
 8005db4:	4602      	mov	r2, r0
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8005dc2:	1c5a      	adds	r2, r3, #1
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8005dca:	2300      	movs	r3, #0
}
 8005dcc:	4618      	mov	r0, r3
 8005dce:	3710      	adds	r7, #16
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	bd80      	pop	{r7, pc}

08005dd4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b082      	sub	sp, #8
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005ddc:	6878      	ldr	r0, [r7, #4]
 8005dde:	f001 ff8d 	bl	8007cfc <USBD_LL_Start>
 8005de2:	4603      	mov	r3, r0
}
 8005de4:	4618      	mov	r0, r3
 8005de6:	3708      	adds	r7, #8
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bd80      	pop	{r7, pc}

08005dec <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005dec:	b480      	push	{r7}
 8005dee:	b083      	sub	sp, #12
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005df4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	370c      	adds	r7, #12
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e00:	4770      	bx	lr

08005e02 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005e02:	b580      	push	{r7, lr}
 8005e04:	b084      	sub	sp, #16
 8005e06:	af00      	add	r7, sp, #0
 8005e08:	6078      	str	r0, [r7, #4]
 8005e0a:	460b      	mov	r3, r1
 8005e0c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005e0e:	2300      	movs	r3, #0
 8005e10:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d009      	beq.n	8005e30 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	78fa      	ldrb	r2, [r7, #3]
 8005e26:	4611      	mov	r1, r2
 8005e28:	6878      	ldr	r0, [r7, #4]
 8005e2a:	4798      	blx	r3
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005e30:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e32:	4618      	mov	r0, r3
 8005e34:	3710      	adds	r7, #16
 8005e36:	46bd      	mov	sp, r7
 8005e38:	bd80      	pop	{r7, pc}

08005e3a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005e3a:	b580      	push	{r7, lr}
 8005e3c:	b084      	sub	sp, #16
 8005e3e:	af00      	add	r7, sp, #0
 8005e40:	6078      	str	r0, [r7, #4]
 8005e42:	460b      	mov	r3, r1
 8005e44:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005e46:	2300      	movs	r3, #0
 8005e48:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e50:	685b      	ldr	r3, [r3, #4]
 8005e52:	78fa      	ldrb	r2, [r7, #3]
 8005e54:	4611      	mov	r1, r2
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	4798      	blx	r3
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d001      	beq.n	8005e64 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005e60:	2303      	movs	r3, #3
 8005e62:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005e64:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	3710      	adds	r7, #16
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}

08005e6e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005e6e:	b580      	push	{r7, lr}
 8005e70:	b084      	sub	sp, #16
 8005e72:	af00      	add	r7, sp, #0
 8005e74:	6078      	str	r0, [r7, #4]
 8005e76:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005e7e:	6839      	ldr	r1, [r7, #0]
 8005e80:	4618      	mov	r0, r3
 8005e82:	f001 f932 	bl	80070ea <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2201      	movs	r2, #1
 8005e8a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005e94:	461a      	mov	r2, r3
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005ea2:	f003 031f 	and.w	r3, r3, #31
 8005ea6:	2b02      	cmp	r3, #2
 8005ea8:	d01a      	beq.n	8005ee0 <USBD_LL_SetupStage+0x72>
 8005eaa:	2b02      	cmp	r3, #2
 8005eac:	d822      	bhi.n	8005ef4 <USBD_LL_SetupStage+0x86>
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d002      	beq.n	8005eb8 <USBD_LL_SetupStage+0x4a>
 8005eb2:	2b01      	cmp	r3, #1
 8005eb4:	d00a      	beq.n	8005ecc <USBD_LL_SetupStage+0x5e>
 8005eb6:	e01d      	b.n	8005ef4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005ebe:	4619      	mov	r1, r3
 8005ec0:	6878      	ldr	r0, [r7, #4]
 8005ec2:	f000 fb5f 	bl	8006584 <USBD_StdDevReq>
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	73fb      	strb	r3, [r7, #15]
      break;
 8005eca:	e020      	b.n	8005f0e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005ed2:	4619      	mov	r1, r3
 8005ed4:	6878      	ldr	r0, [r7, #4]
 8005ed6:	f000 fbc7 	bl	8006668 <USBD_StdItfReq>
 8005eda:	4603      	mov	r3, r0
 8005edc:	73fb      	strb	r3, [r7, #15]
      break;
 8005ede:	e016      	b.n	8005f0e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005ee6:	4619      	mov	r1, r3
 8005ee8:	6878      	ldr	r0, [r7, #4]
 8005eea:	f000 fc29 	bl	8006740 <USBD_StdEPReq>
 8005eee:	4603      	mov	r3, r0
 8005ef0:	73fb      	strb	r3, [r7, #15]
      break;
 8005ef2:	e00c      	b.n	8005f0e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005efa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005efe:	b2db      	uxtb	r3, r3
 8005f00:	4619      	mov	r1, r3
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f001 ff5a 	bl	8007dbc <USBD_LL_StallEP>
 8005f08:	4603      	mov	r3, r0
 8005f0a:	73fb      	strb	r3, [r7, #15]
      break;
 8005f0c:	bf00      	nop
  }

  return ret;
 8005f0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f10:	4618      	mov	r0, r3
 8005f12:	3710      	adds	r7, #16
 8005f14:	46bd      	mov	sp, r7
 8005f16:	bd80      	pop	{r7, pc}

08005f18 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b086      	sub	sp, #24
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	60f8      	str	r0, [r7, #12]
 8005f20:	460b      	mov	r3, r1
 8005f22:	607a      	str	r2, [r7, #4]
 8005f24:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8005f26:	2300      	movs	r3, #0
 8005f28:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8005f2a:	7afb      	ldrb	r3, [r7, #11]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d16e      	bne.n	800600e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005f36:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005f3e:	2b03      	cmp	r3, #3
 8005f40:	f040 8098 	bne.w	8006074 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8005f44:	693b      	ldr	r3, [r7, #16]
 8005f46:	689a      	ldr	r2, [r3, #8]
 8005f48:	693b      	ldr	r3, [r7, #16]
 8005f4a:	68db      	ldr	r3, [r3, #12]
 8005f4c:	429a      	cmp	r2, r3
 8005f4e:	d913      	bls.n	8005f78 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8005f50:	693b      	ldr	r3, [r7, #16]
 8005f52:	689a      	ldr	r2, [r3, #8]
 8005f54:	693b      	ldr	r3, [r7, #16]
 8005f56:	68db      	ldr	r3, [r3, #12]
 8005f58:	1ad2      	subs	r2, r2, r3
 8005f5a:	693b      	ldr	r3, [r7, #16]
 8005f5c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005f5e:	693b      	ldr	r3, [r7, #16]
 8005f60:	68da      	ldr	r2, [r3, #12]
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	689b      	ldr	r3, [r3, #8]
 8005f66:	4293      	cmp	r3, r2
 8005f68:	bf28      	it	cs
 8005f6a:	4613      	movcs	r3, r2
 8005f6c:	461a      	mov	r2, r3
 8005f6e:	6879      	ldr	r1, [r7, #4]
 8005f70:	68f8      	ldr	r0, [r7, #12]
 8005f72:	f001 f9ae 	bl	80072d2 <USBD_CtlContinueRx>
 8005f76:	e07d      	b.n	8006074 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005f7e:	f003 031f 	and.w	r3, r3, #31
 8005f82:	2b02      	cmp	r3, #2
 8005f84:	d014      	beq.n	8005fb0 <USBD_LL_DataOutStage+0x98>
 8005f86:	2b02      	cmp	r3, #2
 8005f88:	d81d      	bhi.n	8005fc6 <USBD_LL_DataOutStage+0xae>
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d002      	beq.n	8005f94 <USBD_LL_DataOutStage+0x7c>
 8005f8e:	2b01      	cmp	r3, #1
 8005f90:	d003      	beq.n	8005f9a <USBD_LL_DataOutStage+0x82>
 8005f92:	e018      	b.n	8005fc6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005f94:	2300      	movs	r3, #0
 8005f96:	75bb      	strb	r3, [r7, #22]
            break;
 8005f98:	e018      	b.n	8005fcc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005fa0:	b2db      	uxtb	r3, r3
 8005fa2:	4619      	mov	r1, r3
 8005fa4:	68f8      	ldr	r0, [r7, #12]
 8005fa6:	f000 fa5e 	bl	8006466 <USBD_CoreFindIF>
 8005faa:	4603      	mov	r3, r0
 8005fac:	75bb      	strb	r3, [r7, #22]
            break;
 8005fae:	e00d      	b.n	8005fcc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005fb6:	b2db      	uxtb	r3, r3
 8005fb8:	4619      	mov	r1, r3
 8005fba:	68f8      	ldr	r0, [r7, #12]
 8005fbc:	f000 fa60 	bl	8006480 <USBD_CoreFindEP>
 8005fc0:	4603      	mov	r3, r0
 8005fc2:	75bb      	strb	r3, [r7, #22]
            break;
 8005fc4:	e002      	b.n	8005fcc <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	75bb      	strb	r3, [r7, #22]
            break;
 8005fca:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8005fcc:	7dbb      	ldrb	r3, [r7, #22]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d119      	bne.n	8006006 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fd8:	b2db      	uxtb	r3, r3
 8005fda:	2b03      	cmp	r3, #3
 8005fdc:	d113      	bne.n	8006006 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8005fde:	7dba      	ldrb	r2, [r7, #22]
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	32ae      	adds	r2, #174	; 0xae
 8005fe4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fe8:	691b      	ldr	r3, [r3, #16]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d00b      	beq.n	8006006 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8005fee:	7dba      	ldrb	r2, [r7, #22]
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8005ff6:	7dba      	ldrb	r2, [r7, #22]
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	32ae      	adds	r2, #174	; 0xae
 8005ffc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006000:	691b      	ldr	r3, [r3, #16]
 8006002:	68f8      	ldr	r0, [r7, #12]
 8006004:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006006:	68f8      	ldr	r0, [r7, #12]
 8006008:	f001 f974 	bl	80072f4 <USBD_CtlSendStatus>
 800600c:	e032      	b.n	8006074 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800600e:	7afb      	ldrb	r3, [r7, #11]
 8006010:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006014:	b2db      	uxtb	r3, r3
 8006016:	4619      	mov	r1, r3
 8006018:	68f8      	ldr	r0, [r7, #12]
 800601a:	f000 fa31 	bl	8006480 <USBD_CoreFindEP>
 800601e:	4603      	mov	r3, r0
 8006020:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006022:	7dbb      	ldrb	r3, [r7, #22]
 8006024:	2bff      	cmp	r3, #255	; 0xff
 8006026:	d025      	beq.n	8006074 <USBD_LL_DataOutStage+0x15c>
 8006028:	7dbb      	ldrb	r3, [r7, #22]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d122      	bne.n	8006074 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006034:	b2db      	uxtb	r3, r3
 8006036:	2b03      	cmp	r3, #3
 8006038:	d117      	bne.n	800606a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800603a:	7dba      	ldrb	r2, [r7, #22]
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	32ae      	adds	r2, #174	; 0xae
 8006040:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006044:	699b      	ldr	r3, [r3, #24]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d00f      	beq.n	800606a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800604a:	7dba      	ldrb	r2, [r7, #22]
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006052:	7dba      	ldrb	r2, [r7, #22]
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	32ae      	adds	r2, #174	; 0xae
 8006058:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800605c:	699b      	ldr	r3, [r3, #24]
 800605e:	7afa      	ldrb	r2, [r7, #11]
 8006060:	4611      	mov	r1, r2
 8006062:	68f8      	ldr	r0, [r7, #12]
 8006064:	4798      	blx	r3
 8006066:	4603      	mov	r3, r0
 8006068:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800606a:	7dfb      	ldrb	r3, [r7, #23]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d001      	beq.n	8006074 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006070:	7dfb      	ldrb	r3, [r7, #23]
 8006072:	e000      	b.n	8006076 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006074:	2300      	movs	r3, #0
}
 8006076:	4618      	mov	r0, r3
 8006078:	3718      	adds	r7, #24
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}

0800607e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800607e:	b580      	push	{r7, lr}
 8006080:	b086      	sub	sp, #24
 8006082:	af00      	add	r7, sp, #0
 8006084:	60f8      	str	r0, [r7, #12]
 8006086:	460b      	mov	r3, r1
 8006088:	607a      	str	r2, [r7, #4]
 800608a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800608c:	7afb      	ldrb	r3, [r7, #11]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d16f      	bne.n	8006172 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	3314      	adds	r3, #20
 8006096:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800609e:	2b02      	cmp	r3, #2
 80060a0:	d15a      	bne.n	8006158 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80060a2:	693b      	ldr	r3, [r7, #16]
 80060a4:	689a      	ldr	r2, [r3, #8]
 80060a6:	693b      	ldr	r3, [r7, #16]
 80060a8:	68db      	ldr	r3, [r3, #12]
 80060aa:	429a      	cmp	r2, r3
 80060ac:	d914      	bls.n	80060d8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80060ae:	693b      	ldr	r3, [r7, #16]
 80060b0:	689a      	ldr	r2, [r3, #8]
 80060b2:	693b      	ldr	r3, [r7, #16]
 80060b4:	68db      	ldr	r3, [r3, #12]
 80060b6:	1ad2      	subs	r2, r2, r3
 80060b8:	693b      	ldr	r3, [r7, #16]
 80060ba:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80060bc:	693b      	ldr	r3, [r7, #16]
 80060be:	689b      	ldr	r3, [r3, #8]
 80060c0:	461a      	mov	r2, r3
 80060c2:	6879      	ldr	r1, [r7, #4]
 80060c4:	68f8      	ldr	r0, [r7, #12]
 80060c6:	f001 f8d6 	bl	8007276 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80060ca:	2300      	movs	r3, #0
 80060cc:	2200      	movs	r2, #0
 80060ce:	2100      	movs	r1, #0
 80060d0:	68f8      	ldr	r0, [r7, #12]
 80060d2:	f001 ff1d 	bl	8007f10 <USBD_LL_PrepareReceive>
 80060d6:	e03f      	b.n	8006158 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80060d8:	693b      	ldr	r3, [r7, #16]
 80060da:	68da      	ldr	r2, [r3, #12]
 80060dc:	693b      	ldr	r3, [r7, #16]
 80060de:	689b      	ldr	r3, [r3, #8]
 80060e0:	429a      	cmp	r2, r3
 80060e2:	d11c      	bne.n	800611e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80060e4:	693b      	ldr	r3, [r7, #16]
 80060e6:	685a      	ldr	r2, [r3, #4]
 80060e8:	693b      	ldr	r3, [r7, #16]
 80060ea:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80060ec:	429a      	cmp	r2, r3
 80060ee:	d316      	bcc.n	800611e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80060f0:	693b      	ldr	r3, [r7, #16]
 80060f2:	685a      	ldr	r2, [r3, #4]
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80060fa:	429a      	cmp	r2, r3
 80060fc:	d20f      	bcs.n	800611e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80060fe:	2200      	movs	r2, #0
 8006100:	2100      	movs	r1, #0
 8006102:	68f8      	ldr	r0, [r7, #12]
 8006104:	f001 f8b7 	bl	8007276 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	2200      	movs	r2, #0
 800610c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006110:	2300      	movs	r3, #0
 8006112:	2200      	movs	r2, #0
 8006114:	2100      	movs	r1, #0
 8006116:	68f8      	ldr	r0, [r7, #12]
 8006118:	f001 fefa 	bl	8007f10 <USBD_LL_PrepareReceive>
 800611c:	e01c      	b.n	8006158 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006124:	b2db      	uxtb	r3, r3
 8006126:	2b03      	cmp	r3, #3
 8006128:	d10f      	bne.n	800614a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006130:	68db      	ldr	r3, [r3, #12]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d009      	beq.n	800614a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	2200      	movs	r2, #0
 800613a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006144:	68db      	ldr	r3, [r3, #12]
 8006146:	68f8      	ldr	r0, [r7, #12]
 8006148:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800614a:	2180      	movs	r1, #128	; 0x80
 800614c:	68f8      	ldr	r0, [r7, #12]
 800614e:	f001 fe35 	bl	8007dbc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006152:	68f8      	ldr	r0, [r7, #12]
 8006154:	f001 f8e1 	bl	800731a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800615e:	2b00      	cmp	r3, #0
 8006160:	d03a      	beq.n	80061d8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006162:	68f8      	ldr	r0, [r7, #12]
 8006164:	f7ff fe42 	bl	8005dec <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	2200      	movs	r2, #0
 800616c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006170:	e032      	b.n	80061d8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006172:	7afb      	ldrb	r3, [r7, #11]
 8006174:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006178:	b2db      	uxtb	r3, r3
 800617a:	4619      	mov	r1, r3
 800617c:	68f8      	ldr	r0, [r7, #12]
 800617e:	f000 f97f 	bl	8006480 <USBD_CoreFindEP>
 8006182:	4603      	mov	r3, r0
 8006184:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006186:	7dfb      	ldrb	r3, [r7, #23]
 8006188:	2bff      	cmp	r3, #255	; 0xff
 800618a:	d025      	beq.n	80061d8 <USBD_LL_DataInStage+0x15a>
 800618c:	7dfb      	ldrb	r3, [r7, #23]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d122      	bne.n	80061d8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006198:	b2db      	uxtb	r3, r3
 800619a:	2b03      	cmp	r3, #3
 800619c:	d11c      	bne.n	80061d8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800619e:	7dfa      	ldrb	r2, [r7, #23]
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	32ae      	adds	r2, #174	; 0xae
 80061a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061a8:	695b      	ldr	r3, [r3, #20]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d014      	beq.n	80061d8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80061ae:	7dfa      	ldrb	r2, [r7, #23]
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80061b6:	7dfa      	ldrb	r2, [r7, #23]
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	32ae      	adds	r2, #174	; 0xae
 80061bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061c0:	695b      	ldr	r3, [r3, #20]
 80061c2:	7afa      	ldrb	r2, [r7, #11]
 80061c4:	4611      	mov	r1, r2
 80061c6:	68f8      	ldr	r0, [r7, #12]
 80061c8:	4798      	blx	r3
 80061ca:	4603      	mov	r3, r0
 80061cc:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80061ce:	7dbb      	ldrb	r3, [r7, #22]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d001      	beq.n	80061d8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80061d4:	7dbb      	ldrb	r3, [r7, #22]
 80061d6:	e000      	b.n	80061da <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80061d8:	2300      	movs	r3, #0
}
 80061da:	4618      	mov	r0, r3
 80061dc:	3718      	adds	r7, #24
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}

080061e2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80061e2:	b580      	push	{r7, lr}
 80061e4:	b084      	sub	sp, #16
 80061e6:	af00      	add	r7, sp, #0
 80061e8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80061ea:	2300      	movs	r3, #0
 80061ec:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2201      	movs	r2, #1
 80061f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2200      	movs	r2, #0
 80061fa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2200      	movs	r2, #0
 8006202:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2200      	movs	r2, #0
 8006208:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2200      	movs	r2, #0
 8006210:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800621a:	2b00      	cmp	r3, #0
 800621c:	d014      	beq.n	8006248 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006224:	685b      	ldr	r3, [r3, #4]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d00e      	beq.n	8006248 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006230:	685b      	ldr	r3, [r3, #4]
 8006232:	687a      	ldr	r2, [r7, #4]
 8006234:	6852      	ldr	r2, [r2, #4]
 8006236:	b2d2      	uxtb	r2, r2
 8006238:	4611      	mov	r1, r2
 800623a:	6878      	ldr	r0, [r7, #4]
 800623c:	4798      	blx	r3
 800623e:	4603      	mov	r3, r0
 8006240:	2b00      	cmp	r3, #0
 8006242:	d001      	beq.n	8006248 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006244:	2303      	movs	r3, #3
 8006246:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006248:	2340      	movs	r3, #64	; 0x40
 800624a:	2200      	movs	r2, #0
 800624c:	2100      	movs	r1, #0
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f001 fd6f 	bl	8007d32 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2201      	movs	r2, #1
 8006258:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2240      	movs	r2, #64	; 0x40
 8006260:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006264:	2340      	movs	r3, #64	; 0x40
 8006266:	2200      	movs	r2, #0
 8006268:	2180      	movs	r1, #128	; 0x80
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f001 fd61 	bl	8007d32 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2201      	movs	r2, #1
 8006274:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2240      	movs	r2, #64	; 0x40
 800627a:	621a      	str	r2, [r3, #32]

  return ret;
 800627c:	7bfb      	ldrb	r3, [r7, #15]
}
 800627e:	4618      	mov	r0, r3
 8006280:	3710      	adds	r7, #16
 8006282:	46bd      	mov	sp, r7
 8006284:	bd80      	pop	{r7, pc}

08006286 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006286:	b480      	push	{r7}
 8006288:	b083      	sub	sp, #12
 800628a:	af00      	add	r7, sp, #0
 800628c:	6078      	str	r0, [r7, #4]
 800628e:	460b      	mov	r3, r1
 8006290:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	78fa      	ldrb	r2, [r7, #3]
 8006296:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006298:	2300      	movs	r3, #0
}
 800629a:	4618      	mov	r0, r3
 800629c:	370c      	adds	r7, #12
 800629e:	46bd      	mov	sp, r7
 80062a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a4:	4770      	bx	lr

080062a6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80062a6:	b480      	push	{r7}
 80062a8:	b083      	sub	sp, #12
 80062aa:	af00      	add	r7, sp, #0
 80062ac:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062b4:	b2da      	uxtb	r2, r3
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2204      	movs	r2, #4
 80062c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80062c4:	2300      	movs	r3, #0
}
 80062c6:	4618      	mov	r0, r3
 80062c8:	370c      	adds	r7, #12
 80062ca:	46bd      	mov	sp, r7
 80062cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d0:	4770      	bx	lr

080062d2 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80062d2:	b480      	push	{r7}
 80062d4:	b083      	sub	sp, #12
 80062d6:	af00      	add	r7, sp, #0
 80062d8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062e0:	b2db      	uxtb	r3, r3
 80062e2:	2b04      	cmp	r3, #4
 80062e4:	d106      	bne.n	80062f4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80062ec:	b2da      	uxtb	r2, r3
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80062f4:	2300      	movs	r3, #0
}
 80062f6:	4618      	mov	r0, r3
 80062f8:	370c      	adds	r7, #12
 80062fa:	46bd      	mov	sp, r7
 80062fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006300:	4770      	bx	lr

08006302 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006302:	b580      	push	{r7, lr}
 8006304:	b082      	sub	sp, #8
 8006306:	af00      	add	r7, sp, #0
 8006308:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006310:	b2db      	uxtb	r3, r3
 8006312:	2b03      	cmp	r3, #3
 8006314:	d110      	bne.n	8006338 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800631c:	2b00      	cmp	r3, #0
 800631e:	d00b      	beq.n	8006338 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006326:	69db      	ldr	r3, [r3, #28]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d005      	beq.n	8006338 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006332:	69db      	ldr	r3, [r3, #28]
 8006334:	6878      	ldr	r0, [r7, #4]
 8006336:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006338:	2300      	movs	r3, #0
}
 800633a:	4618      	mov	r0, r3
 800633c:	3708      	adds	r7, #8
 800633e:	46bd      	mov	sp, r7
 8006340:	bd80      	pop	{r7, pc}

08006342 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006342:	b580      	push	{r7, lr}
 8006344:	b082      	sub	sp, #8
 8006346:	af00      	add	r7, sp, #0
 8006348:	6078      	str	r0, [r7, #4]
 800634a:	460b      	mov	r3, r1
 800634c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	32ae      	adds	r2, #174	; 0xae
 8006358:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d101      	bne.n	8006364 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006360:	2303      	movs	r3, #3
 8006362:	e01c      	b.n	800639e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800636a:	b2db      	uxtb	r3, r3
 800636c:	2b03      	cmp	r3, #3
 800636e:	d115      	bne.n	800639c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	32ae      	adds	r2, #174	; 0xae
 800637a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800637e:	6a1b      	ldr	r3, [r3, #32]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d00b      	beq.n	800639c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	32ae      	adds	r2, #174	; 0xae
 800638e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006392:	6a1b      	ldr	r3, [r3, #32]
 8006394:	78fa      	ldrb	r2, [r7, #3]
 8006396:	4611      	mov	r1, r2
 8006398:	6878      	ldr	r0, [r7, #4]
 800639a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800639c:	2300      	movs	r3, #0
}
 800639e:	4618      	mov	r0, r3
 80063a0:	3708      	adds	r7, #8
 80063a2:	46bd      	mov	sp, r7
 80063a4:	bd80      	pop	{r7, pc}

080063a6 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80063a6:	b580      	push	{r7, lr}
 80063a8:	b082      	sub	sp, #8
 80063aa:	af00      	add	r7, sp, #0
 80063ac:	6078      	str	r0, [r7, #4]
 80063ae:	460b      	mov	r3, r1
 80063b0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	32ae      	adds	r2, #174	; 0xae
 80063bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d101      	bne.n	80063c8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80063c4:	2303      	movs	r3, #3
 80063c6:	e01c      	b.n	8006402 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063ce:	b2db      	uxtb	r3, r3
 80063d0:	2b03      	cmp	r3, #3
 80063d2:	d115      	bne.n	8006400 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	32ae      	adds	r2, #174	; 0xae
 80063de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d00b      	beq.n	8006400 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	32ae      	adds	r2, #174	; 0xae
 80063f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063f8:	78fa      	ldrb	r2, [r7, #3]
 80063fa:	4611      	mov	r1, r2
 80063fc:	6878      	ldr	r0, [r7, #4]
 80063fe:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006400:	2300      	movs	r3, #0
}
 8006402:	4618      	mov	r0, r3
 8006404:	3708      	adds	r7, #8
 8006406:	46bd      	mov	sp, r7
 8006408:	bd80      	pop	{r7, pc}

0800640a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800640a:	b480      	push	{r7}
 800640c:	b083      	sub	sp, #12
 800640e:	af00      	add	r7, sp, #0
 8006410:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006412:	2300      	movs	r3, #0
}
 8006414:	4618      	mov	r0, r3
 8006416:	370c      	adds	r7, #12
 8006418:	46bd      	mov	sp, r7
 800641a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641e:	4770      	bx	lr

08006420 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b084      	sub	sp, #16
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006428:	2300      	movs	r3, #0
 800642a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2201      	movs	r2, #1
 8006430:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800643a:	2b00      	cmp	r3, #0
 800643c:	d00e      	beq.n	800645c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006444:	685b      	ldr	r3, [r3, #4]
 8006446:	687a      	ldr	r2, [r7, #4]
 8006448:	6852      	ldr	r2, [r2, #4]
 800644a:	b2d2      	uxtb	r2, r2
 800644c:	4611      	mov	r1, r2
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	4798      	blx	r3
 8006452:	4603      	mov	r3, r0
 8006454:	2b00      	cmp	r3, #0
 8006456:	d001      	beq.n	800645c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006458:	2303      	movs	r3, #3
 800645a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800645c:	7bfb      	ldrb	r3, [r7, #15]
}
 800645e:	4618      	mov	r0, r3
 8006460:	3710      	adds	r7, #16
 8006462:	46bd      	mov	sp, r7
 8006464:	bd80      	pop	{r7, pc}

08006466 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006466:	b480      	push	{r7}
 8006468:	b083      	sub	sp, #12
 800646a:	af00      	add	r7, sp, #0
 800646c:	6078      	str	r0, [r7, #4]
 800646e:	460b      	mov	r3, r1
 8006470:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006472:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006474:	4618      	mov	r0, r3
 8006476:	370c      	adds	r7, #12
 8006478:	46bd      	mov	sp, r7
 800647a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647e:	4770      	bx	lr

08006480 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006480:	b480      	push	{r7}
 8006482:	b083      	sub	sp, #12
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
 8006488:	460b      	mov	r3, r1
 800648a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800648c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800648e:	4618      	mov	r0, r3
 8006490:	370c      	adds	r7, #12
 8006492:	46bd      	mov	sp, r7
 8006494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006498:	4770      	bx	lr

0800649a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800649a:	b580      	push	{r7, lr}
 800649c:	b086      	sub	sp, #24
 800649e:	af00      	add	r7, sp, #0
 80064a0:	6078      	str	r0, [r7, #4]
 80064a2:	460b      	mov	r3, r1
 80064a4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80064ae:	2300      	movs	r3, #0
 80064b0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	885b      	ldrh	r3, [r3, #2]
 80064b6:	b29a      	uxth	r2, r3
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	781b      	ldrb	r3, [r3, #0]
 80064bc:	b29b      	uxth	r3, r3
 80064be:	429a      	cmp	r2, r3
 80064c0:	d920      	bls.n	8006504 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	781b      	ldrb	r3, [r3, #0]
 80064c6:	b29b      	uxth	r3, r3
 80064c8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80064ca:	e013      	b.n	80064f4 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80064cc:	f107 030a 	add.w	r3, r7, #10
 80064d0:	4619      	mov	r1, r3
 80064d2:	6978      	ldr	r0, [r7, #20]
 80064d4:	f000 f81b 	bl	800650e <USBD_GetNextDesc>
 80064d8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	785b      	ldrb	r3, [r3, #1]
 80064de:	2b05      	cmp	r3, #5
 80064e0:	d108      	bne.n	80064f4 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80064e2:	697b      	ldr	r3, [r7, #20]
 80064e4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80064e6:	693b      	ldr	r3, [r7, #16]
 80064e8:	789b      	ldrb	r3, [r3, #2]
 80064ea:	78fa      	ldrb	r2, [r7, #3]
 80064ec:	429a      	cmp	r2, r3
 80064ee:	d008      	beq.n	8006502 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80064f0:	2300      	movs	r3, #0
 80064f2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	885b      	ldrh	r3, [r3, #2]
 80064f8:	b29a      	uxth	r2, r3
 80064fa:	897b      	ldrh	r3, [r7, #10]
 80064fc:	429a      	cmp	r2, r3
 80064fe:	d8e5      	bhi.n	80064cc <USBD_GetEpDesc+0x32>
 8006500:	e000      	b.n	8006504 <USBD_GetEpDesc+0x6a>
          break;
 8006502:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006504:	693b      	ldr	r3, [r7, #16]
}
 8006506:	4618      	mov	r0, r3
 8006508:	3718      	adds	r7, #24
 800650a:	46bd      	mov	sp, r7
 800650c:	bd80      	pop	{r7, pc}

0800650e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800650e:	b480      	push	{r7}
 8006510:	b085      	sub	sp, #20
 8006512:	af00      	add	r7, sp, #0
 8006514:	6078      	str	r0, [r7, #4]
 8006516:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	881a      	ldrh	r2, [r3, #0]
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	781b      	ldrb	r3, [r3, #0]
 8006524:	b29b      	uxth	r3, r3
 8006526:	4413      	add	r3, r2
 8006528:	b29a      	uxth	r2, r3
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	781b      	ldrb	r3, [r3, #0]
 8006532:	461a      	mov	r2, r3
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	4413      	add	r3, r2
 8006538:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800653a:	68fb      	ldr	r3, [r7, #12]
}
 800653c:	4618      	mov	r0, r3
 800653e:	3714      	adds	r7, #20
 8006540:	46bd      	mov	sp, r7
 8006542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006546:	4770      	bx	lr

08006548 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006548:	b480      	push	{r7}
 800654a:	b087      	sub	sp, #28
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006554:	697b      	ldr	r3, [r7, #20]
 8006556:	781b      	ldrb	r3, [r3, #0]
 8006558:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800655a:	697b      	ldr	r3, [r7, #20]
 800655c:	3301      	adds	r3, #1
 800655e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006560:	697b      	ldr	r3, [r7, #20]
 8006562:	781b      	ldrb	r3, [r3, #0]
 8006564:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006566:	8a3b      	ldrh	r3, [r7, #16]
 8006568:	021b      	lsls	r3, r3, #8
 800656a:	b21a      	sxth	r2, r3
 800656c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006570:	4313      	orrs	r3, r2
 8006572:	b21b      	sxth	r3, r3
 8006574:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006576:	89fb      	ldrh	r3, [r7, #14]
}
 8006578:	4618      	mov	r0, r3
 800657a:	371c      	adds	r7, #28
 800657c:	46bd      	mov	sp, r7
 800657e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006582:	4770      	bx	lr

08006584 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b084      	sub	sp, #16
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
 800658c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800658e:	2300      	movs	r3, #0
 8006590:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	781b      	ldrb	r3, [r3, #0]
 8006596:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800659a:	2b40      	cmp	r3, #64	; 0x40
 800659c:	d005      	beq.n	80065aa <USBD_StdDevReq+0x26>
 800659e:	2b40      	cmp	r3, #64	; 0x40
 80065a0:	d857      	bhi.n	8006652 <USBD_StdDevReq+0xce>
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d00f      	beq.n	80065c6 <USBD_StdDevReq+0x42>
 80065a6:	2b20      	cmp	r3, #32
 80065a8:	d153      	bne.n	8006652 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	32ae      	adds	r2, #174	; 0xae
 80065b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065b8:	689b      	ldr	r3, [r3, #8]
 80065ba:	6839      	ldr	r1, [r7, #0]
 80065bc:	6878      	ldr	r0, [r7, #4]
 80065be:	4798      	blx	r3
 80065c0:	4603      	mov	r3, r0
 80065c2:	73fb      	strb	r3, [r7, #15]
      break;
 80065c4:	e04a      	b.n	800665c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	785b      	ldrb	r3, [r3, #1]
 80065ca:	2b09      	cmp	r3, #9
 80065cc:	d83b      	bhi.n	8006646 <USBD_StdDevReq+0xc2>
 80065ce:	a201      	add	r2, pc, #4	; (adr r2, 80065d4 <USBD_StdDevReq+0x50>)
 80065d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065d4:	08006629 	.word	0x08006629
 80065d8:	0800663d 	.word	0x0800663d
 80065dc:	08006647 	.word	0x08006647
 80065e0:	08006633 	.word	0x08006633
 80065e4:	08006647 	.word	0x08006647
 80065e8:	08006607 	.word	0x08006607
 80065ec:	080065fd 	.word	0x080065fd
 80065f0:	08006647 	.word	0x08006647
 80065f4:	0800661f 	.word	0x0800661f
 80065f8:	08006611 	.word	0x08006611
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80065fc:	6839      	ldr	r1, [r7, #0]
 80065fe:	6878      	ldr	r0, [r7, #4]
 8006600:	f000 fa3c 	bl	8006a7c <USBD_GetDescriptor>
          break;
 8006604:	e024      	b.n	8006650 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006606:	6839      	ldr	r1, [r7, #0]
 8006608:	6878      	ldr	r0, [r7, #4]
 800660a:	f000 fbcb 	bl	8006da4 <USBD_SetAddress>
          break;
 800660e:	e01f      	b.n	8006650 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006610:	6839      	ldr	r1, [r7, #0]
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	f000 fc0a 	bl	8006e2c <USBD_SetConfig>
 8006618:	4603      	mov	r3, r0
 800661a:	73fb      	strb	r3, [r7, #15]
          break;
 800661c:	e018      	b.n	8006650 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800661e:	6839      	ldr	r1, [r7, #0]
 8006620:	6878      	ldr	r0, [r7, #4]
 8006622:	f000 fcad 	bl	8006f80 <USBD_GetConfig>
          break;
 8006626:	e013      	b.n	8006650 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006628:	6839      	ldr	r1, [r7, #0]
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	f000 fcde 	bl	8006fec <USBD_GetStatus>
          break;
 8006630:	e00e      	b.n	8006650 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006632:	6839      	ldr	r1, [r7, #0]
 8006634:	6878      	ldr	r0, [r7, #4]
 8006636:	f000 fd0d 	bl	8007054 <USBD_SetFeature>
          break;
 800663a:	e009      	b.n	8006650 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800663c:	6839      	ldr	r1, [r7, #0]
 800663e:	6878      	ldr	r0, [r7, #4]
 8006640:	f000 fd31 	bl	80070a6 <USBD_ClrFeature>
          break;
 8006644:	e004      	b.n	8006650 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006646:	6839      	ldr	r1, [r7, #0]
 8006648:	6878      	ldr	r0, [r7, #4]
 800664a:	f000 fd88 	bl	800715e <USBD_CtlError>
          break;
 800664e:	bf00      	nop
      }
      break;
 8006650:	e004      	b.n	800665c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8006652:	6839      	ldr	r1, [r7, #0]
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	f000 fd82 	bl	800715e <USBD_CtlError>
      break;
 800665a:	bf00      	nop
  }

  return ret;
 800665c:	7bfb      	ldrb	r3, [r7, #15]
}
 800665e:	4618      	mov	r0, r3
 8006660:	3710      	adds	r7, #16
 8006662:	46bd      	mov	sp, r7
 8006664:	bd80      	pop	{r7, pc}
 8006666:	bf00      	nop

08006668 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b084      	sub	sp, #16
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
 8006670:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006672:	2300      	movs	r3, #0
 8006674:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	781b      	ldrb	r3, [r3, #0]
 800667a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800667e:	2b40      	cmp	r3, #64	; 0x40
 8006680:	d005      	beq.n	800668e <USBD_StdItfReq+0x26>
 8006682:	2b40      	cmp	r3, #64	; 0x40
 8006684:	d852      	bhi.n	800672c <USBD_StdItfReq+0xc4>
 8006686:	2b00      	cmp	r3, #0
 8006688:	d001      	beq.n	800668e <USBD_StdItfReq+0x26>
 800668a:	2b20      	cmp	r3, #32
 800668c:	d14e      	bne.n	800672c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006694:	b2db      	uxtb	r3, r3
 8006696:	3b01      	subs	r3, #1
 8006698:	2b02      	cmp	r3, #2
 800669a:	d840      	bhi.n	800671e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	889b      	ldrh	r3, [r3, #4]
 80066a0:	b2db      	uxtb	r3, r3
 80066a2:	2b01      	cmp	r3, #1
 80066a4:	d836      	bhi.n	8006714 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	889b      	ldrh	r3, [r3, #4]
 80066aa:	b2db      	uxtb	r3, r3
 80066ac:	4619      	mov	r1, r3
 80066ae:	6878      	ldr	r0, [r7, #4]
 80066b0:	f7ff fed9 	bl	8006466 <USBD_CoreFindIF>
 80066b4:	4603      	mov	r3, r0
 80066b6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80066b8:	7bbb      	ldrb	r3, [r7, #14]
 80066ba:	2bff      	cmp	r3, #255	; 0xff
 80066bc:	d01d      	beq.n	80066fa <USBD_StdItfReq+0x92>
 80066be:	7bbb      	ldrb	r3, [r7, #14]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d11a      	bne.n	80066fa <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80066c4:	7bba      	ldrb	r2, [r7, #14]
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	32ae      	adds	r2, #174	; 0xae
 80066ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066ce:	689b      	ldr	r3, [r3, #8]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d00f      	beq.n	80066f4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80066d4:	7bba      	ldrb	r2, [r7, #14]
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80066dc:	7bba      	ldrb	r2, [r7, #14]
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	32ae      	adds	r2, #174	; 0xae
 80066e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066e6:	689b      	ldr	r3, [r3, #8]
 80066e8:	6839      	ldr	r1, [r7, #0]
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	4798      	blx	r3
 80066ee:	4603      	mov	r3, r0
 80066f0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80066f2:	e004      	b.n	80066fe <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80066f4:	2303      	movs	r3, #3
 80066f6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80066f8:	e001      	b.n	80066fe <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80066fa:	2303      	movs	r3, #3
 80066fc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	88db      	ldrh	r3, [r3, #6]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d110      	bne.n	8006728 <USBD_StdItfReq+0xc0>
 8006706:	7bfb      	ldrb	r3, [r7, #15]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d10d      	bne.n	8006728 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800670c:	6878      	ldr	r0, [r7, #4]
 800670e:	f000 fdf1 	bl	80072f4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006712:	e009      	b.n	8006728 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006714:	6839      	ldr	r1, [r7, #0]
 8006716:	6878      	ldr	r0, [r7, #4]
 8006718:	f000 fd21 	bl	800715e <USBD_CtlError>
          break;
 800671c:	e004      	b.n	8006728 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800671e:	6839      	ldr	r1, [r7, #0]
 8006720:	6878      	ldr	r0, [r7, #4]
 8006722:	f000 fd1c 	bl	800715e <USBD_CtlError>
          break;
 8006726:	e000      	b.n	800672a <USBD_StdItfReq+0xc2>
          break;
 8006728:	bf00      	nop
      }
      break;
 800672a:	e004      	b.n	8006736 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800672c:	6839      	ldr	r1, [r7, #0]
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	f000 fd15 	bl	800715e <USBD_CtlError>
      break;
 8006734:	bf00      	nop
  }

  return ret;
 8006736:	7bfb      	ldrb	r3, [r7, #15]
}
 8006738:	4618      	mov	r0, r3
 800673a:	3710      	adds	r7, #16
 800673c:	46bd      	mov	sp, r7
 800673e:	bd80      	pop	{r7, pc}

08006740 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b084      	sub	sp, #16
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
 8006748:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800674a:	2300      	movs	r3, #0
 800674c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	889b      	ldrh	r3, [r3, #4]
 8006752:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	781b      	ldrb	r3, [r3, #0]
 8006758:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800675c:	2b40      	cmp	r3, #64	; 0x40
 800675e:	d007      	beq.n	8006770 <USBD_StdEPReq+0x30>
 8006760:	2b40      	cmp	r3, #64	; 0x40
 8006762:	f200 817f 	bhi.w	8006a64 <USBD_StdEPReq+0x324>
 8006766:	2b00      	cmp	r3, #0
 8006768:	d02a      	beq.n	80067c0 <USBD_StdEPReq+0x80>
 800676a:	2b20      	cmp	r3, #32
 800676c:	f040 817a 	bne.w	8006a64 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006770:	7bbb      	ldrb	r3, [r7, #14]
 8006772:	4619      	mov	r1, r3
 8006774:	6878      	ldr	r0, [r7, #4]
 8006776:	f7ff fe83 	bl	8006480 <USBD_CoreFindEP>
 800677a:	4603      	mov	r3, r0
 800677c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800677e:	7b7b      	ldrb	r3, [r7, #13]
 8006780:	2bff      	cmp	r3, #255	; 0xff
 8006782:	f000 8174 	beq.w	8006a6e <USBD_StdEPReq+0x32e>
 8006786:	7b7b      	ldrb	r3, [r7, #13]
 8006788:	2b00      	cmp	r3, #0
 800678a:	f040 8170 	bne.w	8006a6e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800678e:	7b7a      	ldrb	r2, [r7, #13]
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8006796:	7b7a      	ldrb	r2, [r7, #13]
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	32ae      	adds	r2, #174	; 0xae
 800679c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067a0:	689b      	ldr	r3, [r3, #8]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	f000 8163 	beq.w	8006a6e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80067a8:	7b7a      	ldrb	r2, [r7, #13]
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	32ae      	adds	r2, #174	; 0xae
 80067ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067b2:	689b      	ldr	r3, [r3, #8]
 80067b4:	6839      	ldr	r1, [r7, #0]
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	4798      	blx	r3
 80067ba:	4603      	mov	r3, r0
 80067bc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80067be:	e156      	b.n	8006a6e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	785b      	ldrb	r3, [r3, #1]
 80067c4:	2b03      	cmp	r3, #3
 80067c6:	d008      	beq.n	80067da <USBD_StdEPReq+0x9a>
 80067c8:	2b03      	cmp	r3, #3
 80067ca:	f300 8145 	bgt.w	8006a58 <USBD_StdEPReq+0x318>
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	f000 809b 	beq.w	800690a <USBD_StdEPReq+0x1ca>
 80067d4:	2b01      	cmp	r3, #1
 80067d6:	d03c      	beq.n	8006852 <USBD_StdEPReq+0x112>
 80067d8:	e13e      	b.n	8006a58 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067e0:	b2db      	uxtb	r3, r3
 80067e2:	2b02      	cmp	r3, #2
 80067e4:	d002      	beq.n	80067ec <USBD_StdEPReq+0xac>
 80067e6:	2b03      	cmp	r3, #3
 80067e8:	d016      	beq.n	8006818 <USBD_StdEPReq+0xd8>
 80067ea:	e02c      	b.n	8006846 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80067ec:	7bbb      	ldrb	r3, [r7, #14]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d00d      	beq.n	800680e <USBD_StdEPReq+0xce>
 80067f2:	7bbb      	ldrb	r3, [r7, #14]
 80067f4:	2b80      	cmp	r3, #128	; 0x80
 80067f6:	d00a      	beq.n	800680e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80067f8:	7bbb      	ldrb	r3, [r7, #14]
 80067fa:	4619      	mov	r1, r3
 80067fc:	6878      	ldr	r0, [r7, #4]
 80067fe:	f001 fadd 	bl	8007dbc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006802:	2180      	movs	r1, #128	; 0x80
 8006804:	6878      	ldr	r0, [r7, #4]
 8006806:	f001 fad9 	bl	8007dbc <USBD_LL_StallEP>
 800680a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800680c:	e020      	b.n	8006850 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800680e:	6839      	ldr	r1, [r7, #0]
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	f000 fca4 	bl	800715e <USBD_CtlError>
              break;
 8006816:	e01b      	b.n	8006850 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	885b      	ldrh	r3, [r3, #2]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d10e      	bne.n	800683e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006820:	7bbb      	ldrb	r3, [r7, #14]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d00b      	beq.n	800683e <USBD_StdEPReq+0xfe>
 8006826:	7bbb      	ldrb	r3, [r7, #14]
 8006828:	2b80      	cmp	r3, #128	; 0x80
 800682a:	d008      	beq.n	800683e <USBD_StdEPReq+0xfe>
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	88db      	ldrh	r3, [r3, #6]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d104      	bne.n	800683e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006834:	7bbb      	ldrb	r3, [r7, #14]
 8006836:	4619      	mov	r1, r3
 8006838:	6878      	ldr	r0, [r7, #4]
 800683a:	f001 fabf 	bl	8007dbc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800683e:	6878      	ldr	r0, [r7, #4]
 8006840:	f000 fd58 	bl	80072f4 <USBD_CtlSendStatus>

              break;
 8006844:	e004      	b.n	8006850 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006846:	6839      	ldr	r1, [r7, #0]
 8006848:	6878      	ldr	r0, [r7, #4]
 800684a:	f000 fc88 	bl	800715e <USBD_CtlError>
              break;
 800684e:	bf00      	nop
          }
          break;
 8006850:	e107      	b.n	8006a62 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006858:	b2db      	uxtb	r3, r3
 800685a:	2b02      	cmp	r3, #2
 800685c:	d002      	beq.n	8006864 <USBD_StdEPReq+0x124>
 800685e:	2b03      	cmp	r3, #3
 8006860:	d016      	beq.n	8006890 <USBD_StdEPReq+0x150>
 8006862:	e04b      	b.n	80068fc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006864:	7bbb      	ldrb	r3, [r7, #14]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d00d      	beq.n	8006886 <USBD_StdEPReq+0x146>
 800686a:	7bbb      	ldrb	r3, [r7, #14]
 800686c:	2b80      	cmp	r3, #128	; 0x80
 800686e:	d00a      	beq.n	8006886 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006870:	7bbb      	ldrb	r3, [r7, #14]
 8006872:	4619      	mov	r1, r3
 8006874:	6878      	ldr	r0, [r7, #4]
 8006876:	f001 faa1 	bl	8007dbc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800687a:	2180      	movs	r1, #128	; 0x80
 800687c:	6878      	ldr	r0, [r7, #4]
 800687e:	f001 fa9d 	bl	8007dbc <USBD_LL_StallEP>
 8006882:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006884:	e040      	b.n	8006908 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8006886:	6839      	ldr	r1, [r7, #0]
 8006888:	6878      	ldr	r0, [r7, #4]
 800688a:	f000 fc68 	bl	800715e <USBD_CtlError>
              break;
 800688e:	e03b      	b.n	8006908 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	885b      	ldrh	r3, [r3, #2]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d136      	bne.n	8006906 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006898:	7bbb      	ldrb	r3, [r7, #14]
 800689a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d004      	beq.n	80068ac <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80068a2:	7bbb      	ldrb	r3, [r7, #14]
 80068a4:	4619      	mov	r1, r3
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f001 faa7 	bl	8007dfa <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80068ac:	6878      	ldr	r0, [r7, #4]
 80068ae:	f000 fd21 	bl	80072f4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80068b2:	7bbb      	ldrb	r3, [r7, #14]
 80068b4:	4619      	mov	r1, r3
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	f7ff fde2 	bl	8006480 <USBD_CoreFindEP>
 80068bc:	4603      	mov	r3, r0
 80068be:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80068c0:	7b7b      	ldrb	r3, [r7, #13]
 80068c2:	2bff      	cmp	r3, #255	; 0xff
 80068c4:	d01f      	beq.n	8006906 <USBD_StdEPReq+0x1c6>
 80068c6:	7b7b      	ldrb	r3, [r7, #13]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d11c      	bne.n	8006906 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80068cc:	7b7a      	ldrb	r2, [r7, #13]
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80068d4:	7b7a      	ldrb	r2, [r7, #13]
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	32ae      	adds	r2, #174	; 0xae
 80068da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068de:	689b      	ldr	r3, [r3, #8]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d010      	beq.n	8006906 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80068e4:	7b7a      	ldrb	r2, [r7, #13]
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	32ae      	adds	r2, #174	; 0xae
 80068ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068ee:	689b      	ldr	r3, [r3, #8]
 80068f0:	6839      	ldr	r1, [r7, #0]
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	4798      	blx	r3
 80068f6:	4603      	mov	r3, r0
 80068f8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80068fa:	e004      	b.n	8006906 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80068fc:	6839      	ldr	r1, [r7, #0]
 80068fe:	6878      	ldr	r0, [r7, #4]
 8006900:	f000 fc2d 	bl	800715e <USBD_CtlError>
              break;
 8006904:	e000      	b.n	8006908 <USBD_StdEPReq+0x1c8>
              break;
 8006906:	bf00      	nop
          }
          break;
 8006908:	e0ab      	b.n	8006a62 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006910:	b2db      	uxtb	r3, r3
 8006912:	2b02      	cmp	r3, #2
 8006914:	d002      	beq.n	800691c <USBD_StdEPReq+0x1dc>
 8006916:	2b03      	cmp	r3, #3
 8006918:	d032      	beq.n	8006980 <USBD_StdEPReq+0x240>
 800691a:	e097      	b.n	8006a4c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800691c:	7bbb      	ldrb	r3, [r7, #14]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d007      	beq.n	8006932 <USBD_StdEPReq+0x1f2>
 8006922:	7bbb      	ldrb	r3, [r7, #14]
 8006924:	2b80      	cmp	r3, #128	; 0x80
 8006926:	d004      	beq.n	8006932 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006928:	6839      	ldr	r1, [r7, #0]
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	f000 fc17 	bl	800715e <USBD_CtlError>
                break;
 8006930:	e091      	b.n	8006a56 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006932:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006936:	2b00      	cmp	r3, #0
 8006938:	da0b      	bge.n	8006952 <USBD_StdEPReq+0x212>
 800693a:	7bbb      	ldrb	r3, [r7, #14]
 800693c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006940:	4613      	mov	r3, r2
 8006942:	009b      	lsls	r3, r3, #2
 8006944:	4413      	add	r3, r2
 8006946:	009b      	lsls	r3, r3, #2
 8006948:	3310      	adds	r3, #16
 800694a:	687a      	ldr	r2, [r7, #4]
 800694c:	4413      	add	r3, r2
 800694e:	3304      	adds	r3, #4
 8006950:	e00b      	b.n	800696a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006952:	7bbb      	ldrb	r3, [r7, #14]
 8006954:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006958:	4613      	mov	r3, r2
 800695a:	009b      	lsls	r3, r3, #2
 800695c:	4413      	add	r3, r2
 800695e:	009b      	lsls	r3, r3, #2
 8006960:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006964:	687a      	ldr	r2, [r7, #4]
 8006966:	4413      	add	r3, r2
 8006968:	3304      	adds	r3, #4
 800696a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	2200      	movs	r2, #0
 8006970:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006972:	68bb      	ldr	r3, [r7, #8]
 8006974:	2202      	movs	r2, #2
 8006976:	4619      	mov	r1, r3
 8006978:	6878      	ldr	r0, [r7, #4]
 800697a:	f000 fc61 	bl	8007240 <USBD_CtlSendData>
              break;
 800697e:	e06a      	b.n	8006a56 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006980:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006984:	2b00      	cmp	r3, #0
 8006986:	da11      	bge.n	80069ac <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006988:	7bbb      	ldrb	r3, [r7, #14]
 800698a:	f003 020f 	and.w	r2, r3, #15
 800698e:	6879      	ldr	r1, [r7, #4]
 8006990:	4613      	mov	r3, r2
 8006992:	009b      	lsls	r3, r3, #2
 8006994:	4413      	add	r3, r2
 8006996:	009b      	lsls	r3, r3, #2
 8006998:	440b      	add	r3, r1
 800699a:	3324      	adds	r3, #36	; 0x24
 800699c:	881b      	ldrh	r3, [r3, #0]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d117      	bne.n	80069d2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80069a2:	6839      	ldr	r1, [r7, #0]
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	f000 fbda 	bl	800715e <USBD_CtlError>
                  break;
 80069aa:	e054      	b.n	8006a56 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80069ac:	7bbb      	ldrb	r3, [r7, #14]
 80069ae:	f003 020f 	and.w	r2, r3, #15
 80069b2:	6879      	ldr	r1, [r7, #4]
 80069b4:	4613      	mov	r3, r2
 80069b6:	009b      	lsls	r3, r3, #2
 80069b8:	4413      	add	r3, r2
 80069ba:	009b      	lsls	r3, r3, #2
 80069bc:	440b      	add	r3, r1
 80069be:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80069c2:	881b      	ldrh	r3, [r3, #0]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d104      	bne.n	80069d2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80069c8:	6839      	ldr	r1, [r7, #0]
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	f000 fbc7 	bl	800715e <USBD_CtlError>
                  break;
 80069d0:	e041      	b.n	8006a56 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80069d2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	da0b      	bge.n	80069f2 <USBD_StdEPReq+0x2b2>
 80069da:	7bbb      	ldrb	r3, [r7, #14]
 80069dc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80069e0:	4613      	mov	r3, r2
 80069e2:	009b      	lsls	r3, r3, #2
 80069e4:	4413      	add	r3, r2
 80069e6:	009b      	lsls	r3, r3, #2
 80069e8:	3310      	adds	r3, #16
 80069ea:	687a      	ldr	r2, [r7, #4]
 80069ec:	4413      	add	r3, r2
 80069ee:	3304      	adds	r3, #4
 80069f0:	e00b      	b.n	8006a0a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80069f2:	7bbb      	ldrb	r3, [r7, #14]
 80069f4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80069f8:	4613      	mov	r3, r2
 80069fa:	009b      	lsls	r3, r3, #2
 80069fc:	4413      	add	r3, r2
 80069fe:	009b      	lsls	r3, r3, #2
 8006a00:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006a04:	687a      	ldr	r2, [r7, #4]
 8006a06:	4413      	add	r3, r2
 8006a08:	3304      	adds	r3, #4
 8006a0a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006a0c:	7bbb      	ldrb	r3, [r7, #14]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d002      	beq.n	8006a18 <USBD_StdEPReq+0x2d8>
 8006a12:	7bbb      	ldrb	r3, [r7, #14]
 8006a14:	2b80      	cmp	r3, #128	; 0x80
 8006a16:	d103      	bne.n	8006a20 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	601a      	str	r2, [r3, #0]
 8006a1e:	e00e      	b.n	8006a3e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006a20:	7bbb      	ldrb	r3, [r7, #14]
 8006a22:	4619      	mov	r1, r3
 8006a24:	6878      	ldr	r0, [r7, #4]
 8006a26:	f001 fa07 	bl	8007e38 <USBD_LL_IsStallEP>
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d003      	beq.n	8006a38 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	2201      	movs	r2, #1
 8006a34:	601a      	str	r2, [r3, #0]
 8006a36:	e002      	b.n	8006a3e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	2202      	movs	r2, #2
 8006a42:	4619      	mov	r1, r3
 8006a44:	6878      	ldr	r0, [r7, #4]
 8006a46:	f000 fbfb 	bl	8007240 <USBD_CtlSendData>
              break;
 8006a4a:	e004      	b.n	8006a56 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006a4c:	6839      	ldr	r1, [r7, #0]
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	f000 fb85 	bl	800715e <USBD_CtlError>
              break;
 8006a54:	bf00      	nop
          }
          break;
 8006a56:	e004      	b.n	8006a62 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006a58:	6839      	ldr	r1, [r7, #0]
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	f000 fb7f 	bl	800715e <USBD_CtlError>
          break;
 8006a60:	bf00      	nop
      }
      break;
 8006a62:	e005      	b.n	8006a70 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006a64:	6839      	ldr	r1, [r7, #0]
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f000 fb79 	bl	800715e <USBD_CtlError>
      break;
 8006a6c:	e000      	b.n	8006a70 <USBD_StdEPReq+0x330>
      break;
 8006a6e:	bf00      	nop
  }

  return ret;
 8006a70:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a72:	4618      	mov	r0, r3
 8006a74:	3710      	adds	r7, #16
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bd80      	pop	{r7, pc}
	...

08006a7c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b084      	sub	sp, #16
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
 8006a84:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006a86:	2300      	movs	r3, #0
 8006a88:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006a8e:	2300      	movs	r3, #0
 8006a90:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	885b      	ldrh	r3, [r3, #2]
 8006a96:	0a1b      	lsrs	r3, r3, #8
 8006a98:	b29b      	uxth	r3, r3
 8006a9a:	3b01      	subs	r3, #1
 8006a9c:	2b0e      	cmp	r3, #14
 8006a9e:	f200 8152 	bhi.w	8006d46 <USBD_GetDescriptor+0x2ca>
 8006aa2:	a201      	add	r2, pc, #4	; (adr r2, 8006aa8 <USBD_GetDescriptor+0x2c>)
 8006aa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aa8:	08006b19 	.word	0x08006b19
 8006aac:	08006b31 	.word	0x08006b31
 8006ab0:	08006b71 	.word	0x08006b71
 8006ab4:	08006d47 	.word	0x08006d47
 8006ab8:	08006d47 	.word	0x08006d47
 8006abc:	08006ce7 	.word	0x08006ce7
 8006ac0:	08006d13 	.word	0x08006d13
 8006ac4:	08006d47 	.word	0x08006d47
 8006ac8:	08006d47 	.word	0x08006d47
 8006acc:	08006d47 	.word	0x08006d47
 8006ad0:	08006d47 	.word	0x08006d47
 8006ad4:	08006d47 	.word	0x08006d47
 8006ad8:	08006d47 	.word	0x08006d47
 8006adc:	08006d47 	.word	0x08006d47
 8006ae0:	08006ae5 	.word	0x08006ae5
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006aea:	69db      	ldr	r3, [r3, #28]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d00b      	beq.n	8006b08 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006af6:	69db      	ldr	r3, [r3, #28]
 8006af8:	687a      	ldr	r2, [r7, #4]
 8006afa:	7c12      	ldrb	r2, [r2, #16]
 8006afc:	f107 0108 	add.w	r1, r7, #8
 8006b00:	4610      	mov	r0, r2
 8006b02:	4798      	blx	r3
 8006b04:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006b06:	e126      	b.n	8006d56 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8006b08:	6839      	ldr	r1, [r7, #0]
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	f000 fb27 	bl	800715e <USBD_CtlError>
        err++;
 8006b10:	7afb      	ldrb	r3, [r7, #11]
 8006b12:	3301      	adds	r3, #1
 8006b14:	72fb      	strb	r3, [r7, #11]
      break;
 8006b16:	e11e      	b.n	8006d56 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	687a      	ldr	r2, [r7, #4]
 8006b22:	7c12      	ldrb	r2, [r2, #16]
 8006b24:	f107 0108 	add.w	r1, r7, #8
 8006b28:	4610      	mov	r0, r2
 8006b2a:	4798      	blx	r3
 8006b2c:	60f8      	str	r0, [r7, #12]
      break;
 8006b2e:	e112      	b.n	8006d56 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	7c1b      	ldrb	r3, [r3, #16]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d10d      	bne.n	8006b54 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b40:	f107 0208 	add.w	r2, r7, #8
 8006b44:	4610      	mov	r0, r2
 8006b46:	4798      	blx	r3
 8006b48:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	3301      	adds	r3, #1
 8006b4e:	2202      	movs	r2, #2
 8006b50:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006b52:	e100      	b.n	8006d56 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b5c:	f107 0208 	add.w	r2, r7, #8
 8006b60:	4610      	mov	r0, r2
 8006b62:	4798      	blx	r3
 8006b64:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	3301      	adds	r3, #1
 8006b6a:	2202      	movs	r2, #2
 8006b6c:	701a      	strb	r2, [r3, #0]
      break;
 8006b6e:	e0f2      	b.n	8006d56 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	885b      	ldrh	r3, [r3, #2]
 8006b74:	b2db      	uxtb	r3, r3
 8006b76:	2b05      	cmp	r3, #5
 8006b78:	f200 80ac 	bhi.w	8006cd4 <USBD_GetDescriptor+0x258>
 8006b7c:	a201      	add	r2, pc, #4	; (adr r2, 8006b84 <USBD_GetDescriptor+0x108>)
 8006b7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b82:	bf00      	nop
 8006b84:	08006b9d 	.word	0x08006b9d
 8006b88:	08006bd1 	.word	0x08006bd1
 8006b8c:	08006c05 	.word	0x08006c05
 8006b90:	08006c39 	.word	0x08006c39
 8006b94:	08006c6d 	.word	0x08006c6d
 8006b98:	08006ca1 	.word	0x08006ca1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ba2:	685b      	ldr	r3, [r3, #4]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d00b      	beq.n	8006bc0 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bae:	685b      	ldr	r3, [r3, #4]
 8006bb0:	687a      	ldr	r2, [r7, #4]
 8006bb2:	7c12      	ldrb	r2, [r2, #16]
 8006bb4:	f107 0108 	add.w	r1, r7, #8
 8006bb8:	4610      	mov	r0, r2
 8006bba:	4798      	blx	r3
 8006bbc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006bbe:	e091      	b.n	8006ce4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006bc0:	6839      	ldr	r1, [r7, #0]
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	f000 facb 	bl	800715e <USBD_CtlError>
            err++;
 8006bc8:	7afb      	ldrb	r3, [r7, #11]
 8006bca:	3301      	adds	r3, #1
 8006bcc:	72fb      	strb	r3, [r7, #11]
          break;
 8006bce:	e089      	b.n	8006ce4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bd6:	689b      	ldr	r3, [r3, #8]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d00b      	beq.n	8006bf4 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006be2:	689b      	ldr	r3, [r3, #8]
 8006be4:	687a      	ldr	r2, [r7, #4]
 8006be6:	7c12      	ldrb	r2, [r2, #16]
 8006be8:	f107 0108 	add.w	r1, r7, #8
 8006bec:	4610      	mov	r0, r2
 8006bee:	4798      	blx	r3
 8006bf0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006bf2:	e077      	b.n	8006ce4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006bf4:	6839      	ldr	r1, [r7, #0]
 8006bf6:	6878      	ldr	r0, [r7, #4]
 8006bf8:	f000 fab1 	bl	800715e <USBD_CtlError>
            err++;
 8006bfc:	7afb      	ldrb	r3, [r7, #11]
 8006bfe:	3301      	adds	r3, #1
 8006c00:	72fb      	strb	r3, [r7, #11]
          break;
 8006c02:	e06f      	b.n	8006ce4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c0a:	68db      	ldr	r3, [r3, #12]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d00b      	beq.n	8006c28 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c16:	68db      	ldr	r3, [r3, #12]
 8006c18:	687a      	ldr	r2, [r7, #4]
 8006c1a:	7c12      	ldrb	r2, [r2, #16]
 8006c1c:	f107 0108 	add.w	r1, r7, #8
 8006c20:	4610      	mov	r0, r2
 8006c22:	4798      	blx	r3
 8006c24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006c26:	e05d      	b.n	8006ce4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006c28:	6839      	ldr	r1, [r7, #0]
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	f000 fa97 	bl	800715e <USBD_CtlError>
            err++;
 8006c30:	7afb      	ldrb	r3, [r7, #11]
 8006c32:	3301      	adds	r3, #1
 8006c34:	72fb      	strb	r3, [r7, #11]
          break;
 8006c36:	e055      	b.n	8006ce4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c3e:	691b      	ldr	r3, [r3, #16]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d00b      	beq.n	8006c5c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c4a:	691b      	ldr	r3, [r3, #16]
 8006c4c:	687a      	ldr	r2, [r7, #4]
 8006c4e:	7c12      	ldrb	r2, [r2, #16]
 8006c50:	f107 0108 	add.w	r1, r7, #8
 8006c54:	4610      	mov	r0, r2
 8006c56:	4798      	blx	r3
 8006c58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006c5a:	e043      	b.n	8006ce4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006c5c:	6839      	ldr	r1, [r7, #0]
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f000 fa7d 	bl	800715e <USBD_CtlError>
            err++;
 8006c64:	7afb      	ldrb	r3, [r7, #11]
 8006c66:	3301      	adds	r3, #1
 8006c68:	72fb      	strb	r3, [r7, #11]
          break;
 8006c6a:	e03b      	b.n	8006ce4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c72:	695b      	ldr	r3, [r3, #20]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d00b      	beq.n	8006c90 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c7e:	695b      	ldr	r3, [r3, #20]
 8006c80:	687a      	ldr	r2, [r7, #4]
 8006c82:	7c12      	ldrb	r2, [r2, #16]
 8006c84:	f107 0108 	add.w	r1, r7, #8
 8006c88:	4610      	mov	r0, r2
 8006c8a:	4798      	blx	r3
 8006c8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006c8e:	e029      	b.n	8006ce4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006c90:	6839      	ldr	r1, [r7, #0]
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	f000 fa63 	bl	800715e <USBD_CtlError>
            err++;
 8006c98:	7afb      	ldrb	r3, [r7, #11]
 8006c9a:	3301      	adds	r3, #1
 8006c9c:	72fb      	strb	r3, [r7, #11]
          break;
 8006c9e:	e021      	b.n	8006ce4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ca6:	699b      	ldr	r3, [r3, #24]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d00b      	beq.n	8006cc4 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006cb2:	699b      	ldr	r3, [r3, #24]
 8006cb4:	687a      	ldr	r2, [r7, #4]
 8006cb6:	7c12      	ldrb	r2, [r2, #16]
 8006cb8:	f107 0108 	add.w	r1, r7, #8
 8006cbc:	4610      	mov	r0, r2
 8006cbe:	4798      	blx	r3
 8006cc0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006cc2:	e00f      	b.n	8006ce4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006cc4:	6839      	ldr	r1, [r7, #0]
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	f000 fa49 	bl	800715e <USBD_CtlError>
            err++;
 8006ccc:	7afb      	ldrb	r3, [r7, #11]
 8006cce:	3301      	adds	r3, #1
 8006cd0:	72fb      	strb	r3, [r7, #11]
          break;
 8006cd2:	e007      	b.n	8006ce4 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006cd4:	6839      	ldr	r1, [r7, #0]
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	f000 fa41 	bl	800715e <USBD_CtlError>
          err++;
 8006cdc:	7afb      	ldrb	r3, [r7, #11]
 8006cde:	3301      	adds	r3, #1
 8006ce0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8006ce2:	bf00      	nop
      }
      break;
 8006ce4:	e037      	b.n	8006d56 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	7c1b      	ldrb	r3, [r3, #16]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d109      	bne.n	8006d02 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006cf6:	f107 0208 	add.w	r2, r7, #8
 8006cfa:	4610      	mov	r0, r2
 8006cfc:	4798      	blx	r3
 8006cfe:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006d00:	e029      	b.n	8006d56 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8006d02:	6839      	ldr	r1, [r7, #0]
 8006d04:	6878      	ldr	r0, [r7, #4]
 8006d06:	f000 fa2a 	bl	800715e <USBD_CtlError>
        err++;
 8006d0a:	7afb      	ldrb	r3, [r7, #11]
 8006d0c:	3301      	adds	r3, #1
 8006d0e:	72fb      	strb	r3, [r7, #11]
      break;
 8006d10:	e021      	b.n	8006d56 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	7c1b      	ldrb	r3, [r3, #16]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d10d      	bne.n	8006d36 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d22:	f107 0208 	add.w	r2, r7, #8
 8006d26:	4610      	mov	r0, r2
 8006d28:	4798      	blx	r3
 8006d2a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	3301      	adds	r3, #1
 8006d30:	2207      	movs	r2, #7
 8006d32:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006d34:	e00f      	b.n	8006d56 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8006d36:	6839      	ldr	r1, [r7, #0]
 8006d38:	6878      	ldr	r0, [r7, #4]
 8006d3a:	f000 fa10 	bl	800715e <USBD_CtlError>
        err++;
 8006d3e:	7afb      	ldrb	r3, [r7, #11]
 8006d40:	3301      	adds	r3, #1
 8006d42:	72fb      	strb	r3, [r7, #11]
      break;
 8006d44:	e007      	b.n	8006d56 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8006d46:	6839      	ldr	r1, [r7, #0]
 8006d48:	6878      	ldr	r0, [r7, #4]
 8006d4a:	f000 fa08 	bl	800715e <USBD_CtlError>
      err++;
 8006d4e:	7afb      	ldrb	r3, [r7, #11]
 8006d50:	3301      	adds	r3, #1
 8006d52:	72fb      	strb	r3, [r7, #11]
      break;
 8006d54:	bf00      	nop
  }

  if (err != 0U)
 8006d56:	7afb      	ldrb	r3, [r7, #11]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d11e      	bne.n	8006d9a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	88db      	ldrh	r3, [r3, #6]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d016      	beq.n	8006d92 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8006d64:	893b      	ldrh	r3, [r7, #8]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d00e      	beq.n	8006d88 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	88da      	ldrh	r2, [r3, #6]
 8006d6e:	893b      	ldrh	r3, [r7, #8]
 8006d70:	4293      	cmp	r3, r2
 8006d72:	bf28      	it	cs
 8006d74:	4613      	movcs	r3, r2
 8006d76:	b29b      	uxth	r3, r3
 8006d78:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006d7a:	893b      	ldrh	r3, [r7, #8]
 8006d7c:	461a      	mov	r2, r3
 8006d7e:	68f9      	ldr	r1, [r7, #12]
 8006d80:	6878      	ldr	r0, [r7, #4]
 8006d82:	f000 fa5d 	bl	8007240 <USBD_CtlSendData>
 8006d86:	e009      	b.n	8006d9c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006d88:	6839      	ldr	r1, [r7, #0]
 8006d8a:	6878      	ldr	r0, [r7, #4]
 8006d8c:	f000 f9e7 	bl	800715e <USBD_CtlError>
 8006d90:	e004      	b.n	8006d9c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006d92:	6878      	ldr	r0, [r7, #4]
 8006d94:	f000 faae 	bl	80072f4 <USBD_CtlSendStatus>
 8006d98:	e000      	b.n	8006d9c <USBD_GetDescriptor+0x320>
    return;
 8006d9a:	bf00      	nop
  }
}
 8006d9c:	3710      	adds	r7, #16
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	bd80      	pop	{r7, pc}
 8006da2:	bf00      	nop

08006da4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b084      	sub	sp, #16
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
 8006dac:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	889b      	ldrh	r3, [r3, #4]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d131      	bne.n	8006e1a <USBD_SetAddress+0x76>
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	88db      	ldrh	r3, [r3, #6]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d12d      	bne.n	8006e1a <USBD_SetAddress+0x76>
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	885b      	ldrh	r3, [r3, #2]
 8006dc2:	2b7f      	cmp	r3, #127	; 0x7f
 8006dc4:	d829      	bhi.n	8006e1a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	885b      	ldrh	r3, [r3, #2]
 8006dca:	b2db      	uxtb	r3, r3
 8006dcc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006dd0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006dd8:	b2db      	uxtb	r3, r3
 8006dda:	2b03      	cmp	r3, #3
 8006ddc:	d104      	bne.n	8006de8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006dde:	6839      	ldr	r1, [r7, #0]
 8006de0:	6878      	ldr	r0, [r7, #4]
 8006de2:	f000 f9bc 	bl	800715e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006de6:	e01d      	b.n	8006e24 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	7bfa      	ldrb	r2, [r7, #15]
 8006dec:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006df0:	7bfb      	ldrb	r3, [r7, #15]
 8006df2:	4619      	mov	r1, r3
 8006df4:	6878      	ldr	r0, [r7, #4]
 8006df6:	f001 f84b 	bl	8007e90 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	f000 fa7a 	bl	80072f4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006e00:	7bfb      	ldrb	r3, [r7, #15]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d004      	beq.n	8006e10 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2202      	movs	r2, #2
 8006e0a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e0e:	e009      	b.n	8006e24 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2201      	movs	r2, #1
 8006e14:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e18:	e004      	b.n	8006e24 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006e1a:	6839      	ldr	r1, [r7, #0]
 8006e1c:	6878      	ldr	r0, [r7, #4]
 8006e1e:	f000 f99e 	bl	800715e <USBD_CtlError>
  }
}
 8006e22:	bf00      	nop
 8006e24:	bf00      	nop
 8006e26:	3710      	adds	r7, #16
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	bd80      	pop	{r7, pc}

08006e2c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b084      	sub	sp, #16
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
 8006e34:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006e36:	2300      	movs	r3, #0
 8006e38:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	885b      	ldrh	r3, [r3, #2]
 8006e3e:	b2da      	uxtb	r2, r3
 8006e40:	4b4e      	ldr	r3, [pc, #312]	; (8006f7c <USBD_SetConfig+0x150>)
 8006e42:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006e44:	4b4d      	ldr	r3, [pc, #308]	; (8006f7c <USBD_SetConfig+0x150>)
 8006e46:	781b      	ldrb	r3, [r3, #0]
 8006e48:	2b01      	cmp	r3, #1
 8006e4a:	d905      	bls.n	8006e58 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006e4c:	6839      	ldr	r1, [r7, #0]
 8006e4e:	6878      	ldr	r0, [r7, #4]
 8006e50:	f000 f985 	bl	800715e <USBD_CtlError>
    return USBD_FAIL;
 8006e54:	2303      	movs	r3, #3
 8006e56:	e08c      	b.n	8006f72 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e5e:	b2db      	uxtb	r3, r3
 8006e60:	2b02      	cmp	r3, #2
 8006e62:	d002      	beq.n	8006e6a <USBD_SetConfig+0x3e>
 8006e64:	2b03      	cmp	r3, #3
 8006e66:	d029      	beq.n	8006ebc <USBD_SetConfig+0x90>
 8006e68:	e075      	b.n	8006f56 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006e6a:	4b44      	ldr	r3, [pc, #272]	; (8006f7c <USBD_SetConfig+0x150>)
 8006e6c:	781b      	ldrb	r3, [r3, #0]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d020      	beq.n	8006eb4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8006e72:	4b42      	ldr	r3, [pc, #264]	; (8006f7c <USBD_SetConfig+0x150>)
 8006e74:	781b      	ldrb	r3, [r3, #0]
 8006e76:	461a      	mov	r2, r3
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006e7c:	4b3f      	ldr	r3, [pc, #252]	; (8006f7c <USBD_SetConfig+0x150>)
 8006e7e:	781b      	ldrb	r3, [r3, #0]
 8006e80:	4619      	mov	r1, r3
 8006e82:	6878      	ldr	r0, [r7, #4]
 8006e84:	f7fe ffbd 	bl	8005e02 <USBD_SetClassConfig>
 8006e88:	4603      	mov	r3, r0
 8006e8a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006e8c:	7bfb      	ldrb	r3, [r7, #15]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d008      	beq.n	8006ea4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8006e92:	6839      	ldr	r1, [r7, #0]
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	f000 f962 	bl	800715e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2202      	movs	r2, #2
 8006e9e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006ea2:	e065      	b.n	8006f70 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006ea4:	6878      	ldr	r0, [r7, #4]
 8006ea6:	f000 fa25 	bl	80072f4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	2203      	movs	r2, #3
 8006eae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006eb2:	e05d      	b.n	8006f70 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006eb4:	6878      	ldr	r0, [r7, #4]
 8006eb6:	f000 fa1d 	bl	80072f4 <USBD_CtlSendStatus>
      break;
 8006eba:	e059      	b.n	8006f70 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006ebc:	4b2f      	ldr	r3, [pc, #188]	; (8006f7c <USBD_SetConfig+0x150>)
 8006ebe:	781b      	ldrb	r3, [r3, #0]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d112      	bne.n	8006eea <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2202      	movs	r2, #2
 8006ec8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006ecc:	4b2b      	ldr	r3, [pc, #172]	; (8006f7c <USBD_SetConfig+0x150>)
 8006ece:	781b      	ldrb	r3, [r3, #0]
 8006ed0:	461a      	mov	r2, r3
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006ed6:	4b29      	ldr	r3, [pc, #164]	; (8006f7c <USBD_SetConfig+0x150>)
 8006ed8:	781b      	ldrb	r3, [r3, #0]
 8006eda:	4619      	mov	r1, r3
 8006edc:	6878      	ldr	r0, [r7, #4]
 8006ede:	f7fe ffac 	bl	8005e3a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f000 fa06 	bl	80072f4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006ee8:	e042      	b.n	8006f70 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8006eea:	4b24      	ldr	r3, [pc, #144]	; (8006f7c <USBD_SetConfig+0x150>)
 8006eec:	781b      	ldrb	r3, [r3, #0]
 8006eee:	461a      	mov	r2, r3
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	685b      	ldr	r3, [r3, #4]
 8006ef4:	429a      	cmp	r2, r3
 8006ef6:	d02a      	beq.n	8006f4e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	685b      	ldr	r3, [r3, #4]
 8006efc:	b2db      	uxtb	r3, r3
 8006efe:	4619      	mov	r1, r3
 8006f00:	6878      	ldr	r0, [r7, #4]
 8006f02:	f7fe ff9a 	bl	8005e3a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006f06:	4b1d      	ldr	r3, [pc, #116]	; (8006f7c <USBD_SetConfig+0x150>)
 8006f08:	781b      	ldrb	r3, [r3, #0]
 8006f0a:	461a      	mov	r2, r3
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006f10:	4b1a      	ldr	r3, [pc, #104]	; (8006f7c <USBD_SetConfig+0x150>)
 8006f12:	781b      	ldrb	r3, [r3, #0]
 8006f14:	4619      	mov	r1, r3
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	f7fe ff73 	bl	8005e02 <USBD_SetClassConfig>
 8006f1c:	4603      	mov	r3, r0
 8006f1e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006f20:	7bfb      	ldrb	r3, [r7, #15]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d00f      	beq.n	8006f46 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8006f26:	6839      	ldr	r1, [r7, #0]
 8006f28:	6878      	ldr	r0, [r7, #4]
 8006f2a:	f000 f918 	bl	800715e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	685b      	ldr	r3, [r3, #4]
 8006f32:	b2db      	uxtb	r3, r3
 8006f34:	4619      	mov	r1, r3
 8006f36:	6878      	ldr	r0, [r7, #4]
 8006f38:	f7fe ff7f 	bl	8005e3a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2202      	movs	r2, #2
 8006f40:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006f44:	e014      	b.n	8006f70 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f000 f9d4 	bl	80072f4 <USBD_CtlSendStatus>
      break;
 8006f4c:	e010      	b.n	8006f70 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006f4e:	6878      	ldr	r0, [r7, #4]
 8006f50:	f000 f9d0 	bl	80072f4 <USBD_CtlSendStatus>
      break;
 8006f54:	e00c      	b.n	8006f70 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8006f56:	6839      	ldr	r1, [r7, #0]
 8006f58:	6878      	ldr	r0, [r7, #4]
 8006f5a:	f000 f900 	bl	800715e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006f5e:	4b07      	ldr	r3, [pc, #28]	; (8006f7c <USBD_SetConfig+0x150>)
 8006f60:	781b      	ldrb	r3, [r3, #0]
 8006f62:	4619      	mov	r1, r3
 8006f64:	6878      	ldr	r0, [r7, #4]
 8006f66:	f7fe ff68 	bl	8005e3a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006f6a:	2303      	movs	r3, #3
 8006f6c:	73fb      	strb	r3, [r7, #15]
      break;
 8006f6e:	bf00      	nop
  }

  return ret;
 8006f70:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f72:	4618      	mov	r0, r3
 8006f74:	3710      	adds	r7, #16
 8006f76:	46bd      	mov	sp, r7
 8006f78:	bd80      	pop	{r7, pc}
 8006f7a:	bf00      	nop
 8006f7c:	200001ac 	.word	0x200001ac

08006f80 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b082      	sub	sp, #8
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
 8006f88:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	88db      	ldrh	r3, [r3, #6]
 8006f8e:	2b01      	cmp	r3, #1
 8006f90:	d004      	beq.n	8006f9c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006f92:	6839      	ldr	r1, [r7, #0]
 8006f94:	6878      	ldr	r0, [r7, #4]
 8006f96:	f000 f8e2 	bl	800715e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006f9a:	e023      	b.n	8006fe4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fa2:	b2db      	uxtb	r3, r3
 8006fa4:	2b02      	cmp	r3, #2
 8006fa6:	dc02      	bgt.n	8006fae <USBD_GetConfig+0x2e>
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	dc03      	bgt.n	8006fb4 <USBD_GetConfig+0x34>
 8006fac:	e015      	b.n	8006fda <USBD_GetConfig+0x5a>
 8006fae:	2b03      	cmp	r3, #3
 8006fb0:	d00b      	beq.n	8006fca <USBD_GetConfig+0x4a>
 8006fb2:	e012      	b.n	8006fda <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	3308      	adds	r3, #8
 8006fbe:	2201      	movs	r2, #1
 8006fc0:	4619      	mov	r1, r3
 8006fc2:	6878      	ldr	r0, [r7, #4]
 8006fc4:	f000 f93c 	bl	8007240 <USBD_CtlSendData>
        break;
 8006fc8:	e00c      	b.n	8006fe4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	3304      	adds	r3, #4
 8006fce:	2201      	movs	r2, #1
 8006fd0:	4619      	mov	r1, r3
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f000 f934 	bl	8007240 <USBD_CtlSendData>
        break;
 8006fd8:	e004      	b.n	8006fe4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006fda:	6839      	ldr	r1, [r7, #0]
 8006fdc:	6878      	ldr	r0, [r7, #4]
 8006fde:	f000 f8be 	bl	800715e <USBD_CtlError>
        break;
 8006fe2:	bf00      	nop
}
 8006fe4:	bf00      	nop
 8006fe6:	3708      	adds	r7, #8
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	bd80      	pop	{r7, pc}

08006fec <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b082      	sub	sp, #8
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
 8006ff4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ffc:	b2db      	uxtb	r3, r3
 8006ffe:	3b01      	subs	r3, #1
 8007000:	2b02      	cmp	r3, #2
 8007002:	d81e      	bhi.n	8007042 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	88db      	ldrh	r3, [r3, #6]
 8007008:	2b02      	cmp	r3, #2
 800700a:	d004      	beq.n	8007016 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800700c:	6839      	ldr	r1, [r7, #0]
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	f000 f8a5 	bl	800715e <USBD_CtlError>
        break;
 8007014:	e01a      	b.n	800704c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2201      	movs	r2, #1
 800701a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007022:	2b00      	cmp	r3, #0
 8007024:	d005      	beq.n	8007032 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	68db      	ldr	r3, [r3, #12]
 800702a:	f043 0202 	orr.w	r2, r3, #2
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	330c      	adds	r3, #12
 8007036:	2202      	movs	r2, #2
 8007038:	4619      	mov	r1, r3
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	f000 f900 	bl	8007240 <USBD_CtlSendData>
      break;
 8007040:	e004      	b.n	800704c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007042:	6839      	ldr	r1, [r7, #0]
 8007044:	6878      	ldr	r0, [r7, #4]
 8007046:	f000 f88a 	bl	800715e <USBD_CtlError>
      break;
 800704a:	bf00      	nop
  }
}
 800704c:	bf00      	nop
 800704e:	3708      	adds	r7, #8
 8007050:	46bd      	mov	sp, r7
 8007052:	bd80      	pop	{r7, pc}

08007054 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b082      	sub	sp, #8
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
 800705c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	885b      	ldrh	r3, [r3, #2]
 8007062:	2b01      	cmp	r3, #1
 8007064:	d107      	bne.n	8007076 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2201      	movs	r2, #1
 800706a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	f000 f940 	bl	80072f4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007074:	e013      	b.n	800709e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	885b      	ldrh	r3, [r3, #2]
 800707a:	2b02      	cmp	r3, #2
 800707c:	d10b      	bne.n	8007096 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	889b      	ldrh	r3, [r3, #4]
 8007082:	0a1b      	lsrs	r3, r3, #8
 8007084:	b29b      	uxth	r3, r3
 8007086:	b2da      	uxtb	r2, r3
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800708e:	6878      	ldr	r0, [r7, #4]
 8007090:	f000 f930 	bl	80072f4 <USBD_CtlSendStatus>
}
 8007094:	e003      	b.n	800709e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007096:	6839      	ldr	r1, [r7, #0]
 8007098:	6878      	ldr	r0, [r7, #4]
 800709a:	f000 f860 	bl	800715e <USBD_CtlError>
}
 800709e:	bf00      	nop
 80070a0:	3708      	adds	r7, #8
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}

080070a6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80070a6:	b580      	push	{r7, lr}
 80070a8:	b082      	sub	sp, #8
 80070aa:	af00      	add	r7, sp, #0
 80070ac:	6078      	str	r0, [r7, #4]
 80070ae:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070b6:	b2db      	uxtb	r3, r3
 80070b8:	3b01      	subs	r3, #1
 80070ba:	2b02      	cmp	r3, #2
 80070bc:	d80b      	bhi.n	80070d6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	885b      	ldrh	r3, [r3, #2]
 80070c2:	2b01      	cmp	r3, #1
 80070c4:	d10c      	bne.n	80070e0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2200      	movs	r2, #0
 80070ca:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	f000 f910 	bl	80072f4 <USBD_CtlSendStatus>
      }
      break;
 80070d4:	e004      	b.n	80070e0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80070d6:	6839      	ldr	r1, [r7, #0]
 80070d8:	6878      	ldr	r0, [r7, #4]
 80070da:	f000 f840 	bl	800715e <USBD_CtlError>
      break;
 80070de:	e000      	b.n	80070e2 <USBD_ClrFeature+0x3c>
      break;
 80070e0:	bf00      	nop
  }
}
 80070e2:	bf00      	nop
 80070e4:	3708      	adds	r7, #8
 80070e6:	46bd      	mov	sp, r7
 80070e8:	bd80      	pop	{r7, pc}

080070ea <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80070ea:	b580      	push	{r7, lr}
 80070ec:	b084      	sub	sp, #16
 80070ee:	af00      	add	r7, sp, #0
 80070f0:	6078      	str	r0, [r7, #4]
 80070f2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	781a      	ldrb	r2, [r3, #0]
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	3301      	adds	r3, #1
 8007104:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	781a      	ldrb	r2, [r3, #0]
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	3301      	adds	r3, #1
 8007112:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007114:	68f8      	ldr	r0, [r7, #12]
 8007116:	f7ff fa17 	bl	8006548 <SWAPBYTE>
 800711a:	4603      	mov	r3, r0
 800711c:	461a      	mov	r2, r3
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	3301      	adds	r3, #1
 8007126:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	3301      	adds	r3, #1
 800712c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800712e:	68f8      	ldr	r0, [r7, #12]
 8007130:	f7ff fa0a 	bl	8006548 <SWAPBYTE>
 8007134:	4603      	mov	r3, r0
 8007136:	461a      	mov	r2, r3
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	3301      	adds	r3, #1
 8007140:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	3301      	adds	r3, #1
 8007146:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007148:	68f8      	ldr	r0, [r7, #12]
 800714a:	f7ff f9fd 	bl	8006548 <SWAPBYTE>
 800714e:	4603      	mov	r3, r0
 8007150:	461a      	mov	r2, r3
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	80da      	strh	r2, [r3, #6]
}
 8007156:	bf00      	nop
 8007158:	3710      	adds	r7, #16
 800715a:	46bd      	mov	sp, r7
 800715c:	bd80      	pop	{r7, pc}

0800715e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800715e:	b580      	push	{r7, lr}
 8007160:	b082      	sub	sp, #8
 8007162:	af00      	add	r7, sp, #0
 8007164:	6078      	str	r0, [r7, #4]
 8007166:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007168:	2180      	movs	r1, #128	; 0x80
 800716a:	6878      	ldr	r0, [r7, #4]
 800716c:	f000 fe26 	bl	8007dbc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007170:	2100      	movs	r1, #0
 8007172:	6878      	ldr	r0, [r7, #4]
 8007174:	f000 fe22 	bl	8007dbc <USBD_LL_StallEP>
}
 8007178:	bf00      	nop
 800717a:	3708      	adds	r7, #8
 800717c:	46bd      	mov	sp, r7
 800717e:	bd80      	pop	{r7, pc}

08007180 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b086      	sub	sp, #24
 8007184:	af00      	add	r7, sp, #0
 8007186:	60f8      	str	r0, [r7, #12]
 8007188:	60b9      	str	r1, [r7, #8]
 800718a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800718c:	2300      	movs	r3, #0
 800718e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d036      	beq.n	8007204 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800719a:	6938      	ldr	r0, [r7, #16]
 800719c:	f000 f836 	bl	800720c <USBD_GetLen>
 80071a0:	4603      	mov	r3, r0
 80071a2:	3301      	adds	r3, #1
 80071a4:	b29b      	uxth	r3, r3
 80071a6:	005b      	lsls	r3, r3, #1
 80071a8:	b29a      	uxth	r2, r3
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80071ae:	7dfb      	ldrb	r3, [r7, #23]
 80071b0:	68ba      	ldr	r2, [r7, #8]
 80071b2:	4413      	add	r3, r2
 80071b4:	687a      	ldr	r2, [r7, #4]
 80071b6:	7812      	ldrb	r2, [r2, #0]
 80071b8:	701a      	strb	r2, [r3, #0]
  idx++;
 80071ba:	7dfb      	ldrb	r3, [r7, #23]
 80071bc:	3301      	adds	r3, #1
 80071be:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80071c0:	7dfb      	ldrb	r3, [r7, #23]
 80071c2:	68ba      	ldr	r2, [r7, #8]
 80071c4:	4413      	add	r3, r2
 80071c6:	2203      	movs	r2, #3
 80071c8:	701a      	strb	r2, [r3, #0]
  idx++;
 80071ca:	7dfb      	ldrb	r3, [r7, #23]
 80071cc:	3301      	adds	r3, #1
 80071ce:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80071d0:	e013      	b.n	80071fa <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80071d2:	7dfb      	ldrb	r3, [r7, #23]
 80071d4:	68ba      	ldr	r2, [r7, #8]
 80071d6:	4413      	add	r3, r2
 80071d8:	693a      	ldr	r2, [r7, #16]
 80071da:	7812      	ldrb	r2, [r2, #0]
 80071dc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80071de:	693b      	ldr	r3, [r7, #16]
 80071e0:	3301      	adds	r3, #1
 80071e2:	613b      	str	r3, [r7, #16]
    idx++;
 80071e4:	7dfb      	ldrb	r3, [r7, #23]
 80071e6:	3301      	adds	r3, #1
 80071e8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80071ea:	7dfb      	ldrb	r3, [r7, #23]
 80071ec:	68ba      	ldr	r2, [r7, #8]
 80071ee:	4413      	add	r3, r2
 80071f0:	2200      	movs	r2, #0
 80071f2:	701a      	strb	r2, [r3, #0]
    idx++;
 80071f4:	7dfb      	ldrb	r3, [r7, #23]
 80071f6:	3301      	adds	r3, #1
 80071f8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80071fa:	693b      	ldr	r3, [r7, #16]
 80071fc:	781b      	ldrb	r3, [r3, #0]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d1e7      	bne.n	80071d2 <USBD_GetString+0x52>
 8007202:	e000      	b.n	8007206 <USBD_GetString+0x86>
    return;
 8007204:	bf00      	nop
  }
}
 8007206:	3718      	adds	r7, #24
 8007208:	46bd      	mov	sp, r7
 800720a:	bd80      	pop	{r7, pc}

0800720c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800720c:	b480      	push	{r7}
 800720e:	b085      	sub	sp, #20
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007214:	2300      	movs	r3, #0
 8007216:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800721c:	e005      	b.n	800722a <USBD_GetLen+0x1e>
  {
    len++;
 800721e:	7bfb      	ldrb	r3, [r7, #15]
 8007220:	3301      	adds	r3, #1
 8007222:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007224:	68bb      	ldr	r3, [r7, #8]
 8007226:	3301      	adds	r3, #1
 8007228:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800722a:	68bb      	ldr	r3, [r7, #8]
 800722c:	781b      	ldrb	r3, [r3, #0]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d1f5      	bne.n	800721e <USBD_GetLen+0x12>
  }

  return len;
 8007232:	7bfb      	ldrb	r3, [r7, #15]
}
 8007234:	4618      	mov	r0, r3
 8007236:	3714      	adds	r7, #20
 8007238:	46bd      	mov	sp, r7
 800723a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723e:	4770      	bx	lr

08007240 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b084      	sub	sp, #16
 8007244:	af00      	add	r7, sp, #0
 8007246:	60f8      	str	r0, [r7, #12]
 8007248:	60b9      	str	r1, [r7, #8]
 800724a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	2202      	movs	r2, #2
 8007250:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	687a      	ldr	r2, [r7, #4]
 8007258:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	687a      	ldr	r2, [r7, #4]
 800725e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	68ba      	ldr	r2, [r7, #8]
 8007264:	2100      	movs	r1, #0
 8007266:	68f8      	ldr	r0, [r7, #12]
 8007268:	f000 fe31 	bl	8007ece <USBD_LL_Transmit>

  return USBD_OK;
 800726c:	2300      	movs	r3, #0
}
 800726e:	4618      	mov	r0, r3
 8007270:	3710      	adds	r7, #16
 8007272:	46bd      	mov	sp, r7
 8007274:	bd80      	pop	{r7, pc}

08007276 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007276:	b580      	push	{r7, lr}
 8007278:	b084      	sub	sp, #16
 800727a:	af00      	add	r7, sp, #0
 800727c:	60f8      	str	r0, [r7, #12]
 800727e:	60b9      	str	r1, [r7, #8]
 8007280:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	68ba      	ldr	r2, [r7, #8]
 8007286:	2100      	movs	r1, #0
 8007288:	68f8      	ldr	r0, [r7, #12]
 800728a:	f000 fe20 	bl	8007ece <USBD_LL_Transmit>

  return USBD_OK;
 800728e:	2300      	movs	r3, #0
}
 8007290:	4618      	mov	r0, r3
 8007292:	3710      	adds	r7, #16
 8007294:	46bd      	mov	sp, r7
 8007296:	bd80      	pop	{r7, pc}

08007298 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b084      	sub	sp, #16
 800729c:	af00      	add	r7, sp, #0
 800729e:	60f8      	str	r0, [r7, #12]
 80072a0:	60b9      	str	r1, [r7, #8]
 80072a2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	2203      	movs	r2, #3
 80072a8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	687a      	ldr	r2, [r7, #4]
 80072b0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	687a      	ldr	r2, [r7, #4]
 80072b8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	68ba      	ldr	r2, [r7, #8]
 80072c0:	2100      	movs	r1, #0
 80072c2:	68f8      	ldr	r0, [r7, #12]
 80072c4:	f000 fe24 	bl	8007f10 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80072c8:	2300      	movs	r3, #0
}
 80072ca:	4618      	mov	r0, r3
 80072cc:	3710      	adds	r7, #16
 80072ce:	46bd      	mov	sp, r7
 80072d0:	bd80      	pop	{r7, pc}

080072d2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80072d2:	b580      	push	{r7, lr}
 80072d4:	b084      	sub	sp, #16
 80072d6:	af00      	add	r7, sp, #0
 80072d8:	60f8      	str	r0, [r7, #12]
 80072da:	60b9      	str	r1, [r7, #8]
 80072dc:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	68ba      	ldr	r2, [r7, #8]
 80072e2:	2100      	movs	r1, #0
 80072e4:	68f8      	ldr	r0, [r7, #12]
 80072e6:	f000 fe13 	bl	8007f10 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80072ea:	2300      	movs	r3, #0
}
 80072ec:	4618      	mov	r0, r3
 80072ee:	3710      	adds	r7, #16
 80072f0:	46bd      	mov	sp, r7
 80072f2:	bd80      	pop	{r7, pc}

080072f4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b082      	sub	sp, #8
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2204      	movs	r2, #4
 8007300:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007304:	2300      	movs	r3, #0
 8007306:	2200      	movs	r2, #0
 8007308:	2100      	movs	r1, #0
 800730a:	6878      	ldr	r0, [r7, #4]
 800730c:	f000 fddf 	bl	8007ece <USBD_LL_Transmit>

  return USBD_OK;
 8007310:	2300      	movs	r3, #0
}
 8007312:	4618      	mov	r0, r3
 8007314:	3708      	adds	r7, #8
 8007316:	46bd      	mov	sp, r7
 8007318:	bd80      	pop	{r7, pc}

0800731a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800731a:	b580      	push	{r7, lr}
 800731c:	b082      	sub	sp, #8
 800731e:	af00      	add	r7, sp, #0
 8007320:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2205      	movs	r2, #5
 8007326:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800732a:	2300      	movs	r3, #0
 800732c:	2200      	movs	r2, #0
 800732e:	2100      	movs	r1, #0
 8007330:	6878      	ldr	r0, [r7, #4]
 8007332:	f000 fded 	bl	8007f10 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007336:	2300      	movs	r3, #0
}
 8007338:	4618      	mov	r0, r3
 800733a:	3708      	adds	r7, #8
 800733c:	46bd      	mov	sp, r7
 800733e:	bd80      	pop	{r7, pc}

08007340 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007340:	b580      	push	{r7, lr}
 8007342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007344:	2200      	movs	r2, #0
 8007346:	4912      	ldr	r1, [pc, #72]	; (8007390 <MX_USB_DEVICE_Init+0x50>)
 8007348:	4812      	ldr	r0, [pc, #72]	; (8007394 <MX_USB_DEVICE_Init+0x54>)
 800734a:	f7fe fcdd 	bl	8005d08 <USBD_Init>
 800734e:	4603      	mov	r3, r0
 8007350:	2b00      	cmp	r3, #0
 8007352:	d001      	beq.n	8007358 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007354:	f7f9 fa5c 	bl	8000810 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007358:	490f      	ldr	r1, [pc, #60]	; (8007398 <MX_USB_DEVICE_Init+0x58>)
 800735a:	480e      	ldr	r0, [pc, #56]	; (8007394 <MX_USB_DEVICE_Init+0x54>)
 800735c:	f7fe fd04 	bl	8005d68 <USBD_RegisterClass>
 8007360:	4603      	mov	r3, r0
 8007362:	2b00      	cmp	r3, #0
 8007364:	d001      	beq.n	800736a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007366:	f7f9 fa53 	bl	8000810 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800736a:	490c      	ldr	r1, [pc, #48]	; (800739c <MX_USB_DEVICE_Init+0x5c>)
 800736c:	4809      	ldr	r0, [pc, #36]	; (8007394 <MX_USB_DEVICE_Init+0x54>)
 800736e:	f7fe fbfb 	bl	8005b68 <USBD_CDC_RegisterInterface>
 8007372:	4603      	mov	r3, r0
 8007374:	2b00      	cmp	r3, #0
 8007376:	d001      	beq.n	800737c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007378:	f7f9 fa4a 	bl	8000810 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800737c:	4805      	ldr	r0, [pc, #20]	; (8007394 <MX_USB_DEVICE_Init+0x54>)
 800737e:	f7fe fd29 	bl	8005dd4 <USBD_Start>
 8007382:	4603      	mov	r3, r0
 8007384:	2b00      	cmp	r3, #0
 8007386:	d001      	beq.n	800738c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007388:	f7f9 fa42 	bl	8000810 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800738c:	bf00      	nop
 800738e:	bd80      	pop	{r7, pc}
 8007390:	200000c0 	.word	0x200000c0
 8007394:	200001b0 	.word	0x200001b0
 8007398:	20000020 	.word	0x20000020
 800739c:	200000ac 	.word	0x200000ac

080073a0 <cdcAvailable>:
uint8_t  rx_buf[1024];



uint32_t cdcAvailable(void)
{
 80073a0:	b480      	push	{r7}
 80073a2:	b083      	sub	sp, #12
 80073a4:	af00      	add	r7, sp, #0
  uint32_t ret;

  ret = (rx_in - rx_out) % rx_len;
 80073a6:	4b0a      	ldr	r3, [pc, #40]	; (80073d0 <cdcAvailable+0x30>)
 80073a8:	681a      	ldr	r2, [r3, #0]
 80073aa:	4b0a      	ldr	r3, [pc, #40]	; (80073d4 <cdcAvailable+0x34>)
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	1ad3      	subs	r3, r2, r3
 80073b0:	4a09      	ldr	r2, [pc, #36]	; (80073d8 <cdcAvailable+0x38>)
 80073b2:	6812      	ldr	r2, [r2, #0]
 80073b4:	fbb3 f1f2 	udiv	r1, r3, r2
 80073b8:	fb01 f202 	mul.w	r2, r1, r2
 80073bc:	1a9b      	subs	r3, r3, r2
 80073be:	607b      	str	r3, [r7, #4]

  return ret;
 80073c0:	687b      	ldr	r3, [r7, #4]
}
 80073c2:	4618      	mov	r0, r3
 80073c4:	370c      	adds	r7, #12
 80073c6:	46bd      	mov	sp, r7
 80073c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073cc:	4770      	bx	lr
 80073ce:	bf00      	nop
 80073d0:	2000048c 	.word	0x2000048c
 80073d4:	20000490 	.word	0x20000490
 80073d8:	200000a8 	.word	0x200000a8

080073dc <cdcRead>:

uint8_t cdcRead(void)
{
 80073dc:	b480      	push	{r7}
 80073de:	b083      	sub	sp, #12
 80073e0:	af00      	add	r7, sp, #0
  uint8_t ret;

  ret = rx_buf[rx_out];
 80073e2:	4b0f      	ldr	r3, [pc, #60]	; (8007420 <cdcRead+0x44>)
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	4a0f      	ldr	r2, [pc, #60]	; (8007424 <cdcRead+0x48>)
 80073e8:	5cd3      	ldrb	r3, [r2, r3]
 80073ea:	71fb      	strb	r3, [r7, #7]

  if(rx_out != rx_in)
 80073ec:	4b0c      	ldr	r3, [pc, #48]	; (8007420 <cdcRead+0x44>)
 80073ee:	681a      	ldr	r2, [r3, #0]
 80073f0:	4b0d      	ldr	r3, [pc, #52]	; (8007428 <cdcRead+0x4c>)
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	429a      	cmp	r2, r3
 80073f6:	d00b      	beq.n	8007410 <cdcRead+0x34>
  {
    rx_out = (rx_out + 1) % rx_len;
 80073f8:	4b09      	ldr	r3, [pc, #36]	; (8007420 <cdcRead+0x44>)
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	3301      	adds	r3, #1
 80073fe:	4a0b      	ldr	r2, [pc, #44]	; (800742c <cdcRead+0x50>)
 8007400:	6812      	ldr	r2, [r2, #0]
 8007402:	fbb3 f1f2 	udiv	r1, r3, r2
 8007406:	fb01 f202 	mul.w	r2, r1, r2
 800740a:	1a9b      	subs	r3, r3, r2
 800740c:	4a04      	ldr	r2, [pc, #16]	; (8007420 <cdcRead+0x44>)
 800740e:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8007410:	79fb      	ldrb	r3, [r7, #7]
}
 8007412:	4618      	mov	r0, r3
 8007414:	370c      	adds	r7, #12
 8007416:	46bd      	mov	sp, r7
 8007418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741c:	4770      	bx	lr
 800741e:	bf00      	nop
 8007420:	20000490 	.word	0x20000490
 8007424:	20000494 	.word	0x20000494
 8007428:	2000048c 	.word	0x2000048c
 800742c:	200000a8 	.word	0x200000a8

08007430 <cdcDataIn>:

void cdcDataIn(uint8_t rx_data)
{
 8007430:	b480      	push	{r7}
 8007432:	b085      	sub	sp, #20
 8007434:	af00      	add	r7, sp, #0
 8007436:	4603      	mov	r3, r0
 8007438:	71fb      	strb	r3, [r7, #7]
  uint32_t next_rx_in;

  rx_buf[rx_in] = rx_data;
 800743a:	4b0f      	ldr	r3, [pc, #60]	; (8007478 <cdcDataIn+0x48>)
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	490f      	ldr	r1, [pc, #60]	; (800747c <cdcDataIn+0x4c>)
 8007440:	79fa      	ldrb	r2, [r7, #7]
 8007442:	54ca      	strb	r2, [r1, r3]

  next_rx_in = (rx_in + 1) % rx_len;
 8007444:	4b0c      	ldr	r3, [pc, #48]	; (8007478 <cdcDataIn+0x48>)
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	3301      	adds	r3, #1
 800744a:	4a0d      	ldr	r2, [pc, #52]	; (8007480 <cdcDataIn+0x50>)
 800744c:	6812      	ldr	r2, [r2, #0]
 800744e:	fbb3 f1f2 	udiv	r1, r3, r2
 8007452:	fb01 f202 	mul.w	r2, r1, r2
 8007456:	1a9b      	subs	r3, r3, r2
 8007458:	60fb      	str	r3, [r7, #12]

  if(next_rx_in != rx_out)
 800745a:	4b0a      	ldr	r3, [pc, #40]	; (8007484 <cdcDataIn+0x54>)
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	68fa      	ldr	r2, [r7, #12]
 8007460:	429a      	cmp	r2, r3
 8007462:	d002      	beq.n	800746a <cdcDataIn+0x3a>
  {
    rx_in = next_rx_in;
 8007464:	4a04      	ldr	r2, [pc, #16]	; (8007478 <cdcDataIn+0x48>)
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	6013      	str	r3, [r2, #0]
  }
}
 800746a:	bf00      	nop
 800746c:	3714      	adds	r7, #20
 800746e:	46bd      	mov	sp, r7
 8007470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007474:	4770      	bx	lr
 8007476:	bf00      	nop
 8007478:	2000048c 	.word	0x2000048c
 800747c:	20000494 	.word	0x20000494
 8007480:	200000a8 	.word	0x200000a8
 8007484:	20000490 	.word	0x20000490

08007488 <cdcWrite>:

uint32_t cdcWrite(uint8_t *p_data, uint32_t length)
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b084      	sub	sp, #16
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
 8007490:	6039      	str	r1, [r7, #0]
  uint32_t pre_time;
  uint8_t ret;

  pre_time = HAL_GetTick();
 8007492:	f7f9 fc15 	bl	8000cc0 <HAL_GetTick>
 8007496:	60f8      	str	r0, [r7, #12]

  while(1)
  {
    ret = CDC_Transmit_FS(p_data, length);
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	b29b      	uxth	r3, r3
 800749c:	4619      	mov	r1, r3
 800749e:	6878      	ldr	r0, [r7, #4]
 80074a0:	f000 f922 	bl	80076e8 <CDC_Transmit_FS>
 80074a4:	4603      	mov	r3, r0
 80074a6:	72fb      	strb	r3, [r7, #11]

    if(ret == USBD_OK)
 80074a8:	7afb      	ldrb	r3, [r7, #11]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d101      	bne.n	80074b2 <cdcWrite+0x2a>
    {
      return length;
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	e00e      	b.n	80074d0 <cdcWrite+0x48>
    }
    else if(ret == USBD_FAIL)
 80074b2:	7afb      	ldrb	r3, [r7, #11]
 80074b4:	2b03      	cmp	r3, #3
 80074b6:	d101      	bne.n	80074bc <cdcWrite+0x34>
    {
      return 0;
 80074b8:	2300      	movs	r3, #0
 80074ba:	e009      	b.n	80074d0 <cdcWrite+0x48>
    }

    if(HAL_GetTick() - pre_time >= 100)
 80074bc:	f7f9 fc00 	bl	8000cc0 <HAL_GetTick>
 80074c0:	4602      	mov	r2, r0
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	1ad3      	subs	r3, r2, r3
 80074c6:	2b63      	cmp	r3, #99	; 0x63
 80074c8:	d800      	bhi.n	80074cc <cdcWrite+0x44>
    ret = CDC_Transmit_FS(p_data, length);
 80074ca:	e7e5      	b.n	8007498 <cdcWrite+0x10>
    {
      break;
 80074cc:	bf00      	nop
    }
  }

  return 0;
 80074ce:	2300      	movs	r3, #0
}
 80074d0:	4618      	mov	r0, r3
 80074d2:	3710      	adds	r7, #16
 80074d4:	46bd      	mov	sp, r7
 80074d6:	bd80      	pop	{r7, pc}

080074d8 <cdcGetBaud>:

uint32_t cdcGetBaud(void)
{
 80074d8:	b480      	push	{r7}
 80074da:	af00      	add	r7, sp, #0
  return LineCoding.bitrate;
 80074dc:	4b03      	ldr	r3, [pc, #12]	; (80074ec <cdcGetBaud+0x14>)
 80074de:	681b      	ldr	r3, [r3, #0]
}
 80074e0:	4618      	mov	r0, r3
 80074e2:	46bd      	mov	sp, r7
 80074e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e8:	4770      	bx	lr
 80074ea:	bf00      	nop
 80074ec:	200000a0 	.word	0x200000a0

080074f0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80074f4:	2200      	movs	r2, #0
 80074f6:	4905      	ldr	r1, [pc, #20]	; (800750c <CDC_Init_FS+0x1c>)
 80074f8:	4805      	ldr	r0, [pc, #20]	; (8007510 <CDC_Init_FS+0x20>)
 80074fa:	f7fe fb4f 	bl	8005b9c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80074fe:	4905      	ldr	r1, [pc, #20]	; (8007514 <CDC_Init_FS+0x24>)
 8007500:	4803      	ldr	r0, [pc, #12]	; (8007510 <CDC_Init_FS+0x20>)
 8007502:	f7fe fb6d 	bl	8005be0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007506:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007508:	4618      	mov	r0, r3
 800750a:	bd80      	pop	{r7, pc}
 800750c:	20000c94 	.word	0x20000c94
 8007510:	200001b0 	.word	0x200001b0
 8007514:	20000894 	.word	0x20000894

08007518 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007518:	b480      	push	{r7}
 800751a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800751c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800751e:	4618      	mov	r0, r3
 8007520:	46bd      	mov	sp, r7
 8007522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007526:	4770      	bx	lr

08007528 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007528:	b480      	push	{r7}
 800752a:	b083      	sub	sp, #12
 800752c:	af00      	add	r7, sp, #0
 800752e:	4603      	mov	r3, r0
 8007530:	6039      	str	r1, [r7, #0]
 8007532:	71fb      	strb	r3, [r7, #7]
 8007534:	4613      	mov	r3, r2
 8007536:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007538:	79fb      	ldrb	r3, [r7, #7]
 800753a:	2b23      	cmp	r3, #35	; 0x23
 800753c:	f200 80a3 	bhi.w	8007686 <CDC_Control_FS+0x15e>
 8007540:	a201      	add	r2, pc, #4	; (adr r2, 8007548 <CDC_Control_FS+0x20>)
 8007542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007546:	bf00      	nop
 8007548:	08007687 	.word	0x08007687
 800754c:	08007687 	.word	0x08007687
 8007550:	08007687 	.word	0x08007687
 8007554:	08007687 	.word	0x08007687
 8007558:	08007687 	.word	0x08007687
 800755c:	08007687 	.word	0x08007687
 8007560:	08007687 	.word	0x08007687
 8007564:	08007687 	.word	0x08007687
 8007568:	08007687 	.word	0x08007687
 800756c:	08007687 	.word	0x08007687
 8007570:	08007687 	.word	0x08007687
 8007574:	08007687 	.word	0x08007687
 8007578:	08007687 	.word	0x08007687
 800757c:	08007687 	.word	0x08007687
 8007580:	08007687 	.word	0x08007687
 8007584:	08007687 	.word	0x08007687
 8007588:	08007687 	.word	0x08007687
 800758c:	08007687 	.word	0x08007687
 8007590:	08007687 	.word	0x08007687
 8007594:	08007687 	.word	0x08007687
 8007598:	08007687 	.word	0x08007687
 800759c:	08007687 	.word	0x08007687
 80075a0:	08007687 	.word	0x08007687
 80075a4:	08007687 	.word	0x08007687
 80075a8:	08007687 	.word	0x08007687
 80075ac:	08007687 	.word	0x08007687
 80075b0:	08007687 	.word	0x08007687
 80075b4:	08007687 	.word	0x08007687
 80075b8:	08007687 	.word	0x08007687
 80075bc:	08007687 	.word	0x08007687
 80075c0:	08007687 	.word	0x08007687
 80075c4:	08007687 	.word	0x08007687
 80075c8:	080075d9 	.word	0x080075d9
 80075cc:	08007633 	.word	0x08007633
 80075d0:	08007687 	.word	0x08007687
 80075d4:	08007687 	.word	0x08007687
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
      LineCoding.bitrate    = (uint32_t)(pbuf[0]);
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	781b      	ldrb	r3, [r3, #0]
 80075dc:	461a      	mov	r2, r3
 80075de:	4b2e      	ldr	r3, [pc, #184]	; (8007698 <CDC_Control_FS+0x170>)
 80075e0:	601a      	str	r2, [r3, #0]
      LineCoding.bitrate   |= (uint32_t)(pbuf[1] << 8);
 80075e2:	4b2d      	ldr	r3, [pc, #180]	; (8007698 <CDC_Control_FS+0x170>)
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	683a      	ldr	r2, [r7, #0]
 80075e8:	3201      	adds	r2, #1
 80075ea:	7812      	ldrb	r2, [r2, #0]
 80075ec:	0212      	lsls	r2, r2, #8
 80075ee:	4313      	orrs	r3, r2
 80075f0:	4a29      	ldr	r2, [pc, #164]	; (8007698 <CDC_Control_FS+0x170>)
 80075f2:	6013      	str	r3, [r2, #0]
      LineCoding.bitrate   |= (uint32_t)(pbuf[2] << 16);
 80075f4:	4b28      	ldr	r3, [pc, #160]	; (8007698 <CDC_Control_FS+0x170>)
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	683a      	ldr	r2, [r7, #0]
 80075fa:	3202      	adds	r2, #2
 80075fc:	7812      	ldrb	r2, [r2, #0]
 80075fe:	0412      	lsls	r2, r2, #16
 8007600:	4313      	orrs	r3, r2
 8007602:	4a25      	ldr	r2, [pc, #148]	; (8007698 <CDC_Control_FS+0x170>)
 8007604:	6013      	str	r3, [r2, #0]
      LineCoding.bitrate   |= (uint32_t)(pbuf[3] << 24);
 8007606:	4b24      	ldr	r3, [pc, #144]	; (8007698 <CDC_Control_FS+0x170>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	683a      	ldr	r2, [r7, #0]
 800760c:	3203      	adds	r2, #3
 800760e:	7812      	ldrb	r2, [r2, #0]
 8007610:	0612      	lsls	r2, r2, #24
 8007612:	4313      	orrs	r3, r2
 8007614:	4a20      	ldr	r2, [pc, #128]	; (8007698 <CDC_Control_FS+0x170>)
 8007616:	6013      	str	r3, [r2, #0]
      LineCoding.format     = pbuf[4];
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	791a      	ldrb	r2, [r3, #4]
 800761c:	4b1e      	ldr	r3, [pc, #120]	; (8007698 <CDC_Control_FS+0x170>)
 800761e:	711a      	strb	r2, [r3, #4]
      LineCoding.paritytype = pbuf[5];
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	795a      	ldrb	r2, [r3, #5]
 8007624:	4b1c      	ldr	r3, [pc, #112]	; (8007698 <CDC_Control_FS+0x170>)
 8007626:	715a      	strb	r2, [r3, #5]
      LineCoding.datatype   = pbuf[6];
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	799a      	ldrb	r2, [r3, #6]
 800762c:	4b1a      	ldr	r3, [pc, #104]	; (8007698 <CDC_Control_FS+0x170>)
 800762e:	719a      	strb	r2, [r3, #6]
    break;
 8007630:	e02a      	b.n	8007688 <CDC_Control_FS+0x160>

    case CDC_GET_LINE_CODING:
      pbuf[0] = (uint8_t)(LineCoding.bitrate);
 8007632:	4b19      	ldr	r3, [pc, #100]	; (8007698 <CDC_Control_FS+0x170>)
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	b2da      	uxtb	r2, r3
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	701a      	strb	r2, [r3, #0]
      pbuf[1] = (uint8_t)(LineCoding.bitrate >> 8);
 800763c:	4b16      	ldr	r3, [pc, #88]	; (8007698 <CDC_Control_FS+0x170>)
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	0a1a      	lsrs	r2, r3, #8
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	3301      	adds	r3, #1
 8007646:	b2d2      	uxtb	r2, r2
 8007648:	701a      	strb	r2, [r3, #0]
      pbuf[2] = (uint8_t)(LineCoding.bitrate >> 16);
 800764a:	4b13      	ldr	r3, [pc, #76]	; (8007698 <CDC_Control_FS+0x170>)
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	0c1a      	lsrs	r2, r3, #16
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	3302      	adds	r3, #2
 8007654:	b2d2      	uxtb	r2, r2
 8007656:	701a      	strb	r2, [r3, #0]
      pbuf[3] = (uint8_t)(LineCoding.bitrate >> 24);
 8007658:	4b0f      	ldr	r3, [pc, #60]	; (8007698 <CDC_Control_FS+0x170>)
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	0e1a      	lsrs	r2, r3, #24
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	3303      	adds	r3, #3
 8007662:	b2d2      	uxtb	r2, r2
 8007664:	701a      	strb	r2, [r3, #0]
      pbuf[4] = LineCoding.format;
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	3304      	adds	r3, #4
 800766a:	4a0b      	ldr	r2, [pc, #44]	; (8007698 <CDC_Control_FS+0x170>)
 800766c:	7912      	ldrb	r2, [r2, #4]
 800766e:	701a      	strb	r2, [r3, #0]
      pbuf[5] = LineCoding.paritytype;
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	3305      	adds	r3, #5
 8007674:	4a08      	ldr	r2, [pc, #32]	; (8007698 <CDC_Control_FS+0x170>)
 8007676:	7952      	ldrb	r2, [r2, #5]
 8007678:	701a      	strb	r2, [r3, #0]
      pbuf[6] = LineCoding.datatype;
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	3306      	adds	r3, #6
 800767e:	4a06      	ldr	r2, [pc, #24]	; (8007698 <CDC_Control_FS+0x170>)
 8007680:	7992      	ldrb	r2, [r2, #6]
 8007682:	701a      	strb	r2, [r3, #0]
    break;
 8007684:	e000      	b.n	8007688 <CDC_Control_FS+0x160>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007686:	bf00      	nop
  }

  return (USBD_OK);
 8007688:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800768a:	4618      	mov	r0, r3
 800768c:	370c      	adds	r7, #12
 800768e:	46bd      	mov	sp, r7
 8007690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007694:	4770      	bx	lr
 8007696:	bf00      	nop
 8007698:	200000a0 	.word	0x200000a0

0800769c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b084      	sub	sp, #16
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
 80076a4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80076a6:	6879      	ldr	r1, [r7, #4]
 80076a8:	480e      	ldr	r0, [pc, #56]	; (80076e4 <CDC_Receive_FS+0x48>)
 80076aa:	f7fe fa99 	bl	8005be0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80076ae:	480d      	ldr	r0, [pc, #52]	; (80076e4 <CDC_Receive_FS+0x48>)
 80076b0:	f7fe faf4 	bl	8005c9c <USBD_CDC_ReceivePacket>


  for(int i=0; i<*Len; i++)
 80076b4:	2300      	movs	r3, #0
 80076b6:	60fb      	str	r3, [r7, #12]
 80076b8:	e009      	b.n	80076ce <CDC_Receive_FS+0x32>
  {
    cdcDataIn(Buf[i]);
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	687a      	ldr	r2, [r7, #4]
 80076be:	4413      	add	r3, r2
 80076c0:	781b      	ldrb	r3, [r3, #0]
 80076c2:	4618      	mov	r0, r3
 80076c4:	f7ff feb4 	bl	8007430 <cdcDataIn>
  for(int i=0; i<*Len; i++)
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	3301      	adds	r3, #1
 80076cc:	60fb      	str	r3, [r7, #12]
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	681a      	ldr	r2, [r3, #0]
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	429a      	cmp	r2, r3
 80076d6:	d8f0      	bhi.n	80076ba <CDC_Receive_FS+0x1e>
  }



  return (USBD_OK);
 80076d8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80076da:	4618      	mov	r0, r3
 80076dc:	3710      	adds	r7, #16
 80076de:	46bd      	mov	sp, r7
 80076e0:	bd80      	pop	{r7, pc}
 80076e2:	bf00      	nop
 80076e4:	200001b0 	.word	0x200001b0

080076e8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b084      	sub	sp, #16
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
 80076f0:	460b      	mov	r3, r1
 80076f2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80076f4:	2300      	movs	r3, #0
 80076f6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80076f8:	4b0d      	ldr	r3, [pc, #52]	; (8007730 <CDC_Transmit_FS+0x48>)
 80076fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80076fe:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007700:	68bb      	ldr	r3, [r7, #8]
 8007702:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007706:	2b00      	cmp	r3, #0
 8007708:	d001      	beq.n	800770e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800770a:	2301      	movs	r3, #1
 800770c:	e00b      	b.n	8007726 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800770e:	887b      	ldrh	r3, [r7, #2]
 8007710:	461a      	mov	r2, r3
 8007712:	6879      	ldr	r1, [r7, #4]
 8007714:	4806      	ldr	r0, [pc, #24]	; (8007730 <CDC_Transmit_FS+0x48>)
 8007716:	f7fe fa41 	bl	8005b9c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800771a:	4805      	ldr	r0, [pc, #20]	; (8007730 <CDC_Transmit_FS+0x48>)
 800771c:	f7fe fa7e 	bl	8005c1c <USBD_CDC_TransmitPacket>
 8007720:	4603      	mov	r3, r0
 8007722:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007724:	7bfb      	ldrb	r3, [r7, #15]
}
 8007726:	4618      	mov	r0, r3
 8007728:	3710      	adds	r7, #16
 800772a:	46bd      	mov	sp, r7
 800772c:	bd80      	pop	{r7, pc}
 800772e:	bf00      	nop
 8007730:	200001b0 	.word	0x200001b0

08007734 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007734:	b480      	push	{r7}
 8007736:	b087      	sub	sp, #28
 8007738:	af00      	add	r7, sp, #0
 800773a:	60f8      	str	r0, [r7, #12]
 800773c:	60b9      	str	r1, [r7, #8]
 800773e:	4613      	mov	r3, r2
 8007740:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007742:	2300      	movs	r3, #0
 8007744:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007746:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800774a:	4618      	mov	r0, r3
 800774c:	371c      	adds	r7, #28
 800774e:	46bd      	mov	sp, r7
 8007750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007754:	4770      	bx	lr
	...

08007758 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007758:	b480      	push	{r7}
 800775a:	b083      	sub	sp, #12
 800775c:	af00      	add	r7, sp, #0
 800775e:	4603      	mov	r3, r0
 8007760:	6039      	str	r1, [r7, #0]
 8007762:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	2212      	movs	r2, #18
 8007768:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800776a:	4b03      	ldr	r3, [pc, #12]	; (8007778 <USBD_FS_DeviceDescriptor+0x20>)
}
 800776c:	4618      	mov	r0, r3
 800776e:	370c      	adds	r7, #12
 8007770:	46bd      	mov	sp, r7
 8007772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007776:	4770      	bx	lr
 8007778:	200000e0 	.word	0x200000e0

0800777c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800777c:	b480      	push	{r7}
 800777e:	b083      	sub	sp, #12
 8007780:	af00      	add	r7, sp, #0
 8007782:	4603      	mov	r3, r0
 8007784:	6039      	str	r1, [r7, #0]
 8007786:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	2204      	movs	r2, #4
 800778c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800778e:	4b03      	ldr	r3, [pc, #12]	; (800779c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007790:	4618      	mov	r0, r3
 8007792:	370c      	adds	r7, #12
 8007794:	46bd      	mov	sp, r7
 8007796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779a:	4770      	bx	lr
 800779c:	20000100 	.word	0x20000100

080077a0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b082      	sub	sp, #8
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	4603      	mov	r3, r0
 80077a8:	6039      	str	r1, [r7, #0]
 80077aa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80077ac:	79fb      	ldrb	r3, [r7, #7]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d105      	bne.n	80077be <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80077b2:	683a      	ldr	r2, [r7, #0]
 80077b4:	4907      	ldr	r1, [pc, #28]	; (80077d4 <USBD_FS_ProductStrDescriptor+0x34>)
 80077b6:	4808      	ldr	r0, [pc, #32]	; (80077d8 <USBD_FS_ProductStrDescriptor+0x38>)
 80077b8:	f7ff fce2 	bl	8007180 <USBD_GetString>
 80077bc:	e004      	b.n	80077c8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80077be:	683a      	ldr	r2, [r7, #0]
 80077c0:	4904      	ldr	r1, [pc, #16]	; (80077d4 <USBD_FS_ProductStrDescriptor+0x34>)
 80077c2:	4805      	ldr	r0, [pc, #20]	; (80077d8 <USBD_FS_ProductStrDescriptor+0x38>)
 80077c4:	f7ff fcdc 	bl	8007180 <USBD_GetString>
  }
  return USBD_StrDesc;
 80077c8:	4b02      	ldr	r3, [pc, #8]	; (80077d4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80077ca:	4618      	mov	r0, r3
 80077cc:	3708      	adds	r7, #8
 80077ce:	46bd      	mov	sp, r7
 80077d0:	bd80      	pop	{r7, pc}
 80077d2:	bf00      	nop
 80077d4:	20001094 	.word	0x20001094
 80077d8:	08008a64 	.word	0x08008a64

080077dc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b082      	sub	sp, #8
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	4603      	mov	r3, r0
 80077e4:	6039      	str	r1, [r7, #0]
 80077e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80077e8:	683a      	ldr	r2, [r7, #0]
 80077ea:	4904      	ldr	r1, [pc, #16]	; (80077fc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80077ec:	4804      	ldr	r0, [pc, #16]	; (8007800 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80077ee:	f7ff fcc7 	bl	8007180 <USBD_GetString>
  return USBD_StrDesc;
 80077f2:	4b02      	ldr	r3, [pc, #8]	; (80077fc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80077f4:	4618      	mov	r0, r3
 80077f6:	3708      	adds	r7, #8
 80077f8:	46bd      	mov	sp, r7
 80077fa:	bd80      	pop	{r7, pc}
 80077fc:	20001094 	.word	0x20001094
 8007800:	08008a7c 	.word	0x08008a7c

08007804 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b082      	sub	sp, #8
 8007808:	af00      	add	r7, sp, #0
 800780a:	4603      	mov	r3, r0
 800780c:	6039      	str	r1, [r7, #0]
 800780e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	221a      	movs	r2, #26
 8007814:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007816:	f000 f855 	bl	80078c4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800781a:	4b02      	ldr	r3, [pc, #8]	; (8007824 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800781c:	4618      	mov	r0, r3
 800781e:	3708      	adds	r7, #8
 8007820:	46bd      	mov	sp, r7
 8007822:	bd80      	pop	{r7, pc}
 8007824:	20000104 	.word	0x20000104

08007828 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b082      	sub	sp, #8
 800782c:	af00      	add	r7, sp, #0
 800782e:	4603      	mov	r3, r0
 8007830:	6039      	str	r1, [r7, #0]
 8007832:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007834:	79fb      	ldrb	r3, [r7, #7]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d105      	bne.n	8007846 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800783a:	683a      	ldr	r2, [r7, #0]
 800783c:	4907      	ldr	r1, [pc, #28]	; (800785c <USBD_FS_ConfigStrDescriptor+0x34>)
 800783e:	4808      	ldr	r0, [pc, #32]	; (8007860 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007840:	f7ff fc9e 	bl	8007180 <USBD_GetString>
 8007844:	e004      	b.n	8007850 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007846:	683a      	ldr	r2, [r7, #0]
 8007848:	4904      	ldr	r1, [pc, #16]	; (800785c <USBD_FS_ConfigStrDescriptor+0x34>)
 800784a:	4805      	ldr	r0, [pc, #20]	; (8007860 <USBD_FS_ConfigStrDescriptor+0x38>)
 800784c:	f7ff fc98 	bl	8007180 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007850:	4b02      	ldr	r3, [pc, #8]	; (800785c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007852:	4618      	mov	r0, r3
 8007854:	3708      	adds	r7, #8
 8007856:	46bd      	mov	sp, r7
 8007858:	bd80      	pop	{r7, pc}
 800785a:	bf00      	nop
 800785c:	20001094 	.word	0x20001094
 8007860:	08008a90 	.word	0x08008a90

08007864 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007864:	b580      	push	{r7, lr}
 8007866:	b082      	sub	sp, #8
 8007868:	af00      	add	r7, sp, #0
 800786a:	4603      	mov	r3, r0
 800786c:	6039      	str	r1, [r7, #0]
 800786e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007870:	79fb      	ldrb	r3, [r7, #7]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d105      	bne.n	8007882 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007876:	683a      	ldr	r2, [r7, #0]
 8007878:	4907      	ldr	r1, [pc, #28]	; (8007898 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800787a:	4808      	ldr	r0, [pc, #32]	; (800789c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800787c:	f7ff fc80 	bl	8007180 <USBD_GetString>
 8007880:	e004      	b.n	800788c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007882:	683a      	ldr	r2, [r7, #0]
 8007884:	4904      	ldr	r1, [pc, #16]	; (8007898 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007886:	4805      	ldr	r0, [pc, #20]	; (800789c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007888:	f7ff fc7a 	bl	8007180 <USBD_GetString>
  }
  return USBD_StrDesc;
 800788c:	4b02      	ldr	r3, [pc, #8]	; (8007898 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800788e:	4618      	mov	r0, r3
 8007890:	3708      	adds	r7, #8
 8007892:	46bd      	mov	sp, r7
 8007894:	bd80      	pop	{r7, pc}
 8007896:	bf00      	nop
 8007898:	20001094 	.word	0x20001094
 800789c:	08008a9c 	.word	0x08008a9c

080078a0 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80078a0:	b480      	push	{r7}
 80078a2:	b083      	sub	sp, #12
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	4603      	mov	r3, r0
 80078a8:	6039      	str	r1, [r7, #0]
 80078aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 80078ac:	683b      	ldr	r3, [r7, #0]
 80078ae:	220c      	movs	r2, #12
 80078b0:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 80078b2:	4b03      	ldr	r3, [pc, #12]	; (80078c0 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 80078b4:	4618      	mov	r0, r3
 80078b6:	370c      	adds	r7, #12
 80078b8:	46bd      	mov	sp, r7
 80078ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078be:	4770      	bx	lr
 80078c0:	200000f4 	.word	0x200000f4

080078c4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b084      	sub	sp, #16
 80078c8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80078ca:	4b0f      	ldr	r3, [pc, #60]	; (8007908 <Get_SerialNum+0x44>)
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80078d0:	4b0e      	ldr	r3, [pc, #56]	; (800790c <Get_SerialNum+0x48>)
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80078d6:	4b0e      	ldr	r3, [pc, #56]	; (8007910 <Get_SerialNum+0x4c>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80078dc:	68fa      	ldr	r2, [r7, #12]
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	4413      	add	r3, r2
 80078e2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d009      	beq.n	80078fe <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80078ea:	2208      	movs	r2, #8
 80078ec:	4909      	ldr	r1, [pc, #36]	; (8007914 <Get_SerialNum+0x50>)
 80078ee:	68f8      	ldr	r0, [r7, #12]
 80078f0:	f000 f814 	bl	800791c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80078f4:	2204      	movs	r2, #4
 80078f6:	4908      	ldr	r1, [pc, #32]	; (8007918 <Get_SerialNum+0x54>)
 80078f8:	68b8      	ldr	r0, [r7, #8]
 80078fa:	f000 f80f 	bl	800791c <IntToUnicode>
  }
}
 80078fe:	bf00      	nop
 8007900:	3710      	adds	r7, #16
 8007902:	46bd      	mov	sp, r7
 8007904:	bd80      	pop	{r7, pc}
 8007906:	bf00      	nop
 8007908:	1ff0f420 	.word	0x1ff0f420
 800790c:	1ff0f424 	.word	0x1ff0f424
 8007910:	1ff0f428 	.word	0x1ff0f428
 8007914:	20000106 	.word	0x20000106
 8007918:	20000116 	.word	0x20000116

0800791c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800791c:	b480      	push	{r7}
 800791e:	b087      	sub	sp, #28
 8007920:	af00      	add	r7, sp, #0
 8007922:	60f8      	str	r0, [r7, #12]
 8007924:	60b9      	str	r1, [r7, #8]
 8007926:	4613      	mov	r3, r2
 8007928:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800792a:	2300      	movs	r3, #0
 800792c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800792e:	2300      	movs	r3, #0
 8007930:	75fb      	strb	r3, [r7, #23]
 8007932:	e027      	b.n	8007984 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	0f1b      	lsrs	r3, r3, #28
 8007938:	2b09      	cmp	r3, #9
 800793a:	d80b      	bhi.n	8007954 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	0f1b      	lsrs	r3, r3, #28
 8007940:	b2da      	uxtb	r2, r3
 8007942:	7dfb      	ldrb	r3, [r7, #23]
 8007944:	005b      	lsls	r3, r3, #1
 8007946:	4619      	mov	r1, r3
 8007948:	68bb      	ldr	r3, [r7, #8]
 800794a:	440b      	add	r3, r1
 800794c:	3230      	adds	r2, #48	; 0x30
 800794e:	b2d2      	uxtb	r2, r2
 8007950:	701a      	strb	r2, [r3, #0]
 8007952:	e00a      	b.n	800796a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	0f1b      	lsrs	r3, r3, #28
 8007958:	b2da      	uxtb	r2, r3
 800795a:	7dfb      	ldrb	r3, [r7, #23]
 800795c:	005b      	lsls	r3, r3, #1
 800795e:	4619      	mov	r1, r3
 8007960:	68bb      	ldr	r3, [r7, #8]
 8007962:	440b      	add	r3, r1
 8007964:	3237      	adds	r2, #55	; 0x37
 8007966:	b2d2      	uxtb	r2, r2
 8007968:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	011b      	lsls	r3, r3, #4
 800796e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007970:	7dfb      	ldrb	r3, [r7, #23]
 8007972:	005b      	lsls	r3, r3, #1
 8007974:	3301      	adds	r3, #1
 8007976:	68ba      	ldr	r2, [r7, #8]
 8007978:	4413      	add	r3, r2
 800797a:	2200      	movs	r2, #0
 800797c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800797e:	7dfb      	ldrb	r3, [r7, #23]
 8007980:	3301      	adds	r3, #1
 8007982:	75fb      	strb	r3, [r7, #23]
 8007984:	7dfa      	ldrb	r2, [r7, #23]
 8007986:	79fb      	ldrb	r3, [r7, #7]
 8007988:	429a      	cmp	r2, r3
 800798a:	d3d3      	bcc.n	8007934 <IntToUnicode+0x18>
  }
}
 800798c:	bf00      	nop
 800798e:	bf00      	nop
 8007990:	371c      	adds	r7, #28
 8007992:	46bd      	mov	sp, r7
 8007994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007998:	4770      	bx	lr
	...

0800799c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b0ac      	sub	sp, #176	; 0xb0
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80079a4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80079a8:	2200      	movs	r2, #0
 80079aa:	601a      	str	r2, [r3, #0]
 80079ac:	605a      	str	r2, [r3, #4]
 80079ae:	609a      	str	r2, [r3, #8]
 80079b0:	60da      	str	r2, [r3, #12]
 80079b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80079b4:	f107 0318 	add.w	r3, r7, #24
 80079b8:	2284      	movs	r2, #132	; 0x84
 80079ba:	2100      	movs	r1, #0
 80079bc:	4618      	mov	r0, r3
 80079be:	f000 fba1 	bl	8008104 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80079ca:	d151      	bne.n	8007a70 <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80079cc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80079d0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80079d2:	2300      	movs	r3, #0
 80079d4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80079d8:	f107 0318 	add.w	r3, r7, #24
 80079dc:	4618      	mov	r0, r3
 80079de:	f7fb fc87 	bl	80032f0 <HAL_RCCEx_PeriphCLKConfig>
 80079e2:	4603      	mov	r3, r0
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d001      	beq.n	80079ec <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 80079e8:	f7f8 ff12 	bl	8000810 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80079ec:	4b22      	ldr	r3, [pc, #136]	; (8007a78 <HAL_PCD_MspInit+0xdc>)
 80079ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079f0:	4a21      	ldr	r2, [pc, #132]	; (8007a78 <HAL_PCD_MspInit+0xdc>)
 80079f2:	f043 0301 	orr.w	r3, r3, #1
 80079f6:	6313      	str	r3, [r2, #48]	; 0x30
 80079f8:	4b1f      	ldr	r3, [pc, #124]	; (8007a78 <HAL_PCD_MspInit+0xdc>)
 80079fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079fc:	f003 0301 	and.w	r3, r3, #1
 8007a00:	617b      	str	r3, [r7, #20]
 8007a02:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 8007a04:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007a08:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a0c:	2302      	movs	r3, #2
 8007a0e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a12:	2300      	movs	r3, #0
 8007a14:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007a18:	2303      	movs	r3, #3
 8007a1a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007a1e:	230a      	movs	r3, #10
 8007a20:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007a24:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8007a28:	4619      	mov	r1, r3
 8007a2a:	4814      	ldr	r0, [pc, #80]	; (8007a7c <HAL_PCD_MspInit+0xe0>)
 8007a2c:	f7f9 fb06 	bl	800103c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007a30:	4b11      	ldr	r3, [pc, #68]	; (8007a78 <HAL_PCD_MspInit+0xdc>)
 8007a32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a34:	4a10      	ldr	r2, [pc, #64]	; (8007a78 <HAL_PCD_MspInit+0xdc>)
 8007a36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a3a:	6353      	str	r3, [r2, #52]	; 0x34
 8007a3c:	4b0e      	ldr	r3, [pc, #56]	; (8007a78 <HAL_PCD_MspInit+0xdc>)
 8007a3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a44:	613b      	str	r3, [r7, #16]
 8007a46:	693b      	ldr	r3, [r7, #16]
 8007a48:	4b0b      	ldr	r3, [pc, #44]	; (8007a78 <HAL_PCD_MspInit+0xdc>)
 8007a4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a4c:	4a0a      	ldr	r2, [pc, #40]	; (8007a78 <HAL_PCD_MspInit+0xdc>)
 8007a4e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007a52:	6453      	str	r3, [r2, #68]	; 0x44
 8007a54:	4b08      	ldr	r3, [pc, #32]	; (8007a78 <HAL_PCD_MspInit+0xdc>)
 8007a56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007a5c:	60fb      	str	r3, [r7, #12]
 8007a5e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007a60:	2200      	movs	r2, #0
 8007a62:	2100      	movs	r1, #0
 8007a64:	2043      	movs	r0, #67	; 0x43
 8007a66:	f7f9 fa36 	bl	8000ed6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007a6a:	2043      	movs	r0, #67	; 0x43
 8007a6c:	f7f9 fa4f 	bl	8000f0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007a70:	bf00      	nop
 8007a72:	37b0      	adds	r7, #176	; 0xb0
 8007a74:	46bd      	mov	sp, r7
 8007a76:	bd80      	pop	{r7, pc}
 8007a78:	40023800 	.word	0x40023800
 8007a7c:	40020000 	.word	0x40020000

08007a80 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b082      	sub	sp, #8
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007a94:	4619      	mov	r1, r3
 8007a96:	4610      	mov	r0, r2
 8007a98:	f7fe f9e9 	bl	8005e6e <USBD_LL_SetupStage>
}
 8007a9c:	bf00      	nop
 8007a9e:	3708      	adds	r7, #8
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	bd80      	pop	{r7, pc}

08007aa4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b082      	sub	sp, #8
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
 8007aac:	460b      	mov	r3, r1
 8007aae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 8007ab6:	78fa      	ldrb	r2, [r7, #3]
 8007ab8:	6879      	ldr	r1, [r7, #4]
 8007aba:	4613      	mov	r3, r2
 8007abc:	00db      	lsls	r3, r3, #3
 8007abe:	4413      	add	r3, r2
 8007ac0:	009b      	lsls	r3, r3, #2
 8007ac2:	440b      	add	r3, r1
 8007ac4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8007ac8:	681a      	ldr	r2, [r3, #0]
 8007aca:	78fb      	ldrb	r3, [r7, #3]
 8007acc:	4619      	mov	r1, r3
 8007ace:	f7fe fa23 	bl	8005f18 <USBD_LL_DataOutStage>
}
 8007ad2:	bf00      	nop
 8007ad4:	3708      	adds	r7, #8
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	bd80      	pop	{r7, pc}

08007ada <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ada:	b580      	push	{r7, lr}
 8007adc:	b082      	sub	sp, #8
 8007ade:	af00      	add	r7, sp, #0
 8007ae0:	6078      	str	r0, [r7, #4]
 8007ae2:	460b      	mov	r3, r1
 8007ae4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 8007aec:	78fa      	ldrb	r2, [r7, #3]
 8007aee:	6879      	ldr	r1, [r7, #4]
 8007af0:	4613      	mov	r3, r2
 8007af2:	00db      	lsls	r3, r3, #3
 8007af4:	4413      	add	r3, r2
 8007af6:	009b      	lsls	r3, r3, #2
 8007af8:	440b      	add	r3, r1
 8007afa:	334c      	adds	r3, #76	; 0x4c
 8007afc:	681a      	ldr	r2, [r3, #0]
 8007afe:	78fb      	ldrb	r3, [r7, #3]
 8007b00:	4619      	mov	r1, r3
 8007b02:	f7fe fabc 	bl	800607e <USBD_LL_DataInStage>
}
 8007b06:	bf00      	nop
 8007b08:	3708      	adds	r7, #8
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	bd80      	pop	{r7, pc}

08007b0e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b0e:	b580      	push	{r7, lr}
 8007b10:	b082      	sub	sp, #8
 8007b12:	af00      	add	r7, sp, #0
 8007b14:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	f7fe fbf0 	bl	8006302 <USBD_LL_SOF>
}
 8007b22:	bf00      	nop
 8007b24:	3708      	adds	r7, #8
 8007b26:	46bd      	mov	sp, r7
 8007b28:	bd80      	pop	{r7, pc}

08007b2a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b2a:	b580      	push	{r7, lr}
 8007b2c:	b084      	sub	sp, #16
 8007b2e:	af00      	add	r7, sp, #0
 8007b30:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007b32:	2301      	movs	r3, #1
 8007b34:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	68db      	ldr	r3, [r3, #12]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d102      	bne.n	8007b44 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8007b3e:	2300      	movs	r3, #0
 8007b40:	73fb      	strb	r3, [r7, #15]
 8007b42:	e008      	b.n	8007b56 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	68db      	ldr	r3, [r3, #12]
 8007b48:	2b02      	cmp	r3, #2
 8007b4a:	d102      	bne.n	8007b52 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007b4c:	2301      	movs	r3, #1
 8007b4e:	73fb      	strb	r3, [r7, #15]
 8007b50:	e001      	b.n	8007b56 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8007b52:	f7f8 fe5d 	bl	8000810 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8007b5c:	7bfa      	ldrb	r2, [r7, #15]
 8007b5e:	4611      	mov	r1, r2
 8007b60:	4618      	mov	r0, r3
 8007b62:	f7fe fb90 	bl	8006286 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	f7fe fb38 	bl	80061e2 <USBD_LL_Reset>
}
 8007b72:	bf00      	nop
 8007b74:	3710      	adds	r7, #16
 8007b76:	46bd      	mov	sp, r7
 8007b78:	bd80      	pop	{r7, pc}
	...

08007b7c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b082      	sub	sp, #8
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	f7fe fb8b 	bl	80062a6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	687a      	ldr	r2, [r7, #4]
 8007b9c:	6812      	ldr	r2, [r2, #0]
 8007b9e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007ba2:	f043 0301 	orr.w	r3, r3, #1
 8007ba6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	6a1b      	ldr	r3, [r3, #32]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d005      	beq.n	8007bbc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007bb0:	4b04      	ldr	r3, [pc, #16]	; (8007bc4 <HAL_PCD_SuspendCallback+0x48>)
 8007bb2:	691b      	ldr	r3, [r3, #16]
 8007bb4:	4a03      	ldr	r2, [pc, #12]	; (8007bc4 <HAL_PCD_SuspendCallback+0x48>)
 8007bb6:	f043 0306 	orr.w	r3, r3, #6
 8007bba:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007bbc:	bf00      	nop
 8007bbe:	3708      	adds	r7, #8
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	bd80      	pop	{r7, pc}
 8007bc4:	e000ed00 	.word	0xe000ed00

08007bc8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b082      	sub	sp, #8
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	f7fe fb7b 	bl	80062d2 <USBD_LL_Resume>
}
 8007bdc:	bf00      	nop
 8007bde:	3708      	adds	r7, #8
 8007be0:	46bd      	mov	sp, r7
 8007be2:	bd80      	pop	{r7, pc}

08007be4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b082      	sub	sp, #8
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
 8007bec:	460b      	mov	r3, r1
 8007bee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8007bf6:	78fa      	ldrb	r2, [r7, #3]
 8007bf8:	4611      	mov	r1, r2
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	f7fe fbd3 	bl	80063a6 <USBD_LL_IsoOUTIncomplete>
}
 8007c00:	bf00      	nop
 8007c02:	3708      	adds	r7, #8
 8007c04:	46bd      	mov	sp, r7
 8007c06:	bd80      	pop	{r7, pc}

08007c08 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b082      	sub	sp, #8
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
 8007c10:	460b      	mov	r3, r1
 8007c12:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8007c1a:	78fa      	ldrb	r2, [r7, #3]
 8007c1c:	4611      	mov	r1, r2
 8007c1e:	4618      	mov	r0, r3
 8007c20:	f7fe fb8f 	bl	8006342 <USBD_LL_IsoINIncomplete>
}
 8007c24:	bf00      	nop
 8007c26:	3708      	adds	r7, #8
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	bd80      	pop	{r7, pc}

08007c2c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b082      	sub	sp, #8
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	f7fe fbe5 	bl	800640a <USBD_LL_DevConnected>
}
 8007c40:	bf00      	nop
 8007c42:	3708      	adds	r7, #8
 8007c44:	46bd      	mov	sp, r7
 8007c46:	bd80      	pop	{r7, pc}

08007c48 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b082      	sub	sp, #8
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8007c56:	4618      	mov	r0, r3
 8007c58:	f7fe fbe2 	bl	8006420 <USBD_LL_DevDisconnected>
}
 8007c5c:	bf00      	nop
 8007c5e:	3708      	adds	r7, #8
 8007c60:	46bd      	mov	sp, r7
 8007c62:	bd80      	pop	{r7, pc}

08007c64 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b082      	sub	sp, #8
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	781b      	ldrb	r3, [r3, #0]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d13c      	bne.n	8007cee <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007c74:	4a20      	ldr	r2, [pc, #128]	; (8007cf8 <USBD_LL_Init+0x94>)
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
  pdev->pData = &hpcd_USB_OTG_FS;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	4a1e      	ldr	r2, [pc, #120]	; (8007cf8 <USBD_LL_Init+0x94>)
 8007c80:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007c84:	4b1c      	ldr	r3, [pc, #112]	; (8007cf8 <USBD_LL_Init+0x94>)
 8007c86:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007c8a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8007c8c:	4b1a      	ldr	r3, [pc, #104]	; (8007cf8 <USBD_LL_Init+0x94>)
 8007c8e:	2206      	movs	r2, #6
 8007c90:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007c92:	4b19      	ldr	r3, [pc, #100]	; (8007cf8 <USBD_LL_Init+0x94>)
 8007c94:	2202      	movs	r2, #2
 8007c96:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007c98:	4b17      	ldr	r3, [pc, #92]	; (8007cf8 <USBD_LL_Init+0x94>)
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007c9e:	4b16      	ldr	r3, [pc, #88]	; (8007cf8 <USBD_LL_Init+0x94>)
 8007ca0:	2202      	movs	r2, #2
 8007ca2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007ca4:	4b14      	ldr	r3, [pc, #80]	; (8007cf8 <USBD_LL_Init+0x94>)
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007caa:	4b13      	ldr	r3, [pc, #76]	; (8007cf8 <USBD_LL_Init+0x94>)
 8007cac:	2200      	movs	r2, #0
 8007cae:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007cb0:	4b11      	ldr	r3, [pc, #68]	; (8007cf8 <USBD_LL_Init+0x94>)
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007cb6:	4b10      	ldr	r3, [pc, #64]	; (8007cf8 <USBD_LL_Init+0x94>)
 8007cb8:	2200      	movs	r2, #0
 8007cba:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007cbc:	4b0e      	ldr	r3, [pc, #56]	; (8007cf8 <USBD_LL_Init+0x94>)
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007cc2:	480d      	ldr	r0, [pc, #52]	; (8007cf8 <USBD_LL_Init+0x94>)
 8007cc4:	f7f9 fb99 	bl	80013fa <HAL_PCD_Init>
 8007cc8:	4603      	mov	r3, r0
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d001      	beq.n	8007cd2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007cce:	f7f8 fd9f 	bl	8000810 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007cd2:	2180      	movs	r1, #128	; 0x80
 8007cd4:	4808      	ldr	r0, [pc, #32]	; (8007cf8 <USBD_LL_Init+0x94>)
 8007cd6:	f7fa fe14 	bl	8002902 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007cda:	2240      	movs	r2, #64	; 0x40
 8007cdc:	2100      	movs	r1, #0
 8007cde:	4806      	ldr	r0, [pc, #24]	; (8007cf8 <USBD_LL_Init+0x94>)
 8007ce0:	f7fa fdc8 	bl	8002874 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007ce4:	2280      	movs	r2, #128	; 0x80
 8007ce6:	2101      	movs	r1, #1
 8007ce8:	4803      	ldr	r0, [pc, #12]	; (8007cf8 <USBD_LL_Init+0x94>)
 8007cea:	f7fa fdc3 	bl	8002874 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007cee:	2300      	movs	r3, #0
}
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	3708      	adds	r7, #8
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	bd80      	pop	{r7, pc}
 8007cf8:	20001294 	.word	0x20001294

08007cfc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b084      	sub	sp, #16
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d04:	2300      	movs	r3, #0
 8007d06:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d08:	2300      	movs	r3, #0
 8007d0a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007d12:	4618      	mov	r0, r3
 8007d14:	f7f9 fc95 	bl	8001642 <HAL_PCD_Start>
 8007d18:	4603      	mov	r3, r0
 8007d1a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d1c:	7bfb      	ldrb	r3, [r7, #15]
 8007d1e:	4618      	mov	r0, r3
 8007d20:	f000 f97e 	bl	8008020 <USBD_Get_USB_Status>
 8007d24:	4603      	mov	r3, r0
 8007d26:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007d28:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	3710      	adds	r7, #16
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	bd80      	pop	{r7, pc}

08007d32 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007d32:	b580      	push	{r7, lr}
 8007d34:	b084      	sub	sp, #16
 8007d36:	af00      	add	r7, sp, #0
 8007d38:	6078      	str	r0, [r7, #4]
 8007d3a:	4608      	mov	r0, r1
 8007d3c:	4611      	mov	r1, r2
 8007d3e:	461a      	mov	r2, r3
 8007d40:	4603      	mov	r3, r0
 8007d42:	70fb      	strb	r3, [r7, #3]
 8007d44:	460b      	mov	r3, r1
 8007d46:	70bb      	strb	r3, [r7, #2]
 8007d48:	4613      	mov	r3, r2
 8007d4a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d50:	2300      	movs	r3, #0
 8007d52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007d5a:	78bb      	ldrb	r3, [r7, #2]
 8007d5c:	883a      	ldrh	r2, [r7, #0]
 8007d5e:	78f9      	ldrb	r1, [r7, #3]
 8007d60:	f7fa f982 	bl	8002068 <HAL_PCD_EP_Open>
 8007d64:	4603      	mov	r3, r0
 8007d66:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d68:	7bfb      	ldrb	r3, [r7, #15]
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	f000 f958 	bl	8008020 <USBD_Get_USB_Status>
 8007d70:	4603      	mov	r3, r0
 8007d72:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007d74:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d76:	4618      	mov	r0, r3
 8007d78:	3710      	adds	r7, #16
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	bd80      	pop	{r7, pc}

08007d7e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007d7e:	b580      	push	{r7, lr}
 8007d80:	b084      	sub	sp, #16
 8007d82:	af00      	add	r7, sp, #0
 8007d84:	6078      	str	r0, [r7, #4]
 8007d86:	460b      	mov	r3, r1
 8007d88:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d8e:	2300      	movs	r3, #0
 8007d90:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007d98:	78fa      	ldrb	r2, [r7, #3]
 8007d9a:	4611      	mov	r1, r2
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	f7fa f9cb 	bl	8002138 <HAL_PCD_EP_Close>
 8007da2:	4603      	mov	r3, r0
 8007da4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007da6:	7bfb      	ldrb	r3, [r7, #15]
 8007da8:	4618      	mov	r0, r3
 8007daa:	f000 f939 	bl	8008020 <USBD_Get_USB_Status>
 8007dae:	4603      	mov	r3, r0
 8007db0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007db2:	7bbb      	ldrb	r3, [r7, #14]
}
 8007db4:	4618      	mov	r0, r3
 8007db6:	3710      	adds	r7, #16
 8007db8:	46bd      	mov	sp, r7
 8007dba:	bd80      	pop	{r7, pc}

08007dbc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007dbc:	b580      	push	{r7, lr}
 8007dbe:	b084      	sub	sp, #16
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
 8007dc4:	460b      	mov	r3, r1
 8007dc6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007dc8:	2300      	movs	r3, #0
 8007dca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007dcc:	2300      	movs	r3, #0
 8007dce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007dd6:	78fa      	ldrb	r2, [r7, #3]
 8007dd8:	4611      	mov	r1, r2
 8007dda:	4618      	mov	r0, r3
 8007ddc:	f7fa faa3 	bl	8002326 <HAL_PCD_EP_SetStall>
 8007de0:	4603      	mov	r3, r0
 8007de2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007de4:	7bfb      	ldrb	r3, [r7, #15]
 8007de6:	4618      	mov	r0, r3
 8007de8:	f000 f91a 	bl	8008020 <USBD_Get_USB_Status>
 8007dec:	4603      	mov	r3, r0
 8007dee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007df0:	7bbb      	ldrb	r3, [r7, #14]
}
 8007df2:	4618      	mov	r0, r3
 8007df4:	3710      	adds	r7, #16
 8007df6:	46bd      	mov	sp, r7
 8007df8:	bd80      	pop	{r7, pc}

08007dfa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007dfa:	b580      	push	{r7, lr}
 8007dfc:	b084      	sub	sp, #16
 8007dfe:	af00      	add	r7, sp, #0
 8007e00:	6078      	str	r0, [r7, #4]
 8007e02:	460b      	mov	r3, r1
 8007e04:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e06:	2300      	movs	r3, #0
 8007e08:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007e14:	78fa      	ldrb	r2, [r7, #3]
 8007e16:	4611      	mov	r1, r2
 8007e18:	4618      	mov	r0, r3
 8007e1a:	f7fa fae8 	bl	80023ee <HAL_PCD_EP_ClrStall>
 8007e1e:	4603      	mov	r3, r0
 8007e20:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e22:	7bfb      	ldrb	r3, [r7, #15]
 8007e24:	4618      	mov	r0, r3
 8007e26:	f000 f8fb 	bl	8008020 <USBD_Get_USB_Status>
 8007e2a:	4603      	mov	r3, r0
 8007e2c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007e2e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e30:	4618      	mov	r0, r3
 8007e32:	3710      	adds	r7, #16
 8007e34:	46bd      	mov	sp, r7
 8007e36:	bd80      	pop	{r7, pc}

08007e38 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007e38:	b480      	push	{r7}
 8007e3a:	b085      	sub	sp, #20
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
 8007e40:	460b      	mov	r3, r1
 8007e42:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007e4a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007e4c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	da0b      	bge.n	8007e6c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007e54:	78fb      	ldrb	r3, [r7, #3]
 8007e56:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007e5a:	68f9      	ldr	r1, [r7, #12]
 8007e5c:	4613      	mov	r3, r2
 8007e5e:	00db      	lsls	r3, r3, #3
 8007e60:	4413      	add	r3, r2
 8007e62:	009b      	lsls	r3, r3, #2
 8007e64:	440b      	add	r3, r1
 8007e66:	333e      	adds	r3, #62	; 0x3e
 8007e68:	781b      	ldrb	r3, [r3, #0]
 8007e6a:	e00b      	b.n	8007e84 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007e6c:	78fb      	ldrb	r3, [r7, #3]
 8007e6e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007e72:	68f9      	ldr	r1, [r7, #12]
 8007e74:	4613      	mov	r3, r2
 8007e76:	00db      	lsls	r3, r3, #3
 8007e78:	4413      	add	r3, r2
 8007e7a:	009b      	lsls	r3, r3, #2
 8007e7c:	440b      	add	r3, r1
 8007e7e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8007e82:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007e84:	4618      	mov	r0, r3
 8007e86:	3714      	adds	r7, #20
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8e:	4770      	bx	lr

08007e90 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b084      	sub	sp, #16
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	6078      	str	r0, [r7, #4]
 8007e98:	460b      	mov	r3, r1
 8007e9a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007eaa:	78fa      	ldrb	r2, [r7, #3]
 8007eac:	4611      	mov	r1, r2
 8007eae:	4618      	mov	r0, r3
 8007eb0:	f7fa f8b5 	bl	800201e <HAL_PCD_SetAddress>
 8007eb4:	4603      	mov	r3, r0
 8007eb6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007eb8:	7bfb      	ldrb	r3, [r7, #15]
 8007eba:	4618      	mov	r0, r3
 8007ebc:	f000 f8b0 	bl	8008020 <USBD_Get_USB_Status>
 8007ec0:	4603      	mov	r3, r0
 8007ec2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007ec4:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	3710      	adds	r7, #16
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	bd80      	pop	{r7, pc}

08007ece <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007ece:	b580      	push	{r7, lr}
 8007ed0:	b086      	sub	sp, #24
 8007ed2:	af00      	add	r7, sp, #0
 8007ed4:	60f8      	str	r0, [r7, #12]
 8007ed6:	607a      	str	r2, [r7, #4]
 8007ed8:	603b      	str	r3, [r7, #0]
 8007eda:	460b      	mov	r3, r1
 8007edc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ede:	2300      	movs	r3, #0
 8007ee0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007eec:	7af9      	ldrb	r1, [r7, #11]
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	687a      	ldr	r2, [r7, #4]
 8007ef2:	f7fa f9ce 	bl	8002292 <HAL_PCD_EP_Transmit>
 8007ef6:	4603      	mov	r3, r0
 8007ef8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007efa:	7dfb      	ldrb	r3, [r7, #23]
 8007efc:	4618      	mov	r0, r3
 8007efe:	f000 f88f 	bl	8008020 <USBD_Get_USB_Status>
 8007f02:	4603      	mov	r3, r0
 8007f04:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007f06:	7dbb      	ldrb	r3, [r7, #22]
}
 8007f08:	4618      	mov	r0, r3
 8007f0a:	3718      	adds	r7, #24
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	bd80      	pop	{r7, pc}

08007f10 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b086      	sub	sp, #24
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	60f8      	str	r0, [r7, #12]
 8007f18:	607a      	str	r2, [r7, #4]
 8007f1a:	603b      	str	r3, [r7, #0]
 8007f1c:	460b      	mov	r3, r1
 8007f1e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f20:	2300      	movs	r3, #0
 8007f22:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f24:	2300      	movs	r3, #0
 8007f26:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007f2e:	7af9      	ldrb	r1, [r7, #11]
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	687a      	ldr	r2, [r7, #4]
 8007f34:	f7fa f94a 	bl	80021cc <HAL_PCD_EP_Receive>
 8007f38:	4603      	mov	r3, r0
 8007f3a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f3c:	7dfb      	ldrb	r3, [r7, #23]
 8007f3e:	4618      	mov	r0, r3
 8007f40:	f000 f86e 	bl	8008020 <USBD_Get_USB_Status>
 8007f44:	4603      	mov	r3, r0
 8007f46:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007f48:	7dbb      	ldrb	r3, [r7, #22]
}
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	3718      	adds	r7, #24
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	bd80      	pop	{r7, pc}

08007f52 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007f52:	b580      	push	{r7, lr}
 8007f54:	b082      	sub	sp, #8
 8007f56:	af00      	add	r7, sp, #0
 8007f58:	6078      	str	r0, [r7, #4]
 8007f5a:	460b      	mov	r3, r1
 8007f5c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007f64:	78fa      	ldrb	r2, [r7, #3]
 8007f66:	4611      	mov	r1, r2
 8007f68:	4618      	mov	r0, r3
 8007f6a:	f7fa f97a 	bl	8002262 <HAL_PCD_EP_GetRxCount>
 8007f6e:	4603      	mov	r3, r0
}
 8007f70:	4618      	mov	r0, r3
 8007f72:	3708      	adds	r7, #8
 8007f74:	46bd      	mov	sp, r7
 8007f76:	bd80      	pop	{r7, pc}

08007f78 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b082      	sub	sp, #8
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
 8007f80:	460b      	mov	r3, r1
 8007f82:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8007f84:	78fb      	ldrb	r3, [r7, #3]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d002      	beq.n	8007f90 <HAL_PCDEx_LPM_Callback+0x18>
 8007f8a:	2b01      	cmp	r3, #1
 8007f8c:	d01f      	beq.n	8007fce <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8007f8e:	e03b      	b.n	8008008 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	6a1b      	ldr	r3, [r3, #32]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d007      	beq.n	8007fa8 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8007f98:	f000 f83c 	bl	8008014 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007f9c:	4b1c      	ldr	r3, [pc, #112]	; (8008010 <HAL_PCDEx_LPM_Callback+0x98>)
 8007f9e:	691b      	ldr	r3, [r3, #16]
 8007fa0:	4a1b      	ldr	r2, [pc, #108]	; (8008010 <HAL_PCDEx_LPM_Callback+0x98>)
 8007fa2:	f023 0306 	bic.w	r3, r3, #6
 8007fa6:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	687a      	ldr	r2, [r7, #4]
 8007fb4:	6812      	ldr	r2, [r2, #0]
 8007fb6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007fba:	f023 0301 	bic.w	r3, r3, #1
 8007fbe:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	f7fe f983 	bl	80062d2 <USBD_LL_Resume>
    break;
 8007fcc:	e01c      	b.n	8008008 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	687a      	ldr	r2, [r7, #4]
 8007fda:	6812      	ldr	r2, [r2, #0]
 8007fdc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007fe0:	f043 0301 	orr.w	r3, r3, #1
 8007fe4:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8007fec:	4618      	mov	r0, r3
 8007fee:	f7fe f95a 	bl	80062a6 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6a1b      	ldr	r3, [r3, #32]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d005      	beq.n	8008006 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007ffa:	4b05      	ldr	r3, [pc, #20]	; (8008010 <HAL_PCDEx_LPM_Callback+0x98>)
 8007ffc:	691b      	ldr	r3, [r3, #16]
 8007ffe:	4a04      	ldr	r2, [pc, #16]	; (8008010 <HAL_PCDEx_LPM_Callback+0x98>)
 8008000:	f043 0306 	orr.w	r3, r3, #6
 8008004:	6113      	str	r3, [r2, #16]
    break;
 8008006:	bf00      	nop
}
 8008008:	bf00      	nop
 800800a:	3708      	adds	r7, #8
 800800c:	46bd      	mov	sp, r7
 800800e:	bd80      	pop	{r7, pc}
 8008010:	e000ed00 	.word	0xe000ed00

08008014 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8008014:	b580      	push	{r7, lr}
 8008016:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8008018:	f7f8 fb5e 	bl	80006d8 <SystemClock_Config>
}
 800801c:	bf00      	nop
 800801e:	bd80      	pop	{r7, pc}

08008020 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008020:	b480      	push	{r7}
 8008022:	b085      	sub	sp, #20
 8008024:	af00      	add	r7, sp, #0
 8008026:	4603      	mov	r3, r0
 8008028:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800802a:	2300      	movs	r3, #0
 800802c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800802e:	79fb      	ldrb	r3, [r7, #7]
 8008030:	2b03      	cmp	r3, #3
 8008032:	d817      	bhi.n	8008064 <USBD_Get_USB_Status+0x44>
 8008034:	a201      	add	r2, pc, #4	; (adr r2, 800803c <USBD_Get_USB_Status+0x1c>)
 8008036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800803a:	bf00      	nop
 800803c:	0800804d 	.word	0x0800804d
 8008040:	08008053 	.word	0x08008053
 8008044:	08008059 	.word	0x08008059
 8008048:	0800805f 	.word	0x0800805f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800804c:	2300      	movs	r3, #0
 800804e:	73fb      	strb	r3, [r7, #15]
    break;
 8008050:	e00b      	b.n	800806a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008052:	2303      	movs	r3, #3
 8008054:	73fb      	strb	r3, [r7, #15]
    break;
 8008056:	e008      	b.n	800806a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008058:	2301      	movs	r3, #1
 800805a:	73fb      	strb	r3, [r7, #15]
    break;
 800805c:	e005      	b.n	800806a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800805e:	2303      	movs	r3, #3
 8008060:	73fb      	strb	r3, [r7, #15]
    break;
 8008062:	e002      	b.n	800806a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008064:	2303      	movs	r3, #3
 8008066:	73fb      	strb	r3, [r7, #15]
    break;
 8008068:	bf00      	nop
  }
  return usb_status;
 800806a:	7bfb      	ldrb	r3, [r7, #15]
}
 800806c:	4618      	mov	r0, r3
 800806e:	3714      	adds	r7, #20
 8008070:	46bd      	mov	sp, r7
 8008072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008076:	4770      	bx	lr

08008078 <main>:

#include "main.h"


int main(void)
{
 8008078:	b580      	push	{r7, lr}
 800807a:	af00      	add	r7, sp, #0
  hwInit();
 800807c:	f7f8 fdc5 	bl	8000c0a <hwInit>
  apInit();
 8008080:	f7f8 fa98 	bl	80005b4 <apInit>


  apMain();
 8008084:	f7f8 faa0 	bl	80005c8 <apMain>


  return 0;
 8008088:	2300      	movs	r3, #0
}
 800808a:	4618      	mov	r0, r3
 800808c:	bd80      	pop	{r7, pc}
	...

08008090 <__errno>:
 8008090:	4b01      	ldr	r3, [pc, #4]	; (8008098 <__errno+0x8>)
 8008092:	6818      	ldr	r0, [r3, #0]
 8008094:	4770      	bx	lr
 8008096:	bf00      	nop
 8008098:	20000120 	.word	0x20000120

0800809c <__libc_init_array>:
 800809c:	b570      	push	{r4, r5, r6, lr}
 800809e:	4d0d      	ldr	r5, [pc, #52]	; (80080d4 <__libc_init_array+0x38>)
 80080a0:	4c0d      	ldr	r4, [pc, #52]	; (80080d8 <__libc_init_array+0x3c>)
 80080a2:	1b64      	subs	r4, r4, r5
 80080a4:	10a4      	asrs	r4, r4, #2
 80080a6:	2600      	movs	r6, #0
 80080a8:	42a6      	cmp	r6, r4
 80080aa:	d109      	bne.n	80080c0 <__libc_init_array+0x24>
 80080ac:	4d0b      	ldr	r5, [pc, #44]	; (80080dc <__libc_init_array+0x40>)
 80080ae:	4c0c      	ldr	r4, [pc, #48]	; (80080e0 <__libc_init_array+0x44>)
 80080b0:	f000 fcb8 	bl	8008a24 <_init>
 80080b4:	1b64      	subs	r4, r4, r5
 80080b6:	10a4      	asrs	r4, r4, #2
 80080b8:	2600      	movs	r6, #0
 80080ba:	42a6      	cmp	r6, r4
 80080bc:	d105      	bne.n	80080ca <__libc_init_array+0x2e>
 80080be:	bd70      	pop	{r4, r5, r6, pc}
 80080c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80080c4:	4798      	blx	r3
 80080c6:	3601      	adds	r6, #1
 80080c8:	e7ee      	b.n	80080a8 <__libc_init_array+0xc>
 80080ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80080ce:	4798      	blx	r3
 80080d0:	3601      	adds	r6, #1
 80080d2:	e7f2      	b.n	80080ba <__libc_init_array+0x1e>
 80080d4:	08008af8 	.word	0x08008af8
 80080d8:	08008af8 	.word	0x08008af8
 80080dc:	08008af8 	.word	0x08008af8
 80080e0:	08008afc 	.word	0x08008afc

080080e4 <malloc>:
 80080e4:	4b02      	ldr	r3, [pc, #8]	; (80080f0 <malloc+0xc>)
 80080e6:	4601      	mov	r1, r0
 80080e8:	6818      	ldr	r0, [r3, #0]
 80080ea:	f000 b87f 	b.w	80081ec <_malloc_r>
 80080ee:	bf00      	nop
 80080f0:	20000120 	.word	0x20000120

080080f4 <free>:
 80080f4:	4b02      	ldr	r3, [pc, #8]	; (8008100 <free+0xc>)
 80080f6:	4601      	mov	r1, r0
 80080f8:	6818      	ldr	r0, [r3, #0]
 80080fa:	f000 b80b 	b.w	8008114 <_free_r>
 80080fe:	bf00      	nop
 8008100:	20000120 	.word	0x20000120

08008104 <memset>:
 8008104:	4402      	add	r2, r0
 8008106:	4603      	mov	r3, r0
 8008108:	4293      	cmp	r3, r2
 800810a:	d100      	bne.n	800810e <memset+0xa>
 800810c:	4770      	bx	lr
 800810e:	f803 1b01 	strb.w	r1, [r3], #1
 8008112:	e7f9      	b.n	8008108 <memset+0x4>

08008114 <_free_r>:
 8008114:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008116:	2900      	cmp	r1, #0
 8008118:	d044      	beq.n	80081a4 <_free_r+0x90>
 800811a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800811e:	9001      	str	r0, [sp, #4]
 8008120:	2b00      	cmp	r3, #0
 8008122:	f1a1 0404 	sub.w	r4, r1, #4
 8008126:	bfb8      	it	lt
 8008128:	18e4      	addlt	r4, r4, r3
 800812a:	f000 f91d 	bl	8008368 <__malloc_lock>
 800812e:	4a1e      	ldr	r2, [pc, #120]	; (80081a8 <_free_r+0x94>)
 8008130:	9801      	ldr	r0, [sp, #4]
 8008132:	6813      	ldr	r3, [r2, #0]
 8008134:	b933      	cbnz	r3, 8008144 <_free_r+0x30>
 8008136:	6063      	str	r3, [r4, #4]
 8008138:	6014      	str	r4, [r2, #0]
 800813a:	b003      	add	sp, #12
 800813c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008140:	f000 b918 	b.w	8008374 <__malloc_unlock>
 8008144:	42a3      	cmp	r3, r4
 8008146:	d908      	bls.n	800815a <_free_r+0x46>
 8008148:	6825      	ldr	r5, [r4, #0]
 800814a:	1961      	adds	r1, r4, r5
 800814c:	428b      	cmp	r3, r1
 800814e:	bf01      	itttt	eq
 8008150:	6819      	ldreq	r1, [r3, #0]
 8008152:	685b      	ldreq	r3, [r3, #4]
 8008154:	1949      	addeq	r1, r1, r5
 8008156:	6021      	streq	r1, [r4, #0]
 8008158:	e7ed      	b.n	8008136 <_free_r+0x22>
 800815a:	461a      	mov	r2, r3
 800815c:	685b      	ldr	r3, [r3, #4]
 800815e:	b10b      	cbz	r3, 8008164 <_free_r+0x50>
 8008160:	42a3      	cmp	r3, r4
 8008162:	d9fa      	bls.n	800815a <_free_r+0x46>
 8008164:	6811      	ldr	r1, [r2, #0]
 8008166:	1855      	adds	r5, r2, r1
 8008168:	42a5      	cmp	r5, r4
 800816a:	d10b      	bne.n	8008184 <_free_r+0x70>
 800816c:	6824      	ldr	r4, [r4, #0]
 800816e:	4421      	add	r1, r4
 8008170:	1854      	adds	r4, r2, r1
 8008172:	42a3      	cmp	r3, r4
 8008174:	6011      	str	r1, [r2, #0]
 8008176:	d1e0      	bne.n	800813a <_free_r+0x26>
 8008178:	681c      	ldr	r4, [r3, #0]
 800817a:	685b      	ldr	r3, [r3, #4]
 800817c:	6053      	str	r3, [r2, #4]
 800817e:	4421      	add	r1, r4
 8008180:	6011      	str	r1, [r2, #0]
 8008182:	e7da      	b.n	800813a <_free_r+0x26>
 8008184:	d902      	bls.n	800818c <_free_r+0x78>
 8008186:	230c      	movs	r3, #12
 8008188:	6003      	str	r3, [r0, #0]
 800818a:	e7d6      	b.n	800813a <_free_r+0x26>
 800818c:	6825      	ldr	r5, [r4, #0]
 800818e:	1961      	adds	r1, r4, r5
 8008190:	428b      	cmp	r3, r1
 8008192:	bf04      	itt	eq
 8008194:	6819      	ldreq	r1, [r3, #0]
 8008196:	685b      	ldreq	r3, [r3, #4]
 8008198:	6063      	str	r3, [r4, #4]
 800819a:	bf04      	itt	eq
 800819c:	1949      	addeq	r1, r1, r5
 800819e:	6021      	streq	r1, [r4, #0]
 80081a0:	6054      	str	r4, [r2, #4]
 80081a2:	e7ca      	b.n	800813a <_free_r+0x26>
 80081a4:	b003      	add	sp, #12
 80081a6:	bd30      	pop	{r4, r5, pc}
 80081a8:	2000179c 	.word	0x2000179c

080081ac <sbrk_aligned>:
 80081ac:	b570      	push	{r4, r5, r6, lr}
 80081ae:	4e0e      	ldr	r6, [pc, #56]	; (80081e8 <sbrk_aligned+0x3c>)
 80081b0:	460c      	mov	r4, r1
 80081b2:	6831      	ldr	r1, [r6, #0]
 80081b4:	4605      	mov	r5, r0
 80081b6:	b911      	cbnz	r1, 80081be <sbrk_aligned+0x12>
 80081b8:	f000 f88c 	bl	80082d4 <_sbrk_r>
 80081bc:	6030      	str	r0, [r6, #0]
 80081be:	4621      	mov	r1, r4
 80081c0:	4628      	mov	r0, r5
 80081c2:	f000 f887 	bl	80082d4 <_sbrk_r>
 80081c6:	1c43      	adds	r3, r0, #1
 80081c8:	d00a      	beq.n	80081e0 <sbrk_aligned+0x34>
 80081ca:	1cc4      	adds	r4, r0, #3
 80081cc:	f024 0403 	bic.w	r4, r4, #3
 80081d0:	42a0      	cmp	r0, r4
 80081d2:	d007      	beq.n	80081e4 <sbrk_aligned+0x38>
 80081d4:	1a21      	subs	r1, r4, r0
 80081d6:	4628      	mov	r0, r5
 80081d8:	f000 f87c 	bl	80082d4 <_sbrk_r>
 80081dc:	3001      	adds	r0, #1
 80081de:	d101      	bne.n	80081e4 <sbrk_aligned+0x38>
 80081e0:	f04f 34ff 	mov.w	r4, #4294967295
 80081e4:	4620      	mov	r0, r4
 80081e6:	bd70      	pop	{r4, r5, r6, pc}
 80081e8:	200017a0 	.word	0x200017a0

080081ec <_malloc_r>:
 80081ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081f0:	1ccd      	adds	r5, r1, #3
 80081f2:	f025 0503 	bic.w	r5, r5, #3
 80081f6:	3508      	adds	r5, #8
 80081f8:	2d0c      	cmp	r5, #12
 80081fa:	bf38      	it	cc
 80081fc:	250c      	movcc	r5, #12
 80081fe:	2d00      	cmp	r5, #0
 8008200:	4607      	mov	r7, r0
 8008202:	db01      	blt.n	8008208 <_malloc_r+0x1c>
 8008204:	42a9      	cmp	r1, r5
 8008206:	d905      	bls.n	8008214 <_malloc_r+0x28>
 8008208:	230c      	movs	r3, #12
 800820a:	603b      	str	r3, [r7, #0]
 800820c:	2600      	movs	r6, #0
 800820e:	4630      	mov	r0, r6
 8008210:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008214:	4e2e      	ldr	r6, [pc, #184]	; (80082d0 <_malloc_r+0xe4>)
 8008216:	f000 f8a7 	bl	8008368 <__malloc_lock>
 800821a:	6833      	ldr	r3, [r6, #0]
 800821c:	461c      	mov	r4, r3
 800821e:	bb34      	cbnz	r4, 800826e <_malloc_r+0x82>
 8008220:	4629      	mov	r1, r5
 8008222:	4638      	mov	r0, r7
 8008224:	f7ff ffc2 	bl	80081ac <sbrk_aligned>
 8008228:	1c43      	adds	r3, r0, #1
 800822a:	4604      	mov	r4, r0
 800822c:	d14d      	bne.n	80082ca <_malloc_r+0xde>
 800822e:	6834      	ldr	r4, [r6, #0]
 8008230:	4626      	mov	r6, r4
 8008232:	2e00      	cmp	r6, #0
 8008234:	d140      	bne.n	80082b8 <_malloc_r+0xcc>
 8008236:	6823      	ldr	r3, [r4, #0]
 8008238:	4631      	mov	r1, r6
 800823a:	4638      	mov	r0, r7
 800823c:	eb04 0803 	add.w	r8, r4, r3
 8008240:	f000 f848 	bl	80082d4 <_sbrk_r>
 8008244:	4580      	cmp	r8, r0
 8008246:	d13a      	bne.n	80082be <_malloc_r+0xd2>
 8008248:	6821      	ldr	r1, [r4, #0]
 800824a:	3503      	adds	r5, #3
 800824c:	1a6d      	subs	r5, r5, r1
 800824e:	f025 0503 	bic.w	r5, r5, #3
 8008252:	3508      	adds	r5, #8
 8008254:	2d0c      	cmp	r5, #12
 8008256:	bf38      	it	cc
 8008258:	250c      	movcc	r5, #12
 800825a:	4629      	mov	r1, r5
 800825c:	4638      	mov	r0, r7
 800825e:	f7ff ffa5 	bl	80081ac <sbrk_aligned>
 8008262:	3001      	adds	r0, #1
 8008264:	d02b      	beq.n	80082be <_malloc_r+0xd2>
 8008266:	6823      	ldr	r3, [r4, #0]
 8008268:	442b      	add	r3, r5
 800826a:	6023      	str	r3, [r4, #0]
 800826c:	e00e      	b.n	800828c <_malloc_r+0xa0>
 800826e:	6822      	ldr	r2, [r4, #0]
 8008270:	1b52      	subs	r2, r2, r5
 8008272:	d41e      	bmi.n	80082b2 <_malloc_r+0xc6>
 8008274:	2a0b      	cmp	r2, #11
 8008276:	d916      	bls.n	80082a6 <_malloc_r+0xba>
 8008278:	1961      	adds	r1, r4, r5
 800827a:	42a3      	cmp	r3, r4
 800827c:	6025      	str	r5, [r4, #0]
 800827e:	bf18      	it	ne
 8008280:	6059      	strne	r1, [r3, #4]
 8008282:	6863      	ldr	r3, [r4, #4]
 8008284:	bf08      	it	eq
 8008286:	6031      	streq	r1, [r6, #0]
 8008288:	5162      	str	r2, [r4, r5]
 800828a:	604b      	str	r3, [r1, #4]
 800828c:	4638      	mov	r0, r7
 800828e:	f104 060b 	add.w	r6, r4, #11
 8008292:	f000 f86f 	bl	8008374 <__malloc_unlock>
 8008296:	f026 0607 	bic.w	r6, r6, #7
 800829a:	1d23      	adds	r3, r4, #4
 800829c:	1af2      	subs	r2, r6, r3
 800829e:	d0b6      	beq.n	800820e <_malloc_r+0x22>
 80082a0:	1b9b      	subs	r3, r3, r6
 80082a2:	50a3      	str	r3, [r4, r2]
 80082a4:	e7b3      	b.n	800820e <_malloc_r+0x22>
 80082a6:	6862      	ldr	r2, [r4, #4]
 80082a8:	42a3      	cmp	r3, r4
 80082aa:	bf0c      	ite	eq
 80082ac:	6032      	streq	r2, [r6, #0]
 80082ae:	605a      	strne	r2, [r3, #4]
 80082b0:	e7ec      	b.n	800828c <_malloc_r+0xa0>
 80082b2:	4623      	mov	r3, r4
 80082b4:	6864      	ldr	r4, [r4, #4]
 80082b6:	e7b2      	b.n	800821e <_malloc_r+0x32>
 80082b8:	4634      	mov	r4, r6
 80082ba:	6876      	ldr	r6, [r6, #4]
 80082bc:	e7b9      	b.n	8008232 <_malloc_r+0x46>
 80082be:	230c      	movs	r3, #12
 80082c0:	603b      	str	r3, [r7, #0]
 80082c2:	4638      	mov	r0, r7
 80082c4:	f000 f856 	bl	8008374 <__malloc_unlock>
 80082c8:	e7a1      	b.n	800820e <_malloc_r+0x22>
 80082ca:	6025      	str	r5, [r4, #0]
 80082cc:	e7de      	b.n	800828c <_malloc_r+0xa0>
 80082ce:	bf00      	nop
 80082d0:	2000179c 	.word	0x2000179c

080082d4 <_sbrk_r>:
 80082d4:	b538      	push	{r3, r4, r5, lr}
 80082d6:	4d06      	ldr	r5, [pc, #24]	; (80082f0 <_sbrk_r+0x1c>)
 80082d8:	2300      	movs	r3, #0
 80082da:	4604      	mov	r4, r0
 80082dc:	4608      	mov	r0, r1
 80082de:	602b      	str	r3, [r5, #0]
 80082e0:	f7f8 faf4 	bl	80008cc <_sbrk>
 80082e4:	1c43      	adds	r3, r0, #1
 80082e6:	d102      	bne.n	80082ee <_sbrk_r+0x1a>
 80082e8:	682b      	ldr	r3, [r5, #0]
 80082ea:	b103      	cbz	r3, 80082ee <_sbrk_r+0x1a>
 80082ec:	6023      	str	r3, [r4, #0]
 80082ee:	bd38      	pop	{r3, r4, r5, pc}
 80082f0:	200017a4 	.word	0x200017a4

080082f4 <_vsniprintf_r>:
 80082f4:	b530      	push	{r4, r5, lr}
 80082f6:	4614      	mov	r4, r2
 80082f8:	2c00      	cmp	r4, #0
 80082fa:	b09b      	sub	sp, #108	; 0x6c
 80082fc:	4605      	mov	r5, r0
 80082fe:	461a      	mov	r2, r3
 8008300:	da05      	bge.n	800830e <_vsniprintf_r+0x1a>
 8008302:	238b      	movs	r3, #139	; 0x8b
 8008304:	6003      	str	r3, [r0, #0]
 8008306:	f04f 30ff 	mov.w	r0, #4294967295
 800830a:	b01b      	add	sp, #108	; 0x6c
 800830c:	bd30      	pop	{r4, r5, pc}
 800830e:	f44f 7302 	mov.w	r3, #520	; 0x208
 8008312:	f8ad 300c 	strh.w	r3, [sp, #12]
 8008316:	bf14      	ite	ne
 8008318:	f104 33ff 	addne.w	r3, r4, #4294967295
 800831c:	4623      	moveq	r3, r4
 800831e:	9302      	str	r3, [sp, #8]
 8008320:	9305      	str	r3, [sp, #20]
 8008322:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008326:	9100      	str	r1, [sp, #0]
 8008328:	9104      	str	r1, [sp, #16]
 800832a:	f8ad 300e 	strh.w	r3, [sp, #14]
 800832e:	4669      	mov	r1, sp
 8008330:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008332:	f000 f881 	bl	8008438 <_svfiprintf_r>
 8008336:	1c43      	adds	r3, r0, #1
 8008338:	bfbc      	itt	lt
 800833a:	238b      	movlt	r3, #139	; 0x8b
 800833c:	602b      	strlt	r3, [r5, #0]
 800833e:	2c00      	cmp	r4, #0
 8008340:	d0e3      	beq.n	800830a <_vsniprintf_r+0x16>
 8008342:	9b00      	ldr	r3, [sp, #0]
 8008344:	2200      	movs	r2, #0
 8008346:	701a      	strb	r2, [r3, #0]
 8008348:	e7df      	b.n	800830a <_vsniprintf_r+0x16>
	...

0800834c <vsniprintf>:
 800834c:	b507      	push	{r0, r1, r2, lr}
 800834e:	9300      	str	r3, [sp, #0]
 8008350:	4613      	mov	r3, r2
 8008352:	460a      	mov	r2, r1
 8008354:	4601      	mov	r1, r0
 8008356:	4803      	ldr	r0, [pc, #12]	; (8008364 <vsniprintf+0x18>)
 8008358:	6800      	ldr	r0, [r0, #0]
 800835a:	f7ff ffcb 	bl	80082f4 <_vsniprintf_r>
 800835e:	b003      	add	sp, #12
 8008360:	f85d fb04 	ldr.w	pc, [sp], #4
 8008364:	20000120 	.word	0x20000120

08008368 <__malloc_lock>:
 8008368:	4801      	ldr	r0, [pc, #4]	; (8008370 <__malloc_lock+0x8>)
 800836a:	f000 baf9 	b.w	8008960 <__retarget_lock_acquire_recursive>
 800836e:	bf00      	nop
 8008370:	200017a8 	.word	0x200017a8

08008374 <__malloc_unlock>:
 8008374:	4801      	ldr	r0, [pc, #4]	; (800837c <__malloc_unlock+0x8>)
 8008376:	f000 baf4 	b.w	8008962 <__retarget_lock_release_recursive>
 800837a:	bf00      	nop
 800837c:	200017a8 	.word	0x200017a8

08008380 <__ssputs_r>:
 8008380:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008384:	688e      	ldr	r6, [r1, #8]
 8008386:	429e      	cmp	r6, r3
 8008388:	4682      	mov	sl, r0
 800838a:	460c      	mov	r4, r1
 800838c:	4690      	mov	r8, r2
 800838e:	461f      	mov	r7, r3
 8008390:	d838      	bhi.n	8008404 <__ssputs_r+0x84>
 8008392:	898a      	ldrh	r2, [r1, #12]
 8008394:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008398:	d032      	beq.n	8008400 <__ssputs_r+0x80>
 800839a:	6825      	ldr	r5, [r4, #0]
 800839c:	6909      	ldr	r1, [r1, #16]
 800839e:	eba5 0901 	sub.w	r9, r5, r1
 80083a2:	6965      	ldr	r5, [r4, #20]
 80083a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80083a8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80083ac:	3301      	adds	r3, #1
 80083ae:	444b      	add	r3, r9
 80083b0:	106d      	asrs	r5, r5, #1
 80083b2:	429d      	cmp	r5, r3
 80083b4:	bf38      	it	cc
 80083b6:	461d      	movcc	r5, r3
 80083b8:	0553      	lsls	r3, r2, #21
 80083ba:	d531      	bpl.n	8008420 <__ssputs_r+0xa0>
 80083bc:	4629      	mov	r1, r5
 80083be:	f7ff ff15 	bl	80081ec <_malloc_r>
 80083c2:	4606      	mov	r6, r0
 80083c4:	b950      	cbnz	r0, 80083dc <__ssputs_r+0x5c>
 80083c6:	230c      	movs	r3, #12
 80083c8:	f8ca 3000 	str.w	r3, [sl]
 80083cc:	89a3      	ldrh	r3, [r4, #12]
 80083ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80083d2:	81a3      	strh	r3, [r4, #12]
 80083d4:	f04f 30ff 	mov.w	r0, #4294967295
 80083d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083dc:	6921      	ldr	r1, [r4, #16]
 80083de:	464a      	mov	r2, r9
 80083e0:	f000 fac0 	bl	8008964 <memcpy>
 80083e4:	89a3      	ldrh	r3, [r4, #12]
 80083e6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80083ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083ee:	81a3      	strh	r3, [r4, #12]
 80083f0:	6126      	str	r6, [r4, #16]
 80083f2:	6165      	str	r5, [r4, #20]
 80083f4:	444e      	add	r6, r9
 80083f6:	eba5 0509 	sub.w	r5, r5, r9
 80083fa:	6026      	str	r6, [r4, #0]
 80083fc:	60a5      	str	r5, [r4, #8]
 80083fe:	463e      	mov	r6, r7
 8008400:	42be      	cmp	r6, r7
 8008402:	d900      	bls.n	8008406 <__ssputs_r+0x86>
 8008404:	463e      	mov	r6, r7
 8008406:	6820      	ldr	r0, [r4, #0]
 8008408:	4632      	mov	r2, r6
 800840a:	4641      	mov	r1, r8
 800840c:	f000 fab8 	bl	8008980 <memmove>
 8008410:	68a3      	ldr	r3, [r4, #8]
 8008412:	1b9b      	subs	r3, r3, r6
 8008414:	60a3      	str	r3, [r4, #8]
 8008416:	6823      	ldr	r3, [r4, #0]
 8008418:	4433      	add	r3, r6
 800841a:	6023      	str	r3, [r4, #0]
 800841c:	2000      	movs	r0, #0
 800841e:	e7db      	b.n	80083d8 <__ssputs_r+0x58>
 8008420:	462a      	mov	r2, r5
 8008422:	f000 fac7 	bl	80089b4 <_realloc_r>
 8008426:	4606      	mov	r6, r0
 8008428:	2800      	cmp	r0, #0
 800842a:	d1e1      	bne.n	80083f0 <__ssputs_r+0x70>
 800842c:	6921      	ldr	r1, [r4, #16]
 800842e:	4650      	mov	r0, sl
 8008430:	f7ff fe70 	bl	8008114 <_free_r>
 8008434:	e7c7      	b.n	80083c6 <__ssputs_r+0x46>
	...

08008438 <_svfiprintf_r>:
 8008438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800843c:	4698      	mov	r8, r3
 800843e:	898b      	ldrh	r3, [r1, #12]
 8008440:	061b      	lsls	r3, r3, #24
 8008442:	b09d      	sub	sp, #116	; 0x74
 8008444:	4607      	mov	r7, r0
 8008446:	460d      	mov	r5, r1
 8008448:	4614      	mov	r4, r2
 800844a:	d50e      	bpl.n	800846a <_svfiprintf_r+0x32>
 800844c:	690b      	ldr	r3, [r1, #16]
 800844e:	b963      	cbnz	r3, 800846a <_svfiprintf_r+0x32>
 8008450:	2140      	movs	r1, #64	; 0x40
 8008452:	f7ff fecb 	bl	80081ec <_malloc_r>
 8008456:	6028      	str	r0, [r5, #0]
 8008458:	6128      	str	r0, [r5, #16]
 800845a:	b920      	cbnz	r0, 8008466 <_svfiprintf_r+0x2e>
 800845c:	230c      	movs	r3, #12
 800845e:	603b      	str	r3, [r7, #0]
 8008460:	f04f 30ff 	mov.w	r0, #4294967295
 8008464:	e0d1      	b.n	800860a <_svfiprintf_r+0x1d2>
 8008466:	2340      	movs	r3, #64	; 0x40
 8008468:	616b      	str	r3, [r5, #20]
 800846a:	2300      	movs	r3, #0
 800846c:	9309      	str	r3, [sp, #36]	; 0x24
 800846e:	2320      	movs	r3, #32
 8008470:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008474:	f8cd 800c 	str.w	r8, [sp, #12]
 8008478:	2330      	movs	r3, #48	; 0x30
 800847a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008624 <_svfiprintf_r+0x1ec>
 800847e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008482:	f04f 0901 	mov.w	r9, #1
 8008486:	4623      	mov	r3, r4
 8008488:	469a      	mov	sl, r3
 800848a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800848e:	b10a      	cbz	r2, 8008494 <_svfiprintf_r+0x5c>
 8008490:	2a25      	cmp	r2, #37	; 0x25
 8008492:	d1f9      	bne.n	8008488 <_svfiprintf_r+0x50>
 8008494:	ebba 0b04 	subs.w	fp, sl, r4
 8008498:	d00b      	beq.n	80084b2 <_svfiprintf_r+0x7a>
 800849a:	465b      	mov	r3, fp
 800849c:	4622      	mov	r2, r4
 800849e:	4629      	mov	r1, r5
 80084a0:	4638      	mov	r0, r7
 80084a2:	f7ff ff6d 	bl	8008380 <__ssputs_r>
 80084a6:	3001      	adds	r0, #1
 80084a8:	f000 80aa 	beq.w	8008600 <_svfiprintf_r+0x1c8>
 80084ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80084ae:	445a      	add	r2, fp
 80084b0:	9209      	str	r2, [sp, #36]	; 0x24
 80084b2:	f89a 3000 	ldrb.w	r3, [sl]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	f000 80a2 	beq.w	8008600 <_svfiprintf_r+0x1c8>
 80084bc:	2300      	movs	r3, #0
 80084be:	f04f 32ff 	mov.w	r2, #4294967295
 80084c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80084c6:	f10a 0a01 	add.w	sl, sl, #1
 80084ca:	9304      	str	r3, [sp, #16]
 80084cc:	9307      	str	r3, [sp, #28]
 80084ce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80084d2:	931a      	str	r3, [sp, #104]	; 0x68
 80084d4:	4654      	mov	r4, sl
 80084d6:	2205      	movs	r2, #5
 80084d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084dc:	4851      	ldr	r0, [pc, #324]	; (8008624 <_svfiprintf_r+0x1ec>)
 80084de:	f7f7 fe97 	bl	8000210 <memchr>
 80084e2:	9a04      	ldr	r2, [sp, #16]
 80084e4:	b9d8      	cbnz	r0, 800851e <_svfiprintf_r+0xe6>
 80084e6:	06d0      	lsls	r0, r2, #27
 80084e8:	bf44      	itt	mi
 80084ea:	2320      	movmi	r3, #32
 80084ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80084f0:	0711      	lsls	r1, r2, #28
 80084f2:	bf44      	itt	mi
 80084f4:	232b      	movmi	r3, #43	; 0x2b
 80084f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80084fa:	f89a 3000 	ldrb.w	r3, [sl]
 80084fe:	2b2a      	cmp	r3, #42	; 0x2a
 8008500:	d015      	beq.n	800852e <_svfiprintf_r+0xf6>
 8008502:	9a07      	ldr	r2, [sp, #28]
 8008504:	4654      	mov	r4, sl
 8008506:	2000      	movs	r0, #0
 8008508:	f04f 0c0a 	mov.w	ip, #10
 800850c:	4621      	mov	r1, r4
 800850e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008512:	3b30      	subs	r3, #48	; 0x30
 8008514:	2b09      	cmp	r3, #9
 8008516:	d94e      	bls.n	80085b6 <_svfiprintf_r+0x17e>
 8008518:	b1b0      	cbz	r0, 8008548 <_svfiprintf_r+0x110>
 800851a:	9207      	str	r2, [sp, #28]
 800851c:	e014      	b.n	8008548 <_svfiprintf_r+0x110>
 800851e:	eba0 0308 	sub.w	r3, r0, r8
 8008522:	fa09 f303 	lsl.w	r3, r9, r3
 8008526:	4313      	orrs	r3, r2
 8008528:	9304      	str	r3, [sp, #16]
 800852a:	46a2      	mov	sl, r4
 800852c:	e7d2      	b.n	80084d4 <_svfiprintf_r+0x9c>
 800852e:	9b03      	ldr	r3, [sp, #12]
 8008530:	1d19      	adds	r1, r3, #4
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	9103      	str	r1, [sp, #12]
 8008536:	2b00      	cmp	r3, #0
 8008538:	bfbb      	ittet	lt
 800853a:	425b      	neglt	r3, r3
 800853c:	f042 0202 	orrlt.w	r2, r2, #2
 8008540:	9307      	strge	r3, [sp, #28]
 8008542:	9307      	strlt	r3, [sp, #28]
 8008544:	bfb8      	it	lt
 8008546:	9204      	strlt	r2, [sp, #16]
 8008548:	7823      	ldrb	r3, [r4, #0]
 800854a:	2b2e      	cmp	r3, #46	; 0x2e
 800854c:	d10c      	bne.n	8008568 <_svfiprintf_r+0x130>
 800854e:	7863      	ldrb	r3, [r4, #1]
 8008550:	2b2a      	cmp	r3, #42	; 0x2a
 8008552:	d135      	bne.n	80085c0 <_svfiprintf_r+0x188>
 8008554:	9b03      	ldr	r3, [sp, #12]
 8008556:	1d1a      	adds	r2, r3, #4
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	9203      	str	r2, [sp, #12]
 800855c:	2b00      	cmp	r3, #0
 800855e:	bfb8      	it	lt
 8008560:	f04f 33ff 	movlt.w	r3, #4294967295
 8008564:	3402      	adds	r4, #2
 8008566:	9305      	str	r3, [sp, #20]
 8008568:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008634 <_svfiprintf_r+0x1fc>
 800856c:	7821      	ldrb	r1, [r4, #0]
 800856e:	2203      	movs	r2, #3
 8008570:	4650      	mov	r0, sl
 8008572:	f7f7 fe4d 	bl	8000210 <memchr>
 8008576:	b140      	cbz	r0, 800858a <_svfiprintf_r+0x152>
 8008578:	2340      	movs	r3, #64	; 0x40
 800857a:	eba0 000a 	sub.w	r0, r0, sl
 800857e:	fa03 f000 	lsl.w	r0, r3, r0
 8008582:	9b04      	ldr	r3, [sp, #16]
 8008584:	4303      	orrs	r3, r0
 8008586:	3401      	adds	r4, #1
 8008588:	9304      	str	r3, [sp, #16]
 800858a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800858e:	4826      	ldr	r0, [pc, #152]	; (8008628 <_svfiprintf_r+0x1f0>)
 8008590:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008594:	2206      	movs	r2, #6
 8008596:	f7f7 fe3b 	bl	8000210 <memchr>
 800859a:	2800      	cmp	r0, #0
 800859c:	d038      	beq.n	8008610 <_svfiprintf_r+0x1d8>
 800859e:	4b23      	ldr	r3, [pc, #140]	; (800862c <_svfiprintf_r+0x1f4>)
 80085a0:	bb1b      	cbnz	r3, 80085ea <_svfiprintf_r+0x1b2>
 80085a2:	9b03      	ldr	r3, [sp, #12]
 80085a4:	3307      	adds	r3, #7
 80085a6:	f023 0307 	bic.w	r3, r3, #7
 80085aa:	3308      	adds	r3, #8
 80085ac:	9303      	str	r3, [sp, #12]
 80085ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085b0:	4433      	add	r3, r6
 80085b2:	9309      	str	r3, [sp, #36]	; 0x24
 80085b4:	e767      	b.n	8008486 <_svfiprintf_r+0x4e>
 80085b6:	fb0c 3202 	mla	r2, ip, r2, r3
 80085ba:	460c      	mov	r4, r1
 80085bc:	2001      	movs	r0, #1
 80085be:	e7a5      	b.n	800850c <_svfiprintf_r+0xd4>
 80085c0:	2300      	movs	r3, #0
 80085c2:	3401      	adds	r4, #1
 80085c4:	9305      	str	r3, [sp, #20]
 80085c6:	4619      	mov	r1, r3
 80085c8:	f04f 0c0a 	mov.w	ip, #10
 80085cc:	4620      	mov	r0, r4
 80085ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 80085d2:	3a30      	subs	r2, #48	; 0x30
 80085d4:	2a09      	cmp	r2, #9
 80085d6:	d903      	bls.n	80085e0 <_svfiprintf_r+0x1a8>
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d0c5      	beq.n	8008568 <_svfiprintf_r+0x130>
 80085dc:	9105      	str	r1, [sp, #20]
 80085de:	e7c3      	b.n	8008568 <_svfiprintf_r+0x130>
 80085e0:	fb0c 2101 	mla	r1, ip, r1, r2
 80085e4:	4604      	mov	r4, r0
 80085e6:	2301      	movs	r3, #1
 80085e8:	e7f0      	b.n	80085cc <_svfiprintf_r+0x194>
 80085ea:	ab03      	add	r3, sp, #12
 80085ec:	9300      	str	r3, [sp, #0]
 80085ee:	462a      	mov	r2, r5
 80085f0:	4b0f      	ldr	r3, [pc, #60]	; (8008630 <_svfiprintf_r+0x1f8>)
 80085f2:	a904      	add	r1, sp, #16
 80085f4:	4638      	mov	r0, r7
 80085f6:	f3af 8000 	nop.w
 80085fa:	1c42      	adds	r2, r0, #1
 80085fc:	4606      	mov	r6, r0
 80085fe:	d1d6      	bne.n	80085ae <_svfiprintf_r+0x176>
 8008600:	89ab      	ldrh	r3, [r5, #12]
 8008602:	065b      	lsls	r3, r3, #25
 8008604:	f53f af2c 	bmi.w	8008460 <_svfiprintf_r+0x28>
 8008608:	9809      	ldr	r0, [sp, #36]	; 0x24
 800860a:	b01d      	add	sp, #116	; 0x74
 800860c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008610:	ab03      	add	r3, sp, #12
 8008612:	9300      	str	r3, [sp, #0]
 8008614:	462a      	mov	r2, r5
 8008616:	4b06      	ldr	r3, [pc, #24]	; (8008630 <_svfiprintf_r+0x1f8>)
 8008618:	a904      	add	r1, sp, #16
 800861a:	4638      	mov	r0, r7
 800861c:	f000 f87a 	bl	8008714 <_printf_i>
 8008620:	e7eb      	b.n	80085fa <_svfiprintf_r+0x1c2>
 8008622:	bf00      	nop
 8008624:	08008abc 	.word	0x08008abc
 8008628:	08008ac6 	.word	0x08008ac6
 800862c:	00000000 	.word	0x00000000
 8008630:	08008381 	.word	0x08008381
 8008634:	08008ac2 	.word	0x08008ac2

08008638 <_printf_common>:
 8008638:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800863c:	4616      	mov	r6, r2
 800863e:	4699      	mov	r9, r3
 8008640:	688a      	ldr	r2, [r1, #8]
 8008642:	690b      	ldr	r3, [r1, #16]
 8008644:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008648:	4293      	cmp	r3, r2
 800864a:	bfb8      	it	lt
 800864c:	4613      	movlt	r3, r2
 800864e:	6033      	str	r3, [r6, #0]
 8008650:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008654:	4607      	mov	r7, r0
 8008656:	460c      	mov	r4, r1
 8008658:	b10a      	cbz	r2, 800865e <_printf_common+0x26>
 800865a:	3301      	adds	r3, #1
 800865c:	6033      	str	r3, [r6, #0]
 800865e:	6823      	ldr	r3, [r4, #0]
 8008660:	0699      	lsls	r1, r3, #26
 8008662:	bf42      	ittt	mi
 8008664:	6833      	ldrmi	r3, [r6, #0]
 8008666:	3302      	addmi	r3, #2
 8008668:	6033      	strmi	r3, [r6, #0]
 800866a:	6825      	ldr	r5, [r4, #0]
 800866c:	f015 0506 	ands.w	r5, r5, #6
 8008670:	d106      	bne.n	8008680 <_printf_common+0x48>
 8008672:	f104 0a19 	add.w	sl, r4, #25
 8008676:	68e3      	ldr	r3, [r4, #12]
 8008678:	6832      	ldr	r2, [r6, #0]
 800867a:	1a9b      	subs	r3, r3, r2
 800867c:	42ab      	cmp	r3, r5
 800867e:	dc26      	bgt.n	80086ce <_printf_common+0x96>
 8008680:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008684:	1e13      	subs	r3, r2, #0
 8008686:	6822      	ldr	r2, [r4, #0]
 8008688:	bf18      	it	ne
 800868a:	2301      	movne	r3, #1
 800868c:	0692      	lsls	r2, r2, #26
 800868e:	d42b      	bmi.n	80086e8 <_printf_common+0xb0>
 8008690:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008694:	4649      	mov	r1, r9
 8008696:	4638      	mov	r0, r7
 8008698:	47c0      	blx	r8
 800869a:	3001      	adds	r0, #1
 800869c:	d01e      	beq.n	80086dc <_printf_common+0xa4>
 800869e:	6823      	ldr	r3, [r4, #0]
 80086a0:	68e5      	ldr	r5, [r4, #12]
 80086a2:	6832      	ldr	r2, [r6, #0]
 80086a4:	f003 0306 	and.w	r3, r3, #6
 80086a8:	2b04      	cmp	r3, #4
 80086aa:	bf08      	it	eq
 80086ac:	1aad      	subeq	r5, r5, r2
 80086ae:	68a3      	ldr	r3, [r4, #8]
 80086b0:	6922      	ldr	r2, [r4, #16]
 80086b2:	bf0c      	ite	eq
 80086b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80086b8:	2500      	movne	r5, #0
 80086ba:	4293      	cmp	r3, r2
 80086bc:	bfc4      	itt	gt
 80086be:	1a9b      	subgt	r3, r3, r2
 80086c0:	18ed      	addgt	r5, r5, r3
 80086c2:	2600      	movs	r6, #0
 80086c4:	341a      	adds	r4, #26
 80086c6:	42b5      	cmp	r5, r6
 80086c8:	d11a      	bne.n	8008700 <_printf_common+0xc8>
 80086ca:	2000      	movs	r0, #0
 80086cc:	e008      	b.n	80086e0 <_printf_common+0xa8>
 80086ce:	2301      	movs	r3, #1
 80086d0:	4652      	mov	r2, sl
 80086d2:	4649      	mov	r1, r9
 80086d4:	4638      	mov	r0, r7
 80086d6:	47c0      	blx	r8
 80086d8:	3001      	adds	r0, #1
 80086da:	d103      	bne.n	80086e4 <_printf_common+0xac>
 80086dc:	f04f 30ff 	mov.w	r0, #4294967295
 80086e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086e4:	3501      	adds	r5, #1
 80086e6:	e7c6      	b.n	8008676 <_printf_common+0x3e>
 80086e8:	18e1      	adds	r1, r4, r3
 80086ea:	1c5a      	adds	r2, r3, #1
 80086ec:	2030      	movs	r0, #48	; 0x30
 80086ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80086f2:	4422      	add	r2, r4
 80086f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80086f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80086fc:	3302      	adds	r3, #2
 80086fe:	e7c7      	b.n	8008690 <_printf_common+0x58>
 8008700:	2301      	movs	r3, #1
 8008702:	4622      	mov	r2, r4
 8008704:	4649      	mov	r1, r9
 8008706:	4638      	mov	r0, r7
 8008708:	47c0      	blx	r8
 800870a:	3001      	adds	r0, #1
 800870c:	d0e6      	beq.n	80086dc <_printf_common+0xa4>
 800870e:	3601      	adds	r6, #1
 8008710:	e7d9      	b.n	80086c6 <_printf_common+0x8e>
	...

08008714 <_printf_i>:
 8008714:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008718:	7e0f      	ldrb	r7, [r1, #24]
 800871a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800871c:	2f78      	cmp	r7, #120	; 0x78
 800871e:	4691      	mov	r9, r2
 8008720:	4680      	mov	r8, r0
 8008722:	460c      	mov	r4, r1
 8008724:	469a      	mov	sl, r3
 8008726:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800872a:	d807      	bhi.n	800873c <_printf_i+0x28>
 800872c:	2f62      	cmp	r7, #98	; 0x62
 800872e:	d80a      	bhi.n	8008746 <_printf_i+0x32>
 8008730:	2f00      	cmp	r7, #0
 8008732:	f000 80d8 	beq.w	80088e6 <_printf_i+0x1d2>
 8008736:	2f58      	cmp	r7, #88	; 0x58
 8008738:	f000 80a3 	beq.w	8008882 <_printf_i+0x16e>
 800873c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008740:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008744:	e03a      	b.n	80087bc <_printf_i+0xa8>
 8008746:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800874a:	2b15      	cmp	r3, #21
 800874c:	d8f6      	bhi.n	800873c <_printf_i+0x28>
 800874e:	a101      	add	r1, pc, #4	; (adr r1, 8008754 <_printf_i+0x40>)
 8008750:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008754:	080087ad 	.word	0x080087ad
 8008758:	080087c1 	.word	0x080087c1
 800875c:	0800873d 	.word	0x0800873d
 8008760:	0800873d 	.word	0x0800873d
 8008764:	0800873d 	.word	0x0800873d
 8008768:	0800873d 	.word	0x0800873d
 800876c:	080087c1 	.word	0x080087c1
 8008770:	0800873d 	.word	0x0800873d
 8008774:	0800873d 	.word	0x0800873d
 8008778:	0800873d 	.word	0x0800873d
 800877c:	0800873d 	.word	0x0800873d
 8008780:	080088cd 	.word	0x080088cd
 8008784:	080087f1 	.word	0x080087f1
 8008788:	080088af 	.word	0x080088af
 800878c:	0800873d 	.word	0x0800873d
 8008790:	0800873d 	.word	0x0800873d
 8008794:	080088ef 	.word	0x080088ef
 8008798:	0800873d 	.word	0x0800873d
 800879c:	080087f1 	.word	0x080087f1
 80087a0:	0800873d 	.word	0x0800873d
 80087a4:	0800873d 	.word	0x0800873d
 80087a8:	080088b7 	.word	0x080088b7
 80087ac:	682b      	ldr	r3, [r5, #0]
 80087ae:	1d1a      	adds	r2, r3, #4
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	602a      	str	r2, [r5, #0]
 80087b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80087b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80087bc:	2301      	movs	r3, #1
 80087be:	e0a3      	b.n	8008908 <_printf_i+0x1f4>
 80087c0:	6820      	ldr	r0, [r4, #0]
 80087c2:	6829      	ldr	r1, [r5, #0]
 80087c4:	0606      	lsls	r6, r0, #24
 80087c6:	f101 0304 	add.w	r3, r1, #4
 80087ca:	d50a      	bpl.n	80087e2 <_printf_i+0xce>
 80087cc:	680e      	ldr	r6, [r1, #0]
 80087ce:	602b      	str	r3, [r5, #0]
 80087d0:	2e00      	cmp	r6, #0
 80087d2:	da03      	bge.n	80087dc <_printf_i+0xc8>
 80087d4:	232d      	movs	r3, #45	; 0x2d
 80087d6:	4276      	negs	r6, r6
 80087d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80087dc:	485e      	ldr	r0, [pc, #376]	; (8008958 <_printf_i+0x244>)
 80087de:	230a      	movs	r3, #10
 80087e0:	e019      	b.n	8008816 <_printf_i+0x102>
 80087e2:	680e      	ldr	r6, [r1, #0]
 80087e4:	602b      	str	r3, [r5, #0]
 80087e6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80087ea:	bf18      	it	ne
 80087ec:	b236      	sxthne	r6, r6
 80087ee:	e7ef      	b.n	80087d0 <_printf_i+0xbc>
 80087f0:	682b      	ldr	r3, [r5, #0]
 80087f2:	6820      	ldr	r0, [r4, #0]
 80087f4:	1d19      	adds	r1, r3, #4
 80087f6:	6029      	str	r1, [r5, #0]
 80087f8:	0601      	lsls	r1, r0, #24
 80087fa:	d501      	bpl.n	8008800 <_printf_i+0xec>
 80087fc:	681e      	ldr	r6, [r3, #0]
 80087fe:	e002      	b.n	8008806 <_printf_i+0xf2>
 8008800:	0646      	lsls	r6, r0, #25
 8008802:	d5fb      	bpl.n	80087fc <_printf_i+0xe8>
 8008804:	881e      	ldrh	r6, [r3, #0]
 8008806:	4854      	ldr	r0, [pc, #336]	; (8008958 <_printf_i+0x244>)
 8008808:	2f6f      	cmp	r7, #111	; 0x6f
 800880a:	bf0c      	ite	eq
 800880c:	2308      	moveq	r3, #8
 800880e:	230a      	movne	r3, #10
 8008810:	2100      	movs	r1, #0
 8008812:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008816:	6865      	ldr	r5, [r4, #4]
 8008818:	60a5      	str	r5, [r4, #8]
 800881a:	2d00      	cmp	r5, #0
 800881c:	bfa2      	ittt	ge
 800881e:	6821      	ldrge	r1, [r4, #0]
 8008820:	f021 0104 	bicge.w	r1, r1, #4
 8008824:	6021      	strge	r1, [r4, #0]
 8008826:	b90e      	cbnz	r6, 800882c <_printf_i+0x118>
 8008828:	2d00      	cmp	r5, #0
 800882a:	d04d      	beq.n	80088c8 <_printf_i+0x1b4>
 800882c:	4615      	mov	r5, r2
 800882e:	fbb6 f1f3 	udiv	r1, r6, r3
 8008832:	fb03 6711 	mls	r7, r3, r1, r6
 8008836:	5dc7      	ldrb	r7, [r0, r7]
 8008838:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800883c:	4637      	mov	r7, r6
 800883e:	42bb      	cmp	r3, r7
 8008840:	460e      	mov	r6, r1
 8008842:	d9f4      	bls.n	800882e <_printf_i+0x11a>
 8008844:	2b08      	cmp	r3, #8
 8008846:	d10b      	bne.n	8008860 <_printf_i+0x14c>
 8008848:	6823      	ldr	r3, [r4, #0]
 800884a:	07de      	lsls	r6, r3, #31
 800884c:	d508      	bpl.n	8008860 <_printf_i+0x14c>
 800884e:	6923      	ldr	r3, [r4, #16]
 8008850:	6861      	ldr	r1, [r4, #4]
 8008852:	4299      	cmp	r1, r3
 8008854:	bfde      	ittt	le
 8008856:	2330      	movle	r3, #48	; 0x30
 8008858:	f805 3c01 	strble.w	r3, [r5, #-1]
 800885c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008860:	1b52      	subs	r2, r2, r5
 8008862:	6122      	str	r2, [r4, #16]
 8008864:	f8cd a000 	str.w	sl, [sp]
 8008868:	464b      	mov	r3, r9
 800886a:	aa03      	add	r2, sp, #12
 800886c:	4621      	mov	r1, r4
 800886e:	4640      	mov	r0, r8
 8008870:	f7ff fee2 	bl	8008638 <_printf_common>
 8008874:	3001      	adds	r0, #1
 8008876:	d14c      	bne.n	8008912 <_printf_i+0x1fe>
 8008878:	f04f 30ff 	mov.w	r0, #4294967295
 800887c:	b004      	add	sp, #16
 800887e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008882:	4835      	ldr	r0, [pc, #212]	; (8008958 <_printf_i+0x244>)
 8008884:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008888:	6829      	ldr	r1, [r5, #0]
 800888a:	6823      	ldr	r3, [r4, #0]
 800888c:	f851 6b04 	ldr.w	r6, [r1], #4
 8008890:	6029      	str	r1, [r5, #0]
 8008892:	061d      	lsls	r5, r3, #24
 8008894:	d514      	bpl.n	80088c0 <_printf_i+0x1ac>
 8008896:	07df      	lsls	r7, r3, #31
 8008898:	bf44      	itt	mi
 800889a:	f043 0320 	orrmi.w	r3, r3, #32
 800889e:	6023      	strmi	r3, [r4, #0]
 80088a0:	b91e      	cbnz	r6, 80088aa <_printf_i+0x196>
 80088a2:	6823      	ldr	r3, [r4, #0]
 80088a4:	f023 0320 	bic.w	r3, r3, #32
 80088a8:	6023      	str	r3, [r4, #0]
 80088aa:	2310      	movs	r3, #16
 80088ac:	e7b0      	b.n	8008810 <_printf_i+0xfc>
 80088ae:	6823      	ldr	r3, [r4, #0]
 80088b0:	f043 0320 	orr.w	r3, r3, #32
 80088b4:	6023      	str	r3, [r4, #0]
 80088b6:	2378      	movs	r3, #120	; 0x78
 80088b8:	4828      	ldr	r0, [pc, #160]	; (800895c <_printf_i+0x248>)
 80088ba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80088be:	e7e3      	b.n	8008888 <_printf_i+0x174>
 80088c0:	0659      	lsls	r1, r3, #25
 80088c2:	bf48      	it	mi
 80088c4:	b2b6      	uxthmi	r6, r6
 80088c6:	e7e6      	b.n	8008896 <_printf_i+0x182>
 80088c8:	4615      	mov	r5, r2
 80088ca:	e7bb      	b.n	8008844 <_printf_i+0x130>
 80088cc:	682b      	ldr	r3, [r5, #0]
 80088ce:	6826      	ldr	r6, [r4, #0]
 80088d0:	6961      	ldr	r1, [r4, #20]
 80088d2:	1d18      	adds	r0, r3, #4
 80088d4:	6028      	str	r0, [r5, #0]
 80088d6:	0635      	lsls	r5, r6, #24
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	d501      	bpl.n	80088e0 <_printf_i+0x1cc>
 80088dc:	6019      	str	r1, [r3, #0]
 80088de:	e002      	b.n	80088e6 <_printf_i+0x1d2>
 80088e0:	0670      	lsls	r0, r6, #25
 80088e2:	d5fb      	bpl.n	80088dc <_printf_i+0x1c8>
 80088e4:	8019      	strh	r1, [r3, #0]
 80088e6:	2300      	movs	r3, #0
 80088e8:	6123      	str	r3, [r4, #16]
 80088ea:	4615      	mov	r5, r2
 80088ec:	e7ba      	b.n	8008864 <_printf_i+0x150>
 80088ee:	682b      	ldr	r3, [r5, #0]
 80088f0:	1d1a      	adds	r2, r3, #4
 80088f2:	602a      	str	r2, [r5, #0]
 80088f4:	681d      	ldr	r5, [r3, #0]
 80088f6:	6862      	ldr	r2, [r4, #4]
 80088f8:	2100      	movs	r1, #0
 80088fa:	4628      	mov	r0, r5
 80088fc:	f7f7 fc88 	bl	8000210 <memchr>
 8008900:	b108      	cbz	r0, 8008906 <_printf_i+0x1f2>
 8008902:	1b40      	subs	r0, r0, r5
 8008904:	6060      	str	r0, [r4, #4]
 8008906:	6863      	ldr	r3, [r4, #4]
 8008908:	6123      	str	r3, [r4, #16]
 800890a:	2300      	movs	r3, #0
 800890c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008910:	e7a8      	b.n	8008864 <_printf_i+0x150>
 8008912:	6923      	ldr	r3, [r4, #16]
 8008914:	462a      	mov	r2, r5
 8008916:	4649      	mov	r1, r9
 8008918:	4640      	mov	r0, r8
 800891a:	47d0      	blx	sl
 800891c:	3001      	adds	r0, #1
 800891e:	d0ab      	beq.n	8008878 <_printf_i+0x164>
 8008920:	6823      	ldr	r3, [r4, #0]
 8008922:	079b      	lsls	r3, r3, #30
 8008924:	d413      	bmi.n	800894e <_printf_i+0x23a>
 8008926:	68e0      	ldr	r0, [r4, #12]
 8008928:	9b03      	ldr	r3, [sp, #12]
 800892a:	4298      	cmp	r0, r3
 800892c:	bfb8      	it	lt
 800892e:	4618      	movlt	r0, r3
 8008930:	e7a4      	b.n	800887c <_printf_i+0x168>
 8008932:	2301      	movs	r3, #1
 8008934:	4632      	mov	r2, r6
 8008936:	4649      	mov	r1, r9
 8008938:	4640      	mov	r0, r8
 800893a:	47d0      	blx	sl
 800893c:	3001      	adds	r0, #1
 800893e:	d09b      	beq.n	8008878 <_printf_i+0x164>
 8008940:	3501      	adds	r5, #1
 8008942:	68e3      	ldr	r3, [r4, #12]
 8008944:	9903      	ldr	r1, [sp, #12]
 8008946:	1a5b      	subs	r3, r3, r1
 8008948:	42ab      	cmp	r3, r5
 800894a:	dcf2      	bgt.n	8008932 <_printf_i+0x21e>
 800894c:	e7eb      	b.n	8008926 <_printf_i+0x212>
 800894e:	2500      	movs	r5, #0
 8008950:	f104 0619 	add.w	r6, r4, #25
 8008954:	e7f5      	b.n	8008942 <_printf_i+0x22e>
 8008956:	bf00      	nop
 8008958:	08008acd 	.word	0x08008acd
 800895c:	08008ade 	.word	0x08008ade

08008960 <__retarget_lock_acquire_recursive>:
 8008960:	4770      	bx	lr

08008962 <__retarget_lock_release_recursive>:
 8008962:	4770      	bx	lr

08008964 <memcpy>:
 8008964:	440a      	add	r2, r1
 8008966:	4291      	cmp	r1, r2
 8008968:	f100 33ff 	add.w	r3, r0, #4294967295
 800896c:	d100      	bne.n	8008970 <memcpy+0xc>
 800896e:	4770      	bx	lr
 8008970:	b510      	push	{r4, lr}
 8008972:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008976:	f803 4f01 	strb.w	r4, [r3, #1]!
 800897a:	4291      	cmp	r1, r2
 800897c:	d1f9      	bne.n	8008972 <memcpy+0xe>
 800897e:	bd10      	pop	{r4, pc}

08008980 <memmove>:
 8008980:	4288      	cmp	r0, r1
 8008982:	b510      	push	{r4, lr}
 8008984:	eb01 0402 	add.w	r4, r1, r2
 8008988:	d902      	bls.n	8008990 <memmove+0x10>
 800898a:	4284      	cmp	r4, r0
 800898c:	4623      	mov	r3, r4
 800898e:	d807      	bhi.n	80089a0 <memmove+0x20>
 8008990:	1e43      	subs	r3, r0, #1
 8008992:	42a1      	cmp	r1, r4
 8008994:	d008      	beq.n	80089a8 <memmove+0x28>
 8008996:	f811 2b01 	ldrb.w	r2, [r1], #1
 800899a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800899e:	e7f8      	b.n	8008992 <memmove+0x12>
 80089a0:	4402      	add	r2, r0
 80089a2:	4601      	mov	r1, r0
 80089a4:	428a      	cmp	r2, r1
 80089a6:	d100      	bne.n	80089aa <memmove+0x2a>
 80089a8:	bd10      	pop	{r4, pc}
 80089aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80089ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80089b2:	e7f7      	b.n	80089a4 <memmove+0x24>

080089b4 <_realloc_r>:
 80089b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089b8:	4680      	mov	r8, r0
 80089ba:	4614      	mov	r4, r2
 80089bc:	460e      	mov	r6, r1
 80089be:	b921      	cbnz	r1, 80089ca <_realloc_r+0x16>
 80089c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80089c4:	4611      	mov	r1, r2
 80089c6:	f7ff bc11 	b.w	80081ec <_malloc_r>
 80089ca:	b92a      	cbnz	r2, 80089d8 <_realloc_r+0x24>
 80089cc:	f7ff fba2 	bl	8008114 <_free_r>
 80089d0:	4625      	mov	r5, r4
 80089d2:	4628      	mov	r0, r5
 80089d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089d8:	f000 f81b 	bl	8008a12 <_malloc_usable_size_r>
 80089dc:	4284      	cmp	r4, r0
 80089de:	4607      	mov	r7, r0
 80089e0:	d802      	bhi.n	80089e8 <_realloc_r+0x34>
 80089e2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80089e6:	d812      	bhi.n	8008a0e <_realloc_r+0x5a>
 80089e8:	4621      	mov	r1, r4
 80089ea:	4640      	mov	r0, r8
 80089ec:	f7ff fbfe 	bl	80081ec <_malloc_r>
 80089f0:	4605      	mov	r5, r0
 80089f2:	2800      	cmp	r0, #0
 80089f4:	d0ed      	beq.n	80089d2 <_realloc_r+0x1e>
 80089f6:	42bc      	cmp	r4, r7
 80089f8:	4622      	mov	r2, r4
 80089fa:	4631      	mov	r1, r6
 80089fc:	bf28      	it	cs
 80089fe:	463a      	movcs	r2, r7
 8008a00:	f7ff ffb0 	bl	8008964 <memcpy>
 8008a04:	4631      	mov	r1, r6
 8008a06:	4640      	mov	r0, r8
 8008a08:	f7ff fb84 	bl	8008114 <_free_r>
 8008a0c:	e7e1      	b.n	80089d2 <_realloc_r+0x1e>
 8008a0e:	4635      	mov	r5, r6
 8008a10:	e7df      	b.n	80089d2 <_realloc_r+0x1e>

08008a12 <_malloc_usable_size_r>:
 8008a12:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a16:	1f18      	subs	r0, r3, #4
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	bfbc      	itt	lt
 8008a1c:	580b      	ldrlt	r3, [r1, r0]
 8008a1e:	18c0      	addlt	r0, r0, r3
 8008a20:	4770      	bx	lr
	...

08008a24 <_init>:
 8008a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a26:	bf00      	nop
 8008a28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a2a:	bc08      	pop	{r3}
 8008a2c:	469e      	mov	lr, r3
 8008a2e:	4770      	bx	lr

08008a30 <_fini>:
 8008a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a32:	bf00      	nop
 8008a34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a36:	bc08      	pop	{r3}
 8008a38:	469e      	mov	lr, r3
 8008a3a:	4770      	bx	lr
