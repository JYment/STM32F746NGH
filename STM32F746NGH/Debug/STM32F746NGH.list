
STM32F746NGH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cb8c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000634  0800cd60  0800cd60  0001cd60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d394  0800d394  0002033c  2**0
                  CONTENTS
  4 .ARM          00000008  0800d394  0800d394  0001d394  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d39c  0800d39c  0002033c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d39c  0800d39c  0001d39c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d3a0  0800d3a0  0001d3a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000033c  20000000  0800d3a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000019e8  2000033c  0800d6e0  0002033c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001d24  0800d6e0  00021d24  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002033c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013de4  00000000  00000000  0002036c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003fb7  00000000  00000000  00034150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001148  00000000  00000000  00038108  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f30  00000000  00000000  00039250  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002aa8f  00000000  00000000  0003a180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c43d  00000000  00000000  00064c0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e76cf  00000000  00000000  0008104c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016871b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000056e8  00000000  00000000  0016876c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000033c 	.word	0x2000033c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800cd44 	.word	0x0800cd44

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000340 	.word	0x20000340
 800020c:	0800cd44 	.word	0x0800cd44

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9aa 	b.w	8001004 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff33 	bl	8000b3c <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fca9 	bl	8000658 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc2a 	bl	8000564 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fca0 	bl	8000658 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff fae2 	bl	80002e8 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	468e      	mov	lr, r1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d14d      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d42:	428a      	cmp	r2, r1
 8000d44:	4694      	mov	ip, r2
 8000d46:	d969      	bls.n	8000e1c <__udivmoddi4+0xe8>
 8000d48:	fab2 f282 	clz	r2, r2
 8000d4c:	b152      	cbz	r2, 8000d64 <__udivmoddi4+0x30>
 8000d4e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d52:	f1c2 0120 	rsb	r1, r2, #32
 8000d56:	fa20 f101 	lsr.w	r1, r0, r1
 8000d5a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d62:	4094      	lsls	r4, r2
 8000d64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d68:	0c21      	lsrs	r1, r4, #16
 8000d6a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d6e:	fa1f f78c 	uxth.w	r7, ip
 8000d72:	fb08 e316 	mls	r3, r8, r6, lr
 8000d76:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d7a:	fb06 f107 	mul.w	r1, r6, r7
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d8a:	f080 811f 	bcs.w	8000fcc <__udivmoddi4+0x298>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 811c 	bls.w	8000fcc <__udivmoddi4+0x298>
 8000d94:	3e02      	subs	r6, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a5b      	subs	r3, r3, r1
 8000d9a:	b2a4      	uxth	r4, r4
 8000d9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da0:	fb08 3310 	mls	r3, r8, r0, r3
 8000da4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da8:	fb00 f707 	mul.w	r7, r0, r7
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	d90a      	bls.n	8000dc6 <__udivmoddi4+0x92>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db8:	f080 810a 	bcs.w	8000fd0 <__udivmoddi4+0x29c>
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	f240 8107 	bls.w	8000fd0 <__udivmoddi4+0x29c>
 8000dc2:	4464      	add	r4, ip
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dca:	1be4      	subs	r4, r4, r7
 8000dcc:	2600      	movs	r6, #0
 8000dce:	b11d      	cbz	r5, 8000dd8 <__udivmoddi4+0xa4>
 8000dd0:	40d4      	lsrs	r4, r2
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dd8:	4631      	mov	r1, r6
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d909      	bls.n	8000df6 <__udivmoddi4+0xc2>
 8000de2:	2d00      	cmp	r5, #0
 8000de4:	f000 80ef 	beq.w	8000fc6 <__udivmoddi4+0x292>
 8000de8:	2600      	movs	r6, #0
 8000dea:	e9c5 0100 	strd	r0, r1, [r5]
 8000dee:	4630      	mov	r0, r6
 8000df0:	4631      	mov	r1, r6
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	fab3 f683 	clz	r6, r3
 8000dfa:	2e00      	cmp	r6, #0
 8000dfc:	d14a      	bne.n	8000e94 <__udivmoddi4+0x160>
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d302      	bcc.n	8000e08 <__udivmoddi4+0xd4>
 8000e02:	4282      	cmp	r2, r0
 8000e04:	f200 80f9 	bhi.w	8000ffa <__udivmoddi4+0x2c6>
 8000e08:	1a84      	subs	r4, r0, r2
 8000e0a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e0e:	2001      	movs	r0, #1
 8000e10:	469e      	mov	lr, r3
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	d0e0      	beq.n	8000dd8 <__udivmoddi4+0xa4>
 8000e16:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e1a:	e7dd      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000e1c:	b902      	cbnz	r2, 8000e20 <__udivmoddi4+0xec>
 8000e1e:	deff      	udf	#255	; 0xff
 8000e20:	fab2 f282 	clz	r2, r2
 8000e24:	2a00      	cmp	r2, #0
 8000e26:	f040 8092 	bne.w	8000f4e <__udivmoddi4+0x21a>
 8000e2a:	eba1 010c 	sub.w	r1, r1, ip
 8000e2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e32:	fa1f fe8c 	uxth.w	lr, ip
 8000e36:	2601      	movs	r6, #1
 8000e38:	0c20      	lsrs	r0, r4, #16
 8000e3a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e3e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e42:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e46:	fb0e f003 	mul.w	r0, lr, r3
 8000e4a:	4288      	cmp	r0, r1
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x12c>
 8000e4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e52:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x12a>
 8000e58:	4288      	cmp	r0, r1
 8000e5a:	f200 80cb 	bhi.w	8000ff4 <__udivmoddi4+0x2c0>
 8000e5e:	4643      	mov	r3, r8
 8000e60:	1a09      	subs	r1, r1, r0
 8000e62:	b2a4      	uxth	r4, r4
 8000e64:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e68:	fb07 1110 	mls	r1, r7, r0, r1
 8000e6c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e70:	fb0e fe00 	mul.w	lr, lr, r0
 8000e74:	45a6      	cmp	lr, r4
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x156>
 8000e78:	eb1c 0404 	adds.w	r4, ip, r4
 8000e7c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e80:	d202      	bcs.n	8000e88 <__udivmoddi4+0x154>
 8000e82:	45a6      	cmp	lr, r4
 8000e84:	f200 80bb 	bhi.w	8000ffe <__udivmoddi4+0x2ca>
 8000e88:	4608      	mov	r0, r1
 8000e8a:	eba4 040e 	sub.w	r4, r4, lr
 8000e8e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e92:	e79c      	b.n	8000dce <__udivmoddi4+0x9a>
 8000e94:	f1c6 0720 	rsb	r7, r6, #32
 8000e98:	40b3      	lsls	r3, r6
 8000e9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ea2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ea6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eaa:	431c      	orrs	r4, r3
 8000eac:	40f9      	lsrs	r1, r7
 8000eae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eb2:	fa00 f306 	lsl.w	r3, r0, r6
 8000eb6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eba:	0c20      	lsrs	r0, r4, #16
 8000ebc:	fa1f fe8c 	uxth.w	lr, ip
 8000ec0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ec4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ec8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ecc:	4288      	cmp	r0, r1
 8000ece:	fa02 f206 	lsl.w	r2, r2, r6
 8000ed2:	d90b      	bls.n	8000eec <__udivmoddi4+0x1b8>
 8000ed4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000edc:	f080 8088 	bcs.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee0:	4288      	cmp	r0, r1
 8000ee2:	f240 8085 	bls.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	1a09      	subs	r1, r1, r0
 8000eee:	b2a4      	uxth	r4, r4
 8000ef0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ef4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ef8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000efc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f00:	458e      	cmp	lr, r1
 8000f02:	d908      	bls.n	8000f16 <__udivmoddi4+0x1e2>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f0c:	d26c      	bcs.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f0e:	458e      	cmp	lr, r1
 8000f10:	d96a      	bls.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f12:	3802      	subs	r0, #2
 8000f14:	4461      	add	r1, ip
 8000f16:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f1a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f1e:	eba1 010e 	sub.w	r1, r1, lr
 8000f22:	42a1      	cmp	r1, r4
 8000f24:	46c8      	mov	r8, r9
 8000f26:	46a6      	mov	lr, r4
 8000f28:	d356      	bcc.n	8000fd8 <__udivmoddi4+0x2a4>
 8000f2a:	d053      	beq.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f2c:	b15d      	cbz	r5, 8000f46 <__udivmoddi4+0x212>
 8000f2e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f32:	eb61 010e 	sbc.w	r1, r1, lr
 8000f36:	fa01 f707 	lsl.w	r7, r1, r7
 8000f3a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f3e:	40f1      	lsrs	r1, r6
 8000f40:	431f      	orrs	r7, r3
 8000f42:	e9c5 7100 	strd	r7, r1, [r5]
 8000f46:	2600      	movs	r6, #0
 8000f48:	4631      	mov	r1, r6
 8000f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f4e:	f1c2 0320 	rsb	r3, r2, #32
 8000f52:	40d8      	lsrs	r0, r3
 8000f54:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f58:	fa21 f303 	lsr.w	r3, r1, r3
 8000f5c:	4091      	lsls	r1, r2
 8000f5e:	4301      	orrs	r1, r0
 8000f60:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f64:	fa1f fe8c 	uxth.w	lr, ip
 8000f68:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f6c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f70:	0c0b      	lsrs	r3, r1, #16
 8000f72:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f76:	fb00 f60e 	mul.w	r6, r0, lr
 8000f7a:	429e      	cmp	r6, r3
 8000f7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f80:	d908      	bls.n	8000f94 <__udivmoddi4+0x260>
 8000f82:	eb1c 0303 	adds.w	r3, ip, r3
 8000f86:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f8a:	d22f      	bcs.n	8000fec <__udivmoddi4+0x2b8>
 8000f8c:	429e      	cmp	r6, r3
 8000f8e:	d92d      	bls.n	8000fec <__udivmoddi4+0x2b8>
 8000f90:	3802      	subs	r0, #2
 8000f92:	4463      	add	r3, ip
 8000f94:	1b9b      	subs	r3, r3, r6
 8000f96:	b289      	uxth	r1, r1
 8000f98:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f9c:	fb07 3316 	mls	r3, r7, r6, r3
 8000fa0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fa4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fa8:	428b      	cmp	r3, r1
 8000faa:	d908      	bls.n	8000fbe <__udivmoddi4+0x28a>
 8000fac:	eb1c 0101 	adds.w	r1, ip, r1
 8000fb0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fb4:	d216      	bcs.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fb6:	428b      	cmp	r3, r1
 8000fb8:	d914      	bls.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fba:	3e02      	subs	r6, #2
 8000fbc:	4461      	add	r1, ip
 8000fbe:	1ac9      	subs	r1, r1, r3
 8000fc0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fc4:	e738      	b.n	8000e38 <__udivmoddi4+0x104>
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e705      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e3      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6f8      	b.n	8000dc6 <__udivmoddi4+0x92>
 8000fd4:	454b      	cmp	r3, r9
 8000fd6:	d2a9      	bcs.n	8000f2c <__udivmoddi4+0x1f8>
 8000fd8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fdc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7a3      	b.n	8000f2c <__udivmoddi4+0x1f8>
 8000fe4:	4646      	mov	r6, r8
 8000fe6:	e7ea      	b.n	8000fbe <__udivmoddi4+0x28a>
 8000fe8:	4620      	mov	r0, r4
 8000fea:	e794      	b.n	8000f16 <__udivmoddi4+0x1e2>
 8000fec:	4640      	mov	r0, r8
 8000fee:	e7d1      	b.n	8000f94 <__udivmoddi4+0x260>
 8000ff0:	46d0      	mov	r8, sl
 8000ff2:	e77b      	b.n	8000eec <__udivmoddi4+0x1b8>
 8000ff4:	3b02      	subs	r3, #2
 8000ff6:	4461      	add	r1, ip
 8000ff8:	e732      	b.n	8000e60 <__udivmoddi4+0x12c>
 8000ffa:	4630      	mov	r0, r6
 8000ffc:	e709      	b.n	8000e12 <__udivmoddi4+0xde>
 8000ffe:	4464      	add	r4, ip
 8001000:	3802      	subs	r0, #2
 8001002:	e742      	b.n	8000e8a <__udivmoddi4+0x156>

08001004 <__aeabi_idiv0>:
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop

08001008 <apInit>:
#include "ap.h"



void apInit(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
  cliOpen(_DEF_UART1, 9600);    //USB
 800100c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8001010:	2000      	movs	r0, #0
 8001012:	f000 fb65 	bl	80016e0 <cliOpen>
}
 8001016:	bf00      	nop
 8001018:	bd80      	pop	{r7, pc}
	...

0800101c <apMain>:

void apMain(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b08c      	sub	sp, #48	; 0x30
 8001020:	af00      	add	r7, sp, #0
  uint32_t pre_time;

  pre_time = millis();
 8001022:	f000 f916 	bl	8001252 <millis>
 8001026:	62f8      	str	r0, [r7, #44]	; 0x2c
  while(1)
  {
    if(millis() - pre_time >= 1000)
 8001028:	f000 f913 	bl	8001252 <millis>
 800102c:	4602      	mov	r2, r0
 800102e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001030:	1ad3      	subs	r3, r2, r3
 8001032:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001036:	d308      	bcc.n	800104a <apMain+0x2e>
    {
      pre_time = millis();
 8001038:	f000 f90b 	bl	8001252 <millis>
 800103c:	62f8      	str	r0, [r7, #44]	; 0x2c
      ledToggle(_DEF_LED1);
 800103e:	2000      	movs	r0, #0
 8001040:	f000 ff18 	bl	8001e74 <ledToggle>
      ledToggle(_DEF_BACKLIGHT);
 8001044:	2001      	movs	r0, #1
 8001046:	f000 ff15 	bl	8001e74 <ledToggle>
    }

    if(cliAvailable() > 0)
 800104a:	f000 fb67 	bl	800171c <cliAvailable>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d0e9      	beq.n	8001028 <apMain+0xc>
    {
      uint8_t rx_data;
      rx_data = cliRead();
 8001054:	f000 fb6e 	bl	8001734 <cliRead>
 8001058:	4603      	mov	r3, r0
 800105a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

      if(rx_data == '1')
 800105e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001062:	2b31      	cmp	r3, #49	; 0x31
 8001064:	d11c      	bne.n	80010a0 <apMain+0x84>
      {
        uint8_t buf[32];

        cliPrintf("Read...\n");
 8001066:	482d      	ldr	r0, [pc, #180]	; (800111c <apMain+0x100>)
 8001068:	f000 fb8a 	bl	8001780 <cliPrintf>

        flashRead(0x8000000 + (60 * 1024), buf, 32);
 800106c:	463b      	mov	r3, r7
 800106e:	2220      	movs	r2, #32
 8001070:	4619      	mov	r1, r3
 8001072:	482b      	ldr	r0, [pc, #172]	; (8001120 <apMain+0x104>)
 8001074:	f000 fdb9 	bl	8001bea <flashRead>

        for(int i=0; i<32; i++)
 8001078:	2300      	movs	r3, #0
 800107a:	62bb      	str	r3, [r7, #40]	; 0x28
 800107c:	e00d      	b.n	800109a <apMain+0x7e>
        {
          cliPrintf("0x%X : 0x%X\n", 0x8000000 + (60 * 1024) + i, buf[i]);
 800107e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001080:	4b27      	ldr	r3, [pc, #156]	; (8001120 <apMain+0x104>)
 8001082:	4413      	add	r3, r2
 8001084:	4639      	mov	r1, r7
 8001086:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001088:	440a      	add	r2, r1
 800108a:	7812      	ldrb	r2, [r2, #0]
 800108c:	4619      	mov	r1, r3
 800108e:	4825      	ldr	r0, [pc, #148]	; (8001124 <apMain+0x108>)
 8001090:	f000 fb76 	bl	8001780 <cliPrintf>
        for(int i=0; i<32; i++)
 8001094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001096:	3301      	adds	r3, #1
 8001098:	62bb      	str	r3, [r7, #40]	; 0x28
 800109a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800109c:	2b1f      	cmp	r3, #31
 800109e:	ddee      	ble.n	800107e <apMain+0x62>
        }
      }

      if(rx_data == '2')
 80010a0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80010a4:	2b32      	cmp	r3, #50	; 0x32
 80010a6:	d110      	bne.n	80010ca <apMain+0xae>
      {
        cliPrintf("Erase...\n");
 80010a8:	481f      	ldr	r0, [pc, #124]	; (8001128 <apMain+0x10c>)
 80010aa:	f000 fb69 	bl	8001780 <cliPrintf>

        if(flashErase(0x8000000 + (60 * 1024), 32) == true)
 80010ae:	2120      	movs	r1, #32
 80010b0:	481b      	ldr	r0, [pc, #108]	; (8001120 <apMain+0x104>)
 80010b2:	f000 fcff 	bl	8001ab4 <flashErase>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d003      	beq.n	80010c4 <apMain+0xa8>
        {
          cliPrintf("Erase OK\n");
 80010bc:	481b      	ldr	r0, [pc, #108]	; (800112c <apMain+0x110>)
 80010be:	f000 fb5f 	bl	8001780 <cliPrintf>
 80010c2:	e002      	b.n	80010ca <apMain+0xae>
        }
        else
        {
          cliPrintf("Erase Failed\n");
 80010c4:	481a      	ldr	r0, [pc, #104]	; (8001130 <apMain+0x114>)
 80010c6:	f000 fb5b 	bl	8001780 <cliPrintf>
        }
      }

      if(rx_data == '3')
 80010ca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80010ce:	2b33      	cmp	r3, #51	; 0x33
 80010d0:	d1aa      	bne.n	8001028 <apMain+0xc>
      {
        uint8_t buf[32];

        for(int i=0; i<32; i++)
 80010d2:	2300      	movs	r3, #0
 80010d4:	627b      	str	r3, [r7, #36]	; 0x24
 80010d6:	e009      	b.n	80010ec <apMain+0xd0>
        {
          buf[i] = i;
 80010d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010da:	b2d9      	uxtb	r1, r3
 80010dc:	463a      	mov	r2, r7
 80010de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e0:	4413      	add	r3, r2
 80010e2:	460a      	mov	r2, r1
 80010e4:	701a      	strb	r2, [r3, #0]
        for(int i=0; i<32; i++)
 80010e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e8:	3301      	adds	r3, #1
 80010ea:	627b      	str	r3, [r7, #36]	; 0x24
 80010ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ee:	2b1f      	cmp	r3, #31
 80010f0:	ddf2      	ble.n	80010d8 <apMain+0xbc>
        }

        cliPrintf("Write...\n");
 80010f2:	4810      	ldr	r0, [pc, #64]	; (8001134 <apMain+0x118>)
 80010f4:	f000 fb44 	bl	8001780 <cliPrintf>
        if(flashWrite(0x8000000 + (60 * 1024), buf, 32) == true)
 80010f8:	463b      	mov	r3, r7
 80010fa:	2220      	movs	r2, #32
 80010fc:	4619      	mov	r1, r3
 80010fe:	4808      	ldr	r0, [pc, #32]	; (8001120 <apMain+0x104>)
 8001100:	f000 fd40 	bl	8001b84 <flashWrite>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d003      	beq.n	8001112 <apMain+0xf6>
        {
          cliPrintf("Write OK\n");
 800110a:	480b      	ldr	r0, [pc, #44]	; (8001138 <apMain+0x11c>)
 800110c:	f000 fb38 	bl	8001780 <cliPrintf>
 8001110:	e78a      	b.n	8001028 <apMain+0xc>
        }
        else
        {
          cliPrintf("Write Failed\n");
 8001112:	480a      	ldr	r0, [pc, #40]	; (800113c <apMain+0x120>)
 8001114:	f000 fb34 	bl	8001780 <cliPrintf>
    if(millis() - pre_time >= 1000)
 8001118:	e786      	b.n	8001028 <apMain+0xc>
 800111a:	bf00      	nop
 800111c:	0800cd60 	.word	0x0800cd60
 8001120:	0800f000 	.word	0x0800f000
 8001124:	0800cd6c 	.word	0x0800cd6c
 8001128:	0800cd7c 	.word	0x0800cd7c
 800112c:	0800cd88 	.word	0x0800cd88
 8001130:	0800cd94 	.word	0x0800cd94
 8001134:	0800cda4 	.word	0x0800cda4
 8001138:	0800cdb0 	.word	0x0800cdb0
 800113c:	0800cdbc 	.word	0x0800cdbc

08001140 <bspInit>:




void bspInit(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b08a      	sub	sp, #40	; 0x28
 8001144:	af00      	add	r7, sp, #0
  HAL_Init();
 8001146:	f000 ff7f 	bl	8002048 <HAL_Init>
  MPU_Config();
 800114a:	f000 f8f9 	bl	8001340 <MPU_Config>
  SystemClock_Config();
 800114e:	f000 f887 	bl	8001260 <SystemClock_Config>

  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001152:	4b38      	ldr	r3, [pc, #224]	; (8001234 <bspInit+0xf4>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001156:	4a37      	ldr	r2, [pc, #220]	; (8001234 <bspInit+0xf4>)
 8001158:	f043 0301 	orr.w	r3, r3, #1
 800115c:	6313      	str	r3, [r2, #48]	; 0x30
 800115e:	4b35      	ldr	r3, [pc, #212]	; (8001234 <bspInit+0xf4>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001162:	f003 0301 	and.w	r3, r3, #1
 8001166:	613b      	str	r3, [r7, #16]
 8001168:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800116a:	4b32      	ldr	r3, [pc, #200]	; (8001234 <bspInit+0xf4>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116e:	4a31      	ldr	r2, [pc, #196]	; (8001234 <bspInit+0xf4>)
 8001170:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001174:	6313      	str	r3, [r2, #48]	; 0x30
 8001176:	4b2f      	ldr	r3, [pc, #188]	; (8001234 <bspInit+0xf4>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800117e:	60fb      	str	r3, [r7, #12]
 8001180:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001182:	4b2c      	ldr	r3, [pc, #176]	; (8001234 <bspInit+0xf4>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001186:	4a2b      	ldr	r2, [pc, #172]	; (8001234 <bspInit+0xf4>)
 8001188:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800118c:	6313      	str	r3, [r2, #48]	; 0x30
 800118e:	4b29      	ldr	r3, [pc, #164]	; (8001234 <bspInit+0xf4>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001192:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001196:	60bb      	str	r3, [r7, #8]
 8001198:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800119a:	4b26      	ldr	r3, [pc, #152]	; (8001234 <bspInit+0xf4>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119e:	4a25      	ldr	r2, [pc, #148]	; (8001234 <bspInit+0xf4>)
 80011a0:	f043 0304 	orr.w	r3, r3, #4
 80011a4:	6313      	str	r3, [r2, #48]	; 0x30
 80011a6:	4b23      	ldr	r3, [pc, #140]	; (8001234 <bspInit+0xf4>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011aa:	f003 0304 	and.w	r3, r3, #4
 80011ae:	607b      	str	r3, [r7, #4]
 80011b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011b2:	4b20      	ldr	r3, [pc, #128]	; (8001234 <bspInit+0xf4>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b6:	4a1f      	ldr	r2, [pc, #124]	; (8001234 <bspInit+0xf4>)
 80011b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011bc:	6313      	str	r3, [r2, #48]	; 0x30
 80011be:	4b1d      	ldr	r3, [pc, #116]	; (8001234 <bspInit+0xf4>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011c6:	603b      	str	r3, [r7, #0]
 80011c8:	683b      	ldr	r3, [r7, #0]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ca:	f107 0314 	add.w	r3, r7, #20
 80011ce:	2200      	movs	r2, #0
 80011d0:	601a      	str	r2, [r3, #0]
 80011d2:	605a      	str	r2, [r3, #4]
 80011d4:	609a      	str	r2, [r3, #8]
 80011d6:	60da      	str	r2, [r3, #12]
 80011d8:	611a      	str	r2, [r3, #16]

  GPIO_InitStruct.Pin  = GPIO_PIN_12;
 80011da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80011e0:	2311      	movs	r3, #17
 80011e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e4:	2300      	movs	r3, #0
 80011e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e8:	2300      	movs	r3, #0
 80011ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ec:	f107 0314 	add.w	r3, r7, #20
 80011f0:	4619      	mov	r1, r3
 80011f2:	4811      	ldr	r0, [pc, #68]	; (8001238 <bspInit+0xf8>)
 80011f4:	f001 fbd4 	bl	80029a0 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 80011f8:	2200      	movs	r2, #0
 80011fa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011fe:	480e      	ldr	r0, [pc, #56]	; (8001238 <bspInit+0xf8>)
 8001200:	f001 fd7a 	bl	8002cf8 <HAL_GPIO_WritePin>
  delay(100);
 8001204:	2064      	movs	r0, #100	; 0x64
 8001206:	f000 f819 	bl	800123c <delay>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 800120a:	2201      	movs	r2, #1
 800120c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001210:	4809      	ldr	r0, [pc, #36]	; (8001238 <bspInit+0xf8>)
 8001212:	f001 fd71 	bl	8002cf8 <HAL_GPIO_WritePin>

  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001216:	2300      	movs	r3, #0
 8001218:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800121a:	f107 0314 	add.w	r3, r7, #20
 800121e:	4619      	mov	r1, r3
 8001220:	4805      	ldr	r0, [pc, #20]	; (8001238 <bspInit+0xf8>)
 8001222:	f001 fbbd 	bl	80029a0 <HAL_GPIO_Init>



  MX_USB_DEVICE_Init();
 8001226:	f007 fd3d 	bl	8008ca4 <MX_USB_DEVICE_Init>
}
 800122a:	bf00      	nop
 800122c:	3728      	adds	r7, #40	; 0x28
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	40023800 	.word	0x40023800
 8001238:	40020000 	.word	0x40020000

0800123c <delay>:

void delay(uint32_t ms)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  HAL_Delay(ms);
 8001244:	6878      	ldr	r0, [r7, #4]
 8001246:	f000 ff5d 	bl	8002104 <HAL_Delay>
}
 800124a:	bf00      	nop
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}

08001252 <millis>:

uint32_t millis(void)
{
 8001252:	b580      	push	{r7, lr}
 8001254:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8001256:	f000 ff49 	bl	80020ec <HAL_GetTick>
 800125a:	4603      	mov	r3, r0
}
 800125c:	4618      	mov	r0, r3
 800125e:	bd80      	pop	{r7, pc}

08001260 <SystemClock_Config>:




void SystemClock_Config(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b094      	sub	sp, #80	; 0x50
 8001264:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001266:	f107 0320 	add.w	r3, r7, #32
 800126a:	2230      	movs	r2, #48	; 0x30
 800126c:	2100      	movs	r1, #0
 800126e:	4618      	mov	r0, r3
 8001270:	f008 fbee 	bl	8009a50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001274:	f107 030c 	add.w	r3, r7, #12
 8001278:	2200      	movs	r2, #0
 800127a:	601a      	str	r2, [r3, #0]
 800127c:	605a      	str	r2, [r3, #4]
 800127e:	609a      	str	r2, [r3, #8]
 8001280:	60da      	str	r2, [r3, #12]
 8001282:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001284:	f003 f824 	bl	80042d0 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001288:	4b2b      	ldr	r3, [pc, #172]	; (8001338 <SystemClock_Config+0xd8>)
 800128a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128c:	4a2a      	ldr	r2, [pc, #168]	; (8001338 <SystemClock_Config+0xd8>)
 800128e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001292:	6413      	str	r3, [r2, #64]	; 0x40
 8001294:	4b28      	ldr	r3, [pc, #160]	; (8001338 <SystemClock_Config+0xd8>)
 8001296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001298:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800129c:	60bb      	str	r3, [r7, #8]
 800129e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012a0:	4b26      	ldr	r3, [pc, #152]	; (800133c <SystemClock_Config+0xdc>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a25      	ldr	r2, [pc, #148]	; (800133c <SystemClock_Config+0xdc>)
 80012a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80012aa:	6013      	str	r3, [r2, #0]
 80012ac:	4b23      	ldr	r3, [pc, #140]	; (800133c <SystemClock_Config+0xdc>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80012b4:	607b      	str	r3, [r7, #4]
 80012b6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012b8:	2301      	movs	r3, #1
 80012ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012c0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012c2:	2302      	movs	r3, #2
 80012c4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012c6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80012ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80012cc:	2319      	movs	r3, #25
 80012ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
 80012d0:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 80012d4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012d6:	2302      	movs	r3, #2
 80012d8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80012da:	2309      	movs	r3, #9
 80012dc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012de:	f107 0320 	add.w	r3, r7, #32
 80012e2:	4618      	mov	r0, r3
 80012e4:	f003 f854 	bl	8004390 <HAL_RCC_OscConfig>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80012ee:	f000 f853 	bl	8001398 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80012f2:	f002 fffd 	bl	80042f0 <HAL_PWREx_EnableOverDrive>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80012fc:	f000 f84c 	bl	8001398 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001300:	230f      	movs	r3, #15
 8001302:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001304:	2302      	movs	r3, #2
 8001306:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001308:	2300      	movs	r3, #0
 800130a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800130c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001310:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001312:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001316:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001318:	f107 030c 	add.w	r3, r7, #12
 800131c:	2107      	movs	r1, #7
 800131e:	4618      	mov	r0, r3
 8001320:	f003 fada 	bl	80048d8 <HAL_RCC_ClockConfig>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <SystemClock_Config+0xce>
  {
    Error_Handler();
 800132a:	f000 f835 	bl	8001398 <Error_Handler>
  }
}
 800132e:	bf00      	nop
 8001330:	3750      	adds	r7, #80	; 0x50
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	40023800 	.word	0x40023800
 800133c:	40007000 	.word	0x40007000

08001340 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b084      	sub	sp, #16
 8001344:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001346:	463b      	mov	r3, r7
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]
 800134c:	605a      	str	r2, [r3, #4]
 800134e:	609a      	str	r2, [r3, #8]
 8001350:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001352:	f001 f80d 	bl	8002370 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001356:	2301      	movs	r3, #1
 8001358:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800135a:	2300      	movs	r3, #0
 800135c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800135e:	2300      	movs	r3, #0
 8001360:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001362:	231f      	movs	r3, #31
 8001364:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8001366:	2387      	movs	r3, #135	; 0x87
 8001368:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800136a:	2300      	movs	r3, #0
 800136c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800136e:	2300      	movs	r3, #0
 8001370:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001372:	2301      	movs	r3, #1
 8001374:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001376:	2301      	movs	r3, #1
 8001378:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800137a:	2300      	movs	r3, #0
 800137c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800137e:	2300      	movs	r3, #0
 8001380:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001382:	463b      	mov	r3, r7
 8001384:	4618      	mov	r0, r3
 8001386:	f001 f82b 	bl	80023e0 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800138a:	2004      	movs	r0, #4
 800138c:	f001 f808 	bl	80023a0 <HAL_MPU_Enable>

}
 8001390:	bf00      	nop
 8001392:	3710      	adds	r7, #16
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}

08001398 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800139c:	b672      	cpsid	i
}
 800139e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013a0:	e7fe      	b.n	80013a0 <Error_Handler+0x8>
	...

080013a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80013aa:	4b0f      	ldr	r3, [pc, #60]	; (80013e8 <HAL_MspInit+0x44>)
 80013ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ae:	4a0e      	ldr	r2, [pc, #56]	; (80013e8 <HAL_MspInit+0x44>)
 80013b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013b4:	6413      	str	r3, [r2, #64]	; 0x40
 80013b6:	4b0c      	ldr	r3, [pc, #48]	; (80013e8 <HAL_MspInit+0x44>)
 80013b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013be:	607b      	str	r3, [r7, #4]
 80013c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013c2:	4b09      	ldr	r3, [pc, #36]	; (80013e8 <HAL_MspInit+0x44>)
 80013c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013c6:	4a08      	ldr	r2, [pc, #32]	; (80013e8 <HAL_MspInit+0x44>)
 80013c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013cc:	6453      	str	r3, [r2, #68]	; 0x44
 80013ce:	4b06      	ldr	r3, [pc, #24]	; (80013e8 <HAL_MspInit+0x44>)
 80013d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013d6:	603b      	str	r3, [r7, #0]
 80013d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013da:	bf00      	nop
 80013dc:	370c      	adds	r7, #12
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	40023800 	.word	0x40023800

080013ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013f0:	e7fe      	b.n	80013f0 <NMI_Handler+0x4>

080013f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013f2:	b480      	push	{r7}
 80013f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013f6:	e7fe      	b.n	80013f6 <HardFault_Handler+0x4>

080013f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013fc:	e7fe      	b.n	80013fc <MemManage_Handler+0x4>

080013fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013fe:	b480      	push	{r7}
 8001400:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001402:	e7fe      	b.n	8001402 <BusFault_Handler+0x4>

08001404 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001408:	e7fe      	b.n	8001408 <UsageFault_Handler+0x4>

0800140a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800140a:	b480      	push	{r7}
 800140c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800140e:	bf00      	nop
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr

08001418 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800141c:	bf00      	nop
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr

08001426 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001426:	b480      	push	{r7}
 8001428:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800142a:	bf00      	nop
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr

08001434 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001438:	f000 fe44 	bl	80020c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800143c:	bf00      	nop
 800143e:	bd80      	pop	{r7, pc}

08001440 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001444:	4802      	ldr	r0, [pc, #8]	; (8001450 <OTG_FS_IRQHandler+0x10>)
 8001446:	f001 fdd0 	bl	8002fea <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800144a:	bf00      	nop
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	2000180c 	.word	0x2000180c

08001454 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  return 1;
 8001458:	2301      	movs	r3, #1
}
 800145a:	4618      	mov	r0, r3
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr

08001464 <_kill>:

int _kill(int pid, int sig)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
 800146c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800146e:	f008 fab5 	bl	80099dc <__errno>
 8001472:	4603      	mov	r3, r0
 8001474:	2216      	movs	r2, #22
 8001476:	601a      	str	r2, [r3, #0]
  return -1;
 8001478:	f04f 33ff 	mov.w	r3, #4294967295
}
 800147c:	4618      	mov	r0, r3
 800147e:	3708      	adds	r7, #8
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}

08001484 <_exit>:

void _exit (int status)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800148c:	f04f 31ff 	mov.w	r1, #4294967295
 8001490:	6878      	ldr	r0, [r7, #4]
 8001492:	f7ff ffe7 	bl	8001464 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001496:	e7fe      	b.n	8001496 <_exit+0x12>

08001498 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b086      	sub	sp, #24
 800149c:	af00      	add	r7, sp, #0
 800149e:	60f8      	str	r0, [r7, #12]
 80014a0:	60b9      	str	r1, [r7, #8]
 80014a2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014a4:	2300      	movs	r3, #0
 80014a6:	617b      	str	r3, [r7, #20]
 80014a8:	e00a      	b.n	80014c0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80014aa:	f3af 8000 	nop.w
 80014ae:	4601      	mov	r1, r0
 80014b0:	68bb      	ldr	r3, [r7, #8]
 80014b2:	1c5a      	adds	r2, r3, #1
 80014b4:	60ba      	str	r2, [r7, #8]
 80014b6:	b2ca      	uxtb	r2, r1
 80014b8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	3301      	adds	r3, #1
 80014be:	617b      	str	r3, [r7, #20]
 80014c0:	697a      	ldr	r2, [r7, #20]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	429a      	cmp	r2, r3
 80014c6:	dbf0      	blt.n	80014aa <_read+0x12>
  }

  return len;
 80014c8:	687b      	ldr	r3, [r7, #4]
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3718      	adds	r7, #24
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}

080014d2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014d2:	b580      	push	{r7, lr}
 80014d4:	b086      	sub	sp, #24
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	60f8      	str	r0, [r7, #12]
 80014da:	60b9      	str	r1, [r7, #8]
 80014dc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014de:	2300      	movs	r3, #0
 80014e0:	617b      	str	r3, [r7, #20]
 80014e2:	e009      	b.n	80014f8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	1c5a      	adds	r2, r3, #1
 80014e8:	60ba      	str	r2, [r7, #8]
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	4618      	mov	r0, r3
 80014ee:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	3301      	adds	r3, #1
 80014f6:	617b      	str	r3, [r7, #20]
 80014f8:	697a      	ldr	r2, [r7, #20]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	429a      	cmp	r2, r3
 80014fe:	dbf1      	blt.n	80014e4 <_write+0x12>
  }
  return len;
 8001500:	687b      	ldr	r3, [r7, #4]
}
 8001502:	4618      	mov	r0, r3
 8001504:	3718      	adds	r7, #24
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}

0800150a <_close>:

int _close(int file)
{
 800150a:	b480      	push	{r7}
 800150c:	b083      	sub	sp, #12
 800150e:	af00      	add	r7, sp, #0
 8001510:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001512:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001516:	4618      	mov	r0, r3
 8001518:	370c      	adds	r7, #12
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr

08001522 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001522:	b480      	push	{r7}
 8001524:	b083      	sub	sp, #12
 8001526:	af00      	add	r7, sp, #0
 8001528:	6078      	str	r0, [r7, #4]
 800152a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001532:	605a      	str	r2, [r3, #4]
  return 0;
 8001534:	2300      	movs	r3, #0
}
 8001536:	4618      	mov	r0, r3
 8001538:	370c      	adds	r7, #12
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr

08001542 <_isatty>:

int _isatty(int file)
{
 8001542:	b480      	push	{r7}
 8001544:	b083      	sub	sp, #12
 8001546:	af00      	add	r7, sp, #0
 8001548:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800154a:	2301      	movs	r3, #1
}
 800154c:	4618      	mov	r0, r3
 800154e:	370c      	adds	r7, #12
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr

08001558 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001558:	b480      	push	{r7}
 800155a:	b085      	sub	sp, #20
 800155c:	af00      	add	r7, sp, #0
 800155e:	60f8      	str	r0, [r7, #12]
 8001560:	60b9      	str	r1, [r7, #8]
 8001562:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001564:	2300      	movs	r3, #0
}
 8001566:	4618      	mov	r0, r3
 8001568:	3714      	adds	r7, #20
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
	...

08001574 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b086      	sub	sp, #24
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800157c:	4a14      	ldr	r2, [pc, #80]	; (80015d0 <_sbrk+0x5c>)
 800157e:	4b15      	ldr	r3, [pc, #84]	; (80015d4 <_sbrk+0x60>)
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001588:	4b13      	ldr	r3, [pc, #76]	; (80015d8 <_sbrk+0x64>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d102      	bne.n	8001596 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001590:	4b11      	ldr	r3, [pc, #68]	; (80015d8 <_sbrk+0x64>)
 8001592:	4a12      	ldr	r2, [pc, #72]	; (80015dc <_sbrk+0x68>)
 8001594:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001596:	4b10      	ldr	r3, [pc, #64]	; (80015d8 <_sbrk+0x64>)
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	4413      	add	r3, r2
 800159e:	693a      	ldr	r2, [r7, #16]
 80015a0:	429a      	cmp	r2, r3
 80015a2:	d207      	bcs.n	80015b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015a4:	f008 fa1a 	bl	80099dc <__errno>
 80015a8:	4603      	mov	r3, r0
 80015aa:	220c      	movs	r2, #12
 80015ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015ae:	f04f 33ff 	mov.w	r3, #4294967295
 80015b2:	e009      	b.n	80015c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015b4:	4b08      	ldr	r3, [pc, #32]	; (80015d8 <_sbrk+0x64>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015ba:	4b07      	ldr	r3, [pc, #28]	; (80015d8 <_sbrk+0x64>)
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	4413      	add	r3, r2
 80015c2:	4a05      	ldr	r2, [pc, #20]	; (80015d8 <_sbrk+0x64>)
 80015c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015c6:	68fb      	ldr	r3, [r7, #12]
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	3718      	adds	r7, #24
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	20050000 	.word	0x20050000
 80015d4:	00000400 	.word	0x00000400
 80015d8:	20000358 	.word	0x20000358
 80015dc:	20001d28 	.word	0x20001d28

080015e0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015e4:	4b06      	ldr	r3, [pc, #24]	; (8001600 <SystemInit+0x20>)
 80015e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015ea:	4a05      	ldr	r2, [pc, #20]	; (8001600 <SystemInit+0x20>)
 80015ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015f4:	bf00      	nop
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	e000ed00 	.word	0xe000ed00

08001604 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001604:	480d      	ldr	r0, [pc, #52]	; (800163c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001606:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001608:	f7ff ffea 	bl	80015e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800160c:	480c      	ldr	r0, [pc, #48]	; (8001640 <LoopForever+0x6>)
  ldr r1, =_edata
 800160e:	490d      	ldr	r1, [pc, #52]	; (8001644 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001610:	4a0d      	ldr	r2, [pc, #52]	; (8001648 <LoopForever+0xe>)
  movs r3, #0
 8001612:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001614:	e002      	b.n	800161c <LoopCopyDataInit>

08001616 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001616:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001618:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800161a:	3304      	adds	r3, #4

0800161c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800161c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800161e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001620:	d3f9      	bcc.n	8001616 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001622:	4a0a      	ldr	r2, [pc, #40]	; (800164c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001624:	4c0a      	ldr	r4, [pc, #40]	; (8001650 <LoopForever+0x16>)
  movs r3, #0
 8001626:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001628:	e001      	b.n	800162e <LoopFillZerobss>

0800162a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800162a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800162c:	3204      	adds	r2, #4

0800162e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800162e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001630:	d3fb      	bcc.n	800162a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001632:	f008 f9d9 	bl	80099e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001636:	f008 f9c5 	bl	80099c4 <main>

0800163a <LoopForever>:

LoopForever:
  b LoopForever
 800163a:	e7fe      	b.n	800163a <LoopForever>
  ldr   r0, =_estack
 800163c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001640:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001644:	2000033c 	.word	0x2000033c
  ldr r2, =_sidata
 8001648:	0800d3a4 	.word	0x0800d3a4
  ldr r2, =_sbss
 800164c:	2000033c 	.word	0x2000033c
  ldr r4, =_ebss
 8001650:	20001d24 	.word	0x20001d24

08001654 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001654:	e7fe      	b.n	8001654 <ADC_IRQHandler>
	...

08001658 <cliInit>:

void cliShowList(cli_args_t *args);


bool cliInit(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
  cli_node.is_open = false;
 800165c:	4b19      	ldr	r3, [pc, #100]	; (80016c4 <cliInit+0x6c>)
 800165e:	2200      	movs	r2, #0
 8001660:	721a      	strb	r2, [r3, #8]
  cli_node.is_log  = false;
 8001662:	4b18      	ldr	r3, [pc, #96]	; (80016c4 <cliInit+0x6c>)
 8001664:	2200      	movs	r2, #0
 8001666:	725a      	strb	r2, [r3, #9]
  cli_node.state   = CLI_RX_IDLE;
 8001668:	4b16      	ldr	r3, [pc, #88]	; (80016c4 <cliInit+0x6c>)
 800166a:	2200      	movs	r2, #0
 800166c:	741a      	strb	r2, [r3, #16]

  cli_node.hist_line_i     = 0;
 800166e:	4b15      	ldr	r3, [pc, #84]	; (80016c4 <cliInit+0x6c>)
 8001670:	2200      	movs	r2, #0
 8001672:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
  cli_node.hist_line_last  = 0;
 8001676:	4b13      	ldr	r3, [pc, #76]	; (80016c4 <cliInit+0x6c>)
 8001678:	2200      	movs	r2, #0
 800167a:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
  cli_node.hist_line_count = 0;
 800167e:	4b11      	ldr	r3, [pc, #68]	; (80016c4 <cliInit+0x6c>)
 8001680:	2200      	movs	r2, #0
 8001682:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
  cli_node.hist_line_new   = false;
 8001686:	4b0f      	ldr	r3, [pc, #60]	; (80016c4 <cliInit+0x6c>)
 8001688:	2200      	movs	r2, #0
 800168a:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

  cli_node.cmd_args.getData  = cliArgsGetData;
 800168e:	4b0d      	ldr	r3, [pc, #52]	; (80016c4 <cliInit+0x6c>)
 8001690:	4a0d      	ldr	r2, [pc, #52]	; (80016c8 <cliInit+0x70>)
 8001692:	f8c3 2394 	str.w	r2, [r3, #916]	; 0x394
  cli_node.cmd_args.getFloat = cliArgsGetFloat;
 8001696:	4b0b      	ldr	r3, [pc, #44]	; (80016c4 <cliInit+0x6c>)
 8001698:	4a0c      	ldr	r2, [pc, #48]	; (80016cc <cliInit+0x74>)
 800169a:	f8c3 2398 	str.w	r2, [r3, #920]	; 0x398
  cli_node.cmd_args.getStr   = cliArgsGetStr;
 800169e:	4b09      	ldr	r3, [pc, #36]	; (80016c4 <cliInit+0x6c>)
 80016a0:	4a0b      	ldr	r2, [pc, #44]	; (80016d0 <cliInit+0x78>)
 80016a2:	f8c3 239c 	str.w	r2, [r3, #924]	; 0x39c
  cli_node.cmd_args.isStr    = cliArgsIsStr;
 80016a6:	4b07      	ldr	r3, [pc, #28]	; (80016c4 <cliInit+0x6c>)
 80016a8:	4a0a      	ldr	r2, [pc, #40]	; (80016d4 <cliInit+0x7c>)
 80016aa:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0

  cliLineClean(&cli_node);
 80016ae:	4805      	ldr	r0, [pc, #20]	; (80016c4 <cliInit+0x6c>)
 80016b0:	f000 f84c 	bl	800174c <cliLineClean>

  cliAdd("help", cliShowList);
 80016b4:	4908      	ldr	r1, [pc, #32]	; (80016d8 <cliInit+0x80>)
 80016b6:	4809      	ldr	r0, [pc, #36]	; (80016dc <cliInit+0x84>)
 80016b8:	f000 f972 	bl	80019a0 <cliAdd>

  return true;
 80016bc:	2301      	movs	r3, #1
}
 80016be:	4618      	mov	r0, r3
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	2000035c 	.word	0x2000035c
 80016c8:	08001831 	.word	0x08001831
 80016cc:	08001881 	.word	0x08001881
 80016d0:	080018d9 	.word	0x080018d9
 80016d4:	08001921 	.word	0x08001921
 80016d8:	08001a35 	.word	0x08001a35
 80016dc:	0800cdcc 	.word	0x0800cdcc

080016e0 <cliOpen>:

bool cliOpen(uint8_t ch, uint32_t baud)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	4603      	mov	r3, r0
 80016e8:	6039      	str	r1, [r7, #0]
 80016ea:	71fb      	strb	r3, [r7, #7]
  cli_node.ch = ch;
 80016ec:	4a0a      	ldr	r2, [pc, #40]	; (8001718 <cliOpen+0x38>)
 80016ee:	79fb      	ldrb	r3, [r7, #7]
 80016f0:	7013      	strb	r3, [r2, #0]
  cli_node.baud = baud;
 80016f2:	4a09      	ldr	r2, [pc, #36]	; (8001718 <cliOpen+0x38>)
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	6053      	str	r3, [r2, #4]

  cli_node.is_open = uartOpen(ch, baud);
 80016f8:	79fb      	ldrb	r3, [r7, #7]
 80016fa:	6839      	ldr	r1, [r7, #0]
 80016fc:	4618      	mov	r0, r3
 80016fe:	f000 fc3f 	bl	8001f80 <uartOpen>
 8001702:	4603      	mov	r3, r0
 8001704:	461a      	mov	r2, r3
 8001706:	4b04      	ldr	r3, [pc, #16]	; (8001718 <cliOpen+0x38>)
 8001708:	721a      	strb	r2, [r3, #8]

  return cli_node.is_open;
 800170a:	4b03      	ldr	r3, [pc, #12]	; (8001718 <cliOpen+0x38>)
 800170c:	7a1b      	ldrb	r3, [r3, #8]
}
 800170e:	4618      	mov	r0, r3
 8001710:	3708      	adds	r7, #8
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	2000035c 	.word	0x2000035c

0800171c <cliAvailable>:

  return true;
}

uint32_t cliAvailable(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0
  return uartAvailable(cli_node.ch);
 8001720:	4b03      	ldr	r3, [pc, #12]	; (8001730 <cliAvailable+0x14>)
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	4618      	mov	r0, r3
 8001726:	f000 fc47 	bl	8001fb8 <uartAvailable>
 800172a:	4603      	mov	r3, r0
}
 800172c:	4618      	mov	r0, r3
 800172e:	bd80      	pop	{r7, pc}
 8001730:	2000035c 	.word	0x2000035c

08001734 <cliRead>:

uint8_t cliRead(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
  return uartRead(cli_node.ch);
 8001738:	4b03      	ldr	r3, [pc, #12]	; (8001748 <cliRead+0x14>)
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	4618      	mov	r0, r3
 800173e:	f000 fc4e 	bl	8001fde <uartRead>
 8001742:	4603      	mov	r3, r0
}
 8001744:	4618      	mov	r0, r3
 8001746:	bd80      	pop	{r7, pc}
 8001748:	2000035c 	.word	0x2000035c

0800174c <cliLineClean>:

  return ret;
}

void cliLineClean(cli_t *p_cli)
{
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  p_cli->line.count   = 0;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2200      	movs	r2, #0
 8001758:	f883 2246 	strb.w	r2, [r3, #582]	; 0x246
  p_cli->line.cursor  = 0;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2200      	movs	r2, #0
 8001760:	f883 2245 	strb.w	r2, [r3, #581]	; 0x245
  p_cli->line.buf_len = CLI_LINE_BUF_MAX - 1;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	221f      	movs	r2, #31
 8001768:	f883 2244 	strb.w	r2, [r3, #580]	; 0x244
  p_cli->line.buf[0]  = 0;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2200      	movs	r2, #0
 8001770:	f883 2224 	strb.w	r2, [r3, #548]	; 0x224
}
 8001774:	bf00      	nop
 8001776:	370c      	adds	r7, #12
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr

08001780 <cliPrintf>:

  return ret;
}

void cliPrintf(const char *fmt, ...)
{
 8001780:	b40f      	push	{r0, r1, r2, r3}
 8001782:	b580      	push	{r7, lr}
 8001784:	b084      	sub	sp, #16
 8001786:	af00      	add	r7, sp, #0
  va_list arg;
  va_start (arg, fmt);
 8001788:	f107 031c 	add.w	r3, r7, #28
 800178c:	607b      	str	r3, [r7, #4]
  int32_t len;
  cli_t *p_cli = &cli_node;
 800178e:	4b0d      	ldr	r3, [pc, #52]	; (80017c4 <cliPrintf+0x44>)
 8001790:	60fb      	str	r3, [r7, #12]


  len = vsnprintf(p_cli->print_buffer, 256, fmt, arg);
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	f103 0011 	add.w	r0, r3, #17
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	69ba      	ldr	r2, [r7, #24]
 800179c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017a0:	f009 f97c 	bl	800aa9c <vsniprintf>
 80017a4:	60b8      	str	r0, [r7, #8]
  va_end (arg);

  uartWrite(p_cli->ch, (uint8_t *)p_cli->print_buffer, len);
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	7818      	ldrb	r0, [r3, #0]
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	3311      	adds	r3, #17
 80017ae:	68ba      	ldr	r2, [r7, #8]
 80017b0:	4619      	mov	r1, r3
 80017b2:	f000 fc26 	bl	8002002 <uartWrite>
}
 80017b6:	bf00      	nop
 80017b8:	3710      	adds	r7, #16
 80017ba:	46bd      	mov	sp, r7
 80017bc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80017c0:	b004      	add	sp, #16
 80017c2:	4770      	bx	lr
 80017c4:	2000035c 	.word	0x2000035c

080017c8 <cliToUpper>:

void cliToUpper(char *str)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b085      	sub	sp, #20
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  uint16_t i;
  uint8_t  str_ch;

  for (i=0; i<CLI_CMD_NAME_MAX; i++)
 80017d0:	2300      	movs	r3, #0
 80017d2:	81fb      	strh	r3, [r7, #14]
 80017d4:	e018      	b.n	8001808 <cliToUpper+0x40>
  {
    str_ch = str[i];
 80017d6:	89fb      	ldrh	r3, [r7, #14]
 80017d8:	687a      	ldr	r2, [r7, #4]
 80017da:	4413      	add	r3, r2
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	737b      	strb	r3, [r7, #13]

    if (str_ch == 0)
 80017e0:	7b7b      	ldrb	r3, [r7, #13]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d014      	beq.n	8001810 <cliToUpper+0x48>
    {
      break;
    }

    if ((str_ch >= 'a') && (str_ch <= 'z'))
 80017e6:	7b7b      	ldrb	r3, [r7, #13]
 80017e8:	2b60      	cmp	r3, #96	; 0x60
 80017ea:	d905      	bls.n	80017f8 <cliToUpper+0x30>
 80017ec:	7b7b      	ldrb	r3, [r7, #13]
 80017ee:	2b7a      	cmp	r3, #122	; 0x7a
 80017f0:	d802      	bhi.n	80017f8 <cliToUpper+0x30>
    {
      str_ch = str_ch - 'a' + 'A';
 80017f2:	7b7b      	ldrb	r3, [r7, #13]
 80017f4:	3b20      	subs	r3, #32
 80017f6:	737b      	strb	r3, [r7, #13]
    }
    str[i] = str_ch;
 80017f8:	89fb      	ldrh	r3, [r7, #14]
 80017fa:	687a      	ldr	r2, [r7, #4]
 80017fc:	4413      	add	r3, r2
 80017fe:	7b7a      	ldrb	r2, [r7, #13]
 8001800:	701a      	strb	r2, [r3, #0]
  for (i=0; i<CLI_CMD_NAME_MAX; i++)
 8001802:	89fb      	ldrh	r3, [r7, #14]
 8001804:	3301      	adds	r3, #1
 8001806:	81fb      	strh	r3, [r7, #14]
 8001808:	89fb      	ldrh	r3, [r7, #14]
 800180a:	2b0f      	cmp	r3, #15
 800180c:	d9e3      	bls.n	80017d6 <cliToUpper+0xe>
 800180e:	e000      	b.n	8001812 <cliToUpper+0x4a>
      break;
 8001810:	bf00      	nop
  }

  if (i == CLI_CMD_NAME_MAX)
 8001812:	89fb      	ldrh	r3, [r7, #14]
 8001814:	2b10      	cmp	r3, #16
 8001816:	d105      	bne.n	8001824 <cliToUpper+0x5c>
  {
    str[i-1] = 0;
 8001818:	89fb      	ldrh	r3, [r7, #14]
 800181a:	3b01      	subs	r3, #1
 800181c:	687a      	ldr	r2, [r7, #4]
 800181e:	4413      	add	r3, r2
 8001820:	2200      	movs	r2, #0
 8001822:	701a      	strb	r2, [r3, #0]
  }
}
 8001824:	bf00      	nop
 8001826:	3714      	adds	r7, #20
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr

08001830 <cliArgsGetData>:

int32_t cliArgsGetData(uint8_t index)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b084      	sub	sp, #16
 8001834:	af00      	add	r7, sp, #0
 8001836:	4603      	mov	r3, r0
 8001838:	71fb      	strb	r3, [r7, #7]
  int32_t ret = 0;
 800183a:	2300      	movs	r3, #0
 800183c:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 800183e:	4b0f      	ldr	r3, [pc, #60]	; (800187c <cliArgsGetData+0x4c>)
 8001840:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 8001842:	79fb      	ldrb	r3, [r7, #7]
 8001844:	b29a      	uxth	r2, r3
 8001846:	68bb      	ldr	r3, [r7, #8]
 8001848:	f8b3 338c 	ldrh.w	r3, [r3, #908]	; 0x38c
 800184c:	429a      	cmp	r2, r3
 800184e:	d301      	bcc.n	8001854 <cliArgsGetData+0x24>
  {
    return 0;
 8001850:	2300      	movs	r3, #0
 8001852:	e00e      	b.n	8001872 <cliArgsGetData+0x42>
  }

  ret = (int32_t)strtoul((const char * ) p_cli->cmd_args.argv[index], (char **)NULL, (int) 0);
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	f8d3 2390 	ldr.w	r2, [r3, #912]	; 0x390
 800185a:	79fb      	ldrb	r3, [r7, #7]
 800185c:	009b      	lsls	r3, r3, #2
 800185e:	4413      	add	r3, r2
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	2200      	movs	r2, #0
 8001864:	2100      	movs	r1, #0
 8001866:	4618      	mov	r0, r3
 8001868:	f009 f8e2 	bl	800aa30 <strtoul>
 800186c:	4603      	mov	r3, r0
 800186e:	60fb      	str	r3, [r7, #12]

  return ret;
 8001870:	68fb      	ldr	r3, [r7, #12]
}
 8001872:	4618      	mov	r0, r3
 8001874:	3710      	adds	r7, #16
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	2000035c 	.word	0x2000035c

08001880 <cliArgsGetFloat>:

float cliArgsGetFloat(uint8_t index)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b084      	sub	sp, #16
 8001884:	af00      	add	r7, sp, #0
 8001886:	4603      	mov	r3, r0
 8001888:	71fb      	strb	r3, [r7, #7]
  float ret = 0.0;
 800188a:	f04f 0300 	mov.w	r3, #0
 800188e:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 8001890:	4b10      	ldr	r3, [pc, #64]	; (80018d4 <cliArgsGetFloat+0x54>)
 8001892:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 8001894:	79fb      	ldrb	r3, [r7, #7]
 8001896:	b29a      	uxth	r2, r3
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	f8b3 338c 	ldrh.w	r3, [r3, #908]	; 0x38c
 800189e:	429a      	cmp	r2, r3
 80018a0:	d302      	bcc.n	80018a8 <cliArgsGetFloat+0x28>
  {
    return 0;
 80018a2:	f04f 0300 	mov.w	r3, #0
 80018a6:	e00d      	b.n	80018c4 <cliArgsGetFloat+0x44>
  }

  ret = (float)strtof((const char * ) p_cli->cmd_args.argv[index], (char **)NULL);
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	f8d3 2390 	ldr.w	r2, [r3, #912]	; 0x390
 80018ae:	79fb      	ldrb	r3, [r7, #7]
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	4413      	add	r3, r2
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	2100      	movs	r1, #0
 80018b8:	4618      	mov	r0, r3
 80018ba:	f008 ffeb 	bl	800a894 <strtof>
 80018be:	ed87 0a03 	vstr	s0, [r7, #12]

  return ret;
 80018c2:	68fb      	ldr	r3, [r7, #12]
}
 80018c4:	ee07 3a90 	vmov	s15, r3
 80018c8:	eeb0 0a67 	vmov.f32	s0, s15
 80018cc:	3710      	adds	r7, #16
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	2000035c 	.word	0x2000035c

080018d8 <cliArgsGetStr>:

char *cliArgsGetStr(uint8_t index)
{
 80018d8:	b480      	push	{r7}
 80018da:	b085      	sub	sp, #20
 80018dc:	af00      	add	r7, sp, #0
 80018de:	4603      	mov	r3, r0
 80018e0:	71fb      	strb	r3, [r7, #7]
  char *ret = NULL;
 80018e2:	2300      	movs	r3, #0
 80018e4:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 80018e6:	4b0d      	ldr	r3, [pc, #52]	; (800191c <cliArgsGetStr+0x44>)
 80018e8:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 80018ea:	79fb      	ldrb	r3, [r7, #7]
 80018ec:	b29a      	uxth	r2, r3
 80018ee:	68bb      	ldr	r3, [r7, #8]
 80018f0:	f8b3 338c 	ldrh.w	r3, [r3, #908]	; 0x38c
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d301      	bcc.n	80018fc <cliArgsGetStr+0x24>
  {
    return 0;
 80018f8:	2300      	movs	r3, #0
 80018fa:	e008      	b.n	800190e <cliArgsGetStr+0x36>
  }

  ret = p_cli->cmd_args.argv[index];
 80018fc:	68bb      	ldr	r3, [r7, #8]
 80018fe:	f8d3 2390 	ldr.w	r2, [r3, #912]	; 0x390
 8001902:	79fb      	ldrb	r3, [r7, #7]
 8001904:	009b      	lsls	r3, r3, #2
 8001906:	4413      	add	r3, r2
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	60fb      	str	r3, [r7, #12]

  return ret;
 800190c:	68fb      	ldr	r3, [r7, #12]
}
 800190e:	4618      	mov	r0, r3
 8001910:	3714      	adds	r7, #20
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	2000035c 	.word	0x2000035c

08001920 <cliArgsIsStr>:

bool cliArgsIsStr(uint8_t index, char *p_str)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b084      	sub	sp, #16
 8001924:	af00      	add	r7, sp, #0
 8001926:	4603      	mov	r3, r0
 8001928:	6039      	str	r1, [r7, #0]
 800192a:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 800192c:	2300      	movs	r3, #0
 800192e:	73fb      	strb	r3, [r7, #15]
  cli_t *p_cli = &cli_node;
 8001930:	4b0f      	ldr	r3, [pc, #60]	; (8001970 <cliArgsIsStr+0x50>)
 8001932:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 8001934:	79fb      	ldrb	r3, [r7, #7]
 8001936:	b29a      	uxth	r2, r3
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	f8b3 338c 	ldrh.w	r3, [r3, #908]	; 0x38c
 800193e:	429a      	cmp	r2, r3
 8001940:	d301      	bcc.n	8001946 <cliArgsIsStr+0x26>
  {
    return 0;
 8001942:	2300      	movs	r3, #0
 8001944:	e010      	b.n	8001968 <cliArgsIsStr+0x48>
  }

  if(strcmp(p_str, p_cli->cmd_args.argv[index]) == 0)
 8001946:	68bb      	ldr	r3, [r7, #8]
 8001948:	f8d3 2390 	ldr.w	r2, [r3, #912]	; 0x390
 800194c:	79fb      	ldrb	r3, [r7, #7]
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	4413      	add	r3, r2
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4619      	mov	r1, r3
 8001956:	6838      	ldr	r0, [r7, #0]
 8001958:	f7fe fc5a 	bl	8000210 <strcmp>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d101      	bne.n	8001966 <cliArgsIsStr+0x46>
  {
    ret = true;
 8001962:	2301      	movs	r3, #1
 8001964:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8001966:	7bfb      	ldrb	r3, [r7, #15]
}
 8001968:	4618      	mov	r0, r3
 800196a:	3710      	adds	r7, #16
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	2000035c 	.word	0x2000035c

08001974 <cliKeepLoop>:

bool cliKeepLoop(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
  cli_t *p_cli = &cli_node;
 800197a:	4b08      	ldr	r3, [pc, #32]	; (800199c <cliKeepLoop+0x28>)
 800197c:	607b      	str	r3, [r7, #4]


  if (uartAvailable(p_cli->ch) == 0)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	4618      	mov	r0, r3
 8001984:	f000 fb18 	bl	8001fb8 <uartAvailable>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d101      	bne.n	8001992 <cliKeepLoop+0x1e>
  {
    return true;
 800198e:	2301      	movs	r3, #1
 8001990:	e000      	b.n	8001994 <cliKeepLoop+0x20>
  }
  else
  {
    return false;
 8001992:	2300      	movs	r3, #0
  }
}
 8001994:	4618      	mov	r0, r3
 8001996:	3708      	adds	r7, #8
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	2000035c 	.word	0x2000035c

080019a0 <cliAdd>:

bool cliAdd(const char *cmd_str, void (*p_func)(cli_args_t *))
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b086      	sub	sp, #24
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
 80019a8:	6039      	str	r1, [r7, #0]
  bool ret = true;
 80019aa:	2301      	movs	r3, #1
 80019ac:	75fb      	strb	r3, [r7, #23]
  cli_t *p_cli = &cli_node;
 80019ae:	4b20      	ldr	r3, [pc, #128]	; (8001a30 <cliAdd+0x90>)
 80019b0:	613b      	str	r3, [r7, #16]
  uint16_t index;

  if (p_cli->cmd_count >= CLI_CMD_LIST_MAX)
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	f8b3 3248 	ldrh.w	r3, [r3, #584]	; 0x248
 80019b8:	2b0f      	cmp	r3, #15
 80019ba:	d901      	bls.n	80019c0 <cliAdd+0x20>
  {
    return false;
 80019bc:	2300      	movs	r3, #0
 80019be:	e032      	b.n	8001a26 <cliAdd+0x86>
  }

  index = p_cli->cmd_count;
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	f8b3 3248 	ldrh.w	r3, [r3, #584]	; 0x248
 80019c6:	81fb      	strh	r3, [r7, #14]

  strcpy(p_cli->cmd_list[index].cmd_str, cmd_str);
 80019c8:	89fa      	ldrh	r2, [r7, #14]
 80019ca:	4613      	mov	r3, r2
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	4413      	add	r3, r2
 80019d0:	009b      	lsls	r3, r3, #2
 80019d2:	f503 7312 	add.w	r3, r3, #584	; 0x248
 80019d6:	693a      	ldr	r2, [r7, #16]
 80019d8:	4413      	add	r3, r2
 80019da:	3304      	adds	r3, #4
 80019dc:	6879      	ldr	r1, [r7, #4]
 80019de:	4618      	mov	r0, r3
 80019e0:	f008 f92e 	bl	8009c40 <strcpy>
  p_cli->cmd_list[index].cmd_func = p_func;
 80019e4:	89fa      	ldrh	r2, [r7, #14]
 80019e6:	6939      	ldr	r1, [r7, #16]
 80019e8:	4613      	mov	r3, r2
 80019ea:	009b      	lsls	r3, r3, #2
 80019ec:	4413      	add	r3, r2
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	440b      	add	r3, r1
 80019f2:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 80019f6:	683a      	ldr	r2, [r7, #0]
 80019f8:	601a      	str	r2, [r3, #0]

  cliToUpper(p_cli->cmd_list[index].cmd_str);
 80019fa:	89fa      	ldrh	r2, [r7, #14]
 80019fc:	4613      	mov	r3, r2
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	4413      	add	r3, r2
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8001a08:	693a      	ldr	r2, [r7, #16]
 8001a0a:	4413      	add	r3, r2
 8001a0c:	3304      	adds	r3, #4
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f7ff feda 	bl	80017c8 <cliToUpper>

  p_cli->cmd_count++;
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	f8b3 3248 	ldrh.w	r3, [r3, #584]	; 0x248
 8001a1a:	3301      	adds	r3, #1
 8001a1c:	b29a      	uxth	r2, r3
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	f8a3 2248 	strh.w	r2, [r3, #584]	; 0x248

  return ret;
 8001a24:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3718      	adds	r7, #24
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	2000035c 	.word	0x2000035c

08001a34 <cliShowList>:

void cliShowList(cli_args_t *args)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b084      	sub	sp, #16
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  cli_t *p_cli = &cli_node;
 8001a3c:	4b15      	ldr	r3, [pc, #84]	; (8001a94 <cliShowList+0x60>)
 8001a3e:	60bb      	str	r3, [r7, #8]


  cliPrintf("\r\n");
 8001a40:	4815      	ldr	r0, [pc, #84]	; (8001a98 <cliShowList+0x64>)
 8001a42:	f7ff fe9d 	bl	8001780 <cliPrintf>
  cliPrintf("---------- cmd list ---------\r\n");
 8001a46:	4815      	ldr	r0, [pc, #84]	; (8001a9c <cliShowList+0x68>)
 8001a48:	f7ff fe9a 	bl	8001780 <cliPrintf>

  for (int i=0; i<p_cli->cmd_count; i++)
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	60fb      	str	r3, [r7, #12]
 8001a50:	e012      	b.n	8001a78 <cliShowList+0x44>
  {
    cliPrintf(p_cli->cmd_list[i].cmd_str);
 8001a52:	68fa      	ldr	r2, [r7, #12]
 8001a54:	4613      	mov	r3, r2
 8001a56:	009b      	lsls	r3, r3, #2
 8001a58:	4413      	add	r3, r2
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8001a60:	68ba      	ldr	r2, [r7, #8]
 8001a62:	4413      	add	r3, r2
 8001a64:	3304      	adds	r3, #4
 8001a66:	4618      	mov	r0, r3
 8001a68:	f7ff fe8a 	bl	8001780 <cliPrintf>
    cliPrintf("\r\n");
 8001a6c:	480a      	ldr	r0, [pc, #40]	; (8001a98 <cliShowList+0x64>)
 8001a6e:	f7ff fe87 	bl	8001780 <cliPrintf>
  for (int i=0; i<p_cli->cmd_count; i++)
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	3301      	adds	r3, #1
 8001a76:	60fb      	str	r3, [r7, #12]
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	f8b3 3248 	ldrh.w	r3, [r3, #584]	; 0x248
 8001a7e:	461a      	mov	r2, r3
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	4293      	cmp	r3, r2
 8001a84:	dbe5      	blt.n	8001a52 <cliShowList+0x1e>
  }

  cliPrintf("-----------------------------\r\n");
 8001a86:	4806      	ldr	r0, [pc, #24]	; (8001aa0 <cliShowList+0x6c>)
 8001a88:	f7ff fe7a 	bl	8001780 <cliPrintf>
}
 8001a8c:	bf00      	nop
 8001a8e:	3710      	adds	r7, #16
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	2000035c 	.word	0x2000035c
 8001a98:	0800ce98 	.word	0x0800ce98
 8001a9c:	0800ce9c 	.word	0x0800ce9c
 8001aa0:	0800cebc 	.word	0x0800cebc

08001aa4 <flashInit>:

static bool     flashInSector(uint8_t sector_num, uint32_t addr, uint32_t length);
static uint32_t flashGetSector(uint32_t addr);

bool flashInit(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  return true;
 8001aa8:	2301      	movs	r3, #1
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr

08001ab4 <flashErase>:

bool flashErase(uint32_t addr, uint32_t length)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b08c      	sub	sp, #48	; 0x30
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
 8001abc:	6039      	str	r1, [r7, #0]
  bool ret = false;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  HAL_StatusTypeDef status;
  FLASH_EraseInitTypeDef init;
  uint32_t page_error;

  int16_t start_sector_num = -1;
 8001ac4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ac8:	85bb      	strh	r3, [r7, #44]	; 0x2c
  uint32_t end_sector_num = 0;
 8001aca:	2300      	movs	r3, #0
 8001acc:	623b      	str	r3, [r7, #32]
  uint32_t sector_count = 0;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	62bb      	str	r3, [r7, #40]	; 0x28


  for(int i=0; i<FLASH_SECTOR_MAX; i++)
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	627b      	str	r3, [r7, #36]	; 0x24
 8001ad6:	e015      	b.n	8001b04 <flashErase+0x50>
  {
    if(flashInSector(i, addr, length) == true)
 8001ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ada:	b2db      	uxtb	r3, r3
 8001adc:	683a      	ldr	r2, [r7, #0]
 8001ade:	6879      	ldr	r1, [r7, #4]
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f000 f8a5 	bl	8001c30 <flashInSector>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d008      	beq.n	8001afe <flashErase+0x4a>
    {
      if(start_sector_num < 0)
 8001aec:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	da01      	bge.n	8001af8 <flashErase+0x44>
      {
        start_sector_num = i;
 8001af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af6:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }
      sector_count++;
 8001af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001afa:	3301      	adds	r3, #1
 8001afc:	62bb      	str	r3, [r7, #40]	; 0x28
  for(int i=0; i<FLASH_SECTOR_MAX; i++)
 8001afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b00:	3301      	adds	r3, #1
 8001b02:	627b      	str	r3, [r7, #36]	; 0x24
 8001b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b06:	2b07      	cmp	r3, #7
 8001b08:	dde6      	ble.n	8001ad8 <flashErase+0x24>
    }
  }

  start_sector_num = flashGetSector(flash_tbl[start_sector_num].addr);
 8001b0a:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8001b0e:	4a1c      	ldr	r2, [pc, #112]	; (8001b80 <flashErase+0xcc>)
 8001b10:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001b14:	4618      	mov	r0, r3
 8001b16:	f000 f8e3 	bl	8001ce0 <flashGetSector>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	85bb      	strh	r3, [r7, #44]	; 0x2c
  end_sector_num = flashGetSector(flash_tbl[sector_count].addr + length - 1);
 8001b1e:	4a18      	ldr	r2, [pc, #96]	; (8001b80 <flashErase+0xcc>)
 8001b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b22:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	4413      	add	r3, r2
 8001b2a:	3b01      	subs	r3, #1
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f000 f8d7 	bl	8001ce0 <flashGetSector>
 8001b32:	6238      	str	r0, [r7, #32]

  if(sector_count > 0)
 8001b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d01c      	beq.n	8001b74 <flashErase+0xc0>
  {
    HAL_FLASH_Unlock();
 8001b3a:	f000 fcf1 	bl	8002520 <HAL_FLASH_Unlock>

    init.TypeErase     = FLASH_TYPEERASE_SECTORS;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	60fb      	str	r3, [r7, #12]
    init.Sector        = start_sector_num;
 8001b42:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8001b46:	613b      	str	r3, [r7, #16]
    init.NbSectors     = end_sector_num;
 8001b48:	6a3b      	ldr	r3, [r7, #32]
 8001b4a:	617b      	str	r3, [r7, #20]
    init.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 8001b4c:	2302      	movs	r3, #2
 8001b4e:	61bb      	str	r3, [r7, #24]

    status = HAL_FLASHEx_Erase(&init, &page_error);
 8001b50:	f107 0208 	add.w	r2, r7, #8
 8001b54:	f107 030c 	add.w	r3, r7, #12
 8001b58:	4611      	mov	r1, r2
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f000 fe42 	bl	80027e4 <HAL_FLASHEx_Erase>
 8001b60:	4603      	mov	r3, r0
 8001b62:	77fb      	strb	r3, [r7, #31]

    if(status == HAL_OK)
 8001b64:	7ffb      	ldrb	r3, [r7, #31]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d102      	bne.n	8001b70 <flashErase+0xbc>
    {
      ret = true;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    HAL_FLASH_Lock();
 8001b70:	f000 fcf8 	bl	8002564 <HAL_FLASH_Lock>
  }

  return ret;
 8001b74:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3730      	adds	r7, #48	; 0x30
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	20000004 	.word	0x20000004

08001b84 <flashWrite>:

bool flashWrite(uint32_t addr, uint8_t *p_data, uint32_t length)
{
 8001b84:	b5b0      	push	{r4, r5, r7, lr}
 8001b86:	b088      	sub	sp, #32
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	60f8      	str	r0, [r7, #12]
 8001b8c:	60b9      	str	r1, [r7, #8]
 8001b8e:	607a      	str	r2, [r7, #4]
  bool ret = true;
 8001b90:	2301      	movs	r3, #1
 8001b92:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status;

  HAL_FLASH_Unlock();
 8001b94:	f000 fcc4 	bl	8002520 <HAL_FLASH_Unlock>

  for(int i=0; i<length; i++)
 8001b98:	2300      	movs	r3, #0
 8001b9a:	61bb      	str	r3, [r7, #24]
 8001b9c:	e01a      	b.n	8001bd4 <flashWrite+0x50>
  {
    status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, addr + i, (uint64_t)p_data[i]);
 8001b9e:	69ba      	ldr	r2, [r7, #24]
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	18d1      	adds	r1, r2, r3
 8001ba4:	69bb      	ldr	r3, [r7, #24]
 8001ba6:	68ba      	ldr	r2, [r7, #8]
 8001ba8:	4413      	add	r3, r2
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	2200      	movs	r2, #0
 8001bb0:	461c      	mov	r4, r3
 8001bb2:	4615      	mov	r5, r2
 8001bb4:	4622      	mov	r2, r4
 8001bb6:	462b      	mov	r3, r5
 8001bb8:	2000      	movs	r0, #0
 8001bba:	f000 fc55 	bl	8002468 <HAL_FLASH_Program>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	75fb      	strb	r3, [r7, #23]

    if(status != HAL_OK)
 8001bc2:	7dfb      	ldrb	r3, [r7, #23]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d002      	beq.n	8001bce <flashWrite+0x4a>
    {
      ret = false;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	77fb      	strb	r3, [r7, #31]
      break;
 8001bcc:	e006      	b.n	8001bdc <flashWrite+0x58>
  for(int i=0; i<length; i++)
 8001bce:	69bb      	ldr	r3, [r7, #24]
 8001bd0:	3301      	adds	r3, #1
 8001bd2:	61bb      	str	r3, [r7, #24]
 8001bd4:	69bb      	ldr	r3, [r7, #24]
 8001bd6:	687a      	ldr	r2, [r7, #4]
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	d8e0      	bhi.n	8001b9e <flashWrite+0x1a>
    }
  }

  HAL_FLASH_Lock();
 8001bdc:	f000 fcc2 	bl	8002564 <HAL_FLASH_Lock>

  return ret;
 8001be0:	7ffb      	ldrb	r3, [r7, #31]
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3720      	adds	r7, #32
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bdb0      	pop	{r4, r5, r7, pc}

08001bea <flashRead>:

bool flashRead(uint32_t addr, uint8_t *p_data, uint32_t length)
{
 8001bea:	b480      	push	{r7}
 8001bec:	b089      	sub	sp, #36	; 0x24
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	60f8      	str	r0, [r7, #12]
 8001bf2:	60b9      	str	r1, [r7, #8]
 8001bf4:	607a      	str	r2, [r7, #4]
  bool ret = true;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	76fb      	strb	r3, [r7, #27]
  uint8_t *p_byte = (uint8_t *)addr;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	617b      	str	r3, [r7, #20]

  for(int i=0; i<length; i++)
 8001bfe:	2300      	movs	r3, #0
 8001c00:	61fb      	str	r3, [r7, #28]
 8001c02:	e00a      	b.n	8001c1a <flashRead+0x30>
  {
    p_data[i] = p_byte[i];
 8001c04:	69fb      	ldr	r3, [r7, #28]
 8001c06:	697a      	ldr	r2, [r7, #20]
 8001c08:	441a      	add	r2, r3
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	68b9      	ldr	r1, [r7, #8]
 8001c0e:	440b      	add	r3, r1
 8001c10:	7812      	ldrb	r2, [r2, #0]
 8001c12:	701a      	strb	r2, [r3, #0]
  for(int i=0; i<length; i++)
 8001c14:	69fb      	ldr	r3, [r7, #28]
 8001c16:	3301      	adds	r3, #1
 8001c18:	61fb      	str	r3, [r7, #28]
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	687a      	ldr	r2, [r7, #4]
 8001c1e:	429a      	cmp	r2, r3
 8001c20:	d8f0      	bhi.n	8001c04 <flashRead+0x1a>
  }

  return ret;
 8001c22:	7efb      	ldrb	r3, [r7, #27]
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	3724      	adds	r7, #36	; 0x24
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr

08001c30 <flashInSector>:

bool flashInSector(uint8_t sector_num, uint32_t addr, uint32_t length)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b08b      	sub	sp, #44	; 0x2c
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	4603      	mov	r3, r0
 8001c38:	60b9      	str	r1, [r7, #8]
 8001c3a:	607a      	str	r2, [r7, #4]
 8001c3c:	73fb      	strb	r3, [r7, #15]
  bool ret = false;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t sector_start;
  uint32_t sector_end;
  uint32_t flash_start;
  uint32_t flash_end;

  sector_start = flash_tbl[sector_num].addr;
 8001c44:	7bfb      	ldrb	r3, [r7, #15]
 8001c46:	4a25      	ldr	r2, [pc, #148]	; (8001cdc <flashInSector+0xac>)
 8001c48:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001c4c:	623b      	str	r3, [r7, #32]
  sector_end   = flash_tbl[sector_num].addr + flash_tbl[sector_num].length - 1;
 8001c4e:	7bfb      	ldrb	r3, [r7, #15]
 8001c50:	4a22      	ldr	r2, [pc, #136]	; (8001cdc <flashInSector+0xac>)
 8001c52:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8001c56:	7bfb      	ldrb	r3, [r7, #15]
 8001c58:	4920      	ldr	r1, [pc, #128]	; (8001cdc <flashInSector+0xac>)
 8001c5a:	00db      	lsls	r3, r3, #3
 8001c5c:	440b      	add	r3, r1
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	4413      	add	r3, r2
 8001c62:	3b01      	subs	r3, #1
 8001c64:	61fb      	str	r3, [r7, #28]
  flash_start  = addr;
 8001c66:	68bb      	ldr	r3, [r7, #8]
 8001c68:	61bb      	str	r3, [r7, #24]
  flash_end    = addr + length - 1;
 8001c6a:	68ba      	ldr	r2, [r7, #8]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	4413      	add	r3, r2
 8001c70:	3b01      	subs	r3, #1
 8001c72:	617b      	str	r3, [r7, #20]


  if(sector_start >= flash_start && sector_start <= flash_end)
 8001c74:	6a3a      	ldr	r2, [r7, #32]
 8001c76:	69bb      	ldr	r3, [r7, #24]
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d306      	bcc.n	8001c8a <flashInSector+0x5a>
 8001c7c:	6a3a      	ldr	r2, [r7, #32]
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d802      	bhi.n	8001c8a <flashInSector+0x5a>
  {
    ret = true;
 8001c84:	2301      	movs	r3, #1
 8001c86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if(sector_end >= flash_start && sector_end <= flash_end)
 8001c8a:	69fa      	ldr	r2, [r7, #28]
 8001c8c:	69bb      	ldr	r3, [r7, #24]
 8001c8e:	429a      	cmp	r2, r3
 8001c90:	d306      	bcc.n	8001ca0 <flashInSector+0x70>
 8001c92:	69fa      	ldr	r2, [r7, #28]
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	429a      	cmp	r2, r3
 8001c98:	d802      	bhi.n	8001ca0 <flashInSector+0x70>
  {
    ret = true;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if(flash_start >= sector_start && flash_start <= sector_end)
 8001ca0:	69ba      	ldr	r2, [r7, #24]
 8001ca2:	6a3b      	ldr	r3, [r7, #32]
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d306      	bcc.n	8001cb6 <flashInSector+0x86>
 8001ca8:	69ba      	ldr	r2, [r7, #24]
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	429a      	cmp	r2, r3
 8001cae:	d802      	bhi.n	8001cb6 <flashInSector+0x86>
  {
    ret = true;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if(flash_end >= sector_start && flash_end <= sector_end)
 8001cb6:	697a      	ldr	r2, [r7, #20]
 8001cb8:	6a3b      	ldr	r3, [r7, #32]
 8001cba:	429a      	cmp	r2, r3
 8001cbc:	d306      	bcc.n	8001ccc <flashInSector+0x9c>
 8001cbe:	697a      	ldr	r2, [r7, #20]
 8001cc0:	69fb      	ldr	r3, [r7, #28]
 8001cc2:	429a      	cmp	r2, r3
 8001cc4:	d802      	bhi.n	8001ccc <flashInSector+0x9c>
  {
    ret = true;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return ret;
 8001ccc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	372c      	adds	r7, #44	; 0x2c
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr
 8001cdc:	20000004 	.word	0x20000004

08001ce0 <flashGetSector>:


uint32_t flashGetSector(uint32_t addr)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b085      	sub	sp, #20
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  uint32_t sector = 0;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	60fb      	str	r3, [r7, #12]

  if((addr < flash_tbl[1].addr) && (addr >= flash_tbl[0].addr))
 8001cec:	4b31      	ldr	r3, [pc, #196]	; (8001db4 <flashGetSector+0xd4>)
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	687a      	ldr	r2, [r7, #4]
 8001cf2:	429a      	cmp	r2, r3
 8001cf4:	d207      	bcs.n	8001d06 <flashGetSector+0x26>
 8001cf6:	4b2f      	ldr	r3, [pc, #188]	; (8001db4 <flashGetSector+0xd4>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	687a      	ldr	r2, [r7, #4]
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d302      	bcc.n	8001d06 <flashGetSector+0x26>
  {
    sector = FLASH_SECTOR_0;
 8001d00:	2300      	movs	r3, #0
 8001d02:	60fb      	str	r3, [r7, #12]
 8001d04:	e04f      	b.n	8001da6 <flashGetSector+0xc6>
  }
  else if((addr < flash_tbl[2].addr) && (addr >= flash_tbl[1].addr))
 8001d06:	4b2b      	ldr	r3, [pc, #172]	; (8001db4 <flashGetSector+0xd4>)
 8001d08:	691b      	ldr	r3, [r3, #16]
 8001d0a:	687a      	ldr	r2, [r7, #4]
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d207      	bcs.n	8001d20 <flashGetSector+0x40>
 8001d10:	4b28      	ldr	r3, [pc, #160]	; (8001db4 <flashGetSector+0xd4>)
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	687a      	ldr	r2, [r7, #4]
 8001d16:	429a      	cmp	r2, r3
 8001d18:	d302      	bcc.n	8001d20 <flashGetSector+0x40>
  {
    sector = FLASH_SECTOR_1;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	60fb      	str	r3, [r7, #12]
 8001d1e:	e042      	b.n	8001da6 <flashGetSector+0xc6>
  }
  else if((addr < flash_tbl[3].addr) && (addr >= flash_tbl[2].addr))
 8001d20:	4b24      	ldr	r3, [pc, #144]	; (8001db4 <flashGetSector+0xd4>)
 8001d22:	699b      	ldr	r3, [r3, #24]
 8001d24:	687a      	ldr	r2, [r7, #4]
 8001d26:	429a      	cmp	r2, r3
 8001d28:	d207      	bcs.n	8001d3a <flashGetSector+0x5a>
 8001d2a:	4b22      	ldr	r3, [pc, #136]	; (8001db4 <flashGetSector+0xd4>)
 8001d2c:	691b      	ldr	r3, [r3, #16]
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d302      	bcc.n	8001d3a <flashGetSector+0x5a>
  {
    sector = FLASH_SECTOR_2;
 8001d34:	2302      	movs	r3, #2
 8001d36:	60fb      	str	r3, [r7, #12]
 8001d38:	e035      	b.n	8001da6 <flashGetSector+0xc6>
  }
  else if((addr < flash_tbl[4].addr) && (addr >= flash_tbl[3].addr))
 8001d3a:	4b1e      	ldr	r3, [pc, #120]	; (8001db4 <flashGetSector+0xd4>)
 8001d3c:	6a1b      	ldr	r3, [r3, #32]
 8001d3e:	687a      	ldr	r2, [r7, #4]
 8001d40:	429a      	cmp	r2, r3
 8001d42:	d207      	bcs.n	8001d54 <flashGetSector+0x74>
 8001d44:	4b1b      	ldr	r3, [pc, #108]	; (8001db4 <flashGetSector+0xd4>)
 8001d46:	699b      	ldr	r3, [r3, #24]
 8001d48:	687a      	ldr	r2, [r7, #4]
 8001d4a:	429a      	cmp	r2, r3
 8001d4c:	d302      	bcc.n	8001d54 <flashGetSector+0x74>
  {
    sector = FLASH_SECTOR_3;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	60fb      	str	r3, [r7, #12]
 8001d52:	e028      	b.n	8001da6 <flashGetSector+0xc6>
  }
  else if((addr < flash_tbl[5].addr) && (addr >= flash_tbl[4].addr))
 8001d54:	4b17      	ldr	r3, [pc, #92]	; (8001db4 <flashGetSector+0xd4>)
 8001d56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d58:	687a      	ldr	r2, [r7, #4]
 8001d5a:	429a      	cmp	r2, r3
 8001d5c:	d207      	bcs.n	8001d6e <flashGetSector+0x8e>
 8001d5e:	4b15      	ldr	r3, [pc, #84]	; (8001db4 <flashGetSector+0xd4>)
 8001d60:	6a1b      	ldr	r3, [r3, #32]
 8001d62:	687a      	ldr	r2, [r7, #4]
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d302      	bcc.n	8001d6e <flashGetSector+0x8e>
  {
    sector = FLASH_SECTOR_4;
 8001d68:	2304      	movs	r3, #4
 8001d6a:	60fb      	str	r3, [r7, #12]
 8001d6c:	e01b      	b.n	8001da6 <flashGetSector+0xc6>
  }
  else if((addr < flash_tbl[6].addr) && (addr >= flash_tbl[5].addr))
 8001d6e:	4b11      	ldr	r3, [pc, #68]	; (8001db4 <flashGetSector+0xd4>)
 8001d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d72:	687a      	ldr	r2, [r7, #4]
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d207      	bcs.n	8001d88 <flashGetSector+0xa8>
 8001d78:	4b0e      	ldr	r3, [pc, #56]	; (8001db4 <flashGetSector+0xd4>)
 8001d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d7c:	687a      	ldr	r2, [r7, #4]
 8001d7e:	429a      	cmp	r2, r3
 8001d80:	d302      	bcc.n	8001d88 <flashGetSector+0xa8>
  {
    sector = FLASH_SECTOR_5;
 8001d82:	2305      	movs	r3, #5
 8001d84:	60fb      	str	r3, [r7, #12]
 8001d86:	e00e      	b.n	8001da6 <flashGetSector+0xc6>
  }
  else if((addr < flash_tbl[7].addr) && (addr >= flash_tbl[6].addr))
 8001d88:	4b0a      	ldr	r3, [pc, #40]	; (8001db4 <flashGetSector+0xd4>)
 8001d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d8c:	687a      	ldr	r2, [r7, #4]
 8001d8e:	429a      	cmp	r2, r3
 8001d90:	d207      	bcs.n	8001da2 <flashGetSector+0xc2>
 8001d92:	4b08      	ldr	r3, [pc, #32]	; (8001db4 <flashGetSector+0xd4>)
 8001d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d96:	687a      	ldr	r2, [r7, #4]
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	d302      	bcc.n	8001da2 <flashGetSector+0xc2>
  {
    sector = FLASH_SECTOR_6;
 8001d9c:	2306      	movs	r3, #6
 8001d9e:	60fb      	str	r3, [r7, #12]
 8001da0:	e001      	b.n	8001da6 <flashGetSector+0xc6>
  }
  else /* (Address < FLASH_END_ADDR) && (Address >= ADDR_FLASH_SECTOR_7) */
  {
    sector = FLASH_SECTOR_7;
 8001da2:	2307      	movs	r3, #7
 8001da4:	60fb      	str	r3, [r7, #12]
  }
  return sector;
 8001da6:	68fb      	ldr	r3, [r7, #12]
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	3714      	adds	r7, #20
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr
 8001db4:	20000004 	.word	0x20000004

08001db8 <ledInit>:
		{GPIOK, GPIO_PIN_3, GPIO_PIN_RESET, GPIO_PIN_SET},
	};


bool ledInit(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b088      	sub	sp, #32
 8001dbc:	af00      	add	r7, sp, #0
	bool ret = true;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	76fb      	strb	r3, [r7, #27]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dc2:	1d3b      	adds	r3, r7, #4
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	601a      	str	r2, [r3, #0]
 8001dc8:	605a      	str	r2, [r3, #4]
 8001dca:	609a      	str	r2, [r3, #8]
 8001dcc:	60da      	str	r2, [r3, #12]
 8001dce:	611a      	str	r2, [r3, #16]

	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	613b      	str	r3, [r7, #16]

	for(int i=0; i<LED_MAX_CH; i++)
 8001ddc:	2300      	movs	r3, #0
 8001dde:	61fb      	str	r3, [r7, #28]
 8001de0:	e016      	b.n	8001e10 <ledInit+0x58>
	{
		GPIO_InitStruct.Pin = led_tbl[i].pin;
 8001de2:	4a11      	ldr	r2, [pc, #68]	; (8001e28 <ledInit+0x70>)
 8001de4:	69fb      	ldr	r3, [r7, #28]
 8001de6:	00db      	lsls	r3, r3, #3
 8001de8:	4413      	add	r3, r2
 8001dea:	889b      	ldrh	r3, [r3, #4]
 8001dec:	607b      	str	r3, [r7, #4]
		HAL_GPIO_Init(led_tbl[i].port, &GPIO_InitStruct);
 8001dee:	4a0e      	ldr	r2, [pc, #56]	; (8001e28 <ledInit+0x70>)
 8001df0:	69fb      	ldr	r3, [r7, #28]
 8001df2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001df6:	1d3a      	adds	r2, r7, #4
 8001df8:	4611      	mov	r1, r2
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f000 fdd0 	bl	80029a0 <HAL_GPIO_Init>

		ledOff(i);
 8001e00:	69fb      	ldr	r3, [r7, #28]
 8001e02:	b2db      	uxtb	r3, r3
 8001e04:	4618      	mov	r0, r3
 8001e06:	f000 f815 	bl	8001e34 <ledOff>
	for(int i=0; i<LED_MAX_CH; i++)
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	3301      	adds	r3, #1
 8001e0e:	61fb      	str	r3, [r7, #28]
 8001e10:	69fb      	ldr	r3, [r7, #28]
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	dde5      	ble.n	8001de2 <ledInit+0x2a>
	}

#ifdef _USE_HW_CLI
	cliAdd("led", cliLed);
 8001e16:	4905      	ldr	r1, [pc, #20]	; (8001e2c <ledInit+0x74>)
 8001e18:	4805      	ldr	r0, [pc, #20]	; (8001e30 <ledInit+0x78>)
 8001e1a:	f7ff fdc1 	bl	80019a0 <cliAdd>
#endif


	return ret;
 8001e1e:	7efb      	ldrb	r3, [r7, #27]
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	3720      	adds	r7, #32
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}
 8001e28:	20000044 	.word	0x20000044
 8001e2c:	08001ead 	.word	0x08001ead
 8001e30:	0800cee4 	.word	0x0800cee4

08001e34 <ledOff>:

	HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].on_state);
}

void ledOff(uint8_t ch)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	71fb      	strb	r3, [r7, #7]
	if(ch >= LED_MAX_CH)		return;
 8001e3e:	79fb      	ldrb	r3, [r7, #7]
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d811      	bhi.n	8001e68 <ledOff+0x34>

	HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].off_state);
 8001e44:	79fb      	ldrb	r3, [r7, #7]
 8001e46:	4a0a      	ldr	r2, [pc, #40]	; (8001e70 <ledOff+0x3c>)
 8001e48:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001e4c:	79fb      	ldrb	r3, [r7, #7]
 8001e4e:	4a08      	ldr	r2, [pc, #32]	; (8001e70 <ledOff+0x3c>)
 8001e50:	00db      	lsls	r3, r3, #3
 8001e52:	4413      	add	r3, r2
 8001e54:	8899      	ldrh	r1, [r3, #4]
 8001e56:	79fb      	ldrb	r3, [r7, #7]
 8001e58:	4a05      	ldr	r2, [pc, #20]	; (8001e70 <ledOff+0x3c>)
 8001e5a:	00db      	lsls	r3, r3, #3
 8001e5c:	4413      	add	r3, r2
 8001e5e:	79db      	ldrb	r3, [r3, #7]
 8001e60:	461a      	mov	r2, r3
 8001e62:	f000 ff49 	bl	8002cf8 <HAL_GPIO_WritePin>
 8001e66:	e000      	b.n	8001e6a <ledOff+0x36>
	if(ch >= LED_MAX_CH)		return;
 8001e68:	bf00      	nop
}
 8001e6a:	3708      	adds	r7, #8
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	20000044 	.word	0x20000044

08001e74 <ledToggle>:
	}
}


void ledToggle(uint8_t ch)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b082      	sub	sp, #8
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	71fb      	strb	r3, [r7, #7]
	if(ch >= LED_MAX_CH)		return;
 8001e7e:	79fb      	ldrb	r3, [r7, #7]
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d80d      	bhi.n	8001ea0 <ledToggle+0x2c>

	HAL_GPIO_TogglePin(led_tbl[ch].port, led_tbl[ch].pin);
 8001e84:	79fb      	ldrb	r3, [r7, #7]
 8001e86:	4a08      	ldr	r2, [pc, #32]	; (8001ea8 <ledToggle+0x34>)
 8001e88:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8001e8c:	79fb      	ldrb	r3, [r7, #7]
 8001e8e:	4906      	ldr	r1, [pc, #24]	; (8001ea8 <ledToggle+0x34>)
 8001e90:	00db      	lsls	r3, r3, #3
 8001e92:	440b      	add	r3, r1
 8001e94:	889b      	ldrh	r3, [r3, #4]
 8001e96:	4619      	mov	r1, r3
 8001e98:	4610      	mov	r0, r2
 8001e9a:	f000 ff46 	bl	8002d2a <HAL_GPIO_TogglePin>
 8001e9e:	e000      	b.n	8001ea2 <ledToggle+0x2e>
	if(ch >= LED_MAX_CH)		return;
 8001ea0:	bf00      	nop
}
 8001ea2:	3708      	adds	r7, #8
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	20000044 	.word	0x20000044

08001eac <cliLed>:


#ifdef _USE_HW_CLI

void cliLed(cli_args_t *args)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b086      	sub	sp, #24
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
	bool ret = false;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	75fb      	strb	r3, [r7, #23]

	if(args->argc == 3 && args->isStr(0, "toggle") == true)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	881b      	ldrh	r3, [r3, #0]
 8001ebc:	2b03      	cmp	r3, #3
 8001ebe:	d133      	bne.n	8001f28 <cliLed+0x7c>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	695b      	ldr	r3, [r3, #20]
 8001ec4:	491f      	ldr	r1, [pc, #124]	; (8001f44 <cliLed+0x98>)
 8001ec6:	2000      	movs	r0, #0
 8001ec8:	4798      	blx	r3
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d02b      	beq.n	8001f28 <cliLed+0x7c>
	{
		uint8_t  led_ch;
		uint32_t toggle_time;
		uint32_t pre_time;

		led_ch      = (uint8_t)args->getData(1);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	2001      	movs	r0, #1
 8001ed6:	4798      	blx	r3
 8001ed8:	4603      	mov	r3, r0
 8001eda:	75bb      	strb	r3, [r7, #22]
		toggle_time = (uint32_t)args->getData(2);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	2002      	movs	r0, #2
 8001ee2:	4798      	blx	r3
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	60fb      	str	r3, [r7, #12]

		if(led_ch > 0)
 8001ee8:	7dbb      	ldrb	r3, [r7, #22]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d002      	beq.n	8001ef4 <cliLed+0x48>
		{
			led_ch--;
 8001eee:	7dbb      	ldrb	r3, [r7, #22]
 8001ef0:	3b01      	subs	r3, #1
 8001ef2:	75bb      	strb	r3, [r7, #22]
		}

		pre_time = millis();
 8001ef4:	f7ff f9ad 	bl	8001252 <millis>
 8001ef8:	6138      	str	r0, [r7, #16]
		while(cliKeepLoop())
 8001efa:	e00e      	b.n	8001f1a <cliLed+0x6e>
		{
			if(millis() - pre_time >= toggle_time)
 8001efc:	f7ff f9a9 	bl	8001252 <millis>
 8001f00:	4602      	mov	r2, r0
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	68fa      	ldr	r2, [r7, #12]
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	d806      	bhi.n	8001f1a <cliLed+0x6e>
			{
				pre_time = millis();
 8001f0c:	f7ff f9a1 	bl	8001252 <millis>
 8001f10:	6138      	str	r0, [r7, #16]

				ledToggle(led_ch);
 8001f12:	7dbb      	ldrb	r3, [r7, #22]
 8001f14:	4618      	mov	r0, r3
 8001f16:	f7ff ffad 	bl	8001e74 <ledToggle>
		while(cliKeepLoop())
 8001f1a:	f7ff fd2b 	bl	8001974 <cliKeepLoop>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d1eb      	bne.n	8001efc <cliLed+0x50>
			}
		}

		ret = true;
 8001f24:	2301      	movs	r3, #1
 8001f26:	75fb      	strb	r3, [r7, #23]
	}

	if(ret != true)
 8001f28:	7dfb      	ldrb	r3, [r7, #23]
 8001f2a:	f083 0301 	eor.w	r3, r3, #1
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d003      	beq.n	8001f3c <cliLed+0x90>
	{
		cliPrintf("led toggle ch[1~%d] time_ms\n", LED_MAX_CH);
 8001f34:	2102      	movs	r1, #2
 8001f36:	4804      	ldr	r0, [pc, #16]	; (8001f48 <cliLed+0x9c>)
 8001f38:	f7ff fc22 	bl	8001780 <cliPrintf>
	}
}
 8001f3c:	bf00      	nop
 8001f3e:	3718      	adds	r7, #24
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	0800cee8 	.word	0x0800cee8
 8001f48:	0800cef0 	.word	0x0800cef0

08001f4c <uartInit>:
extern uint32_t cdcWrite(uint8_t *p_data, uint32_t length);
extern uint32_t cdcGetBaud(void);


bool uartInit(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0
  for(int i=0; i<UART_MAX_CH; i++)
 8001f52:	2300      	movs	r3, #0
 8001f54:	607b      	str	r3, [r7, #4]
 8001f56:	e007      	b.n	8001f68 <uartInit+0x1c>
  {
    is_open[i] = false;
 8001f58:	4a08      	ldr	r2, [pc, #32]	; (8001f7c <uartInit+0x30>)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	4413      	add	r3, r2
 8001f5e:	2200      	movs	r2, #0
 8001f60:	701a      	strb	r2, [r3, #0]
  for(int i=0; i<UART_MAX_CH; i++)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	3301      	adds	r3, #1
 8001f66:	607b      	str	r3, [r7, #4]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	ddf4      	ble.n	8001f58 <uartInit+0xc>
  }

  return true;
 8001f6e:	2301      	movs	r3, #1
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	370c      	adds	r7, #12
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr
 8001f7c:	20000700 	.word	0x20000700

08001f80 <uartOpen>:

bool uartOpen(uint8_t ch, uint32_t baud)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b085      	sub	sp, #20
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	4603      	mov	r3, r0
 8001f88:	6039      	str	r1, [r7, #0]
 8001f8a:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	73fb      	strb	r3, [r7, #15]

  switch(ch)
 8001f90:	79fb      	ldrb	r3, [r7, #7]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d106      	bne.n	8001fa4 <uartOpen+0x24>
  {
    case _DEF_UART1:
      is_open[ch] = true;
 8001f96:	79fb      	ldrb	r3, [r7, #7]
 8001f98:	4a06      	ldr	r2, [pc, #24]	; (8001fb4 <uartOpen+0x34>)
 8001f9a:	2101      	movs	r1, #1
 8001f9c:	54d1      	strb	r1, [r2, r3]
      ret = true;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	73fb      	strb	r3, [r7, #15]
      break;
 8001fa2:	bf00      	nop
  }

  return ret;
 8001fa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3714      	adds	r7, #20
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr
 8001fb2:	bf00      	nop
 8001fb4:	20000700 	.word	0x20000700

08001fb8 <uartAvailable>:

uint32_t uartAvailable(uint8_t ch)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b084      	sub	sp, #16
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	71fb      	strb	r3, [r7, #7]
  uint32_t ret = 0;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	60fb      	str	r3, [r7, #12]

  switch(ch)
 8001fc6:	79fb      	ldrb	r3, [r7, #7]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d103      	bne.n	8001fd4 <uartAvailable+0x1c>
  {
    case _DEF_UART1:
      ret = cdcAvailable();
 8001fcc:	f006 fe9a 	bl	8008d04 <cdcAvailable>
 8001fd0:	60f8      	str	r0, [r7, #12]
      break;
 8001fd2:	bf00      	nop
  }

  return ret;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	3710      	adds	r7, #16
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}

08001fde <uartRead>:

uint8_t uartRead(uint8_t ch)
{
 8001fde:	b580      	push	{r7, lr}
 8001fe0:	b084      	sub	sp, #16
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	71fb      	strb	r3, [r7, #7]
  uint8_t ret;

  switch(ch)
 8001fe8:	79fb      	ldrb	r3, [r7, #7]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d104      	bne.n	8001ff8 <uartRead+0x1a>
  {
    case _DEF_UART1:
      ret = cdcRead();
 8001fee:	f006 fea7 	bl	8008d40 <cdcRead>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	73fb      	strb	r3, [r7, #15]
      break;
 8001ff6:	bf00      	nop
  }

  return ret;
 8001ff8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3710      	adds	r7, #16
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}

08002002 <uartWrite>:

uint32_t uartWrite(uint8_t ch, uint8_t *p_data, uint32_t length)
{
 8002002:	b580      	push	{r7, lr}
 8002004:	b086      	sub	sp, #24
 8002006:	af00      	add	r7, sp, #0
 8002008:	4603      	mov	r3, r0
 800200a:	60b9      	str	r1, [r7, #8]
 800200c:	607a      	str	r2, [r7, #4]
 800200e:	73fb      	strb	r3, [r7, #15]
  uint32_t ret;

  switch(ch)
 8002010:	7bfb      	ldrb	r3, [r7, #15]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d105      	bne.n	8002022 <uartWrite+0x20>
  {
    case _DEF_UART1:
      ret = cdcWrite(p_data, length);
 8002016:	6879      	ldr	r1, [r7, #4]
 8002018:	68b8      	ldr	r0, [r7, #8]
 800201a:	f006 fee7 	bl	8008dec <cdcWrite>
 800201e:	6178      	str	r0, [r7, #20]
      break;
 8002020:	bf00      	nop
  }

  return ret;
 8002022:	697b      	ldr	r3, [r7, #20]
}
 8002024:	4618      	mov	r0, r3
 8002026:	3718      	adds	r7, #24
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}

0800202c <hwInit>:




void hwInit(void)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	af00      	add	r7, sp, #0
  bspInit();
 8002030:	f7ff f886 	bl	8001140 <bspInit>

  ledInit();
 8002034:	f7ff fec0 	bl	8001db8 <ledInit>
  cliInit();
 8002038:	f7ff fb0e 	bl	8001658 <cliInit>
  uartInit();
 800203c:	f7ff ff86 	bl	8001f4c <uartInit>
  flashInit();
 8002040:	f7ff fd30 	bl	8001aa4 <flashInit>
}
 8002044:	bf00      	nop
 8002046:	bd80      	pop	{r7, pc}

08002048 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800204c:	2003      	movs	r0, #3
 800204e:	f000 f94d 	bl	80022ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002052:	200f      	movs	r0, #15
 8002054:	f000 f806 	bl	8002064 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002058:	f7ff f9a4 	bl	80013a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800205c:	2300      	movs	r3, #0
}
 800205e:	4618      	mov	r0, r3
 8002060:	bd80      	pop	{r7, pc}
	...

08002064 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800206c:	4b12      	ldr	r3, [pc, #72]	; (80020b8 <HAL_InitTick+0x54>)
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	4b12      	ldr	r3, [pc, #72]	; (80020bc <HAL_InitTick+0x58>)
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	4619      	mov	r1, r3
 8002076:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800207a:	fbb3 f3f1 	udiv	r3, r3, r1
 800207e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002082:	4618      	mov	r0, r3
 8002084:	f000 f967 	bl	8002356 <HAL_SYSTICK_Config>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d001      	beq.n	8002092 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e00e      	b.n	80020b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2b0f      	cmp	r3, #15
 8002096:	d80a      	bhi.n	80020ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002098:	2200      	movs	r2, #0
 800209a:	6879      	ldr	r1, [r7, #4]
 800209c:	f04f 30ff 	mov.w	r0, #4294967295
 80020a0:	f000 f92f 	bl	8002302 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020a4:	4a06      	ldr	r2, [pc, #24]	; (80020c0 <HAL_InitTick+0x5c>)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020aa:	2300      	movs	r3, #0
 80020ac:	e000      	b.n	80020b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	3708      	adds	r7, #8
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	20000000 	.word	0x20000000
 80020bc:	20000058 	.word	0x20000058
 80020c0:	20000054 	.word	0x20000054

080020c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020c8:	4b06      	ldr	r3, [pc, #24]	; (80020e4 <HAL_IncTick+0x20>)
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	461a      	mov	r2, r3
 80020ce:	4b06      	ldr	r3, [pc, #24]	; (80020e8 <HAL_IncTick+0x24>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4413      	add	r3, r2
 80020d4:	4a04      	ldr	r2, [pc, #16]	; (80020e8 <HAL_IncTick+0x24>)
 80020d6:	6013      	str	r3, [r2, #0]
}
 80020d8:	bf00      	nop
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr
 80020e2:	bf00      	nop
 80020e4:	20000058 	.word	0x20000058
 80020e8:	20000704 	.word	0x20000704

080020ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020ec:	b480      	push	{r7}
 80020ee:	af00      	add	r7, sp, #0
  return uwTick;
 80020f0:	4b03      	ldr	r3, [pc, #12]	; (8002100 <HAL_GetTick+0x14>)
 80020f2:	681b      	ldr	r3, [r3, #0]
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr
 80020fe:	bf00      	nop
 8002100:	20000704 	.word	0x20000704

08002104 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b084      	sub	sp, #16
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800210c:	f7ff ffee 	bl	80020ec <HAL_GetTick>
 8002110:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	f1b3 3fff 	cmp.w	r3, #4294967295
 800211c:	d005      	beq.n	800212a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800211e:	4b0a      	ldr	r3, [pc, #40]	; (8002148 <HAL_Delay+0x44>)
 8002120:	781b      	ldrb	r3, [r3, #0]
 8002122:	461a      	mov	r2, r3
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	4413      	add	r3, r2
 8002128:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800212a:	bf00      	nop
 800212c:	f7ff ffde 	bl	80020ec <HAL_GetTick>
 8002130:	4602      	mov	r2, r0
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	68fa      	ldr	r2, [r7, #12]
 8002138:	429a      	cmp	r2, r3
 800213a:	d8f7      	bhi.n	800212c <HAL_Delay+0x28>
  {
  }
}
 800213c:	bf00      	nop
 800213e:	bf00      	nop
 8002140:	3710      	adds	r7, #16
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	20000058 	.word	0x20000058

0800214c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800214c:	b480      	push	{r7}
 800214e:	b085      	sub	sp, #20
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	f003 0307 	and.w	r3, r3, #7
 800215a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800215c:	4b0b      	ldr	r3, [pc, #44]	; (800218c <__NVIC_SetPriorityGrouping+0x40>)
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002162:	68ba      	ldr	r2, [r7, #8]
 8002164:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002168:	4013      	ands	r3, r2
 800216a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002174:	4b06      	ldr	r3, [pc, #24]	; (8002190 <__NVIC_SetPriorityGrouping+0x44>)
 8002176:	4313      	orrs	r3, r2
 8002178:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800217a:	4a04      	ldr	r2, [pc, #16]	; (800218c <__NVIC_SetPriorityGrouping+0x40>)
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	60d3      	str	r3, [r2, #12]
}
 8002180:	bf00      	nop
 8002182:	3714      	adds	r7, #20
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr
 800218c:	e000ed00 	.word	0xe000ed00
 8002190:	05fa0000 	.word	0x05fa0000

08002194 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002194:	b480      	push	{r7}
 8002196:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002198:	4b04      	ldr	r3, [pc, #16]	; (80021ac <__NVIC_GetPriorityGrouping+0x18>)
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	0a1b      	lsrs	r3, r3, #8
 800219e:	f003 0307 	and.w	r3, r3, #7
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr
 80021ac:	e000ed00 	.word	0xe000ed00

080021b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b083      	sub	sp, #12
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	4603      	mov	r3, r0
 80021b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	db0b      	blt.n	80021da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021c2:	79fb      	ldrb	r3, [r7, #7]
 80021c4:	f003 021f 	and.w	r2, r3, #31
 80021c8:	4907      	ldr	r1, [pc, #28]	; (80021e8 <__NVIC_EnableIRQ+0x38>)
 80021ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ce:	095b      	lsrs	r3, r3, #5
 80021d0:	2001      	movs	r0, #1
 80021d2:	fa00 f202 	lsl.w	r2, r0, r2
 80021d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80021da:	bf00      	nop
 80021dc:	370c      	adds	r7, #12
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop
 80021e8:	e000e100 	.word	0xe000e100

080021ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b083      	sub	sp, #12
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	4603      	mov	r3, r0
 80021f4:	6039      	str	r1, [r7, #0]
 80021f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	db0a      	blt.n	8002216 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	b2da      	uxtb	r2, r3
 8002204:	490c      	ldr	r1, [pc, #48]	; (8002238 <__NVIC_SetPriority+0x4c>)
 8002206:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800220a:	0112      	lsls	r2, r2, #4
 800220c:	b2d2      	uxtb	r2, r2
 800220e:	440b      	add	r3, r1
 8002210:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002214:	e00a      	b.n	800222c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	b2da      	uxtb	r2, r3
 800221a:	4908      	ldr	r1, [pc, #32]	; (800223c <__NVIC_SetPriority+0x50>)
 800221c:	79fb      	ldrb	r3, [r7, #7]
 800221e:	f003 030f 	and.w	r3, r3, #15
 8002222:	3b04      	subs	r3, #4
 8002224:	0112      	lsls	r2, r2, #4
 8002226:	b2d2      	uxtb	r2, r2
 8002228:	440b      	add	r3, r1
 800222a:	761a      	strb	r2, [r3, #24]
}
 800222c:	bf00      	nop
 800222e:	370c      	adds	r7, #12
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr
 8002238:	e000e100 	.word	0xe000e100
 800223c:	e000ed00 	.word	0xe000ed00

08002240 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002240:	b480      	push	{r7}
 8002242:	b089      	sub	sp, #36	; 0x24
 8002244:	af00      	add	r7, sp, #0
 8002246:	60f8      	str	r0, [r7, #12]
 8002248:	60b9      	str	r1, [r7, #8]
 800224a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	f003 0307 	and.w	r3, r3, #7
 8002252:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002254:	69fb      	ldr	r3, [r7, #28]
 8002256:	f1c3 0307 	rsb	r3, r3, #7
 800225a:	2b04      	cmp	r3, #4
 800225c:	bf28      	it	cs
 800225e:	2304      	movcs	r3, #4
 8002260:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	3304      	adds	r3, #4
 8002266:	2b06      	cmp	r3, #6
 8002268:	d902      	bls.n	8002270 <NVIC_EncodePriority+0x30>
 800226a:	69fb      	ldr	r3, [r7, #28]
 800226c:	3b03      	subs	r3, #3
 800226e:	e000      	b.n	8002272 <NVIC_EncodePriority+0x32>
 8002270:	2300      	movs	r3, #0
 8002272:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002274:	f04f 32ff 	mov.w	r2, #4294967295
 8002278:	69bb      	ldr	r3, [r7, #24]
 800227a:	fa02 f303 	lsl.w	r3, r2, r3
 800227e:	43da      	mvns	r2, r3
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	401a      	ands	r2, r3
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002288:	f04f 31ff 	mov.w	r1, #4294967295
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	fa01 f303 	lsl.w	r3, r1, r3
 8002292:	43d9      	mvns	r1, r3
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002298:	4313      	orrs	r3, r2
         );
}
 800229a:	4618      	mov	r0, r3
 800229c:	3724      	adds	r7, #36	; 0x24
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr
	...

080022a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b082      	sub	sp, #8
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	3b01      	subs	r3, #1
 80022b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022b8:	d301      	bcc.n	80022be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022ba:	2301      	movs	r3, #1
 80022bc:	e00f      	b.n	80022de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022be:	4a0a      	ldr	r2, [pc, #40]	; (80022e8 <SysTick_Config+0x40>)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	3b01      	subs	r3, #1
 80022c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022c6:	210f      	movs	r1, #15
 80022c8:	f04f 30ff 	mov.w	r0, #4294967295
 80022cc:	f7ff ff8e 	bl	80021ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022d0:	4b05      	ldr	r3, [pc, #20]	; (80022e8 <SysTick_Config+0x40>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022d6:	4b04      	ldr	r3, [pc, #16]	; (80022e8 <SysTick_Config+0x40>)
 80022d8:	2207      	movs	r2, #7
 80022da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022dc:	2300      	movs	r3, #0
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3708      	adds	r7, #8
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	e000e010 	.word	0xe000e010

080022ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022f4:	6878      	ldr	r0, [r7, #4]
 80022f6:	f7ff ff29 	bl	800214c <__NVIC_SetPriorityGrouping>
}
 80022fa:	bf00      	nop
 80022fc:	3708      	adds	r7, #8
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}

08002302 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002302:	b580      	push	{r7, lr}
 8002304:	b086      	sub	sp, #24
 8002306:	af00      	add	r7, sp, #0
 8002308:	4603      	mov	r3, r0
 800230a:	60b9      	str	r1, [r7, #8]
 800230c:	607a      	str	r2, [r7, #4]
 800230e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002310:	2300      	movs	r3, #0
 8002312:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002314:	f7ff ff3e 	bl	8002194 <__NVIC_GetPriorityGrouping>
 8002318:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800231a:	687a      	ldr	r2, [r7, #4]
 800231c:	68b9      	ldr	r1, [r7, #8]
 800231e:	6978      	ldr	r0, [r7, #20]
 8002320:	f7ff ff8e 	bl	8002240 <NVIC_EncodePriority>
 8002324:	4602      	mov	r2, r0
 8002326:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800232a:	4611      	mov	r1, r2
 800232c:	4618      	mov	r0, r3
 800232e:	f7ff ff5d 	bl	80021ec <__NVIC_SetPriority>
}
 8002332:	bf00      	nop
 8002334:	3718      	adds	r7, #24
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}

0800233a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800233a:	b580      	push	{r7, lr}
 800233c:	b082      	sub	sp, #8
 800233e:	af00      	add	r7, sp, #0
 8002340:	4603      	mov	r3, r0
 8002342:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002344:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002348:	4618      	mov	r0, r3
 800234a:	f7ff ff31 	bl	80021b0 <__NVIC_EnableIRQ>
}
 800234e:	bf00      	nop
 8002350:	3708      	adds	r7, #8
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}

08002356 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002356:	b580      	push	{r7, lr}
 8002358:	b082      	sub	sp, #8
 800235a:	af00      	add	r7, sp, #0
 800235c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f7ff ffa2 	bl	80022a8 <SysTick_Config>
 8002364:	4603      	mov	r3, r0
}
 8002366:	4618      	mov	r0, r3
 8002368:	3708      	adds	r7, #8
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
	...

08002370 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8002370:	b480      	push	{r7}
 8002372:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8002374:	f3bf 8f5f 	dmb	sy
}
 8002378:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800237a:	4b07      	ldr	r3, [pc, #28]	; (8002398 <HAL_MPU_Disable+0x28>)
 800237c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800237e:	4a06      	ldr	r2, [pc, #24]	; (8002398 <HAL_MPU_Disable+0x28>)
 8002380:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002384:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8002386:	4b05      	ldr	r3, [pc, #20]	; (800239c <HAL_MPU_Disable+0x2c>)
 8002388:	2200      	movs	r2, #0
 800238a:	605a      	str	r2, [r3, #4]
}
 800238c:	bf00      	nop
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr
 8002396:	bf00      	nop
 8002398:	e000ed00 	.word	0xe000ed00
 800239c:	e000ed90 	.word	0xe000ed90

080023a0 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b083      	sub	sp, #12
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80023a8:	4a0b      	ldr	r2, [pc, #44]	; (80023d8 <HAL_MPU_Enable+0x38>)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	f043 0301 	orr.w	r3, r3, #1
 80023b0:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80023b2:	4b0a      	ldr	r3, [pc, #40]	; (80023dc <HAL_MPU_Enable+0x3c>)
 80023b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b6:	4a09      	ldr	r2, [pc, #36]	; (80023dc <HAL_MPU_Enable+0x3c>)
 80023b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023bc:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80023be:	f3bf 8f4f 	dsb	sy
}
 80023c2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80023c4:	f3bf 8f6f 	isb	sy
}
 80023c8:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80023ca:	bf00      	nop
 80023cc:	370c      	adds	r7, #12
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr
 80023d6:	bf00      	nop
 80023d8:	e000ed90 	.word	0xe000ed90
 80023dc:	e000ed00 	.word	0xe000ed00

080023e0 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b083      	sub	sp, #12
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	785a      	ldrb	r2, [r3, #1]
 80023ec:	4b1d      	ldr	r3, [pc, #116]	; (8002464 <HAL_MPU_ConfigRegion+0x84>)
 80023ee:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d029      	beq.n	800244c <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 80023f8:	4a1a      	ldr	r2, [pc, #104]	; (8002464 <HAL_MPU_ConfigRegion+0x84>)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	7b1b      	ldrb	r3, [r3, #12]
 8002404:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	7adb      	ldrb	r3, [r3, #11]
 800240a:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800240c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	7a9b      	ldrb	r3, [r3, #10]
 8002412:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8002414:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	7b5b      	ldrb	r3, [r3, #13]
 800241a:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800241c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	7b9b      	ldrb	r3, [r3, #14]
 8002422:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8002424:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	7bdb      	ldrb	r3, [r3, #15]
 800242a:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800242c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	7a5b      	ldrb	r3, [r3, #9]
 8002432:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8002434:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	7a1b      	ldrb	r3, [r3, #8]
 800243a:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800243c:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	7812      	ldrb	r2, [r2, #0]
 8002442:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002444:	4a07      	ldr	r2, [pc, #28]	; (8002464 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8002446:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8002448:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 800244a:	e005      	b.n	8002458 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 800244c:	4b05      	ldr	r3, [pc, #20]	; (8002464 <HAL_MPU_ConfigRegion+0x84>)
 800244e:	2200      	movs	r2, #0
 8002450:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8002452:	4b04      	ldr	r3, [pc, #16]	; (8002464 <HAL_MPU_ConfigRegion+0x84>)
 8002454:	2200      	movs	r2, #0
 8002456:	611a      	str	r2, [r3, #16]
}
 8002458:	bf00      	nop
 800245a:	370c      	adds	r7, #12
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr
 8002464:	e000ed90 	.word	0xe000ed90

08002468 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b086      	sub	sp, #24
 800246c:	af00      	add	r7, sp, #0
 800246e:	60f8      	str	r0, [r7, #12]
 8002470:	60b9      	str	r1, [r7, #8]
 8002472:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800247a:	4b27      	ldr	r3, [pc, #156]	; (8002518 <HAL_FLASH_Program+0xb0>)
 800247c:	7d1b      	ldrb	r3, [r3, #20]
 800247e:	2b01      	cmp	r3, #1
 8002480:	d101      	bne.n	8002486 <HAL_FLASH_Program+0x1e>
 8002482:	2302      	movs	r3, #2
 8002484:	e043      	b.n	800250e <HAL_FLASH_Program+0xa6>
 8002486:	4b24      	ldr	r3, [pc, #144]	; (8002518 <HAL_FLASH_Program+0xb0>)
 8002488:	2201      	movs	r2, #1
 800248a:	751a      	strb	r2, [r3, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800248c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002490:	f000 f878 	bl	8002584 <FLASH_WaitForLastOperation>
 8002494:	4603      	mov	r3, r0
 8002496:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8002498:	7dfb      	ldrb	r3, [r7, #23]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d133      	bne.n	8002506 <HAL_FLASH_Program+0x9e>
  {
    switch(TypeProgram)
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	2b03      	cmp	r3, #3
 80024a2:	d823      	bhi.n	80024ec <HAL_FLASH_Program+0x84>
 80024a4:	a201      	add	r2, pc, #4	; (adr r2, 80024ac <HAL_FLASH_Program+0x44>)
 80024a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024aa:	bf00      	nop
 80024ac:	080024bd 	.word	0x080024bd
 80024b0:	080024c9 	.word	0x080024c9
 80024b4:	080024d5 	.word	0x080024d5
 80024b8:	080024e1 	.word	0x080024e1
    {
      case FLASH_TYPEPROGRAM_BYTE :
      {
        /*Program byte (8-bit) at a specified address.*/
        FLASH_Program_Byte(Address, (uint8_t) Data);
 80024bc:	783b      	ldrb	r3, [r7, #0]
 80024be:	4619      	mov	r1, r3
 80024c0:	68b8      	ldr	r0, [r7, #8]
 80024c2:	f000 f921 	bl	8002708 <FLASH_Program_Byte>
        break;
 80024c6:	e012      	b.n	80024ee <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_HALFWORD :
      {
        /*Program halfword (16-bit) at a specified address.*/
        FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80024c8:	883b      	ldrh	r3, [r7, #0]
 80024ca:	4619      	mov	r1, r3
 80024cc:	68b8      	ldr	r0, [r7, #8]
 80024ce:	f000 f8f5 	bl	80026bc <FLASH_Program_HalfWord>
        break;
 80024d2:	e00c      	b.n	80024ee <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_WORD :
      {
        /*Program word (32-bit) at a specified address.*/
        FLASH_Program_Word(Address, (uint32_t) Data);
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	4619      	mov	r1, r3
 80024d8:	68b8      	ldr	r0, [r7, #8]
 80024da:	f000 f8c9 	bl	8002670 <FLASH_Program_Word>
        break;
 80024de:	e006      	b.n	80024ee <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_DOUBLEWORD :
      {
        /*Program double word (64-bit) at a specified address.*/
        FLASH_Program_DoubleWord(Address, Data);
 80024e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80024e4:	68b8      	ldr	r0, [r7, #8]
 80024e6:	f000 f88d 	bl	8002604 <FLASH_Program_DoubleWord>
        break;
 80024ea:	e000      	b.n	80024ee <HAL_FLASH_Program+0x86>
      }
      default :
        break;
 80024ec:	bf00      	nop
    }
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80024ee:	f24c 3050 	movw	r0, #50000	; 0xc350
 80024f2:	f000 f847 	bl	8002584 <FLASH_WaitForLastOperation>
 80024f6:	4603      	mov	r3, r0
 80024f8:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 80024fa:	4b08      	ldr	r3, [pc, #32]	; (800251c <HAL_FLASH_Program+0xb4>)
 80024fc:	691b      	ldr	r3, [r3, #16]
 80024fe:	4a07      	ldr	r2, [pc, #28]	; (800251c <HAL_FLASH_Program+0xb4>)
 8002500:	f023 0301 	bic.w	r3, r3, #1
 8002504:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002506:	4b04      	ldr	r3, [pc, #16]	; (8002518 <HAL_FLASH_Program+0xb0>)
 8002508:	2200      	movs	r2, #0
 800250a:	751a      	strb	r2, [r3, #20]

  return status;
 800250c:	7dfb      	ldrb	r3, [r7, #23]
}
 800250e:	4618      	mov	r0, r3
 8002510:	3718      	adds	r7, #24
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	20000708 	.word	0x20000708
 800251c:	40023c00 	.word	0x40023c00

08002520 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002520:	b480      	push	{r7}
 8002522:	b083      	sub	sp, #12
 8002524:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8002526:	2300      	movs	r3, #0
 8002528:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800252a:	4b0b      	ldr	r3, [pc, #44]	; (8002558 <HAL_FLASH_Unlock+0x38>)
 800252c:	691b      	ldr	r3, [r3, #16]
 800252e:	2b00      	cmp	r3, #0
 8002530:	da0b      	bge.n	800254a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002532:	4b09      	ldr	r3, [pc, #36]	; (8002558 <HAL_FLASH_Unlock+0x38>)
 8002534:	4a09      	ldr	r2, [pc, #36]	; (800255c <HAL_FLASH_Unlock+0x3c>)
 8002536:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002538:	4b07      	ldr	r3, [pc, #28]	; (8002558 <HAL_FLASH_Unlock+0x38>)
 800253a:	4a09      	ldr	r2, [pc, #36]	; (8002560 <HAL_FLASH_Unlock+0x40>)
 800253c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800253e:	4b06      	ldr	r3, [pc, #24]	; (8002558 <HAL_FLASH_Unlock+0x38>)
 8002540:	691b      	ldr	r3, [r3, #16]
 8002542:	2b00      	cmp	r3, #0
 8002544:	da01      	bge.n	800254a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800254a:	79fb      	ldrb	r3, [r7, #7]
}
 800254c:	4618      	mov	r0, r3
 800254e:	370c      	adds	r7, #12
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr
 8002558:	40023c00 	.word	0x40023c00
 800255c:	45670123 	.word	0x45670123
 8002560:	cdef89ab 	.word	0xcdef89ab

08002564 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002564:	b480      	push	{r7}
 8002566:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8002568:	4b05      	ldr	r3, [pc, #20]	; (8002580 <HAL_FLASH_Lock+0x1c>)
 800256a:	691b      	ldr	r3, [r3, #16]
 800256c:	4a04      	ldr	r2, [pc, #16]	; (8002580 <HAL_FLASH_Lock+0x1c>)
 800256e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002572:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8002574:	2300      	movs	r3, #0
}
 8002576:	4618      	mov	r0, r3
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr
 8002580:	40023c00 	.word	0x40023c00

08002584 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8002584:	b580      	push	{r7, lr}
 8002586:	b084      	sub	sp, #16
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800258c:	2300      	movs	r3, #0
 800258e:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002590:	4b1a      	ldr	r3, [pc, #104]	; (80025fc <FLASH_WaitForLastOperation+0x78>)
 8002592:	2200      	movs	r2, #0
 8002594:	619a      	str	r2, [r3, #24]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8002596:	f7ff fda9 	bl	80020ec <HAL_GetTick>
 800259a:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800259c:	e010      	b.n	80025c0 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025a4:	d00c      	beq.n	80025c0 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d007      	beq.n	80025bc <FLASH_WaitForLastOperation+0x38>
 80025ac:	f7ff fd9e 	bl	80020ec <HAL_GetTick>
 80025b0:	4602      	mov	r2, r0
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	687a      	ldr	r2, [r7, #4]
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d201      	bcs.n	80025c0 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80025bc:	2303      	movs	r3, #3
 80025be:	e019      	b.n	80025f4 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80025c0:	4b0f      	ldr	r3, [pc, #60]	; (8002600 <FLASH_WaitForLastOperation+0x7c>)
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d1e8      	bne.n	800259e <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ALL_ERRORS) != RESET)
 80025cc:	4b0c      	ldr	r3, [pc, #48]	; (8002600 <FLASH_WaitForLastOperation+0x7c>)
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d003      	beq.n	80025e0 <FLASH_WaitForLastOperation+0x5c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80025d8:	f000 f8ba 	bl	8002750 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	e009      	b.n	80025f4 <FLASH_WaitForLastOperation+0x70>
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80025e0:	4b07      	ldr	r3, [pc, #28]	; (8002600 <FLASH_WaitForLastOperation+0x7c>)
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	f003 0301 	and.w	r3, r3, #1
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d002      	beq.n	80025f2 <FLASH_WaitForLastOperation+0x6e>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80025ec:	4b04      	ldr	r3, [pc, #16]	; (8002600 <FLASH_WaitForLastOperation+0x7c>)
 80025ee:	2201      	movs	r2, #1
 80025f0:	60da      	str	r2, [r3, #12]
  }

  /* If there is an error flag set */
  return HAL_OK;
 80025f2:	2300      	movs	r3, #0
  
}  
 80025f4:	4618      	mov	r0, r3
 80025f6:	3710      	adds	r7, #16
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	20000708 	.word	0x20000708
 8002600:	40023c00 	.word	0x40023c00

08002604 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8002604:	b480      	push	{r7}
 8002606:	b085      	sub	sp, #20
 8002608:	af00      	add	r7, sp, #0
 800260a:	60f8      	str	r0, [r7, #12]
 800260c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8002610:	4b16      	ldr	r3, [pc, #88]	; (800266c <FLASH_Program_DoubleWord+0x68>)
 8002612:	691b      	ldr	r3, [r3, #16]
 8002614:	4a15      	ldr	r2, [pc, #84]	; (800266c <FLASH_Program_DoubleWord+0x68>)
 8002616:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800261a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800261c:	4b13      	ldr	r3, [pc, #76]	; (800266c <FLASH_Program_DoubleWord+0x68>)
 800261e:	691b      	ldr	r3, [r3, #16]
 8002620:	4a12      	ldr	r2, [pc, #72]	; (800266c <FLASH_Program_DoubleWord+0x68>)
 8002622:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8002626:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002628:	4b10      	ldr	r3, [pc, #64]	; (800266c <FLASH_Program_DoubleWord+0x68>)
 800262a:	691b      	ldr	r3, [r3, #16]
 800262c:	4a0f      	ldr	r2, [pc, #60]	; (800266c <FLASH_Program_DoubleWord+0x68>)
 800262e:	f043 0301 	orr.w	r3, r3, #1
 8002632:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	683a      	ldr	r2, [r7, #0]
 8002638:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800263a:	f3bf 8f6f 	isb	sy
}
 800263e:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8002640:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002644:	f04f 0200 	mov.w	r2, #0
 8002648:	f04f 0300 	mov.w	r3, #0
 800264c:	000a      	movs	r2, r1
 800264e:	2300      	movs	r3, #0
 8002650:	68f9      	ldr	r1, [r7, #12]
 8002652:	3104      	adds	r1, #4
 8002654:	4613      	mov	r3, r2
 8002656:	600b      	str	r3, [r1, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8002658:	f3bf 8f4f 	dsb	sy
}
 800265c:	bf00      	nop

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 800265e:	bf00      	nop
 8002660:	3714      	adds	r7, #20
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr
 800266a:	bf00      	nop
 800266c:	40023c00 	.word	0x40023c00

08002670 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8002670:	b480      	push	{r7}
 8002672:	b083      	sub	sp, #12
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
 8002678:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 800267a:	4b0f      	ldr	r3, [pc, #60]	; (80026b8 <FLASH_Program_Word+0x48>)
 800267c:	691b      	ldr	r3, [r3, #16]
 800267e:	4a0e      	ldr	r2, [pc, #56]	; (80026b8 <FLASH_Program_Word+0x48>)
 8002680:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002684:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8002686:	4b0c      	ldr	r3, [pc, #48]	; (80026b8 <FLASH_Program_Word+0x48>)
 8002688:	691b      	ldr	r3, [r3, #16]
 800268a:	4a0b      	ldr	r2, [pc, #44]	; (80026b8 <FLASH_Program_Word+0x48>)
 800268c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002690:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002692:	4b09      	ldr	r3, [pc, #36]	; (80026b8 <FLASH_Program_Word+0x48>)
 8002694:	691b      	ldr	r3, [r3, #16]
 8002696:	4a08      	ldr	r2, [pc, #32]	; (80026b8 <FLASH_Program_Word+0x48>)
 8002698:	f043 0301 	orr.w	r3, r3, #1
 800269c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	683a      	ldr	r2, [r7, #0]
 80026a2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80026a4:	f3bf 8f4f 	dsb	sy
}
 80026a8:	bf00      	nop
  
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 80026aa:	bf00      	nop
 80026ac:	370c      	adds	r7, #12
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr
 80026b6:	bf00      	nop
 80026b8:	40023c00 	.word	0x40023c00

080026bc <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80026bc:	b480      	push	{r7}
 80026be:	b083      	sub	sp, #12
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	460b      	mov	r3, r1
 80026c6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 80026c8:	4b0e      	ldr	r3, [pc, #56]	; (8002704 <FLASH_Program_HalfWord+0x48>)
 80026ca:	691b      	ldr	r3, [r3, #16]
 80026cc:	4a0d      	ldr	r2, [pc, #52]	; (8002704 <FLASH_Program_HalfWord+0x48>)
 80026ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026d2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80026d4:	4b0b      	ldr	r3, [pc, #44]	; (8002704 <FLASH_Program_HalfWord+0x48>)
 80026d6:	691b      	ldr	r3, [r3, #16]
 80026d8:	4a0a      	ldr	r2, [pc, #40]	; (8002704 <FLASH_Program_HalfWord+0x48>)
 80026da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026de:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80026e0:	4b08      	ldr	r3, [pc, #32]	; (8002704 <FLASH_Program_HalfWord+0x48>)
 80026e2:	691b      	ldr	r3, [r3, #16]
 80026e4:	4a07      	ldr	r2, [pc, #28]	; (8002704 <FLASH_Program_HalfWord+0x48>)
 80026e6:	f043 0301 	orr.w	r3, r3, #1
 80026ea:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	887a      	ldrh	r2, [r7, #2]
 80026f0:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80026f2:	f3bf 8f4f 	dsb	sy
}
 80026f6:	bf00      	nop

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
  
}
 80026f8:	bf00      	nop
 80026fa:	370c      	adds	r7, #12
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr
 8002704:	40023c00 	.word	0x40023c00

08002708 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8002708:	b480      	push	{r7}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
 8002710:	460b      	mov	r3, r1
 8002712:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8002714:	4b0d      	ldr	r3, [pc, #52]	; (800274c <FLASH_Program_Byte+0x44>)
 8002716:	691b      	ldr	r3, [r3, #16]
 8002718:	4a0c      	ldr	r2, [pc, #48]	; (800274c <FLASH_Program_Byte+0x44>)
 800271a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800271e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8002720:	4b0a      	ldr	r3, [pc, #40]	; (800274c <FLASH_Program_Byte+0x44>)
 8002722:	4a0a      	ldr	r2, [pc, #40]	; (800274c <FLASH_Program_Byte+0x44>)
 8002724:	691b      	ldr	r3, [r3, #16]
 8002726:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002728:	4b08      	ldr	r3, [pc, #32]	; (800274c <FLASH_Program_Byte+0x44>)
 800272a:	691b      	ldr	r3, [r3, #16]
 800272c:	4a07      	ldr	r2, [pc, #28]	; (800274c <FLASH_Program_Byte+0x44>)
 800272e:	f043 0301 	orr.w	r3, r3, #1
 8002732:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	78fa      	ldrb	r2, [r7, #3]
 8002738:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800273a:	f3bf 8f4f 	dsb	sy
}
 800273e:	bf00      	nop

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8002740:	bf00      	nop
 8002742:	370c      	adds	r7, #12
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr
 800274c:	40023c00 	.word	0x40023c00

08002750 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8002750:	b480      	push	{r7}
 8002752:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8002754:	4b21      	ldr	r3, [pc, #132]	; (80027dc <FLASH_SetErrorCode+0x8c>)
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	f003 0302 	and.w	r3, r3, #2
 800275c:	2b00      	cmp	r3, #0
 800275e:	d005      	beq.n	800276c <FLASH_SetErrorCode+0x1c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8002760:	4b1f      	ldr	r3, [pc, #124]	; (80027e0 <FLASH_SetErrorCode+0x90>)
 8002762:	699b      	ldr	r3, [r3, #24]
 8002764:	f043 0320 	orr.w	r3, r3, #32
 8002768:	4a1d      	ldr	r2, [pc, #116]	; (80027e0 <FLASH_SetErrorCode+0x90>)
 800276a:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800276c:	4b1b      	ldr	r3, [pc, #108]	; (80027dc <FLASH_SetErrorCode+0x8c>)
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	f003 0310 	and.w	r3, r3, #16
 8002774:	2b00      	cmp	r3, #0
 8002776:	d005      	beq.n	8002784 <FLASH_SetErrorCode+0x34>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8002778:	4b19      	ldr	r3, [pc, #100]	; (80027e0 <FLASH_SetErrorCode+0x90>)
 800277a:	699b      	ldr	r3, [r3, #24]
 800277c:	f043 0310 	orr.w	r3, r3, #16
 8002780:	4a17      	ldr	r2, [pc, #92]	; (80027e0 <FLASH_SetErrorCode+0x90>)
 8002782:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8002784:	4b15      	ldr	r3, [pc, #84]	; (80027dc <FLASH_SetErrorCode+0x8c>)
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	f003 0320 	and.w	r3, r3, #32
 800278c:	2b00      	cmp	r3, #0
 800278e:	d005      	beq.n	800279c <FLASH_SetErrorCode+0x4c>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8002790:	4b13      	ldr	r3, [pc, #76]	; (80027e0 <FLASH_SetErrorCode+0x90>)
 8002792:	699b      	ldr	r3, [r3, #24]
 8002794:	f043 0308 	orr.w	r3, r3, #8
 8002798:	4a11      	ldr	r2, [pc, #68]	; (80027e0 <FLASH_SetErrorCode+0x90>)
 800279a:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800279c:	4b0f      	ldr	r3, [pc, #60]	; (80027dc <FLASH_SetErrorCode+0x8c>)
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d005      	beq.n	80027b4 <FLASH_SetErrorCode+0x64>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80027a8:	4b0d      	ldr	r3, [pc, #52]	; (80027e0 <FLASH_SetErrorCode+0x90>)
 80027aa:	699b      	ldr	r3, [r3, #24]
 80027ac:	f043 0304 	orr.w	r3, r3, #4
 80027b0:	4a0b      	ldr	r2, [pc, #44]	; (80027e0 <FLASH_SetErrorCode+0x90>)
 80027b2:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ERSERR) != RESET)
 80027b4:	4b09      	ldr	r3, [pc, #36]	; (80027dc <FLASH_SetErrorCode+0x8c>)
 80027b6:	68db      	ldr	r3, [r3, #12]
 80027b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d005      	beq.n	80027cc <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_ERS;
 80027c0:	4b07      	ldr	r3, [pc, #28]	; (80027e0 <FLASH_SetErrorCode+0x90>)
 80027c2:	699b      	ldr	r3, [r3, #24]
 80027c4:	f043 0302 	orr.w	r3, r3, #2
 80027c8:	4a05      	ldr	r2, [pc, #20]	; (80027e0 <FLASH_SetErrorCode+0x90>)
 80027ca:	6193      	str	r3, [r2, #24]
   pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
  }  
#endif /* FLASH_OPTCR2_PCROP */
  
  /* Clear error programming flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 80027cc:	4b03      	ldr	r3, [pc, #12]	; (80027dc <FLASH_SetErrorCode+0x8c>)
 80027ce:	22f2      	movs	r2, #242	; 0xf2
 80027d0:	60da      	str	r2, [r3, #12]
}
 80027d2:	bf00      	nop
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr
 80027dc:	40023c00 	.word	0x40023c00
 80027e0:	20000708 	.word	0x20000708

080027e4 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b084      	sub	sp, #16
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
 80027ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0;
 80027f2:	2300      	movs	r3, #0
 80027f4:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80027f6:	4b2f      	ldr	r3, [pc, #188]	; (80028b4 <HAL_FLASHEx_Erase+0xd0>)
 80027f8:	7d1b      	ldrb	r3, [r3, #20]
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	d101      	bne.n	8002802 <HAL_FLASHEx_Erase+0x1e>
 80027fe:	2302      	movs	r3, #2
 8002800:	e053      	b.n	80028aa <HAL_FLASHEx_Erase+0xc6>
 8002802:	4b2c      	ldr	r3, [pc, #176]	; (80028b4 <HAL_FLASHEx_Erase+0xd0>)
 8002804:	2201      	movs	r2, #1
 8002806:	751a      	strb	r2, [r3, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002808:	f24c 3050 	movw	r0, #50000	; 0xc350
 800280c:	f7ff feba 	bl	8002584 <FLASH_WaitForLastOperation>
 8002810:	4603      	mov	r3, r0
 8002812:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8002814:	7bfb      	ldrb	r3, [r7, #15]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d143      	bne.n	80028a2 <HAL_FLASHEx_Erase+0xbe>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	f04f 32ff 	mov.w	r2, #4294967295
 8002820:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	2b01      	cmp	r3, #1
 8002828:	d112      	bne.n	8002850 <HAL_FLASHEx_Erase+0x6c>
    {
      /*Mass erase to be done*/
#if defined (FLASH_OPTCR_nDBANK)      
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
#else
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange);      
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	68db      	ldr	r3, [r3, #12]
 800282e:	b2db      	uxtb	r3, r3
 8002830:	4618      	mov	r0, r3
 8002832:	f000 f843 	bl	80028bc <FLASH_MassErase>
#endif /* FLASH_OPTCR_nDBANK */
                      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002836:	f24c 3050 	movw	r0, #50000	; 0xc350
 800283a:	f7ff fea3 	bl	8002584 <FLASH_WaitForLastOperation>
 800283e:	4603      	mov	r3, r0
 8002840:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8002842:	4b1d      	ldr	r3, [pc, #116]	; (80028b8 <HAL_FLASHEx_Erase+0xd4>)
 8002844:	691b      	ldr	r3, [r3, #16]
 8002846:	4a1c      	ldr	r2, [pc, #112]	; (80028b8 <HAL_FLASHEx_Erase+0xd4>)
 8002848:	f023 0304 	bic.w	r3, r3, #4
 800284c:	6113      	str	r3, [r2, #16]
 800284e:	e028      	b.n	80028a2 <HAL_FLASHEx_Erase+0xbe>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	60bb      	str	r3, [r7, #8]
 8002856:	e01c      	b.n	8002892 <HAL_FLASHEx_Erase+0xae>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	b2db      	uxtb	r3, r3
 800285e:	4619      	mov	r1, r3
 8002860:	68b8      	ldr	r0, [r7, #8]
 8002862:	f000 f851 	bl	8002908 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002866:	f24c 3050 	movw	r0, #50000	; 0xc350
 800286a:	f7ff fe8b 	bl	8002584 <FLASH_WaitForLastOperation>
 800286e:	4603      	mov	r3, r0
 8002870:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER Bit and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB)); 
 8002872:	4b11      	ldr	r3, [pc, #68]	; (80028b8 <HAL_FLASHEx_Erase+0xd4>)
 8002874:	691b      	ldr	r3, [r3, #16]
 8002876:	4a10      	ldr	r2, [pc, #64]	; (80028b8 <HAL_FLASHEx_Erase+0xd4>)
 8002878:	f023 037a 	bic.w	r3, r3, #122	; 0x7a
 800287c:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 800287e:	7bfb      	ldrb	r3, [r7, #15]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d003      	beq.n	800288c <HAL_FLASHEx_Erase+0xa8>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	68ba      	ldr	r2, [r7, #8]
 8002888:	601a      	str	r2, [r3, #0]
          break;
 800288a:	e00a      	b.n	80028a2 <HAL_FLASHEx_Erase+0xbe>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	3301      	adds	r3, #1
 8002890:	60bb      	str	r3, [r7, #8]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	689a      	ldr	r2, [r3, #8]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	4413      	add	r3, r2
 800289c:	68ba      	ldr	r2, [r7, #8]
 800289e:	429a      	cmp	r2, r3
 80028a0:	d3da      	bcc.n	8002858 <HAL_FLASHEx_Erase+0x74>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80028a2:	4b04      	ldr	r3, [pc, #16]	; (80028b4 <HAL_FLASHEx_Erase+0xd0>)
 80028a4:	2200      	movs	r2, #0
 80028a6:	751a      	strb	r2, [r3, #20]

  return status;
 80028a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3710      	adds	r7, #16
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	20000708 	.word	0x20000708
 80028b8:	40023c00 	.word	0x40023c00

080028bc <FLASH_MassErase>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint8_t VoltageRange)
{
 80028bc:	b480      	push	{r7}
 80028be:	b083      	sub	sp, #12
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	4603      	mov	r3, r0
 80028c4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  /* if the previous operation is completed, proceed to erase all sectors */
  FLASH->CR &= CR_PSIZE_MASK;
 80028c6:	4b0f      	ldr	r3, [pc, #60]	; (8002904 <FLASH_MassErase+0x48>)
 80028c8:	691b      	ldr	r3, [r3, #16]
 80028ca:	4a0e      	ldr	r2, [pc, #56]	; (8002904 <FLASH_MassErase+0x48>)
 80028cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028d0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 80028d2:	4b0c      	ldr	r3, [pc, #48]	; (8002904 <FLASH_MassErase+0x48>)
 80028d4:	691b      	ldr	r3, [r3, #16]
 80028d6:	4a0b      	ldr	r2, [pc, #44]	; (8002904 <FLASH_MassErase+0x48>)
 80028d8:	f043 0304 	orr.w	r3, r3, #4
 80028dc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8);
 80028de:	4b09      	ldr	r3, [pc, #36]	; (8002904 <FLASH_MassErase+0x48>)
 80028e0:	691a      	ldr	r2, [r3, #16]
 80028e2:	79fb      	ldrb	r3, [r7, #7]
 80028e4:	021b      	lsls	r3, r3, #8
 80028e6:	4313      	orrs	r3, r2
 80028e8:	4a06      	ldr	r2, [pc, #24]	; (8002904 <FLASH_MassErase+0x48>)
 80028ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028ee:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 80028f0:	f3bf 8f4f 	dsb	sy
}
 80028f4:	bf00      	nop
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 80028f6:	bf00      	nop
 80028f8:	370c      	adds	r7, #12
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr
 8002902:	bf00      	nop
 8002904:	40023c00 	.word	0x40023c00

08002908 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8002908:	b480      	push	{r7}
 800290a:	b085      	sub	sp, #20
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
 8002910:	460b      	mov	r3, r1
 8002912:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0;
 8002914:	2300      	movs	r3, #0
 8002916:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8002918:	78fb      	ldrb	r3, [r7, #3]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d102      	bne.n	8002924 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 800291e:	2300      	movs	r3, #0
 8002920:	60fb      	str	r3, [r7, #12]
 8002922:	e010      	b.n	8002946 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8002924:	78fb      	ldrb	r3, [r7, #3]
 8002926:	2b01      	cmp	r3, #1
 8002928:	d103      	bne.n	8002932 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800292a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800292e:	60fb      	str	r3, [r7, #12]
 8002930:	e009      	b.n	8002946 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8002932:	78fb      	ldrb	r3, [r7, #3]
 8002934:	2b02      	cmp	r3, #2
 8002936:	d103      	bne.n	8002940 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8002938:	f44f 7300 	mov.w	r3, #512	; 0x200
 800293c:	60fb      	str	r3, [r7, #12]
 800293e:	e002      	b.n	8002946 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8002940:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002944:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  FLASH->CR &= CR_PSIZE_MASK;
 8002946:	4b15      	ldr	r3, [pc, #84]	; (800299c <FLASH_Erase_Sector+0x94>)
 8002948:	691b      	ldr	r3, [r3, #16]
 800294a:	4a14      	ldr	r2, [pc, #80]	; (800299c <FLASH_Erase_Sector+0x94>)
 800294c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002950:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8002952:	4b12      	ldr	r3, [pc, #72]	; (800299c <FLASH_Erase_Sector+0x94>)
 8002954:	691a      	ldr	r2, [r3, #16]
 8002956:	4911      	ldr	r1, [pc, #68]	; (800299c <FLASH_Erase_Sector+0x94>)
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	4313      	orrs	r3, r2
 800295c:	610b      	str	r3, [r1, #16]
  FLASH->CR &= SECTOR_MASK;
 800295e:	4b0f      	ldr	r3, [pc, #60]	; (800299c <FLASH_Erase_Sector+0x94>)
 8002960:	691b      	ldr	r3, [r3, #16]
 8002962:	4a0e      	ldr	r2, [pc, #56]	; (800299c <FLASH_Erase_Sector+0x94>)
 8002964:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002968:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800296a:	4b0c      	ldr	r3, [pc, #48]	; (800299c <FLASH_Erase_Sector+0x94>)
 800296c:	691a      	ldr	r2, [r3, #16]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	00db      	lsls	r3, r3, #3
 8002972:	4313      	orrs	r3, r2
 8002974:	4a09      	ldr	r2, [pc, #36]	; (800299c <FLASH_Erase_Sector+0x94>)
 8002976:	f043 0302 	orr.w	r3, r3, #2
 800297a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800297c:	4b07      	ldr	r3, [pc, #28]	; (800299c <FLASH_Erase_Sector+0x94>)
 800297e:	691b      	ldr	r3, [r3, #16]
 8002980:	4a06      	ldr	r2, [pc, #24]	; (800299c <FLASH_Erase_Sector+0x94>)
 8002982:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002986:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8002988:	f3bf 8f4f 	dsb	sy
}
 800298c:	bf00      	nop
  
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 800298e:	bf00      	nop
 8002990:	3714      	adds	r7, #20
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr
 800299a:	bf00      	nop
 800299c:	40023c00 	.word	0x40023c00

080029a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b089      	sub	sp, #36	; 0x24
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
 80029a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80029aa:	2300      	movs	r3, #0
 80029ac:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80029ae:	2300      	movs	r3, #0
 80029b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80029b2:	2300      	movs	r3, #0
 80029b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80029b6:	2300      	movs	r3, #0
 80029b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80029ba:	2300      	movs	r3, #0
 80029bc:	61fb      	str	r3, [r7, #28]
 80029be:	e175      	b.n	8002cac <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80029c0:	2201      	movs	r2, #1
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	fa02 f303 	lsl.w	r3, r2, r3
 80029c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	697a      	ldr	r2, [r7, #20]
 80029d0:	4013      	ands	r3, r2
 80029d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80029d4:	693a      	ldr	r2, [r7, #16]
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	429a      	cmp	r2, r3
 80029da:	f040 8164 	bne.w	8002ca6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	f003 0303 	and.w	r3, r3, #3
 80029e6:	2b01      	cmp	r3, #1
 80029e8:	d005      	beq.n	80029f6 <HAL_GPIO_Init+0x56>
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	f003 0303 	and.w	r3, r3, #3
 80029f2:	2b02      	cmp	r3, #2
 80029f4:	d130      	bne.n	8002a58 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80029fc:	69fb      	ldr	r3, [r7, #28]
 80029fe:	005b      	lsls	r3, r3, #1
 8002a00:	2203      	movs	r2, #3
 8002a02:	fa02 f303 	lsl.w	r3, r2, r3
 8002a06:	43db      	mvns	r3, r3
 8002a08:	69ba      	ldr	r2, [r7, #24]
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	68da      	ldr	r2, [r3, #12]
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	005b      	lsls	r3, r3, #1
 8002a16:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1a:	69ba      	ldr	r2, [r7, #24]
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	69ba      	ldr	r2, [r7, #24]
 8002a24:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	69fb      	ldr	r3, [r7, #28]
 8002a30:	fa02 f303 	lsl.w	r3, r2, r3
 8002a34:	43db      	mvns	r3, r3
 8002a36:	69ba      	ldr	r2, [r7, #24]
 8002a38:	4013      	ands	r3, r2
 8002a3a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	091b      	lsrs	r3, r3, #4
 8002a42:	f003 0201 	and.w	r2, r3, #1
 8002a46:	69fb      	ldr	r3, [r7, #28]
 8002a48:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4c:	69ba      	ldr	r2, [r7, #24]
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	69ba      	ldr	r2, [r7, #24]
 8002a56:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f003 0303 	and.w	r3, r3, #3
 8002a60:	2b03      	cmp	r3, #3
 8002a62:	d017      	beq.n	8002a94 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	68db      	ldr	r3, [r3, #12]
 8002a68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	005b      	lsls	r3, r3, #1
 8002a6e:	2203      	movs	r2, #3
 8002a70:	fa02 f303 	lsl.w	r3, r2, r3
 8002a74:	43db      	mvns	r3, r3
 8002a76:	69ba      	ldr	r2, [r7, #24]
 8002a78:	4013      	ands	r3, r2
 8002a7a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	689a      	ldr	r2, [r3, #8]
 8002a80:	69fb      	ldr	r3, [r7, #28]
 8002a82:	005b      	lsls	r3, r3, #1
 8002a84:	fa02 f303 	lsl.w	r3, r2, r3
 8002a88:	69ba      	ldr	r2, [r7, #24]
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	69ba      	ldr	r2, [r7, #24]
 8002a92:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	f003 0303 	and.w	r3, r3, #3
 8002a9c:	2b02      	cmp	r3, #2
 8002a9e:	d123      	bne.n	8002ae8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002aa0:	69fb      	ldr	r3, [r7, #28]
 8002aa2:	08da      	lsrs	r2, r3, #3
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	3208      	adds	r2, #8
 8002aa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002aac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002aae:	69fb      	ldr	r3, [r7, #28]
 8002ab0:	f003 0307 	and.w	r3, r3, #7
 8002ab4:	009b      	lsls	r3, r3, #2
 8002ab6:	220f      	movs	r2, #15
 8002ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8002abc:	43db      	mvns	r3, r3
 8002abe:	69ba      	ldr	r2, [r7, #24]
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	691a      	ldr	r2, [r3, #16]
 8002ac8:	69fb      	ldr	r3, [r7, #28]
 8002aca:	f003 0307 	and.w	r3, r3, #7
 8002ace:	009b      	lsls	r3, r3, #2
 8002ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad4:	69ba      	ldr	r2, [r7, #24]
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002ada:	69fb      	ldr	r3, [r7, #28]
 8002adc:	08da      	lsrs	r2, r3, #3
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	3208      	adds	r2, #8
 8002ae2:	69b9      	ldr	r1, [r7, #24]
 8002ae4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	005b      	lsls	r3, r3, #1
 8002af2:	2203      	movs	r2, #3
 8002af4:	fa02 f303 	lsl.w	r3, r2, r3
 8002af8:	43db      	mvns	r3, r3
 8002afa:	69ba      	ldr	r2, [r7, #24]
 8002afc:	4013      	ands	r3, r2
 8002afe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	f003 0203 	and.w	r2, r3, #3
 8002b08:	69fb      	ldr	r3, [r7, #28]
 8002b0a:	005b      	lsls	r3, r3, #1
 8002b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b10:	69ba      	ldr	r2, [r7, #24]
 8002b12:	4313      	orrs	r3, r2
 8002b14:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	69ba      	ldr	r2, [r7, #24]
 8002b1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	f000 80be 	beq.w	8002ca6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b2a:	4b66      	ldr	r3, [pc, #408]	; (8002cc4 <HAL_GPIO_Init+0x324>)
 8002b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b2e:	4a65      	ldr	r2, [pc, #404]	; (8002cc4 <HAL_GPIO_Init+0x324>)
 8002b30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b34:	6453      	str	r3, [r2, #68]	; 0x44
 8002b36:	4b63      	ldr	r3, [pc, #396]	; (8002cc4 <HAL_GPIO_Init+0x324>)
 8002b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b3e:	60fb      	str	r3, [r7, #12]
 8002b40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002b42:	4a61      	ldr	r2, [pc, #388]	; (8002cc8 <HAL_GPIO_Init+0x328>)
 8002b44:	69fb      	ldr	r3, [r7, #28]
 8002b46:	089b      	lsrs	r3, r3, #2
 8002b48:	3302      	adds	r3, #2
 8002b4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002b50:	69fb      	ldr	r3, [r7, #28]
 8002b52:	f003 0303 	and.w	r3, r3, #3
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	220f      	movs	r2, #15
 8002b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5e:	43db      	mvns	r3, r3
 8002b60:	69ba      	ldr	r2, [r7, #24]
 8002b62:	4013      	ands	r3, r2
 8002b64:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	4a58      	ldr	r2, [pc, #352]	; (8002ccc <HAL_GPIO_Init+0x32c>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d037      	beq.n	8002bde <HAL_GPIO_Init+0x23e>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	4a57      	ldr	r2, [pc, #348]	; (8002cd0 <HAL_GPIO_Init+0x330>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d031      	beq.n	8002bda <HAL_GPIO_Init+0x23a>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	4a56      	ldr	r2, [pc, #344]	; (8002cd4 <HAL_GPIO_Init+0x334>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d02b      	beq.n	8002bd6 <HAL_GPIO_Init+0x236>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4a55      	ldr	r2, [pc, #340]	; (8002cd8 <HAL_GPIO_Init+0x338>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d025      	beq.n	8002bd2 <HAL_GPIO_Init+0x232>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	4a54      	ldr	r2, [pc, #336]	; (8002cdc <HAL_GPIO_Init+0x33c>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d01f      	beq.n	8002bce <HAL_GPIO_Init+0x22e>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	4a53      	ldr	r2, [pc, #332]	; (8002ce0 <HAL_GPIO_Init+0x340>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d019      	beq.n	8002bca <HAL_GPIO_Init+0x22a>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	4a52      	ldr	r2, [pc, #328]	; (8002ce4 <HAL_GPIO_Init+0x344>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d013      	beq.n	8002bc6 <HAL_GPIO_Init+0x226>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	4a51      	ldr	r2, [pc, #324]	; (8002ce8 <HAL_GPIO_Init+0x348>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d00d      	beq.n	8002bc2 <HAL_GPIO_Init+0x222>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4a50      	ldr	r2, [pc, #320]	; (8002cec <HAL_GPIO_Init+0x34c>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d007      	beq.n	8002bbe <HAL_GPIO_Init+0x21e>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	4a4f      	ldr	r2, [pc, #316]	; (8002cf0 <HAL_GPIO_Init+0x350>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d101      	bne.n	8002bba <HAL_GPIO_Init+0x21a>
 8002bb6:	2309      	movs	r3, #9
 8002bb8:	e012      	b.n	8002be0 <HAL_GPIO_Init+0x240>
 8002bba:	230a      	movs	r3, #10
 8002bbc:	e010      	b.n	8002be0 <HAL_GPIO_Init+0x240>
 8002bbe:	2308      	movs	r3, #8
 8002bc0:	e00e      	b.n	8002be0 <HAL_GPIO_Init+0x240>
 8002bc2:	2307      	movs	r3, #7
 8002bc4:	e00c      	b.n	8002be0 <HAL_GPIO_Init+0x240>
 8002bc6:	2306      	movs	r3, #6
 8002bc8:	e00a      	b.n	8002be0 <HAL_GPIO_Init+0x240>
 8002bca:	2305      	movs	r3, #5
 8002bcc:	e008      	b.n	8002be0 <HAL_GPIO_Init+0x240>
 8002bce:	2304      	movs	r3, #4
 8002bd0:	e006      	b.n	8002be0 <HAL_GPIO_Init+0x240>
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	e004      	b.n	8002be0 <HAL_GPIO_Init+0x240>
 8002bd6:	2302      	movs	r3, #2
 8002bd8:	e002      	b.n	8002be0 <HAL_GPIO_Init+0x240>
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e000      	b.n	8002be0 <HAL_GPIO_Init+0x240>
 8002bde:	2300      	movs	r3, #0
 8002be0:	69fa      	ldr	r2, [r7, #28]
 8002be2:	f002 0203 	and.w	r2, r2, #3
 8002be6:	0092      	lsls	r2, r2, #2
 8002be8:	4093      	lsls	r3, r2
 8002bea:	69ba      	ldr	r2, [r7, #24]
 8002bec:	4313      	orrs	r3, r2
 8002bee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002bf0:	4935      	ldr	r1, [pc, #212]	; (8002cc8 <HAL_GPIO_Init+0x328>)
 8002bf2:	69fb      	ldr	r3, [r7, #28]
 8002bf4:	089b      	lsrs	r3, r3, #2
 8002bf6:	3302      	adds	r3, #2
 8002bf8:	69ba      	ldr	r2, [r7, #24]
 8002bfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002bfe:	4b3d      	ldr	r3, [pc, #244]	; (8002cf4 <HAL_GPIO_Init+0x354>)
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	43db      	mvns	r3, r3
 8002c08:	69ba      	ldr	r2, [r7, #24]
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d003      	beq.n	8002c22 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002c1a:	69ba      	ldr	r2, [r7, #24]
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c22:	4a34      	ldr	r2, [pc, #208]	; (8002cf4 <HAL_GPIO_Init+0x354>)
 8002c24:	69bb      	ldr	r3, [r7, #24]
 8002c26:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c28:	4b32      	ldr	r3, [pc, #200]	; (8002cf4 <HAL_GPIO_Init+0x354>)
 8002c2a:	68db      	ldr	r3, [r3, #12]
 8002c2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	43db      	mvns	r3, r3
 8002c32:	69ba      	ldr	r2, [r7, #24]
 8002c34:	4013      	ands	r3, r2
 8002c36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d003      	beq.n	8002c4c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002c44:	69ba      	ldr	r2, [r7, #24]
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c4c:	4a29      	ldr	r2, [pc, #164]	; (8002cf4 <HAL_GPIO_Init+0x354>)
 8002c4e:	69bb      	ldr	r3, [r7, #24]
 8002c50:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002c52:	4b28      	ldr	r3, [pc, #160]	; (8002cf4 <HAL_GPIO_Init+0x354>)
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	43db      	mvns	r3, r3
 8002c5c:	69ba      	ldr	r2, [r7, #24]
 8002c5e:	4013      	ands	r3, r2
 8002c60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d003      	beq.n	8002c76 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002c6e:	69ba      	ldr	r2, [r7, #24]
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	4313      	orrs	r3, r2
 8002c74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c76:	4a1f      	ldr	r2, [pc, #124]	; (8002cf4 <HAL_GPIO_Init+0x354>)
 8002c78:	69bb      	ldr	r3, [r7, #24]
 8002c7a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c7c:	4b1d      	ldr	r3, [pc, #116]	; (8002cf4 <HAL_GPIO_Init+0x354>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	43db      	mvns	r3, r3
 8002c86:	69ba      	ldr	r2, [r7, #24]
 8002c88:	4013      	ands	r3, r2
 8002c8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d003      	beq.n	8002ca0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002c98:	69ba      	ldr	r2, [r7, #24]
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ca0:	4a14      	ldr	r2, [pc, #80]	; (8002cf4 <HAL_GPIO_Init+0x354>)
 8002ca2:	69bb      	ldr	r3, [r7, #24]
 8002ca4:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002ca6:	69fb      	ldr	r3, [r7, #28]
 8002ca8:	3301      	adds	r3, #1
 8002caa:	61fb      	str	r3, [r7, #28]
 8002cac:	69fb      	ldr	r3, [r7, #28]
 8002cae:	2b0f      	cmp	r3, #15
 8002cb0:	f67f ae86 	bls.w	80029c0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002cb4:	bf00      	nop
 8002cb6:	bf00      	nop
 8002cb8:	3724      	adds	r7, #36	; 0x24
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr
 8002cc2:	bf00      	nop
 8002cc4:	40023800 	.word	0x40023800
 8002cc8:	40013800 	.word	0x40013800
 8002ccc:	40020000 	.word	0x40020000
 8002cd0:	40020400 	.word	0x40020400
 8002cd4:	40020800 	.word	0x40020800
 8002cd8:	40020c00 	.word	0x40020c00
 8002cdc:	40021000 	.word	0x40021000
 8002ce0:	40021400 	.word	0x40021400
 8002ce4:	40021800 	.word	0x40021800
 8002ce8:	40021c00 	.word	0x40021c00
 8002cec:	40022000 	.word	0x40022000
 8002cf0:	40022400 	.word	0x40022400
 8002cf4:	40013c00 	.word	0x40013c00

08002cf8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b083      	sub	sp, #12
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
 8002d00:	460b      	mov	r3, r1
 8002d02:	807b      	strh	r3, [r7, #2]
 8002d04:	4613      	mov	r3, r2
 8002d06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d08:	787b      	ldrb	r3, [r7, #1]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d003      	beq.n	8002d16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d0e:	887a      	ldrh	r2, [r7, #2]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002d14:	e003      	b.n	8002d1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002d16:	887b      	ldrh	r3, [r7, #2]
 8002d18:	041a      	lsls	r2, r3, #16
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	619a      	str	r2, [r3, #24]
}
 8002d1e:	bf00      	nop
 8002d20:	370c      	adds	r7, #12
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr

08002d2a <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d2a:	b480      	push	{r7}
 8002d2c:	b085      	sub	sp, #20
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	6078      	str	r0, [r7, #4]
 8002d32:	460b      	mov	r3, r1
 8002d34:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	695b      	ldr	r3, [r3, #20]
 8002d3a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002d3c:	887a      	ldrh	r2, [r7, #2]
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	4013      	ands	r3, r2
 8002d42:	041a      	lsls	r2, r3, #16
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	43d9      	mvns	r1, r3
 8002d48:	887b      	ldrh	r3, [r7, #2]
 8002d4a:	400b      	ands	r3, r1
 8002d4c:	431a      	orrs	r2, r3
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	619a      	str	r2, [r3, #24]
}
 8002d52:	bf00      	nop
 8002d54:	3714      	adds	r7, #20
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr

08002d5e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002d5e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d60:	b08f      	sub	sp, #60	; 0x3c
 8002d62:	af0a      	add	r7, sp, #40	; 0x28
 8002d64:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d101      	bne.n	8002d70 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e116      	b.n	8002f9e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d106      	bne.n	8002d90 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2200      	movs	r2, #0
 8002d86:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f006 faac 	bl	80092e8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2203      	movs	r2, #3
 8002d94:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d102      	bne.n	8002daa <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2200      	movs	r2, #0
 8002da8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4618      	mov	r0, r3
 8002db0:	f002 fc4b 	bl	800564a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	603b      	str	r3, [r7, #0]
 8002dba:	687e      	ldr	r6, [r7, #4]
 8002dbc:	466d      	mov	r5, sp
 8002dbe:	f106 0410 	add.w	r4, r6, #16
 8002dc2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002dc4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002dc6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002dc8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002dca:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002dce:	e885 0003 	stmia.w	r5, {r0, r1}
 8002dd2:	1d33      	adds	r3, r6, #4
 8002dd4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002dd6:	6838      	ldr	r0, [r7, #0]
 8002dd8:	f002 fb2c 	bl	8005434 <USB_CoreInit>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d005      	beq.n	8002dee <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2202      	movs	r2, #2
 8002de6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e0d7      	b.n	8002f9e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	2100      	movs	r1, #0
 8002df4:	4618      	mov	r0, r3
 8002df6:	f002 fc39 	bl	800566c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	73fb      	strb	r3, [r7, #15]
 8002dfe:	e04a      	b.n	8002e96 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002e00:	7bfa      	ldrb	r2, [r7, #15]
 8002e02:	6879      	ldr	r1, [r7, #4]
 8002e04:	4613      	mov	r3, r2
 8002e06:	00db      	lsls	r3, r3, #3
 8002e08:	4413      	add	r3, r2
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	440b      	add	r3, r1
 8002e0e:	333d      	adds	r3, #61	; 0x3d
 8002e10:	2201      	movs	r2, #1
 8002e12:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002e14:	7bfa      	ldrb	r2, [r7, #15]
 8002e16:	6879      	ldr	r1, [r7, #4]
 8002e18:	4613      	mov	r3, r2
 8002e1a:	00db      	lsls	r3, r3, #3
 8002e1c:	4413      	add	r3, r2
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	440b      	add	r3, r1
 8002e22:	333c      	adds	r3, #60	; 0x3c
 8002e24:	7bfa      	ldrb	r2, [r7, #15]
 8002e26:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002e28:	7bfa      	ldrb	r2, [r7, #15]
 8002e2a:	7bfb      	ldrb	r3, [r7, #15]
 8002e2c:	b298      	uxth	r0, r3
 8002e2e:	6879      	ldr	r1, [r7, #4]
 8002e30:	4613      	mov	r3, r2
 8002e32:	00db      	lsls	r3, r3, #3
 8002e34:	4413      	add	r3, r2
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	440b      	add	r3, r1
 8002e3a:	3344      	adds	r3, #68	; 0x44
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002e40:	7bfa      	ldrb	r2, [r7, #15]
 8002e42:	6879      	ldr	r1, [r7, #4]
 8002e44:	4613      	mov	r3, r2
 8002e46:	00db      	lsls	r3, r3, #3
 8002e48:	4413      	add	r3, r2
 8002e4a:	009b      	lsls	r3, r3, #2
 8002e4c:	440b      	add	r3, r1
 8002e4e:	3340      	adds	r3, #64	; 0x40
 8002e50:	2200      	movs	r2, #0
 8002e52:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002e54:	7bfa      	ldrb	r2, [r7, #15]
 8002e56:	6879      	ldr	r1, [r7, #4]
 8002e58:	4613      	mov	r3, r2
 8002e5a:	00db      	lsls	r3, r3, #3
 8002e5c:	4413      	add	r3, r2
 8002e5e:	009b      	lsls	r3, r3, #2
 8002e60:	440b      	add	r3, r1
 8002e62:	3348      	adds	r3, #72	; 0x48
 8002e64:	2200      	movs	r2, #0
 8002e66:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002e68:	7bfa      	ldrb	r2, [r7, #15]
 8002e6a:	6879      	ldr	r1, [r7, #4]
 8002e6c:	4613      	mov	r3, r2
 8002e6e:	00db      	lsls	r3, r3, #3
 8002e70:	4413      	add	r3, r2
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	440b      	add	r3, r1
 8002e76:	334c      	adds	r3, #76	; 0x4c
 8002e78:	2200      	movs	r2, #0
 8002e7a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002e7c:	7bfa      	ldrb	r2, [r7, #15]
 8002e7e:	6879      	ldr	r1, [r7, #4]
 8002e80:	4613      	mov	r3, r2
 8002e82:	00db      	lsls	r3, r3, #3
 8002e84:	4413      	add	r3, r2
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	440b      	add	r3, r1
 8002e8a:	3354      	adds	r3, #84	; 0x54
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e90:	7bfb      	ldrb	r3, [r7, #15]
 8002e92:	3301      	adds	r3, #1
 8002e94:	73fb      	strb	r3, [r7, #15]
 8002e96:	7bfa      	ldrb	r2, [r7, #15]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d3af      	bcc.n	8002e00 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	73fb      	strb	r3, [r7, #15]
 8002ea4:	e044      	b.n	8002f30 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002ea6:	7bfa      	ldrb	r2, [r7, #15]
 8002ea8:	6879      	ldr	r1, [r7, #4]
 8002eaa:	4613      	mov	r3, r2
 8002eac:	00db      	lsls	r3, r3, #3
 8002eae:	4413      	add	r3, r2
 8002eb0:	009b      	lsls	r3, r3, #2
 8002eb2:	440b      	add	r3, r1
 8002eb4:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002eb8:	2200      	movs	r2, #0
 8002eba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002ebc:	7bfa      	ldrb	r2, [r7, #15]
 8002ebe:	6879      	ldr	r1, [r7, #4]
 8002ec0:	4613      	mov	r3, r2
 8002ec2:	00db      	lsls	r3, r3, #3
 8002ec4:	4413      	add	r3, r2
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	440b      	add	r3, r1
 8002eca:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002ece:	7bfa      	ldrb	r2, [r7, #15]
 8002ed0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002ed2:	7bfa      	ldrb	r2, [r7, #15]
 8002ed4:	6879      	ldr	r1, [r7, #4]
 8002ed6:	4613      	mov	r3, r2
 8002ed8:	00db      	lsls	r3, r3, #3
 8002eda:	4413      	add	r3, r2
 8002edc:	009b      	lsls	r3, r3, #2
 8002ede:	440b      	add	r3, r1
 8002ee0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002ee8:	7bfa      	ldrb	r2, [r7, #15]
 8002eea:	6879      	ldr	r1, [r7, #4]
 8002eec:	4613      	mov	r3, r2
 8002eee:	00db      	lsls	r3, r3, #3
 8002ef0:	4413      	add	r3, r2
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	440b      	add	r3, r1
 8002ef6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002efa:	2200      	movs	r2, #0
 8002efc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002efe:	7bfa      	ldrb	r2, [r7, #15]
 8002f00:	6879      	ldr	r1, [r7, #4]
 8002f02:	4613      	mov	r3, r2
 8002f04:	00db      	lsls	r3, r3, #3
 8002f06:	4413      	add	r3, r2
 8002f08:	009b      	lsls	r3, r3, #2
 8002f0a:	440b      	add	r3, r1
 8002f0c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002f10:	2200      	movs	r2, #0
 8002f12:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002f14:	7bfa      	ldrb	r2, [r7, #15]
 8002f16:	6879      	ldr	r1, [r7, #4]
 8002f18:	4613      	mov	r3, r2
 8002f1a:	00db      	lsls	r3, r3, #3
 8002f1c:	4413      	add	r3, r2
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	440b      	add	r3, r1
 8002f22:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002f26:	2200      	movs	r2, #0
 8002f28:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f2a:	7bfb      	ldrb	r3, [r7, #15]
 8002f2c:	3301      	adds	r3, #1
 8002f2e:	73fb      	strb	r3, [r7, #15]
 8002f30:	7bfa      	ldrb	r2, [r7, #15]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d3b5      	bcc.n	8002ea6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	603b      	str	r3, [r7, #0]
 8002f40:	687e      	ldr	r6, [r7, #4]
 8002f42:	466d      	mov	r5, sp
 8002f44:	f106 0410 	add.w	r4, r6, #16
 8002f48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f4a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f4e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f50:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002f54:	e885 0003 	stmia.w	r5, {r0, r1}
 8002f58:	1d33      	adds	r3, r6, #4
 8002f5a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f5c:	6838      	ldr	r0, [r7, #0]
 8002f5e:	f002 fbd1 	bl	8005704 <USB_DevInit>
 8002f62:	4603      	mov	r3, r0
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d005      	beq.n	8002f74 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2202      	movs	r2, #2
 8002f6c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	e014      	b.n	8002f9e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2200      	movs	r2, #0
 8002f78:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2201      	movs	r2, #1
 8002f80:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d102      	bne.n	8002f92 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	f001 f97b 	bl	8004288 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4618      	mov	r0, r3
 8002f98:	f003 fd1f 	bl	80069da <USB_DevDisconnect>

  return HAL_OK;
 8002f9c:	2300      	movs	r3, #0
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3714      	adds	r7, #20
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002fa6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002fa6:	b580      	push	{r7, lr}
 8002fa8:	b082      	sub	sp, #8
 8002faa:	af00      	add	r7, sp, #0
 8002fac:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d101      	bne.n	8002fbc <HAL_PCD_Start+0x16>
 8002fb8:	2302      	movs	r3, #2
 8002fba:	e012      	b.n	8002fe2 <HAL_PCD_Start+0x3c>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  __HAL_PCD_ENABLE(hpcd);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f002 fb2d 	bl	8005628 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f003 fce0 	bl	8006998 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002fe0:	2300      	movs	r3, #0
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3708      	adds	r7, #8
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}

08002fea <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002fea:	b590      	push	{r4, r7, lr}
 8002fec:	b08d      	sub	sp, #52	; 0x34
 8002fee:	af00      	add	r7, sp, #0
 8002ff0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ff8:	6a3b      	ldr	r3, [r7, #32]
 8002ffa:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4618      	mov	r0, r3
 8003002:	f003 fd9e 	bl	8006b42 <USB_GetMode>
 8003006:	4603      	mov	r3, r0
 8003008:	2b00      	cmp	r3, #0
 800300a:	f040 84b7 	bne.w	800397c <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4618      	mov	r0, r3
 8003014:	f003 fd02 	bl	8006a1c <USB_ReadInterrupts>
 8003018:	4603      	mov	r3, r0
 800301a:	2b00      	cmp	r3, #0
 800301c:	f000 84ad 	beq.w	800397a <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003020:	69fb      	ldr	r3, [r7, #28]
 8003022:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	0a1b      	lsrs	r3, r3, #8
 800302a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4618      	mov	r0, r3
 800303a:	f003 fcef 	bl	8006a1c <USB_ReadInterrupts>
 800303e:	4603      	mov	r3, r0
 8003040:	f003 0302 	and.w	r3, r3, #2
 8003044:	2b02      	cmp	r3, #2
 8003046:	d107      	bne.n	8003058 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	695a      	ldr	r2, [r3, #20]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f002 0202 	and.w	r2, r2, #2
 8003056:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4618      	mov	r0, r3
 800305e:	f003 fcdd 	bl	8006a1c <USB_ReadInterrupts>
 8003062:	4603      	mov	r3, r0
 8003064:	f003 0310 	and.w	r3, r3, #16
 8003068:	2b10      	cmp	r3, #16
 800306a:	d161      	bne.n	8003130 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	699a      	ldr	r2, [r3, #24]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f022 0210 	bic.w	r2, r2, #16
 800307a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800307c:	6a3b      	ldr	r3, [r7, #32]
 800307e:	6a1b      	ldr	r3, [r3, #32]
 8003080:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003082:	69bb      	ldr	r3, [r7, #24]
 8003084:	f003 020f 	and.w	r2, r3, #15
 8003088:	4613      	mov	r3, r2
 800308a:	00db      	lsls	r3, r3, #3
 800308c:	4413      	add	r3, r2
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003094:	687a      	ldr	r2, [r7, #4]
 8003096:	4413      	add	r3, r2
 8003098:	3304      	adds	r3, #4
 800309a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800309c:	69bb      	ldr	r3, [r7, #24]
 800309e:	0c5b      	lsrs	r3, r3, #17
 80030a0:	f003 030f 	and.w	r3, r3, #15
 80030a4:	2b02      	cmp	r3, #2
 80030a6:	d124      	bne.n	80030f2 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80030a8:	69ba      	ldr	r2, [r7, #24]
 80030aa:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80030ae:	4013      	ands	r3, r2
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d035      	beq.n	8003120 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80030b8:	69bb      	ldr	r3, [r7, #24]
 80030ba:	091b      	lsrs	r3, r3, #4
 80030bc:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80030be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80030c2:	b29b      	uxth	r3, r3
 80030c4:	461a      	mov	r2, r3
 80030c6:	6a38      	ldr	r0, [r7, #32]
 80030c8:	f003 fb14 	bl	80066f4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	691a      	ldr	r2, [r3, #16]
 80030d0:	69bb      	ldr	r3, [r7, #24]
 80030d2:	091b      	lsrs	r3, r3, #4
 80030d4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80030d8:	441a      	add	r2, r3
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	6a1a      	ldr	r2, [r3, #32]
 80030e2:	69bb      	ldr	r3, [r7, #24]
 80030e4:	091b      	lsrs	r3, r3, #4
 80030e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80030ea:	441a      	add	r2, r3
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	621a      	str	r2, [r3, #32]
 80030f0:	e016      	b.n	8003120 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80030f2:	69bb      	ldr	r3, [r7, #24]
 80030f4:	0c5b      	lsrs	r3, r3, #17
 80030f6:	f003 030f 	and.w	r3, r3, #15
 80030fa:	2b06      	cmp	r3, #6
 80030fc:	d110      	bne.n	8003120 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003104:	2208      	movs	r2, #8
 8003106:	4619      	mov	r1, r3
 8003108:	6a38      	ldr	r0, [r7, #32]
 800310a:	f003 faf3 	bl	80066f4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	6a1a      	ldr	r2, [r3, #32]
 8003112:	69bb      	ldr	r3, [r7, #24]
 8003114:	091b      	lsrs	r3, r3, #4
 8003116:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800311a:	441a      	add	r2, r3
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	699a      	ldr	r2, [r3, #24]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f042 0210 	orr.w	r2, r2, #16
 800312e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4618      	mov	r0, r3
 8003136:	f003 fc71 	bl	8006a1c <USB_ReadInterrupts>
 800313a:	4603      	mov	r3, r0
 800313c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003140:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003144:	f040 80a7 	bne.w	8003296 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003148:	2300      	movs	r3, #0
 800314a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4618      	mov	r0, r3
 8003152:	f003 fc76 	bl	8006a42 <USB_ReadDevAllOutEpInterrupt>
 8003156:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003158:	e099      	b.n	800328e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800315a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800315c:	f003 0301 	and.w	r3, r3, #1
 8003160:	2b00      	cmp	r3, #0
 8003162:	f000 808e 	beq.w	8003282 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800316c:	b2d2      	uxtb	r2, r2
 800316e:	4611      	mov	r1, r2
 8003170:	4618      	mov	r0, r3
 8003172:	f003 fc9a 	bl	8006aaa <USB_ReadDevOutEPInterrupt>
 8003176:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	f003 0301 	and.w	r3, r3, #1
 800317e:	2b00      	cmp	r3, #0
 8003180:	d00c      	beq.n	800319c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003184:	015a      	lsls	r2, r3, #5
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	4413      	add	r3, r2
 800318a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800318e:	461a      	mov	r2, r3
 8003190:	2301      	movs	r3, #1
 8003192:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003194:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	f000 fef0 	bl	8003f7c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	f003 0308 	and.w	r3, r3, #8
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d00c      	beq.n	80031c0 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80031a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a8:	015a      	lsls	r2, r3, #5
 80031aa:	69fb      	ldr	r3, [r7, #28]
 80031ac:	4413      	add	r3, r2
 80031ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031b2:	461a      	mov	r2, r3
 80031b4:	2308      	movs	r3, #8
 80031b6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80031b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f000 ffc6 	bl	800414c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	f003 0310 	and.w	r3, r3, #16
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d008      	beq.n	80031dc <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80031ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031cc:	015a      	lsls	r2, r3, #5
 80031ce:	69fb      	ldr	r3, [r7, #28]
 80031d0:	4413      	add	r3, r2
 80031d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031d6:	461a      	mov	r2, r3
 80031d8:	2310      	movs	r3, #16
 80031da:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	f003 0302 	and.w	r3, r3, #2
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d030      	beq.n	8003248 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80031e6:	6a3b      	ldr	r3, [r7, #32]
 80031e8:	695b      	ldr	r3, [r3, #20]
 80031ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031ee:	2b80      	cmp	r3, #128	; 0x80
 80031f0:	d109      	bne.n	8003206 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80031f2:	69fb      	ldr	r3, [r7, #28]
 80031f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	69fa      	ldr	r2, [r7, #28]
 80031fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003200:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003204:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003206:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003208:	4613      	mov	r3, r2
 800320a:	00db      	lsls	r3, r3, #3
 800320c:	4413      	add	r3, r2
 800320e:	009b      	lsls	r3, r3, #2
 8003210:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003214:	687a      	ldr	r2, [r7, #4]
 8003216:	4413      	add	r3, r2
 8003218:	3304      	adds	r3, #4
 800321a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	78db      	ldrb	r3, [r3, #3]
 8003220:	2b01      	cmp	r3, #1
 8003222:	d108      	bne.n	8003236 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	2200      	movs	r2, #0
 8003228:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800322a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800322c:	b2db      	uxtb	r3, r3
 800322e:	4619      	mov	r1, r3
 8003230:	6878      	ldr	r0, [r7, #4]
 8003232:	f006 f97d 	bl	8009530 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003238:	015a      	lsls	r2, r3, #5
 800323a:	69fb      	ldr	r3, [r7, #28]
 800323c:	4413      	add	r3, r2
 800323e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003242:	461a      	mov	r2, r3
 8003244:	2302      	movs	r3, #2
 8003246:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	f003 0320 	and.w	r3, r3, #32
 800324e:	2b00      	cmp	r3, #0
 8003250:	d008      	beq.n	8003264 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003254:	015a      	lsls	r2, r3, #5
 8003256:	69fb      	ldr	r3, [r7, #28]
 8003258:	4413      	add	r3, r2
 800325a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800325e:	461a      	mov	r2, r3
 8003260:	2320      	movs	r3, #32
 8003262:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800326a:	2b00      	cmp	r3, #0
 800326c:	d009      	beq.n	8003282 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800326e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003270:	015a      	lsls	r2, r3, #5
 8003272:	69fb      	ldr	r3, [r7, #28]
 8003274:	4413      	add	r3, r2
 8003276:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800327a:	461a      	mov	r2, r3
 800327c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003280:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003284:	3301      	adds	r3, #1
 8003286:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800328a:	085b      	lsrs	r3, r3, #1
 800328c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800328e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003290:	2b00      	cmp	r3, #0
 8003292:	f47f af62 	bne.w	800315a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4618      	mov	r0, r3
 800329c:	f003 fbbe 	bl	8006a1c <USB_ReadInterrupts>
 80032a0:	4603      	mov	r3, r0
 80032a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032a6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80032aa:	f040 80db 	bne.w	8003464 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4618      	mov	r0, r3
 80032b4:	f003 fbdf 	bl	8006a76 <USB_ReadDevAllInEpInterrupt>
 80032b8:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80032ba:	2300      	movs	r3, #0
 80032bc:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80032be:	e0cd      	b.n	800345c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80032c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032c2:	f003 0301 	and.w	r3, r3, #1
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	f000 80c2 	beq.w	8003450 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032d2:	b2d2      	uxtb	r2, r2
 80032d4:	4611      	mov	r1, r2
 80032d6:	4618      	mov	r0, r3
 80032d8:	f003 fc05 	bl	8006ae6 <USB_ReadDevInEPInterrupt>
 80032dc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	f003 0301 	and.w	r3, r3, #1
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d057      	beq.n	8003398 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80032e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ea:	f003 030f 	and.w	r3, r3, #15
 80032ee:	2201      	movs	r2, #1
 80032f0:	fa02 f303 	lsl.w	r3, r2, r3
 80032f4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80032f6:	69fb      	ldr	r3, [r7, #28]
 80032f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	43db      	mvns	r3, r3
 8003302:	69f9      	ldr	r1, [r7, #28]
 8003304:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003308:	4013      	ands	r3, r2
 800330a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800330c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800330e:	015a      	lsls	r2, r3, #5
 8003310:	69fb      	ldr	r3, [r7, #28]
 8003312:	4413      	add	r3, r2
 8003314:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003318:	461a      	mov	r2, r3
 800331a:	2301      	movs	r3, #1
 800331c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	691b      	ldr	r3, [r3, #16]
 8003322:	2b01      	cmp	r3, #1
 8003324:	d132      	bne.n	800338c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003326:	6879      	ldr	r1, [r7, #4]
 8003328:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800332a:	4613      	mov	r3, r2
 800332c:	00db      	lsls	r3, r3, #3
 800332e:	4413      	add	r3, r2
 8003330:	009b      	lsls	r3, r3, #2
 8003332:	440b      	add	r3, r1
 8003334:	334c      	adds	r3, #76	; 0x4c
 8003336:	6819      	ldr	r1, [r3, #0]
 8003338:	6878      	ldr	r0, [r7, #4]
 800333a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800333c:	4613      	mov	r3, r2
 800333e:	00db      	lsls	r3, r3, #3
 8003340:	4413      	add	r3, r2
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	4403      	add	r3, r0
 8003346:	3348      	adds	r3, #72	; 0x48
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4419      	add	r1, r3
 800334c:	6878      	ldr	r0, [r7, #4]
 800334e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003350:	4613      	mov	r3, r2
 8003352:	00db      	lsls	r3, r3, #3
 8003354:	4413      	add	r3, r2
 8003356:	009b      	lsls	r3, r3, #2
 8003358:	4403      	add	r3, r0
 800335a:	334c      	adds	r3, #76	; 0x4c
 800335c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800335e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003360:	2b00      	cmp	r3, #0
 8003362:	d113      	bne.n	800338c <HAL_PCD_IRQHandler+0x3a2>
 8003364:	6879      	ldr	r1, [r7, #4]
 8003366:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003368:	4613      	mov	r3, r2
 800336a:	00db      	lsls	r3, r3, #3
 800336c:	4413      	add	r3, r2
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	440b      	add	r3, r1
 8003372:	3354      	adds	r3, #84	; 0x54
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d108      	bne.n	800338c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6818      	ldr	r0, [r3, #0]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003384:	461a      	mov	r2, r3
 8003386:	2101      	movs	r1, #1
 8003388:	f003 fc0e 	bl	8006ba8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800338c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800338e:	b2db      	uxtb	r3, r3
 8003390:	4619      	mov	r1, r3
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f006 f847 	bl	8009426 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	f003 0308 	and.w	r3, r3, #8
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d008      	beq.n	80033b4 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80033a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a4:	015a      	lsls	r2, r3, #5
 80033a6:	69fb      	ldr	r3, [r7, #28]
 80033a8:	4413      	add	r3, r2
 80033aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033ae:	461a      	mov	r2, r3
 80033b0:	2308      	movs	r3, #8
 80033b2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	f003 0310 	and.w	r3, r3, #16
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d008      	beq.n	80033d0 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80033be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c0:	015a      	lsls	r2, r3, #5
 80033c2:	69fb      	ldr	r3, [r7, #28]
 80033c4:	4413      	add	r3, r2
 80033c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033ca:	461a      	mov	r2, r3
 80033cc:	2310      	movs	r3, #16
 80033ce:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d008      	beq.n	80033ec <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80033da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033dc:	015a      	lsls	r2, r3, #5
 80033de:	69fb      	ldr	r3, [r7, #28]
 80033e0:	4413      	add	r3, r2
 80033e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033e6:	461a      	mov	r2, r3
 80033e8:	2340      	movs	r3, #64	; 0x40
 80033ea:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	f003 0302 	and.w	r3, r3, #2
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d023      	beq.n	800343e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80033f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80033f8:	6a38      	ldr	r0, [r7, #32]
 80033fa:	f002 fae1 	bl	80059c0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80033fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003400:	4613      	mov	r3, r2
 8003402:	00db      	lsls	r3, r3, #3
 8003404:	4413      	add	r3, r2
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	3338      	adds	r3, #56	; 0x38
 800340a:	687a      	ldr	r2, [r7, #4]
 800340c:	4413      	add	r3, r2
 800340e:	3304      	adds	r3, #4
 8003410:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	78db      	ldrb	r3, [r3, #3]
 8003416:	2b01      	cmp	r3, #1
 8003418:	d108      	bne.n	800342c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	2200      	movs	r2, #0
 800341e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003422:	b2db      	uxtb	r3, r3
 8003424:	4619      	mov	r1, r3
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f006 f894 	bl	8009554 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800342c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800342e:	015a      	lsls	r2, r3, #5
 8003430:	69fb      	ldr	r3, [r7, #28]
 8003432:	4413      	add	r3, r2
 8003434:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003438:	461a      	mov	r2, r3
 800343a:	2302      	movs	r3, #2
 800343c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003444:	2b00      	cmp	r3, #0
 8003446:	d003      	beq.n	8003450 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003448:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f000 fd08 	bl	8003e60 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003452:	3301      	adds	r3, #1
 8003454:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003458:	085b      	lsrs	r3, r3, #1
 800345a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800345c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800345e:	2b00      	cmp	r3, #0
 8003460:	f47f af2e 	bne.w	80032c0 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4618      	mov	r0, r3
 800346a:	f003 fad7 	bl	8006a1c <USB_ReadInterrupts>
 800346e:	4603      	mov	r3, r0
 8003470:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003474:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003478:	d122      	bne.n	80034c0 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800347a:	69fb      	ldr	r3, [r7, #28]
 800347c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	69fa      	ldr	r2, [r7, #28]
 8003484:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003488:	f023 0301 	bic.w	r3, r3, #1
 800348c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003494:	2b01      	cmp	r3, #1
 8003496:	d108      	bne.n	80034aa <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2200      	movs	r2, #0
 800349c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80034a0:	2100      	movs	r1, #0
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f006 fa0e 	bl	80098c4 <HAL_PCDEx_LPM_Callback>
 80034a8:	e002      	b.n	80034b0 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f006 f832 	bl	8009514 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	695a      	ldr	r2, [r3, #20]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80034be:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4618      	mov	r0, r3
 80034c6:	f003 faa9 	bl	8006a1c <USB_ReadInterrupts>
 80034ca:	4603      	mov	r3, r0
 80034cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034d4:	d112      	bne.n	80034fc <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80034d6:	69fb      	ldr	r3, [r7, #28]
 80034d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	f003 0301 	and.w	r3, r3, #1
 80034e2:	2b01      	cmp	r3, #1
 80034e4:	d102      	bne.n	80034ec <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f005 ffee 	bl	80094c8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	695a      	ldr	r2, [r3, #20]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80034fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4618      	mov	r0, r3
 8003502:	f003 fa8b 	bl	8006a1c <USB_ReadInterrupts>
 8003506:	4603      	mov	r3, r0
 8003508:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800350c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003510:	d121      	bne.n	8003556 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	695a      	ldr	r2, [r3, #20]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8003520:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003528:	2b00      	cmp	r3, #0
 800352a:	d111      	bne.n	8003550 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2201      	movs	r2, #1
 8003530:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800353a:	089b      	lsrs	r3, r3, #2
 800353c:	f003 020f 	and.w	r2, r3, #15
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003546:	2101      	movs	r1, #1
 8003548:	6878      	ldr	r0, [r7, #4]
 800354a:	f006 f9bb 	bl	80098c4 <HAL_PCDEx_LPM_Callback>
 800354e:	e002      	b.n	8003556 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	f005 ffb9 	bl	80094c8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4618      	mov	r0, r3
 800355c:	f003 fa5e 	bl	8006a1c <USB_ReadInterrupts>
 8003560:	4603      	mov	r3, r0
 8003562:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003566:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800356a:	f040 80b7 	bne.w	80036dc <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800356e:	69fb      	ldr	r3, [r7, #28]
 8003570:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	69fa      	ldr	r2, [r7, #28]
 8003578:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800357c:	f023 0301 	bic.w	r3, r3, #1
 8003580:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	2110      	movs	r1, #16
 8003588:	4618      	mov	r0, r3
 800358a:	f002 fa19 	bl	80059c0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800358e:	2300      	movs	r3, #0
 8003590:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003592:	e046      	b.n	8003622 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003596:	015a      	lsls	r2, r3, #5
 8003598:	69fb      	ldr	r3, [r7, #28]
 800359a:	4413      	add	r3, r2
 800359c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035a0:	461a      	mov	r2, r3
 80035a2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80035a6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80035a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035aa:	015a      	lsls	r2, r3, #5
 80035ac:	69fb      	ldr	r3, [r7, #28]
 80035ae:	4413      	add	r3, r2
 80035b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035b8:	0151      	lsls	r1, r2, #5
 80035ba:	69fa      	ldr	r2, [r7, #28]
 80035bc:	440a      	add	r2, r1
 80035be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80035c2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80035c6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80035c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035ca:	015a      	lsls	r2, r3, #5
 80035cc:	69fb      	ldr	r3, [r7, #28]
 80035ce:	4413      	add	r3, r2
 80035d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035d4:	461a      	mov	r2, r3
 80035d6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80035da:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80035dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035de:	015a      	lsls	r2, r3, #5
 80035e0:	69fb      	ldr	r3, [r7, #28]
 80035e2:	4413      	add	r3, r2
 80035e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035ec:	0151      	lsls	r1, r2, #5
 80035ee:	69fa      	ldr	r2, [r7, #28]
 80035f0:	440a      	add	r2, r1
 80035f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80035f6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80035fa:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80035fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035fe:	015a      	lsls	r2, r3, #5
 8003600:	69fb      	ldr	r3, [r7, #28]
 8003602:	4413      	add	r3, r2
 8003604:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800360c:	0151      	lsls	r1, r2, #5
 800360e:	69fa      	ldr	r2, [r7, #28]
 8003610:	440a      	add	r2, r1
 8003612:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003616:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800361a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800361c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800361e:	3301      	adds	r3, #1
 8003620:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003628:	429a      	cmp	r2, r3
 800362a:	d3b3      	bcc.n	8003594 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800362c:	69fb      	ldr	r3, [r7, #28]
 800362e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003632:	69db      	ldr	r3, [r3, #28]
 8003634:	69fa      	ldr	r2, [r7, #28]
 8003636:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800363a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800363e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003644:	2b00      	cmp	r3, #0
 8003646:	d016      	beq.n	8003676 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003648:	69fb      	ldr	r3, [r7, #28]
 800364a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800364e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003652:	69fa      	ldr	r2, [r7, #28]
 8003654:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003658:	f043 030b 	orr.w	r3, r3, #11
 800365c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003660:	69fb      	ldr	r3, [r7, #28]
 8003662:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003666:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003668:	69fa      	ldr	r2, [r7, #28]
 800366a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800366e:	f043 030b 	orr.w	r3, r3, #11
 8003672:	6453      	str	r3, [r2, #68]	; 0x44
 8003674:	e015      	b.n	80036a2 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003676:	69fb      	ldr	r3, [r7, #28]
 8003678:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800367c:	695a      	ldr	r2, [r3, #20]
 800367e:	69fb      	ldr	r3, [r7, #28]
 8003680:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003684:	4619      	mov	r1, r3
 8003686:	f242 032b 	movw	r3, #8235	; 0x202b
 800368a:	4313      	orrs	r3, r2
 800368c:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800368e:	69fb      	ldr	r3, [r7, #28]
 8003690:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003694:	691b      	ldr	r3, [r3, #16]
 8003696:	69fa      	ldr	r2, [r7, #28]
 8003698:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800369c:	f043 030b 	orr.w	r3, r3, #11
 80036a0:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80036a2:	69fb      	ldr	r3, [r7, #28]
 80036a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	69fa      	ldr	r2, [r7, #28]
 80036ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036b0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80036b4:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6818      	ldr	r0, [r3, #0]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	691b      	ldr	r3, [r3, #16]
 80036be:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80036c6:	461a      	mov	r2, r3
 80036c8:	f003 fa6e 	bl	8006ba8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	695a      	ldr	r2, [r3, #20]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80036da:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4618      	mov	r0, r3
 80036e2:	f003 f99b 	bl	8006a1c <USB_ReadInterrupts>
 80036e6:	4603      	mov	r3, r0
 80036e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036f0:	d124      	bne.n	800373c <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4618      	mov	r0, r3
 80036f8:	f003 fa32 	bl	8006b60 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4618      	mov	r0, r3
 8003702:	f002 f9da 	bl	8005aba <USB_GetDevSpeed>
 8003706:	4603      	mov	r3, r0
 8003708:	461a      	mov	r2, r3
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681c      	ldr	r4, [r3, #0]
 8003712:	f001 fa93 	bl	8004c3c <HAL_RCC_GetHCLKFreq>
 8003716:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800371c:	b2db      	uxtb	r3, r3
 800371e:	461a      	mov	r2, r3
 8003720:	4620      	mov	r0, r4
 8003722:	f001 fedf 	bl	80054e4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f005 fea5 	bl	8009476 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	695a      	ldr	r2, [r3, #20]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800373a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4618      	mov	r0, r3
 8003742:	f003 f96b 	bl	8006a1c <USB_ReadInterrupts>
 8003746:	4603      	mov	r3, r0
 8003748:	f003 0308 	and.w	r3, r3, #8
 800374c:	2b08      	cmp	r3, #8
 800374e:	d10a      	bne.n	8003766 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003750:	6878      	ldr	r0, [r7, #4]
 8003752:	f005 fe82 	bl	800945a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	695a      	ldr	r2, [r3, #20]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f002 0208 	and.w	r2, r2, #8
 8003764:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4618      	mov	r0, r3
 800376c:	f003 f956 	bl	8006a1c <USB_ReadInterrupts>
 8003770:	4603      	mov	r3, r0
 8003772:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003776:	2b80      	cmp	r3, #128	; 0x80
 8003778:	d122      	bne.n	80037c0 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800377a:	6a3b      	ldr	r3, [r7, #32]
 800377c:	699b      	ldr	r3, [r3, #24]
 800377e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003782:	6a3b      	ldr	r3, [r7, #32]
 8003784:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003786:	2301      	movs	r3, #1
 8003788:	627b      	str	r3, [r7, #36]	; 0x24
 800378a:	e014      	b.n	80037b6 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800378c:	6879      	ldr	r1, [r7, #4]
 800378e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003790:	4613      	mov	r3, r2
 8003792:	00db      	lsls	r3, r3, #3
 8003794:	4413      	add	r3, r2
 8003796:	009b      	lsls	r3, r3, #2
 8003798:	440b      	add	r3, r1
 800379a:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800379e:	781b      	ldrb	r3, [r3, #0]
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d105      	bne.n	80037b0 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80037a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a6:	b2db      	uxtb	r3, r3
 80037a8:	4619      	mov	r1, r3
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f000 fb27 	bl	8003dfe <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80037b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b2:	3301      	adds	r3, #1
 80037b4:	627b      	str	r3, [r7, #36]	; 0x24
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037bc:	429a      	cmp	r2, r3
 80037be:	d3e5      	bcc.n	800378c <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4618      	mov	r0, r3
 80037c6:	f003 f929 	bl	8006a1c <USB_ReadInterrupts>
 80037ca:	4603      	mov	r3, r0
 80037cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80037d4:	d13b      	bne.n	800384e <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80037d6:	2301      	movs	r3, #1
 80037d8:	627b      	str	r3, [r7, #36]	; 0x24
 80037da:	e02b      	b.n	8003834 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80037dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037de:	015a      	lsls	r2, r3, #5
 80037e0:	69fb      	ldr	r3, [r7, #28]
 80037e2:	4413      	add	r3, r2
 80037e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80037ec:	6879      	ldr	r1, [r7, #4]
 80037ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037f0:	4613      	mov	r3, r2
 80037f2:	00db      	lsls	r3, r3, #3
 80037f4:	4413      	add	r3, r2
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	440b      	add	r3, r1
 80037fa:	3340      	adds	r3, #64	; 0x40
 80037fc:	781b      	ldrb	r3, [r3, #0]
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d115      	bne.n	800382e <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003802:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003804:	2b00      	cmp	r3, #0
 8003806:	da12      	bge.n	800382e <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003808:	6879      	ldr	r1, [r7, #4]
 800380a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800380c:	4613      	mov	r3, r2
 800380e:	00db      	lsls	r3, r3, #3
 8003810:	4413      	add	r3, r2
 8003812:	009b      	lsls	r3, r3, #2
 8003814:	440b      	add	r3, r1
 8003816:	333f      	adds	r3, #63	; 0x3f
 8003818:	2201      	movs	r2, #1
 800381a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800381c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800381e:	b2db      	uxtb	r3, r3
 8003820:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003824:	b2db      	uxtb	r3, r3
 8003826:	4619      	mov	r1, r3
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	f000 fae8 	bl	8003dfe <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800382e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003830:	3301      	adds	r3, #1
 8003832:	627b      	str	r3, [r7, #36]	; 0x24
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800383a:	429a      	cmp	r2, r3
 800383c:	d3ce      	bcc.n	80037dc <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	695a      	ldr	r2, [r3, #20]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800384c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4618      	mov	r0, r3
 8003854:	f003 f8e2 	bl	8006a1c <USB_ReadInterrupts>
 8003858:	4603      	mov	r3, r0
 800385a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800385e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003862:	d155      	bne.n	8003910 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003864:	2301      	movs	r3, #1
 8003866:	627b      	str	r3, [r7, #36]	; 0x24
 8003868:	e045      	b.n	80038f6 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800386a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800386c:	015a      	lsls	r2, r3, #5
 800386e:	69fb      	ldr	r3, [r7, #28]
 8003870:	4413      	add	r3, r2
 8003872:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800387a:	6879      	ldr	r1, [r7, #4]
 800387c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800387e:	4613      	mov	r3, r2
 8003880:	00db      	lsls	r3, r3, #3
 8003882:	4413      	add	r3, r2
 8003884:	009b      	lsls	r3, r3, #2
 8003886:	440b      	add	r3, r1
 8003888:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800388c:	781b      	ldrb	r3, [r3, #0]
 800388e:	2b01      	cmp	r3, #1
 8003890:	d12e      	bne.n	80038f0 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003892:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003894:	2b00      	cmp	r3, #0
 8003896:	da2b      	bge.n	80038f0 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003898:	69bb      	ldr	r3, [r7, #24]
 800389a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80038a4:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d121      	bne.n	80038f0 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80038ac:	6879      	ldr	r1, [r7, #4]
 80038ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038b0:	4613      	mov	r3, r2
 80038b2:	00db      	lsls	r3, r3, #3
 80038b4:	4413      	add	r3, r2
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	440b      	add	r3, r1
 80038ba:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80038be:	2201      	movs	r2, #1
 80038c0:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80038c2:	6a3b      	ldr	r3, [r7, #32]
 80038c4:	699b      	ldr	r3, [r3, #24]
 80038c6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80038ca:	6a3b      	ldr	r3, [r7, #32]
 80038cc:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80038ce:	6a3b      	ldr	r3, [r7, #32]
 80038d0:	695b      	ldr	r3, [r3, #20]
 80038d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d10a      	bne.n	80038f0 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80038da:	69fb      	ldr	r3, [r7, #28]
 80038dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	69fa      	ldr	r2, [r7, #28]
 80038e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038e8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80038ec:	6053      	str	r3, [r2, #4]
            break;
 80038ee:	e007      	b.n	8003900 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80038f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f2:	3301      	adds	r3, #1
 80038f4:	627b      	str	r3, [r7, #36]	; 0x24
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d3b4      	bcc.n	800386a <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	695a      	ldr	r2, [r3, #20]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800390e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4618      	mov	r0, r3
 8003916:	f003 f881 	bl	8006a1c <USB_ReadInterrupts>
 800391a:	4603      	mov	r3, r0
 800391c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003920:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003924:	d10a      	bne.n	800393c <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f005 fe26 	bl	8009578 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	695a      	ldr	r2, [r3, #20]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800393a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4618      	mov	r0, r3
 8003942:	f003 f86b 	bl	8006a1c <USB_ReadInterrupts>
 8003946:	4603      	mov	r3, r0
 8003948:	f003 0304 	and.w	r3, r3, #4
 800394c:	2b04      	cmp	r3, #4
 800394e:	d115      	bne.n	800397c <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003958:	69bb      	ldr	r3, [r7, #24]
 800395a:	f003 0304 	and.w	r3, r3, #4
 800395e:	2b00      	cmp	r3, #0
 8003960:	d002      	beq.n	8003968 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f005 fe16 	bl	8009594 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	6859      	ldr	r1, [r3, #4]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	69ba      	ldr	r2, [r7, #24]
 8003974:	430a      	orrs	r2, r1
 8003976:	605a      	str	r2, [r3, #4]
 8003978:	e000      	b.n	800397c <HAL_PCD_IRQHandler+0x992>
      return;
 800397a:	bf00      	nop
    }
  }
}
 800397c:	3734      	adds	r7, #52	; 0x34
 800397e:	46bd      	mov	sp, r7
 8003980:	bd90      	pop	{r4, r7, pc}

08003982 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003982:	b580      	push	{r7, lr}
 8003984:	b082      	sub	sp, #8
 8003986:	af00      	add	r7, sp, #0
 8003988:	6078      	str	r0, [r7, #4]
 800398a:	460b      	mov	r3, r1
 800398c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003994:	2b01      	cmp	r3, #1
 8003996:	d101      	bne.n	800399c <HAL_PCD_SetAddress+0x1a>
 8003998:	2302      	movs	r3, #2
 800399a:	e013      	b.n	80039c4 <HAL_PCD_SetAddress+0x42>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2201      	movs	r2, #1
 80039a0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	78fa      	ldrb	r2, [r7, #3]
 80039a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	78fa      	ldrb	r2, [r7, #3]
 80039b2:	4611      	mov	r1, r2
 80039b4:	4618      	mov	r0, r3
 80039b6:	f002 ffc9 	bl	800694c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2200      	movs	r2, #0
 80039be:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80039c2:	2300      	movs	r3, #0
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	3708      	adds	r7, #8
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}

080039cc <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b084      	sub	sp, #16
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
 80039d4:	4608      	mov	r0, r1
 80039d6:	4611      	mov	r1, r2
 80039d8:	461a      	mov	r2, r3
 80039da:	4603      	mov	r3, r0
 80039dc:	70fb      	strb	r3, [r7, #3]
 80039de:	460b      	mov	r3, r1
 80039e0:	803b      	strh	r3, [r7, #0]
 80039e2:	4613      	mov	r3, r2
 80039e4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80039e6:	2300      	movs	r3, #0
 80039e8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80039ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	da0f      	bge.n	8003a12 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039f2:	78fb      	ldrb	r3, [r7, #3]
 80039f4:	f003 020f 	and.w	r2, r3, #15
 80039f8:	4613      	mov	r3, r2
 80039fa:	00db      	lsls	r3, r3, #3
 80039fc:	4413      	add	r3, r2
 80039fe:	009b      	lsls	r3, r3, #2
 8003a00:	3338      	adds	r3, #56	; 0x38
 8003a02:	687a      	ldr	r2, [r7, #4]
 8003a04:	4413      	add	r3, r2
 8003a06:	3304      	adds	r3, #4
 8003a08:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	705a      	strb	r2, [r3, #1]
 8003a10:	e00f      	b.n	8003a32 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a12:	78fb      	ldrb	r3, [r7, #3]
 8003a14:	f003 020f 	and.w	r2, r3, #15
 8003a18:	4613      	mov	r3, r2
 8003a1a:	00db      	lsls	r3, r3, #3
 8003a1c:	4413      	add	r3, r2
 8003a1e:	009b      	lsls	r3, r3, #2
 8003a20:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003a24:	687a      	ldr	r2, [r7, #4]
 8003a26:	4413      	add	r3, r2
 8003a28:	3304      	adds	r3, #4
 8003a2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003a32:	78fb      	ldrb	r3, [r7, #3]
 8003a34:	f003 030f 	and.w	r3, r3, #15
 8003a38:	b2da      	uxtb	r2, r3
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003a3e:	883a      	ldrh	r2, [r7, #0]
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	78ba      	ldrb	r2, [r7, #2]
 8003a48:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	785b      	ldrb	r3, [r3, #1]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d004      	beq.n	8003a5c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	781b      	ldrb	r3, [r3, #0]
 8003a56:	b29a      	uxth	r2, r3
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003a5c:	78bb      	ldrb	r3, [r7, #2]
 8003a5e:	2b02      	cmp	r3, #2
 8003a60:	d102      	bne.n	8003a68 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2200      	movs	r2, #0
 8003a66:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d101      	bne.n	8003a76 <HAL_PCD_EP_Open+0xaa>
 8003a72:	2302      	movs	r3, #2
 8003a74:	e00e      	b.n	8003a94 <HAL_PCD_EP_Open+0xc8>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2201      	movs	r2, #1
 8003a7a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	68f9      	ldr	r1, [r7, #12]
 8003a84:	4618      	mov	r0, r3
 8003a86:	f002 f83d 	bl	8005b04 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003a92:	7afb      	ldrb	r3, [r7, #11]
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	3710      	adds	r7, #16
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}

08003a9c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b084      	sub	sp, #16
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
 8003aa4:	460b      	mov	r3, r1
 8003aa6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003aa8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	da0f      	bge.n	8003ad0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ab0:	78fb      	ldrb	r3, [r7, #3]
 8003ab2:	f003 020f 	and.w	r2, r3, #15
 8003ab6:	4613      	mov	r3, r2
 8003ab8:	00db      	lsls	r3, r3, #3
 8003aba:	4413      	add	r3, r2
 8003abc:	009b      	lsls	r3, r3, #2
 8003abe:	3338      	adds	r3, #56	; 0x38
 8003ac0:	687a      	ldr	r2, [r7, #4]
 8003ac2:	4413      	add	r3, r2
 8003ac4:	3304      	adds	r3, #4
 8003ac6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2201      	movs	r2, #1
 8003acc:	705a      	strb	r2, [r3, #1]
 8003ace:	e00f      	b.n	8003af0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ad0:	78fb      	ldrb	r3, [r7, #3]
 8003ad2:	f003 020f 	and.w	r2, r3, #15
 8003ad6:	4613      	mov	r3, r2
 8003ad8:	00db      	lsls	r3, r3, #3
 8003ada:	4413      	add	r3, r2
 8003adc:	009b      	lsls	r3, r3, #2
 8003ade:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003ae2:	687a      	ldr	r2, [r7, #4]
 8003ae4:	4413      	add	r3, r2
 8003ae6:	3304      	adds	r3, #4
 8003ae8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2200      	movs	r2, #0
 8003aee:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003af0:	78fb      	ldrb	r3, [r7, #3]
 8003af2:	f003 030f 	and.w	r3, r3, #15
 8003af6:	b2da      	uxtb	r2, r3
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d101      	bne.n	8003b0a <HAL_PCD_EP_Close+0x6e>
 8003b06:	2302      	movs	r3, #2
 8003b08:	e00e      	b.n	8003b28 <HAL_PCD_EP_Close+0x8c>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	68f9      	ldr	r1, [r7, #12]
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f002 f87b 	bl	8005c14 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2200      	movs	r2, #0
 8003b22:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003b26:	2300      	movs	r3, #0
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	3710      	adds	r7, #16
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}

08003b30 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b086      	sub	sp, #24
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	60f8      	str	r0, [r7, #12]
 8003b38:	607a      	str	r2, [r7, #4]
 8003b3a:	603b      	str	r3, [r7, #0]
 8003b3c:	460b      	mov	r3, r1
 8003b3e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b40:	7afb      	ldrb	r3, [r7, #11]
 8003b42:	f003 020f 	and.w	r2, r3, #15
 8003b46:	4613      	mov	r3, r2
 8003b48:	00db      	lsls	r3, r3, #3
 8003b4a:	4413      	add	r3, r2
 8003b4c:	009b      	lsls	r3, r3, #2
 8003b4e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003b52:	68fa      	ldr	r2, [r7, #12]
 8003b54:	4413      	add	r3, r2
 8003b56:	3304      	adds	r3, #4
 8003b58:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	687a      	ldr	r2, [r7, #4]
 8003b5e:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	683a      	ldr	r2, [r7, #0]
 8003b64:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b72:	7afb      	ldrb	r3, [r7, #11]
 8003b74:	f003 030f 	and.w	r3, r3, #15
 8003b78:	b2da      	uxtb	r2, r3
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	691b      	ldr	r3, [r3, #16]
 8003b82:	2b01      	cmp	r3, #1
 8003b84:	d102      	bne.n	8003b8c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003b86:	687a      	ldr	r2, [r7, #4]
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003b8c:	7afb      	ldrb	r3, [r7, #11]
 8003b8e:	f003 030f 	and.w	r3, r3, #15
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d109      	bne.n	8003baa <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	6818      	ldr	r0, [r3, #0]
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	691b      	ldr	r3, [r3, #16]
 8003b9e:	b2db      	uxtb	r3, r3
 8003ba0:	461a      	mov	r2, r3
 8003ba2:	6979      	ldr	r1, [r7, #20]
 8003ba4:	f002 fb62 	bl	800626c <USB_EP0StartXfer>
 8003ba8:	e008      	b.n	8003bbc <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	6818      	ldr	r0, [r3, #0]
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	691b      	ldr	r3, [r3, #16]
 8003bb2:	b2db      	uxtb	r3, r3
 8003bb4:	461a      	mov	r2, r3
 8003bb6:	6979      	ldr	r1, [r7, #20]
 8003bb8:	f002 f908 	bl	8005dcc <USB_EPStartXfer>
  }

  return HAL_OK;
 8003bbc:	2300      	movs	r3, #0
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3718      	adds	r7, #24
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}

08003bc6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003bc6:	b480      	push	{r7}
 8003bc8:	b083      	sub	sp, #12
 8003bca:	af00      	add	r7, sp, #0
 8003bcc:	6078      	str	r0, [r7, #4]
 8003bce:	460b      	mov	r3, r1
 8003bd0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003bd2:	78fb      	ldrb	r3, [r7, #3]
 8003bd4:	f003 020f 	and.w	r2, r3, #15
 8003bd8:	6879      	ldr	r1, [r7, #4]
 8003bda:	4613      	mov	r3, r2
 8003bdc:	00db      	lsls	r3, r3, #3
 8003bde:	4413      	add	r3, r2
 8003be0:	009b      	lsls	r3, r3, #2
 8003be2:	440b      	add	r3, r1
 8003be4:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8003be8:	681b      	ldr	r3, [r3, #0]
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	370c      	adds	r7, #12
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf4:	4770      	bx	lr

08003bf6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003bf6:	b580      	push	{r7, lr}
 8003bf8:	b086      	sub	sp, #24
 8003bfa:	af00      	add	r7, sp, #0
 8003bfc:	60f8      	str	r0, [r7, #12]
 8003bfe:	607a      	str	r2, [r7, #4]
 8003c00:	603b      	str	r3, [r7, #0]
 8003c02:	460b      	mov	r3, r1
 8003c04:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c06:	7afb      	ldrb	r3, [r7, #11]
 8003c08:	f003 020f 	and.w	r2, r3, #15
 8003c0c:	4613      	mov	r3, r2
 8003c0e:	00db      	lsls	r3, r3, #3
 8003c10:	4413      	add	r3, r2
 8003c12:	009b      	lsls	r3, r3, #2
 8003c14:	3338      	adds	r3, #56	; 0x38
 8003c16:	68fa      	ldr	r2, [r7, #12]
 8003c18:	4413      	add	r3, r2
 8003c1a:	3304      	adds	r3, #4
 8003c1c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	687a      	ldr	r2, [r7, #4]
 8003c22:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	683a      	ldr	r2, [r7, #0]
 8003c28:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	2201      	movs	r2, #1
 8003c34:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c36:	7afb      	ldrb	r3, [r7, #11]
 8003c38:	f003 030f 	and.w	r3, r3, #15
 8003c3c:	b2da      	uxtb	r2, r3
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	691b      	ldr	r3, [r3, #16]
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	d102      	bne.n	8003c50 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003c4a:	687a      	ldr	r2, [r7, #4]
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003c50:	7afb      	ldrb	r3, [r7, #11]
 8003c52:	f003 030f 	and.w	r3, r3, #15
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d109      	bne.n	8003c6e <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	6818      	ldr	r0, [r3, #0]
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	691b      	ldr	r3, [r3, #16]
 8003c62:	b2db      	uxtb	r3, r3
 8003c64:	461a      	mov	r2, r3
 8003c66:	6979      	ldr	r1, [r7, #20]
 8003c68:	f002 fb00 	bl	800626c <USB_EP0StartXfer>
 8003c6c:	e008      	b.n	8003c80 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	6818      	ldr	r0, [r3, #0]
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	691b      	ldr	r3, [r3, #16]
 8003c76:	b2db      	uxtb	r3, r3
 8003c78:	461a      	mov	r2, r3
 8003c7a:	6979      	ldr	r1, [r7, #20]
 8003c7c:	f002 f8a6 	bl	8005dcc <USB_EPStartXfer>
  }

  return HAL_OK;
 8003c80:	2300      	movs	r3, #0
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	3718      	adds	r7, #24
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}

08003c8a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c8a:	b580      	push	{r7, lr}
 8003c8c:	b084      	sub	sp, #16
 8003c8e:	af00      	add	r7, sp, #0
 8003c90:	6078      	str	r0, [r7, #4]
 8003c92:	460b      	mov	r3, r1
 8003c94:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003c96:	78fb      	ldrb	r3, [r7, #3]
 8003c98:	f003 020f 	and.w	r2, r3, #15
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d901      	bls.n	8003ca8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	e050      	b.n	8003d4a <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003ca8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	da0f      	bge.n	8003cd0 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003cb0:	78fb      	ldrb	r3, [r7, #3]
 8003cb2:	f003 020f 	and.w	r2, r3, #15
 8003cb6:	4613      	mov	r3, r2
 8003cb8:	00db      	lsls	r3, r3, #3
 8003cba:	4413      	add	r3, r2
 8003cbc:	009b      	lsls	r3, r3, #2
 8003cbe:	3338      	adds	r3, #56	; 0x38
 8003cc0:	687a      	ldr	r2, [r7, #4]
 8003cc2:	4413      	add	r3, r2
 8003cc4:	3304      	adds	r3, #4
 8003cc6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2201      	movs	r2, #1
 8003ccc:	705a      	strb	r2, [r3, #1]
 8003cce:	e00d      	b.n	8003cec <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003cd0:	78fa      	ldrb	r2, [r7, #3]
 8003cd2:	4613      	mov	r3, r2
 8003cd4:	00db      	lsls	r3, r3, #3
 8003cd6:	4413      	add	r3, r2
 8003cd8:	009b      	lsls	r3, r3, #2
 8003cda:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003cde:	687a      	ldr	r2, [r7, #4]
 8003ce0:	4413      	add	r3, r2
 8003ce2:	3304      	adds	r3, #4
 8003ce4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	2201      	movs	r2, #1
 8003cf0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003cf2:	78fb      	ldrb	r3, [r7, #3]
 8003cf4:	f003 030f 	and.w	r3, r3, #15
 8003cf8:	b2da      	uxtb	r2, r3
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	d101      	bne.n	8003d0c <HAL_PCD_EP_SetStall+0x82>
 8003d08:	2302      	movs	r3, #2
 8003d0a:	e01e      	b.n	8003d4a <HAL_PCD_EP_SetStall+0xc0>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2201      	movs	r2, #1
 8003d10:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	68f9      	ldr	r1, [r7, #12]
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f002 fd42 	bl	80067a4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003d20:	78fb      	ldrb	r3, [r7, #3]
 8003d22:	f003 030f 	and.w	r3, r3, #15
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d10a      	bne.n	8003d40 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6818      	ldr	r0, [r3, #0]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	691b      	ldr	r3, [r3, #16]
 8003d32:	b2d9      	uxtb	r1, r3
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003d3a:	461a      	mov	r2, r3
 8003d3c:	f002 ff34 	bl	8006ba8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2200      	movs	r2, #0
 8003d44:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003d48:	2300      	movs	r3, #0
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3710      	adds	r7, #16
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}

08003d52 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d52:	b580      	push	{r7, lr}
 8003d54:	b084      	sub	sp, #16
 8003d56:	af00      	add	r7, sp, #0
 8003d58:	6078      	str	r0, [r7, #4]
 8003d5a:	460b      	mov	r3, r1
 8003d5c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003d5e:	78fb      	ldrb	r3, [r7, #3]
 8003d60:	f003 020f 	and.w	r2, r3, #15
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	429a      	cmp	r2, r3
 8003d6a:	d901      	bls.n	8003d70 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	e042      	b.n	8003df6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003d70:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	da0f      	bge.n	8003d98 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d78:	78fb      	ldrb	r3, [r7, #3]
 8003d7a:	f003 020f 	and.w	r2, r3, #15
 8003d7e:	4613      	mov	r3, r2
 8003d80:	00db      	lsls	r3, r3, #3
 8003d82:	4413      	add	r3, r2
 8003d84:	009b      	lsls	r3, r3, #2
 8003d86:	3338      	adds	r3, #56	; 0x38
 8003d88:	687a      	ldr	r2, [r7, #4]
 8003d8a:	4413      	add	r3, r2
 8003d8c:	3304      	adds	r3, #4
 8003d8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2201      	movs	r2, #1
 8003d94:	705a      	strb	r2, [r3, #1]
 8003d96:	e00f      	b.n	8003db8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d98:	78fb      	ldrb	r3, [r7, #3]
 8003d9a:	f003 020f 	and.w	r2, r3, #15
 8003d9e:	4613      	mov	r3, r2
 8003da0:	00db      	lsls	r3, r3, #3
 8003da2:	4413      	add	r3, r2
 8003da4:	009b      	lsls	r3, r3, #2
 8003da6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003daa:	687a      	ldr	r2, [r7, #4]
 8003dac:	4413      	add	r3, r2
 8003dae:	3304      	adds	r3, #4
 8003db0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	2200      	movs	r2, #0
 8003db6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003dbe:	78fb      	ldrb	r3, [r7, #3]
 8003dc0:	f003 030f 	and.w	r3, r3, #15
 8003dc4:	b2da      	uxtb	r2, r3
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	d101      	bne.n	8003dd8 <HAL_PCD_EP_ClrStall+0x86>
 8003dd4:	2302      	movs	r3, #2
 8003dd6:	e00e      	b.n	8003df6 <HAL_PCD_EP_ClrStall+0xa4>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2201      	movs	r2, #1
 8003ddc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	68f9      	ldr	r1, [r7, #12]
 8003de6:	4618      	mov	r0, r3
 8003de8:	f002 fd4a 	bl	8006880 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2200      	movs	r2, #0
 8003df0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003df4:	2300      	movs	r3, #0
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	3710      	adds	r7, #16
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}

08003dfe <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003dfe:	b580      	push	{r7, lr}
 8003e00:	b084      	sub	sp, #16
 8003e02:	af00      	add	r7, sp, #0
 8003e04:	6078      	str	r0, [r7, #4]
 8003e06:	460b      	mov	r3, r1
 8003e08:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003e0a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	da0c      	bge.n	8003e2c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e12:	78fb      	ldrb	r3, [r7, #3]
 8003e14:	f003 020f 	and.w	r2, r3, #15
 8003e18:	4613      	mov	r3, r2
 8003e1a:	00db      	lsls	r3, r3, #3
 8003e1c:	4413      	add	r3, r2
 8003e1e:	009b      	lsls	r3, r3, #2
 8003e20:	3338      	adds	r3, #56	; 0x38
 8003e22:	687a      	ldr	r2, [r7, #4]
 8003e24:	4413      	add	r3, r2
 8003e26:	3304      	adds	r3, #4
 8003e28:	60fb      	str	r3, [r7, #12]
 8003e2a:	e00c      	b.n	8003e46 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e2c:	78fb      	ldrb	r3, [r7, #3]
 8003e2e:	f003 020f 	and.w	r2, r3, #15
 8003e32:	4613      	mov	r3, r2
 8003e34:	00db      	lsls	r3, r3, #3
 8003e36:	4413      	add	r3, r2
 8003e38:	009b      	lsls	r3, r3, #2
 8003e3a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003e3e:	687a      	ldr	r2, [r7, #4]
 8003e40:	4413      	add	r3, r2
 8003e42:	3304      	adds	r3, #4
 8003e44:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	68f9      	ldr	r1, [r7, #12]
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f002 fb69 	bl	8006524 <USB_EPStopXfer>
 8003e52:	4603      	mov	r3, r0
 8003e54:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003e56:	7afb      	ldrb	r3, [r7, #11]
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	3710      	adds	r7, #16
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}

08003e60 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b08a      	sub	sp, #40	; 0x28
 8003e64:	af02      	add	r7, sp, #8
 8003e66:	6078      	str	r0, [r7, #4]
 8003e68:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003e74:	683a      	ldr	r2, [r7, #0]
 8003e76:	4613      	mov	r3, r2
 8003e78:	00db      	lsls	r3, r3, #3
 8003e7a:	4413      	add	r3, r2
 8003e7c:	009b      	lsls	r3, r3, #2
 8003e7e:	3338      	adds	r3, #56	; 0x38
 8003e80:	687a      	ldr	r2, [r7, #4]
 8003e82:	4413      	add	r3, r2
 8003e84:	3304      	adds	r3, #4
 8003e86:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	6a1a      	ldr	r2, [r3, #32]
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	699b      	ldr	r3, [r3, #24]
 8003e90:	429a      	cmp	r2, r3
 8003e92:	d901      	bls.n	8003e98 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003e94:	2301      	movs	r3, #1
 8003e96:	e06c      	b.n	8003f72 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	699a      	ldr	r2, [r3, #24]
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	6a1b      	ldr	r3, [r3, #32]
 8003ea0:	1ad3      	subs	r3, r2, r3
 8003ea2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	69fa      	ldr	r2, [r7, #28]
 8003eaa:	429a      	cmp	r2, r3
 8003eac:	d902      	bls.n	8003eb4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	68db      	ldr	r3, [r3, #12]
 8003eb2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003eb4:	69fb      	ldr	r3, [r7, #28]
 8003eb6:	3303      	adds	r3, #3
 8003eb8:	089b      	lsrs	r3, r3, #2
 8003eba:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003ebc:	e02b      	b.n	8003f16 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	699a      	ldr	r2, [r3, #24]
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	6a1b      	ldr	r3, [r3, #32]
 8003ec6:	1ad3      	subs	r3, r2, r3
 8003ec8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	68db      	ldr	r3, [r3, #12]
 8003ece:	69fa      	ldr	r2, [r7, #28]
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	d902      	bls.n	8003eda <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	68db      	ldr	r3, [r3, #12]
 8003ed8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003eda:	69fb      	ldr	r3, [r7, #28]
 8003edc:	3303      	adds	r3, #3
 8003ede:	089b      	lsrs	r3, r3, #2
 8003ee0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	6919      	ldr	r1, [r3, #16]
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	b2da      	uxtb	r2, r3
 8003eea:	69fb      	ldr	r3, [r7, #28]
 8003eec:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003ef2:	b2db      	uxtb	r3, r3
 8003ef4:	9300      	str	r3, [sp, #0]
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	6978      	ldr	r0, [r7, #20]
 8003efa:	f002 fbbd 	bl	8006678 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	691a      	ldr	r2, [r3, #16]
 8003f02:	69fb      	ldr	r3, [r7, #28]
 8003f04:	441a      	add	r2, r3
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	6a1a      	ldr	r2, [r3, #32]
 8003f0e:	69fb      	ldr	r3, [r7, #28]
 8003f10:	441a      	add	r2, r3
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	015a      	lsls	r2, r3, #5
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	4413      	add	r3, r2
 8003f1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f22:	699b      	ldr	r3, [r3, #24]
 8003f24:	b29b      	uxth	r3, r3
 8003f26:	69ba      	ldr	r2, [r7, #24]
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	d809      	bhi.n	8003f40 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	6a1a      	ldr	r2, [r3, #32]
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003f34:	429a      	cmp	r2, r3
 8003f36:	d203      	bcs.n	8003f40 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	699b      	ldr	r3, [r3, #24]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d1be      	bne.n	8003ebe <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	699a      	ldr	r2, [r3, #24]
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	6a1b      	ldr	r3, [r3, #32]
 8003f48:	429a      	cmp	r2, r3
 8003f4a:	d811      	bhi.n	8003f70 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	f003 030f 	and.w	r3, r3, #15
 8003f52:	2201      	movs	r2, #1
 8003f54:	fa02 f303 	lsl.w	r3, r2, r3
 8003f58:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	43db      	mvns	r3, r3
 8003f66:	6939      	ldr	r1, [r7, #16]
 8003f68:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f6c:	4013      	ands	r3, r2
 8003f6e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003f70:	2300      	movs	r3, #0
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	3720      	adds	r7, #32
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}
	...

08003f7c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b088      	sub	sp, #32
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
 8003f84:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f8c:	69fb      	ldr	r3, [r7, #28]
 8003f8e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003f90:	69fb      	ldr	r3, [r7, #28]
 8003f92:	333c      	adds	r3, #60	; 0x3c
 8003f94:	3304      	adds	r3, #4
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	015a      	lsls	r2, r3, #5
 8003f9e:	69bb      	ldr	r3, [r7, #24]
 8003fa0:	4413      	add	r3, r2
 8003fa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	691b      	ldr	r3, [r3, #16]
 8003fae:	2b01      	cmp	r3, #1
 8003fb0:	d17b      	bne.n	80040aa <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	f003 0308 	and.w	r3, r3, #8
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d015      	beq.n	8003fe8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	4a61      	ldr	r2, [pc, #388]	; (8004144 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	f240 80b9 	bls.w	8004138 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	f000 80b3 	beq.w	8004138 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	015a      	lsls	r2, r3, #5
 8003fd6:	69bb      	ldr	r3, [r7, #24]
 8003fd8:	4413      	add	r3, r2
 8003fda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fde:	461a      	mov	r2, r3
 8003fe0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003fe4:	6093      	str	r3, [r2, #8]
 8003fe6:	e0a7      	b.n	8004138 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	f003 0320 	and.w	r3, r3, #32
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d009      	beq.n	8004006 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	015a      	lsls	r2, r3, #5
 8003ff6:	69bb      	ldr	r3, [r7, #24]
 8003ff8:	4413      	add	r3, r2
 8003ffa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ffe:	461a      	mov	r2, r3
 8004000:	2320      	movs	r3, #32
 8004002:	6093      	str	r3, [r2, #8]
 8004004:	e098      	b.n	8004138 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800400c:	2b00      	cmp	r3, #0
 800400e:	f040 8093 	bne.w	8004138 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	4a4b      	ldr	r2, [pc, #300]	; (8004144 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d90f      	bls.n	800403a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004020:	2b00      	cmp	r3, #0
 8004022:	d00a      	beq.n	800403a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	015a      	lsls	r2, r3, #5
 8004028:	69bb      	ldr	r3, [r7, #24]
 800402a:	4413      	add	r3, r2
 800402c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004030:	461a      	mov	r2, r3
 8004032:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004036:	6093      	str	r3, [r2, #8]
 8004038:	e07e      	b.n	8004138 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800403a:	683a      	ldr	r2, [r7, #0]
 800403c:	4613      	mov	r3, r2
 800403e:	00db      	lsls	r3, r3, #3
 8004040:	4413      	add	r3, r2
 8004042:	009b      	lsls	r3, r3, #2
 8004044:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004048:	687a      	ldr	r2, [r7, #4]
 800404a:	4413      	add	r3, r2
 800404c:	3304      	adds	r3, #4
 800404e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	69da      	ldr	r2, [r3, #28]
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	0159      	lsls	r1, r3, #5
 8004058:	69bb      	ldr	r3, [r7, #24]
 800405a:	440b      	add	r3, r1
 800405c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004060:	691b      	ldr	r3, [r3, #16]
 8004062:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004066:	1ad2      	subs	r2, r2, r3
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d114      	bne.n	800409c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	699b      	ldr	r3, [r3, #24]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d109      	bne.n	800408e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6818      	ldr	r0, [r3, #0]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004084:	461a      	mov	r2, r3
 8004086:	2101      	movs	r1, #1
 8004088:	f002 fd8e 	bl	8006ba8 <USB_EP0_OutStart>
 800408c:	e006      	b.n	800409c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	691a      	ldr	r2, [r3, #16]
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	6a1b      	ldr	r3, [r3, #32]
 8004096:	441a      	add	r2, r3
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	b2db      	uxtb	r3, r3
 80040a0:	4619      	mov	r1, r3
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f005 f9a4 	bl	80093f0 <HAL_PCD_DataOutStageCallback>
 80040a8:	e046      	b.n	8004138 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	4a26      	ldr	r2, [pc, #152]	; (8004148 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d124      	bne.n	80040fc <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d00a      	beq.n	80040d2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	015a      	lsls	r2, r3, #5
 80040c0:	69bb      	ldr	r3, [r7, #24]
 80040c2:	4413      	add	r3, r2
 80040c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040c8:	461a      	mov	r2, r3
 80040ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040ce:	6093      	str	r3, [r2, #8]
 80040d0:	e032      	b.n	8004138 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	f003 0320 	and.w	r3, r3, #32
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d008      	beq.n	80040ee <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	015a      	lsls	r2, r3, #5
 80040e0:	69bb      	ldr	r3, [r7, #24]
 80040e2:	4413      	add	r3, r2
 80040e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040e8:	461a      	mov	r2, r3
 80040ea:	2320      	movs	r3, #32
 80040ec:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	b2db      	uxtb	r3, r3
 80040f2:	4619      	mov	r1, r3
 80040f4:	6878      	ldr	r0, [r7, #4]
 80040f6:	f005 f97b 	bl	80093f0 <HAL_PCD_DataOutStageCallback>
 80040fa:	e01d      	b.n	8004138 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d114      	bne.n	800412c <PCD_EP_OutXfrComplete_int+0x1b0>
 8004102:	6879      	ldr	r1, [r7, #4]
 8004104:	683a      	ldr	r2, [r7, #0]
 8004106:	4613      	mov	r3, r2
 8004108:	00db      	lsls	r3, r3, #3
 800410a:	4413      	add	r3, r2
 800410c:	009b      	lsls	r3, r3, #2
 800410e:	440b      	add	r3, r1
 8004110:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d108      	bne.n	800412c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6818      	ldr	r0, [r3, #0]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004124:	461a      	mov	r2, r3
 8004126:	2100      	movs	r1, #0
 8004128:	f002 fd3e 	bl	8006ba8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	b2db      	uxtb	r3, r3
 8004130:	4619      	mov	r1, r3
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	f005 f95c 	bl	80093f0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004138:	2300      	movs	r3, #0
}
 800413a:	4618      	mov	r0, r3
 800413c:	3720      	adds	r7, #32
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}
 8004142:	bf00      	nop
 8004144:	4f54300a 	.word	0x4f54300a
 8004148:	4f54310a 	.word	0x4f54310a

0800414c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b086      	sub	sp, #24
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
 8004154:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	333c      	adds	r3, #60	; 0x3c
 8004164:	3304      	adds	r3, #4
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	015a      	lsls	r2, r3, #5
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	4413      	add	r3, r2
 8004172:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	4a15      	ldr	r2, [pc, #84]	; (80041d4 <PCD_EP_OutSetupPacket_int+0x88>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d90e      	bls.n	80041a0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004188:	2b00      	cmp	r3, #0
 800418a:	d009      	beq.n	80041a0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	015a      	lsls	r2, r3, #5
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	4413      	add	r3, r2
 8004194:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004198:	461a      	mov	r2, r3
 800419a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800419e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	f005 f913 	bl	80093cc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	4a0a      	ldr	r2, [pc, #40]	; (80041d4 <PCD_EP_OutSetupPacket_int+0x88>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d90c      	bls.n	80041c8 <PCD_EP_OutSetupPacket_int+0x7c>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	691b      	ldr	r3, [r3, #16]
 80041b2:	2b01      	cmp	r3, #1
 80041b4:	d108      	bne.n	80041c8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6818      	ldr	r0, [r3, #0]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80041c0:	461a      	mov	r2, r3
 80041c2:	2101      	movs	r1, #1
 80041c4:	f002 fcf0 	bl	8006ba8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80041c8:	2300      	movs	r3, #0
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	3718      	adds	r7, #24
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}
 80041d2:	bf00      	nop
 80041d4:	4f54300a 	.word	0x4f54300a

080041d8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80041d8:	b480      	push	{r7}
 80041da:	b085      	sub	sp, #20
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
 80041e0:	460b      	mov	r3, r1
 80041e2:	70fb      	strb	r3, [r7, #3]
 80041e4:	4613      	mov	r3, r2
 80041e6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ee:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80041f0:	78fb      	ldrb	r3, [r7, #3]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d107      	bne.n	8004206 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80041f6:	883b      	ldrh	r3, [r7, #0]
 80041f8:	0419      	lsls	r1, r3, #16
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	68ba      	ldr	r2, [r7, #8]
 8004200:	430a      	orrs	r2, r1
 8004202:	629a      	str	r2, [r3, #40]	; 0x28
 8004204:	e028      	b.n	8004258 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800420c:	0c1b      	lsrs	r3, r3, #16
 800420e:	68ba      	ldr	r2, [r7, #8]
 8004210:	4413      	add	r3, r2
 8004212:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004214:	2300      	movs	r3, #0
 8004216:	73fb      	strb	r3, [r7, #15]
 8004218:	e00d      	b.n	8004236 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	7bfb      	ldrb	r3, [r7, #15]
 8004220:	3340      	adds	r3, #64	; 0x40
 8004222:	009b      	lsls	r3, r3, #2
 8004224:	4413      	add	r3, r2
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	0c1b      	lsrs	r3, r3, #16
 800422a:	68ba      	ldr	r2, [r7, #8]
 800422c:	4413      	add	r3, r2
 800422e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004230:	7bfb      	ldrb	r3, [r7, #15]
 8004232:	3301      	adds	r3, #1
 8004234:	73fb      	strb	r3, [r7, #15]
 8004236:	7bfa      	ldrb	r2, [r7, #15]
 8004238:	78fb      	ldrb	r3, [r7, #3]
 800423a:	3b01      	subs	r3, #1
 800423c:	429a      	cmp	r2, r3
 800423e:	d3ec      	bcc.n	800421a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004240:	883b      	ldrh	r3, [r7, #0]
 8004242:	0418      	lsls	r0, r3, #16
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6819      	ldr	r1, [r3, #0]
 8004248:	78fb      	ldrb	r3, [r7, #3]
 800424a:	3b01      	subs	r3, #1
 800424c:	68ba      	ldr	r2, [r7, #8]
 800424e:	4302      	orrs	r2, r0
 8004250:	3340      	adds	r3, #64	; 0x40
 8004252:	009b      	lsls	r3, r3, #2
 8004254:	440b      	add	r3, r1
 8004256:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004258:	2300      	movs	r3, #0
}
 800425a:	4618      	mov	r0, r3
 800425c:	3714      	adds	r7, #20
 800425e:	46bd      	mov	sp, r7
 8004260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004264:	4770      	bx	lr

08004266 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004266:	b480      	push	{r7}
 8004268:	b083      	sub	sp, #12
 800426a:	af00      	add	r7, sp, #0
 800426c:	6078      	str	r0, [r7, #4]
 800426e:	460b      	mov	r3, r1
 8004270:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	887a      	ldrh	r2, [r7, #2]
 8004278:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800427a:	2300      	movs	r3, #0
}
 800427c:	4618      	mov	r0, r3
 800427e:	370c      	adds	r7, #12
 8004280:	46bd      	mov	sp, r7
 8004282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004286:	4770      	bx	lr

08004288 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004288:	b480      	push	{r7}
 800428a:	b085      	sub	sp, #20
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2201      	movs	r2, #1
 800429a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2200      	movs	r2, #0
 80042a2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	699b      	ldr	r3, [r3, #24]
 80042aa:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80042b6:	4b05      	ldr	r3, [pc, #20]	; (80042cc <HAL_PCDEx_ActivateLPM+0x44>)
 80042b8:	4313      	orrs	r3, r2
 80042ba:	68fa      	ldr	r2, [r7, #12]
 80042bc:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80042be:	2300      	movs	r3, #0
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	3714      	adds	r7, #20
 80042c4:	46bd      	mov	sp, r7
 80042c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ca:	4770      	bx	lr
 80042cc:	10000003 	.word	0x10000003

080042d0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80042d0:	b480      	push	{r7}
 80042d2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80042d4:	4b05      	ldr	r3, [pc, #20]	; (80042ec <HAL_PWR_EnableBkUpAccess+0x1c>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a04      	ldr	r2, [pc, #16]	; (80042ec <HAL_PWR_EnableBkUpAccess+0x1c>)
 80042da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042de:	6013      	str	r3, [r2, #0]
}
 80042e0:	bf00      	nop
 80042e2:	46bd      	mov	sp, r7
 80042e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e8:	4770      	bx	lr
 80042ea:	bf00      	nop
 80042ec:	40007000 	.word	0x40007000

080042f0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b082      	sub	sp, #8
 80042f4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80042f6:	2300      	movs	r3, #0
 80042f8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80042fa:	4b23      	ldr	r3, [pc, #140]	; (8004388 <HAL_PWREx_EnableOverDrive+0x98>)
 80042fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042fe:	4a22      	ldr	r2, [pc, #136]	; (8004388 <HAL_PWREx_EnableOverDrive+0x98>)
 8004300:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004304:	6413      	str	r3, [r2, #64]	; 0x40
 8004306:	4b20      	ldr	r3, [pc, #128]	; (8004388 <HAL_PWREx_EnableOverDrive+0x98>)
 8004308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800430a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800430e:	603b      	str	r3, [r7, #0]
 8004310:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004312:	4b1e      	ldr	r3, [pc, #120]	; (800438c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a1d      	ldr	r2, [pc, #116]	; (800438c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004318:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800431c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800431e:	f7fd fee5 	bl	80020ec <HAL_GetTick>
 8004322:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004324:	e009      	b.n	800433a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004326:	f7fd fee1 	bl	80020ec <HAL_GetTick>
 800432a:	4602      	mov	r2, r0
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	1ad3      	subs	r3, r2, r3
 8004330:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004334:	d901      	bls.n	800433a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004336:	2303      	movs	r3, #3
 8004338:	e022      	b.n	8004380 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800433a:	4b14      	ldr	r3, [pc, #80]	; (800438c <HAL_PWREx_EnableOverDrive+0x9c>)
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004342:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004346:	d1ee      	bne.n	8004326 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004348:	4b10      	ldr	r3, [pc, #64]	; (800438c <HAL_PWREx_EnableOverDrive+0x9c>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a0f      	ldr	r2, [pc, #60]	; (800438c <HAL_PWREx_EnableOverDrive+0x9c>)
 800434e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004352:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004354:	f7fd feca 	bl	80020ec <HAL_GetTick>
 8004358:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800435a:	e009      	b.n	8004370 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800435c:	f7fd fec6 	bl	80020ec <HAL_GetTick>
 8004360:	4602      	mov	r2, r0
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	1ad3      	subs	r3, r2, r3
 8004366:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800436a:	d901      	bls.n	8004370 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800436c:	2303      	movs	r3, #3
 800436e:	e007      	b.n	8004380 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004370:	4b06      	ldr	r3, [pc, #24]	; (800438c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004378:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800437c:	d1ee      	bne.n	800435c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800437e:	2300      	movs	r3, #0
}
 8004380:	4618      	mov	r0, r3
 8004382:	3708      	adds	r7, #8
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}
 8004388:	40023800 	.word	0x40023800
 800438c:	40007000 	.word	0x40007000

08004390 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b086      	sub	sp, #24
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004398:	2300      	movs	r3, #0
 800439a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d101      	bne.n	80043a6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	e291      	b.n	80048ca <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f003 0301 	and.w	r3, r3, #1
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	f000 8087 	beq.w	80044c2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80043b4:	4b96      	ldr	r3, [pc, #600]	; (8004610 <HAL_RCC_OscConfig+0x280>)
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	f003 030c 	and.w	r3, r3, #12
 80043bc:	2b04      	cmp	r3, #4
 80043be:	d00c      	beq.n	80043da <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043c0:	4b93      	ldr	r3, [pc, #588]	; (8004610 <HAL_RCC_OscConfig+0x280>)
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	f003 030c 	and.w	r3, r3, #12
 80043c8:	2b08      	cmp	r3, #8
 80043ca:	d112      	bne.n	80043f2 <HAL_RCC_OscConfig+0x62>
 80043cc:	4b90      	ldr	r3, [pc, #576]	; (8004610 <HAL_RCC_OscConfig+0x280>)
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043d8:	d10b      	bne.n	80043f2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043da:	4b8d      	ldr	r3, [pc, #564]	; (8004610 <HAL_RCC_OscConfig+0x280>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d06c      	beq.n	80044c0 <HAL_RCC_OscConfig+0x130>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d168      	bne.n	80044c0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
 80043f0:	e26b      	b.n	80048ca <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043fa:	d106      	bne.n	800440a <HAL_RCC_OscConfig+0x7a>
 80043fc:	4b84      	ldr	r3, [pc, #528]	; (8004610 <HAL_RCC_OscConfig+0x280>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a83      	ldr	r2, [pc, #524]	; (8004610 <HAL_RCC_OscConfig+0x280>)
 8004402:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004406:	6013      	str	r3, [r2, #0]
 8004408:	e02e      	b.n	8004468 <HAL_RCC_OscConfig+0xd8>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d10c      	bne.n	800442c <HAL_RCC_OscConfig+0x9c>
 8004412:	4b7f      	ldr	r3, [pc, #508]	; (8004610 <HAL_RCC_OscConfig+0x280>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a7e      	ldr	r2, [pc, #504]	; (8004610 <HAL_RCC_OscConfig+0x280>)
 8004418:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800441c:	6013      	str	r3, [r2, #0]
 800441e:	4b7c      	ldr	r3, [pc, #496]	; (8004610 <HAL_RCC_OscConfig+0x280>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a7b      	ldr	r2, [pc, #492]	; (8004610 <HAL_RCC_OscConfig+0x280>)
 8004424:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004428:	6013      	str	r3, [r2, #0]
 800442a:	e01d      	b.n	8004468 <HAL_RCC_OscConfig+0xd8>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004434:	d10c      	bne.n	8004450 <HAL_RCC_OscConfig+0xc0>
 8004436:	4b76      	ldr	r3, [pc, #472]	; (8004610 <HAL_RCC_OscConfig+0x280>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a75      	ldr	r2, [pc, #468]	; (8004610 <HAL_RCC_OscConfig+0x280>)
 800443c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004440:	6013      	str	r3, [r2, #0]
 8004442:	4b73      	ldr	r3, [pc, #460]	; (8004610 <HAL_RCC_OscConfig+0x280>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a72      	ldr	r2, [pc, #456]	; (8004610 <HAL_RCC_OscConfig+0x280>)
 8004448:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800444c:	6013      	str	r3, [r2, #0]
 800444e:	e00b      	b.n	8004468 <HAL_RCC_OscConfig+0xd8>
 8004450:	4b6f      	ldr	r3, [pc, #444]	; (8004610 <HAL_RCC_OscConfig+0x280>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a6e      	ldr	r2, [pc, #440]	; (8004610 <HAL_RCC_OscConfig+0x280>)
 8004456:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800445a:	6013      	str	r3, [r2, #0]
 800445c:	4b6c      	ldr	r3, [pc, #432]	; (8004610 <HAL_RCC_OscConfig+0x280>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a6b      	ldr	r2, [pc, #428]	; (8004610 <HAL_RCC_OscConfig+0x280>)
 8004462:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004466:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d013      	beq.n	8004498 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004470:	f7fd fe3c 	bl	80020ec <HAL_GetTick>
 8004474:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004476:	e008      	b.n	800448a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004478:	f7fd fe38 	bl	80020ec <HAL_GetTick>
 800447c:	4602      	mov	r2, r0
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	1ad3      	subs	r3, r2, r3
 8004482:	2b64      	cmp	r3, #100	; 0x64
 8004484:	d901      	bls.n	800448a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004486:	2303      	movs	r3, #3
 8004488:	e21f      	b.n	80048ca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800448a:	4b61      	ldr	r3, [pc, #388]	; (8004610 <HAL_RCC_OscConfig+0x280>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004492:	2b00      	cmp	r3, #0
 8004494:	d0f0      	beq.n	8004478 <HAL_RCC_OscConfig+0xe8>
 8004496:	e014      	b.n	80044c2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004498:	f7fd fe28 	bl	80020ec <HAL_GetTick>
 800449c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800449e:	e008      	b.n	80044b2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044a0:	f7fd fe24 	bl	80020ec <HAL_GetTick>
 80044a4:	4602      	mov	r2, r0
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	1ad3      	subs	r3, r2, r3
 80044aa:	2b64      	cmp	r3, #100	; 0x64
 80044ac:	d901      	bls.n	80044b2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80044ae:	2303      	movs	r3, #3
 80044b0:	e20b      	b.n	80048ca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044b2:	4b57      	ldr	r3, [pc, #348]	; (8004610 <HAL_RCC_OscConfig+0x280>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d1f0      	bne.n	80044a0 <HAL_RCC_OscConfig+0x110>
 80044be:	e000      	b.n	80044c2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f003 0302 	and.w	r3, r3, #2
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d069      	beq.n	80045a2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80044ce:	4b50      	ldr	r3, [pc, #320]	; (8004610 <HAL_RCC_OscConfig+0x280>)
 80044d0:	689b      	ldr	r3, [r3, #8]
 80044d2:	f003 030c 	and.w	r3, r3, #12
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d00b      	beq.n	80044f2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044da:	4b4d      	ldr	r3, [pc, #308]	; (8004610 <HAL_RCC_OscConfig+0x280>)
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	f003 030c 	and.w	r3, r3, #12
 80044e2:	2b08      	cmp	r3, #8
 80044e4:	d11c      	bne.n	8004520 <HAL_RCC_OscConfig+0x190>
 80044e6:	4b4a      	ldr	r3, [pc, #296]	; (8004610 <HAL_RCC_OscConfig+0x280>)
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d116      	bne.n	8004520 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044f2:	4b47      	ldr	r3, [pc, #284]	; (8004610 <HAL_RCC_OscConfig+0x280>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f003 0302 	and.w	r3, r3, #2
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d005      	beq.n	800450a <HAL_RCC_OscConfig+0x17a>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	68db      	ldr	r3, [r3, #12]
 8004502:	2b01      	cmp	r3, #1
 8004504:	d001      	beq.n	800450a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	e1df      	b.n	80048ca <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800450a:	4b41      	ldr	r3, [pc, #260]	; (8004610 <HAL_RCC_OscConfig+0x280>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	691b      	ldr	r3, [r3, #16]
 8004516:	00db      	lsls	r3, r3, #3
 8004518:	493d      	ldr	r1, [pc, #244]	; (8004610 <HAL_RCC_OscConfig+0x280>)
 800451a:	4313      	orrs	r3, r2
 800451c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800451e:	e040      	b.n	80045a2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	68db      	ldr	r3, [r3, #12]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d023      	beq.n	8004570 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004528:	4b39      	ldr	r3, [pc, #228]	; (8004610 <HAL_RCC_OscConfig+0x280>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a38      	ldr	r2, [pc, #224]	; (8004610 <HAL_RCC_OscConfig+0x280>)
 800452e:	f043 0301 	orr.w	r3, r3, #1
 8004532:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004534:	f7fd fdda 	bl	80020ec <HAL_GetTick>
 8004538:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800453a:	e008      	b.n	800454e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800453c:	f7fd fdd6 	bl	80020ec <HAL_GetTick>
 8004540:	4602      	mov	r2, r0
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	1ad3      	subs	r3, r2, r3
 8004546:	2b02      	cmp	r3, #2
 8004548:	d901      	bls.n	800454e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800454a:	2303      	movs	r3, #3
 800454c:	e1bd      	b.n	80048ca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800454e:	4b30      	ldr	r3, [pc, #192]	; (8004610 <HAL_RCC_OscConfig+0x280>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f003 0302 	and.w	r3, r3, #2
 8004556:	2b00      	cmp	r3, #0
 8004558:	d0f0      	beq.n	800453c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800455a:	4b2d      	ldr	r3, [pc, #180]	; (8004610 <HAL_RCC_OscConfig+0x280>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	691b      	ldr	r3, [r3, #16]
 8004566:	00db      	lsls	r3, r3, #3
 8004568:	4929      	ldr	r1, [pc, #164]	; (8004610 <HAL_RCC_OscConfig+0x280>)
 800456a:	4313      	orrs	r3, r2
 800456c:	600b      	str	r3, [r1, #0]
 800456e:	e018      	b.n	80045a2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004570:	4b27      	ldr	r3, [pc, #156]	; (8004610 <HAL_RCC_OscConfig+0x280>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a26      	ldr	r2, [pc, #152]	; (8004610 <HAL_RCC_OscConfig+0x280>)
 8004576:	f023 0301 	bic.w	r3, r3, #1
 800457a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800457c:	f7fd fdb6 	bl	80020ec <HAL_GetTick>
 8004580:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004582:	e008      	b.n	8004596 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004584:	f7fd fdb2 	bl	80020ec <HAL_GetTick>
 8004588:	4602      	mov	r2, r0
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	1ad3      	subs	r3, r2, r3
 800458e:	2b02      	cmp	r3, #2
 8004590:	d901      	bls.n	8004596 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004592:	2303      	movs	r3, #3
 8004594:	e199      	b.n	80048ca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004596:	4b1e      	ldr	r3, [pc, #120]	; (8004610 <HAL_RCC_OscConfig+0x280>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f003 0302 	and.w	r3, r3, #2
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d1f0      	bne.n	8004584 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f003 0308 	and.w	r3, r3, #8
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d038      	beq.n	8004620 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	695b      	ldr	r3, [r3, #20]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d019      	beq.n	80045ea <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80045b6:	4b16      	ldr	r3, [pc, #88]	; (8004610 <HAL_RCC_OscConfig+0x280>)
 80045b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045ba:	4a15      	ldr	r2, [pc, #84]	; (8004610 <HAL_RCC_OscConfig+0x280>)
 80045bc:	f043 0301 	orr.w	r3, r3, #1
 80045c0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045c2:	f7fd fd93 	bl	80020ec <HAL_GetTick>
 80045c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045c8:	e008      	b.n	80045dc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045ca:	f7fd fd8f 	bl	80020ec <HAL_GetTick>
 80045ce:	4602      	mov	r2, r0
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	1ad3      	subs	r3, r2, r3
 80045d4:	2b02      	cmp	r3, #2
 80045d6:	d901      	bls.n	80045dc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80045d8:	2303      	movs	r3, #3
 80045da:	e176      	b.n	80048ca <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045dc:	4b0c      	ldr	r3, [pc, #48]	; (8004610 <HAL_RCC_OscConfig+0x280>)
 80045de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045e0:	f003 0302 	and.w	r3, r3, #2
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d0f0      	beq.n	80045ca <HAL_RCC_OscConfig+0x23a>
 80045e8:	e01a      	b.n	8004620 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80045ea:	4b09      	ldr	r3, [pc, #36]	; (8004610 <HAL_RCC_OscConfig+0x280>)
 80045ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045ee:	4a08      	ldr	r2, [pc, #32]	; (8004610 <HAL_RCC_OscConfig+0x280>)
 80045f0:	f023 0301 	bic.w	r3, r3, #1
 80045f4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045f6:	f7fd fd79 	bl	80020ec <HAL_GetTick>
 80045fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045fc:	e00a      	b.n	8004614 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045fe:	f7fd fd75 	bl	80020ec <HAL_GetTick>
 8004602:	4602      	mov	r2, r0
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	1ad3      	subs	r3, r2, r3
 8004608:	2b02      	cmp	r3, #2
 800460a:	d903      	bls.n	8004614 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800460c:	2303      	movs	r3, #3
 800460e:	e15c      	b.n	80048ca <HAL_RCC_OscConfig+0x53a>
 8004610:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004614:	4b91      	ldr	r3, [pc, #580]	; (800485c <HAL_RCC_OscConfig+0x4cc>)
 8004616:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004618:	f003 0302 	and.w	r3, r3, #2
 800461c:	2b00      	cmp	r3, #0
 800461e:	d1ee      	bne.n	80045fe <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f003 0304 	and.w	r3, r3, #4
 8004628:	2b00      	cmp	r3, #0
 800462a:	f000 80a4 	beq.w	8004776 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800462e:	4b8b      	ldr	r3, [pc, #556]	; (800485c <HAL_RCC_OscConfig+0x4cc>)
 8004630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004632:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004636:	2b00      	cmp	r3, #0
 8004638:	d10d      	bne.n	8004656 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800463a:	4b88      	ldr	r3, [pc, #544]	; (800485c <HAL_RCC_OscConfig+0x4cc>)
 800463c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800463e:	4a87      	ldr	r2, [pc, #540]	; (800485c <HAL_RCC_OscConfig+0x4cc>)
 8004640:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004644:	6413      	str	r3, [r2, #64]	; 0x40
 8004646:	4b85      	ldr	r3, [pc, #532]	; (800485c <HAL_RCC_OscConfig+0x4cc>)
 8004648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800464a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800464e:	60bb      	str	r3, [r7, #8]
 8004650:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004652:	2301      	movs	r3, #1
 8004654:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004656:	4b82      	ldr	r3, [pc, #520]	; (8004860 <HAL_RCC_OscConfig+0x4d0>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800465e:	2b00      	cmp	r3, #0
 8004660:	d118      	bne.n	8004694 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004662:	4b7f      	ldr	r3, [pc, #508]	; (8004860 <HAL_RCC_OscConfig+0x4d0>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a7e      	ldr	r2, [pc, #504]	; (8004860 <HAL_RCC_OscConfig+0x4d0>)
 8004668:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800466c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800466e:	f7fd fd3d 	bl	80020ec <HAL_GetTick>
 8004672:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004674:	e008      	b.n	8004688 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004676:	f7fd fd39 	bl	80020ec <HAL_GetTick>
 800467a:	4602      	mov	r2, r0
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	1ad3      	subs	r3, r2, r3
 8004680:	2b64      	cmp	r3, #100	; 0x64
 8004682:	d901      	bls.n	8004688 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004684:	2303      	movs	r3, #3
 8004686:	e120      	b.n	80048ca <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004688:	4b75      	ldr	r3, [pc, #468]	; (8004860 <HAL_RCC_OscConfig+0x4d0>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004690:	2b00      	cmp	r3, #0
 8004692:	d0f0      	beq.n	8004676 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	2b01      	cmp	r3, #1
 800469a:	d106      	bne.n	80046aa <HAL_RCC_OscConfig+0x31a>
 800469c:	4b6f      	ldr	r3, [pc, #444]	; (800485c <HAL_RCC_OscConfig+0x4cc>)
 800469e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046a0:	4a6e      	ldr	r2, [pc, #440]	; (800485c <HAL_RCC_OscConfig+0x4cc>)
 80046a2:	f043 0301 	orr.w	r3, r3, #1
 80046a6:	6713      	str	r3, [r2, #112]	; 0x70
 80046a8:	e02d      	b.n	8004706 <HAL_RCC_OscConfig+0x376>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d10c      	bne.n	80046cc <HAL_RCC_OscConfig+0x33c>
 80046b2:	4b6a      	ldr	r3, [pc, #424]	; (800485c <HAL_RCC_OscConfig+0x4cc>)
 80046b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046b6:	4a69      	ldr	r2, [pc, #420]	; (800485c <HAL_RCC_OscConfig+0x4cc>)
 80046b8:	f023 0301 	bic.w	r3, r3, #1
 80046bc:	6713      	str	r3, [r2, #112]	; 0x70
 80046be:	4b67      	ldr	r3, [pc, #412]	; (800485c <HAL_RCC_OscConfig+0x4cc>)
 80046c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046c2:	4a66      	ldr	r2, [pc, #408]	; (800485c <HAL_RCC_OscConfig+0x4cc>)
 80046c4:	f023 0304 	bic.w	r3, r3, #4
 80046c8:	6713      	str	r3, [r2, #112]	; 0x70
 80046ca:	e01c      	b.n	8004706 <HAL_RCC_OscConfig+0x376>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	2b05      	cmp	r3, #5
 80046d2:	d10c      	bne.n	80046ee <HAL_RCC_OscConfig+0x35e>
 80046d4:	4b61      	ldr	r3, [pc, #388]	; (800485c <HAL_RCC_OscConfig+0x4cc>)
 80046d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046d8:	4a60      	ldr	r2, [pc, #384]	; (800485c <HAL_RCC_OscConfig+0x4cc>)
 80046da:	f043 0304 	orr.w	r3, r3, #4
 80046de:	6713      	str	r3, [r2, #112]	; 0x70
 80046e0:	4b5e      	ldr	r3, [pc, #376]	; (800485c <HAL_RCC_OscConfig+0x4cc>)
 80046e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046e4:	4a5d      	ldr	r2, [pc, #372]	; (800485c <HAL_RCC_OscConfig+0x4cc>)
 80046e6:	f043 0301 	orr.w	r3, r3, #1
 80046ea:	6713      	str	r3, [r2, #112]	; 0x70
 80046ec:	e00b      	b.n	8004706 <HAL_RCC_OscConfig+0x376>
 80046ee:	4b5b      	ldr	r3, [pc, #364]	; (800485c <HAL_RCC_OscConfig+0x4cc>)
 80046f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046f2:	4a5a      	ldr	r2, [pc, #360]	; (800485c <HAL_RCC_OscConfig+0x4cc>)
 80046f4:	f023 0301 	bic.w	r3, r3, #1
 80046f8:	6713      	str	r3, [r2, #112]	; 0x70
 80046fa:	4b58      	ldr	r3, [pc, #352]	; (800485c <HAL_RCC_OscConfig+0x4cc>)
 80046fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046fe:	4a57      	ldr	r2, [pc, #348]	; (800485c <HAL_RCC_OscConfig+0x4cc>)
 8004700:	f023 0304 	bic.w	r3, r3, #4
 8004704:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d015      	beq.n	800473a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800470e:	f7fd fced 	bl	80020ec <HAL_GetTick>
 8004712:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004714:	e00a      	b.n	800472c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004716:	f7fd fce9 	bl	80020ec <HAL_GetTick>
 800471a:	4602      	mov	r2, r0
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	1ad3      	subs	r3, r2, r3
 8004720:	f241 3288 	movw	r2, #5000	; 0x1388
 8004724:	4293      	cmp	r3, r2
 8004726:	d901      	bls.n	800472c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004728:	2303      	movs	r3, #3
 800472a:	e0ce      	b.n	80048ca <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800472c:	4b4b      	ldr	r3, [pc, #300]	; (800485c <HAL_RCC_OscConfig+0x4cc>)
 800472e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004730:	f003 0302 	and.w	r3, r3, #2
 8004734:	2b00      	cmp	r3, #0
 8004736:	d0ee      	beq.n	8004716 <HAL_RCC_OscConfig+0x386>
 8004738:	e014      	b.n	8004764 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800473a:	f7fd fcd7 	bl	80020ec <HAL_GetTick>
 800473e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004740:	e00a      	b.n	8004758 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004742:	f7fd fcd3 	bl	80020ec <HAL_GetTick>
 8004746:	4602      	mov	r2, r0
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	1ad3      	subs	r3, r2, r3
 800474c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004750:	4293      	cmp	r3, r2
 8004752:	d901      	bls.n	8004758 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004754:	2303      	movs	r3, #3
 8004756:	e0b8      	b.n	80048ca <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004758:	4b40      	ldr	r3, [pc, #256]	; (800485c <HAL_RCC_OscConfig+0x4cc>)
 800475a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800475c:	f003 0302 	and.w	r3, r3, #2
 8004760:	2b00      	cmp	r3, #0
 8004762:	d1ee      	bne.n	8004742 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004764:	7dfb      	ldrb	r3, [r7, #23]
 8004766:	2b01      	cmp	r3, #1
 8004768:	d105      	bne.n	8004776 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800476a:	4b3c      	ldr	r3, [pc, #240]	; (800485c <HAL_RCC_OscConfig+0x4cc>)
 800476c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800476e:	4a3b      	ldr	r2, [pc, #236]	; (800485c <HAL_RCC_OscConfig+0x4cc>)
 8004770:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004774:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	699b      	ldr	r3, [r3, #24]
 800477a:	2b00      	cmp	r3, #0
 800477c:	f000 80a4 	beq.w	80048c8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004780:	4b36      	ldr	r3, [pc, #216]	; (800485c <HAL_RCC_OscConfig+0x4cc>)
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	f003 030c 	and.w	r3, r3, #12
 8004788:	2b08      	cmp	r3, #8
 800478a:	d06b      	beq.n	8004864 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	699b      	ldr	r3, [r3, #24]
 8004790:	2b02      	cmp	r3, #2
 8004792:	d149      	bne.n	8004828 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004794:	4b31      	ldr	r3, [pc, #196]	; (800485c <HAL_RCC_OscConfig+0x4cc>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a30      	ldr	r2, [pc, #192]	; (800485c <HAL_RCC_OscConfig+0x4cc>)
 800479a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800479e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047a0:	f7fd fca4 	bl	80020ec <HAL_GetTick>
 80047a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047a6:	e008      	b.n	80047ba <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047a8:	f7fd fca0 	bl	80020ec <HAL_GetTick>
 80047ac:	4602      	mov	r2, r0
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	1ad3      	subs	r3, r2, r3
 80047b2:	2b02      	cmp	r3, #2
 80047b4:	d901      	bls.n	80047ba <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80047b6:	2303      	movs	r3, #3
 80047b8:	e087      	b.n	80048ca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047ba:	4b28      	ldr	r3, [pc, #160]	; (800485c <HAL_RCC_OscConfig+0x4cc>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d1f0      	bne.n	80047a8 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	69da      	ldr	r2, [r3, #28]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6a1b      	ldr	r3, [r3, #32]
 80047ce:	431a      	orrs	r2, r3
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d4:	019b      	lsls	r3, r3, #6
 80047d6:	431a      	orrs	r2, r3
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047dc:	085b      	lsrs	r3, r3, #1
 80047de:	3b01      	subs	r3, #1
 80047e0:	041b      	lsls	r3, r3, #16
 80047e2:	431a      	orrs	r2, r3
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047e8:	061b      	lsls	r3, r3, #24
 80047ea:	4313      	orrs	r3, r2
 80047ec:	4a1b      	ldr	r2, [pc, #108]	; (800485c <HAL_RCC_OscConfig+0x4cc>)
 80047ee:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80047f2:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047f4:	4b19      	ldr	r3, [pc, #100]	; (800485c <HAL_RCC_OscConfig+0x4cc>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a18      	ldr	r2, [pc, #96]	; (800485c <HAL_RCC_OscConfig+0x4cc>)
 80047fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80047fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004800:	f7fd fc74 	bl	80020ec <HAL_GetTick>
 8004804:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004806:	e008      	b.n	800481a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004808:	f7fd fc70 	bl	80020ec <HAL_GetTick>
 800480c:	4602      	mov	r2, r0
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	1ad3      	subs	r3, r2, r3
 8004812:	2b02      	cmp	r3, #2
 8004814:	d901      	bls.n	800481a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8004816:	2303      	movs	r3, #3
 8004818:	e057      	b.n	80048ca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800481a:	4b10      	ldr	r3, [pc, #64]	; (800485c <HAL_RCC_OscConfig+0x4cc>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004822:	2b00      	cmp	r3, #0
 8004824:	d0f0      	beq.n	8004808 <HAL_RCC_OscConfig+0x478>
 8004826:	e04f      	b.n	80048c8 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004828:	4b0c      	ldr	r3, [pc, #48]	; (800485c <HAL_RCC_OscConfig+0x4cc>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a0b      	ldr	r2, [pc, #44]	; (800485c <HAL_RCC_OscConfig+0x4cc>)
 800482e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004832:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004834:	f7fd fc5a 	bl	80020ec <HAL_GetTick>
 8004838:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800483a:	e008      	b.n	800484e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800483c:	f7fd fc56 	bl	80020ec <HAL_GetTick>
 8004840:	4602      	mov	r2, r0
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	1ad3      	subs	r3, r2, r3
 8004846:	2b02      	cmp	r3, #2
 8004848:	d901      	bls.n	800484e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800484a:	2303      	movs	r3, #3
 800484c:	e03d      	b.n	80048ca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800484e:	4b03      	ldr	r3, [pc, #12]	; (800485c <HAL_RCC_OscConfig+0x4cc>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004856:	2b00      	cmp	r3, #0
 8004858:	d1f0      	bne.n	800483c <HAL_RCC_OscConfig+0x4ac>
 800485a:	e035      	b.n	80048c8 <HAL_RCC_OscConfig+0x538>
 800485c:	40023800 	.word	0x40023800
 8004860:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004864:	4b1b      	ldr	r3, [pc, #108]	; (80048d4 <HAL_RCC_OscConfig+0x544>)
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	699b      	ldr	r3, [r3, #24]
 800486e:	2b01      	cmp	r3, #1
 8004870:	d028      	beq.n	80048c4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800487c:	429a      	cmp	r2, r3
 800487e:	d121      	bne.n	80048c4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800488a:	429a      	cmp	r2, r3
 800488c:	d11a      	bne.n	80048c4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800488e:	68fa      	ldr	r2, [r7, #12]
 8004890:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004894:	4013      	ands	r3, r2
 8004896:	687a      	ldr	r2, [r7, #4]
 8004898:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800489a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800489c:	4293      	cmp	r3, r2
 800489e:	d111      	bne.n	80048c4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048aa:	085b      	lsrs	r3, r3, #1
 80048ac:	3b01      	subs	r3, #1
 80048ae:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80048b0:	429a      	cmp	r2, r3
 80048b2:	d107      	bne.n	80048c4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048be:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80048c0:	429a      	cmp	r2, r3
 80048c2:	d001      	beq.n	80048c8 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80048c4:	2301      	movs	r3, #1
 80048c6:	e000      	b.n	80048ca <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80048c8:	2300      	movs	r3, #0
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	3718      	adds	r7, #24
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}
 80048d2:	bf00      	nop
 80048d4:	40023800 	.word	0x40023800

080048d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b084      	sub	sp, #16
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
 80048e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80048e2:	2300      	movs	r3, #0
 80048e4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d101      	bne.n	80048f0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80048ec:	2301      	movs	r3, #1
 80048ee:	e0d0      	b.n	8004a92 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80048f0:	4b6a      	ldr	r3, [pc, #424]	; (8004a9c <HAL_RCC_ClockConfig+0x1c4>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f003 030f 	and.w	r3, r3, #15
 80048f8:	683a      	ldr	r2, [r7, #0]
 80048fa:	429a      	cmp	r2, r3
 80048fc:	d910      	bls.n	8004920 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048fe:	4b67      	ldr	r3, [pc, #412]	; (8004a9c <HAL_RCC_ClockConfig+0x1c4>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f023 020f 	bic.w	r2, r3, #15
 8004906:	4965      	ldr	r1, [pc, #404]	; (8004a9c <HAL_RCC_ClockConfig+0x1c4>)
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	4313      	orrs	r3, r2
 800490c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800490e:	4b63      	ldr	r3, [pc, #396]	; (8004a9c <HAL_RCC_ClockConfig+0x1c4>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f003 030f 	and.w	r3, r3, #15
 8004916:	683a      	ldr	r2, [r7, #0]
 8004918:	429a      	cmp	r2, r3
 800491a:	d001      	beq.n	8004920 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800491c:	2301      	movs	r3, #1
 800491e:	e0b8      	b.n	8004a92 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f003 0302 	and.w	r3, r3, #2
 8004928:	2b00      	cmp	r3, #0
 800492a:	d020      	beq.n	800496e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f003 0304 	and.w	r3, r3, #4
 8004934:	2b00      	cmp	r3, #0
 8004936:	d005      	beq.n	8004944 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004938:	4b59      	ldr	r3, [pc, #356]	; (8004aa0 <HAL_RCC_ClockConfig+0x1c8>)
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	4a58      	ldr	r2, [pc, #352]	; (8004aa0 <HAL_RCC_ClockConfig+0x1c8>)
 800493e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004942:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f003 0308 	and.w	r3, r3, #8
 800494c:	2b00      	cmp	r3, #0
 800494e:	d005      	beq.n	800495c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004950:	4b53      	ldr	r3, [pc, #332]	; (8004aa0 <HAL_RCC_ClockConfig+0x1c8>)
 8004952:	689b      	ldr	r3, [r3, #8]
 8004954:	4a52      	ldr	r2, [pc, #328]	; (8004aa0 <HAL_RCC_ClockConfig+0x1c8>)
 8004956:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800495a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800495c:	4b50      	ldr	r3, [pc, #320]	; (8004aa0 <HAL_RCC_ClockConfig+0x1c8>)
 800495e:	689b      	ldr	r3, [r3, #8]
 8004960:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	494d      	ldr	r1, [pc, #308]	; (8004aa0 <HAL_RCC_ClockConfig+0x1c8>)
 800496a:	4313      	orrs	r3, r2
 800496c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f003 0301 	and.w	r3, r3, #1
 8004976:	2b00      	cmp	r3, #0
 8004978:	d040      	beq.n	80049fc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	2b01      	cmp	r3, #1
 8004980:	d107      	bne.n	8004992 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004982:	4b47      	ldr	r3, [pc, #284]	; (8004aa0 <HAL_RCC_ClockConfig+0x1c8>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800498a:	2b00      	cmp	r3, #0
 800498c:	d115      	bne.n	80049ba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800498e:	2301      	movs	r3, #1
 8004990:	e07f      	b.n	8004a92 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	2b02      	cmp	r3, #2
 8004998:	d107      	bne.n	80049aa <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800499a:	4b41      	ldr	r3, [pc, #260]	; (8004aa0 <HAL_RCC_ClockConfig+0x1c8>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d109      	bne.n	80049ba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80049a6:	2301      	movs	r3, #1
 80049a8:	e073      	b.n	8004a92 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049aa:	4b3d      	ldr	r3, [pc, #244]	; (8004aa0 <HAL_RCC_ClockConfig+0x1c8>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f003 0302 	and.w	r3, r3, #2
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d101      	bne.n	80049ba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	e06b      	b.n	8004a92 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80049ba:	4b39      	ldr	r3, [pc, #228]	; (8004aa0 <HAL_RCC_ClockConfig+0x1c8>)
 80049bc:	689b      	ldr	r3, [r3, #8]
 80049be:	f023 0203 	bic.w	r2, r3, #3
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	4936      	ldr	r1, [pc, #216]	; (8004aa0 <HAL_RCC_ClockConfig+0x1c8>)
 80049c8:	4313      	orrs	r3, r2
 80049ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049cc:	f7fd fb8e 	bl	80020ec <HAL_GetTick>
 80049d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049d2:	e00a      	b.n	80049ea <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049d4:	f7fd fb8a 	bl	80020ec <HAL_GetTick>
 80049d8:	4602      	mov	r2, r0
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	1ad3      	subs	r3, r2, r3
 80049de:	f241 3288 	movw	r2, #5000	; 0x1388
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d901      	bls.n	80049ea <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80049e6:	2303      	movs	r3, #3
 80049e8:	e053      	b.n	8004a92 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049ea:	4b2d      	ldr	r3, [pc, #180]	; (8004aa0 <HAL_RCC_ClockConfig+0x1c8>)
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	f003 020c 	and.w	r2, r3, #12
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	009b      	lsls	r3, r3, #2
 80049f8:	429a      	cmp	r2, r3
 80049fa:	d1eb      	bne.n	80049d4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80049fc:	4b27      	ldr	r3, [pc, #156]	; (8004a9c <HAL_RCC_ClockConfig+0x1c4>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f003 030f 	and.w	r3, r3, #15
 8004a04:	683a      	ldr	r2, [r7, #0]
 8004a06:	429a      	cmp	r2, r3
 8004a08:	d210      	bcs.n	8004a2c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a0a:	4b24      	ldr	r3, [pc, #144]	; (8004a9c <HAL_RCC_ClockConfig+0x1c4>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f023 020f 	bic.w	r2, r3, #15
 8004a12:	4922      	ldr	r1, [pc, #136]	; (8004a9c <HAL_RCC_ClockConfig+0x1c4>)
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	4313      	orrs	r3, r2
 8004a18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a1a:	4b20      	ldr	r3, [pc, #128]	; (8004a9c <HAL_RCC_ClockConfig+0x1c4>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f003 030f 	and.w	r3, r3, #15
 8004a22:	683a      	ldr	r2, [r7, #0]
 8004a24:	429a      	cmp	r2, r3
 8004a26:	d001      	beq.n	8004a2c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	e032      	b.n	8004a92 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f003 0304 	and.w	r3, r3, #4
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d008      	beq.n	8004a4a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a38:	4b19      	ldr	r3, [pc, #100]	; (8004aa0 <HAL_RCC_ClockConfig+0x1c8>)
 8004a3a:	689b      	ldr	r3, [r3, #8]
 8004a3c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	68db      	ldr	r3, [r3, #12]
 8004a44:	4916      	ldr	r1, [pc, #88]	; (8004aa0 <HAL_RCC_ClockConfig+0x1c8>)
 8004a46:	4313      	orrs	r3, r2
 8004a48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f003 0308 	and.w	r3, r3, #8
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d009      	beq.n	8004a6a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004a56:	4b12      	ldr	r3, [pc, #72]	; (8004aa0 <HAL_RCC_ClockConfig+0x1c8>)
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	691b      	ldr	r3, [r3, #16]
 8004a62:	00db      	lsls	r3, r3, #3
 8004a64:	490e      	ldr	r1, [pc, #56]	; (8004aa0 <HAL_RCC_ClockConfig+0x1c8>)
 8004a66:	4313      	orrs	r3, r2
 8004a68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004a6a:	f000 f821 	bl	8004ab0 <HAL_RCC_GetSysClockFreq>
 8004a6e:	4602      	mov	r2, r0
 8004a70:	4b0b      	ldr	r3, [pc, #44]	; (8004aa0 <HAL_RCC_ClockConfig+0x1c8>)
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	091b      	lsrs	r3, r3, #4
 8004a76:	f003 030f 	and.w	r3, r3, #15
 8004a7a:	490a      	ldr	r1, [pc, #40]	; (8004aa4 <HAL_RCC_ClockConfig+0x1cc>)
 8004a7c:	5ccb      	ldrb	r3, [r1, r3]
 8004a7e:	fa22 f303 	lsr.w	r3, r2, r3
 8004a82:	4a09      	ldr	r2, [pc, #36]	; (8004aa8 <HAL_RCC_ClockConfig+0x1d0>)
 8004a84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004a86:	4b09      	ldr	r3, [pc, #36]	; (8004aac <HAL_RCC_ClockConfig+0x1d4>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	f7fd faea 	bl	8002064 <HAL_InitTick>

  return HAL_OK;
 8004a90:	2300      	movs	r3, #0
}
 8004a92:	4618      	mov	r0, r3
 8004a94:	3710      	adds	r7, #16
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd80      	pop	{r7, pc}
 8004a9a:	bf00      	nop
 8004a9c:	40023c00 	.word	0x40023c00
 8004aa0:	40023800 	.word	0x40023800
 8004aa4:	0800cf58 	.word	0x0800cf58
 8004aa8:	20000000 	.word	0x20000000
 8004aac:	20000054 	.word	0x20000054

08004ab0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ab0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ab4:	b090      	sub	sp, #64	; 0x40
 8004ab6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	637b      	str	r3, [r7, #52]	; 0x34
 8004abc:	2300      	movs	r3, #0
 8004abe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ac8:	4b59      	ldr	r3, [pc, #356]	; (8004c30 <HAL_RCC_GetSysClockFreq+0x180>)
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	f003 030c 	and.w	r3, r3, #12
 8004ad0:	2b08      	cmp	r3, #8
 8004ad2:	d00d      	beq.n	8004af0 <HAL_RCC_GetSysClockFreq+0x40>
 8004ad4:	2b08      	cmp	r3, #8
 8004ad6:	f200 80a1 	bhi.w	8004c1c <HAL_RCC_GetSysClockFreq+0x16c>
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d002      	beq.n	8004ae4 <HAL_RCC_GetSysClockFreq+0x34>
 8004ade:	2b04      	cmp	r3, #4
 8004ae0:	d003      	beq.n	8004aea <HAL_RCC_GetSysClockFreq+0x3a>
 8004ae2:	e09b      	b.n	8004c1c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004ae4:	4b53      	ldr	r3, [pc, #332]	; (8004c34 <HAL_RCC_GetSysClockFreq+0x184>)
 8004ae6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004ae8:	e09b      	b.n	8004c22 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004aea:	4b53      	ldr	r3, [pc, #332]	; (8004c38 <HAL_RCC_GetSysClockFreq+0x188>)
 8004aec:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004aee:	e098      	b.n	8004c22 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004af0:	4b4f      	ldr	r3, [pc, #316]	; (8004c30 <HAL_RCC_GetSysClockFreq+0x180>)
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004af8:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004afa:	4b4d      	ldr	r3, [pc, #308]	; (8004c30 <HAL_RCC_GetSysClockFreq+0x180>)
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d028      	beq.n	8004b58 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b06:	4b4a      	ldr	r3, [pc, #296]	; (8004c30 <HAL_RCC_GetSysClockFreq+0x180>)
 8004b08:	685b      	ldr	r3, [r3, #4]
 8004b0a:	099b      	lsrs	r3, r3, #6
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	623b      	str	r3, [r7, #32]
 8004b10:	627a      	str	r2, [r7, #36]	; 0x24
 8004b12:	6a3b      	ldr	r3, [r7, #32]
 8004b14:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004b18:	2100      	movs	r1, #0
 8004b1a:	4b47      	ldr	r3, [pc, #284]	; (8004c38 <HAL_RCC_GetSysClockFreq+0x188>)
 8004b1c:	fb03 f201 	mul.w	r2, r3, r1
 8004b20:	2300      	movs	r3, #0
 8004b22:	fb00 f303 	mul.w	r3, r0, r3
 8004b26:	4413      	add	r3, r2
 8004b28:	4a43      	ldr	r2, [pc, #268]	; (8004c38 <HAL_RCC_GetSysClockFreq+0x188>)
 8004b2a:	fba0 1202 	umull	r1, r2, r0, r2
 8004b2e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004b30:	460a      	mov	r2, r1
 8004b32:	62ba      	str	r2, [r7, #40]	; 0x28
 8004b34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b36:	4413      	add	r3, r2
 8004b38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	61bb      	str	r3, [r7, #24]
 8004b40:	61fa      	str	r2, [r7, #28]
 8004b42:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b46:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004b4a:	f7fc f8a5 	bl	8000c98 <__aeabi_uldivmod>
 8004b4e:	4602      	mov	r2, r0
 8004b50:	460b      	mov	r3, r1
 8004b52:	4613      	mov	r3, r2
 8004b54:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b56:	e053      	b.n	8004c00 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b58:	4b35      	ldr	r3, [pc, #212]	; (8004c30 <HAL_RCC_GetSysClockFreq+0x180>)
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	099b      	lsrs	r3, r3, #6
 8004b5e:	2200      	movs	r2, #0
 8004b60:	613b      	str	r3, [r7, #16]
 8004b62:	617a      	str	r2, [r7, #20]
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004b6a:	f04f 0b00 	mov.w	fp, #0
 8004b6e:	4652      	mov	r2, sl
 8004b70:	465b      	mov	r3, fp
 8004b72:	f04f 0000 	mov.w	r0, #0
 8004b76:	f04f 0100 	mov.w	r1, #0
 8004b7a:	0159      	lsls	r1, r3, #5
 8004b7c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004b80:	0150      	lsls	r0, r2, #5
 8004b82:	4602      	mov	r2, r0
 8004b84:	460b      	mov	r3, r1
 8004b86:	ebb2 080a 	subs.w	r8, r2, sl
 8004b8a:	eb63 090b 	sbc.w	r9, r3, fp
 8004b8e:	f04f 0200 	mov.w	r2, #0
 8004b92:	f04f 0300 	mov.w	r3, #0
 8004b96:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004b9a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004b9e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004ba2:	ebb2 0408 	subs.w	r4, r2, r8
 8004ba6:	eb63 0509 	sbc.w	r5, r3, r9
 8004baa:	f04f 0200 	mov.w	r2, #0
 8004bae:	f04f 0300 	mov.w	r3, #0
 8004bb2:	00eb      	lsls	r3, r5, #3
 8004bb4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004bb8:	00e2      	lsls	r2, r4, #3
 8004bba:	4614      	mov	r4, r2
 8004bbc:	461d      	mov	r5, r3
 8004bbe:	eb14 030a 	adds.w	r3, r4, sl
 8004bc2:	603b      	str	r3, [r7, #0]
 8004bc4:	eb45 030b 	adc.w	r3, r5, fp
 8004bc8:	607b      	str	r3, [r7, #4]
 8004bca:	f04f 0200 	mov.w	r2, #0
 8004bce:	f04f 0300 	mov.w	r3, #0
 8004bd2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004bd6:	4629      	mov	r1, r5
 8004bd8:	028b      	lsls	r3, r1, #10
 8004bda:	4621      	mov	r1, r4
 8004bdc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004be0:	4621      	mov	r1, r4
 8004be2:	028a      	lsls	r2, r1, #10
 8004be4:	4610      	mov	r0, r2
 8004be6:	4619      	mov	r1, r3
 8004be8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bea:	2200      	movs	r2, #0
 8004bec:	60bb      	str	r3, [r7, #8]
 8004bee:	60fa      	str	r2, [r7, #12]
 8004bf0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004bf4:	f7fc f850 	bl	8000c98 <__aeabi_uldivmod>
 8004bf8:	4602      	mov	r2, r0
 8004bfa:	460b      	mov	r3, r1
 8004bfc:	4613      	mov	r3, r2
 8004bfe:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004c00:	4b0b      	ldr	r3, [pc, #44]	; (8004c30 <HAL_RCC_GetSysClockFreq+0x180>)
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	0c1b      	lsrs	r3, r3, #16
 8004c06:	f003 0303 	and.w	r3, r3, #3
 8004c0a:	3301      	adds	r3, #1
 8004c0c:	005b      	lsls	r3, r3, #1
 8004c0e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8004c10:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c14:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c18:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004c1a:	e002      	b.n	8004c22 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c1c:	4b05      	ldr	r3, [pc, #20]	; (8004c34 <HAL_RCC_GetSysClockFreq+0x184>)
 8004c1e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004c20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	3740      	adds	r7, #64	; 0x40
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c2e:	bf00      	nop
 8004c30:	40023800 	.word	0x40023800
 8004c34:	00f42400 	.word	0x00f42400
 8004c38:	017d7840 	.word	0x017d7840

08004c3c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c40:	4b03      	ldr	r3, [pc, #12]	; (8004c50 <HAL_RCC_GetHCLKFreq+0x14>)
 8004c42:	681b      	ldr	r3, [r3, #0]
}
 8004c44:	4618      	mov	r0, r3
 8004c46:	46bd      	mov	sp, r7
 8004c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4c:	4770      	bx	lr
 8004c4e:	bf00      	nop
 8004c50:	20000000 	.word	0x20000000

08004c54 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b088      	sub	sp, #32
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004c60:	2300      	movs	r3, #0
 8004c62:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004c64:	2300      	movs	r3, #0
 8004c66:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004c68:	2300      	movs	r3, #0
 8004c6a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f003 0301 	and.w	r3, r3, #1
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d012      	beq.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004c7c:	4b69      	ldr	r3, [pc, #420]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c7e:	689b      	ldr	r3, [r3, #8]
 8004c80:	4a68      	ldr	r2, [pc, #416]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c82:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004c86:	6093      	str	r3, [r2, #8]
 8004c88:	4b66      	ldr	r3, [pc, #408]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c8a:	689a      	ldr	r2, [r3, #8]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c90:	4964      	ldr	r1, [pc, #400]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c92:	4313      	orrs	r3, r2
 8004c94:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d101      	bne.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d017      	beq.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004cae:	4b5d      	ldr	r3, [pc, #372]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004cb4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cbc:	4959      	ldr	r1, [pc, #356]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cc8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ccc:	d101      	bne.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d101      	bne.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d017      	beq.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004cea:	4b4e      	ldr	r3, [pc, #312]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004cf0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cf8:	494a      	ldr	r1, [pc, #296]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d04:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d08:	d101      	bne.n	8004d0e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d101      	bne.n	8004d1a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004d16:	2301      	movs	r3, #1
 8004d18:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d001      	beq.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004d26:	2301      	movs	r3, #1
 8004d28:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f003 0320 	and.w	r3, r3, #32
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	f000 808b 	beq.w	8004e4e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004d38:	4b3a      	ldr	r3, [pc, #232]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d3c:	4a39      	ldr	r2, [pc, #228]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d42:	6413      	str	r3, [r2, #64]	; 0x40
 8004d44:	4b37      	ldr	r3, [pc, #220]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d4c:	60bb      	str	r3, [r7, #8]
 8004d4e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004d50:	4b35      	ldr	r3, [pc, #212]	; (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a34      	ldr	r2, [pc, #208]	; (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004d56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d5a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d5c:	f7fd f9c6 	bl	80020ec <HAL_GetTick>
 8004d60:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004d62:	e008      	b.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d64:	f7fd f9c2 	bl	80020ec <HAL_GetTick>
 8004d68:	4602      	mov	r2, r0
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	1ad3      	subs	r3, r2, r3
 8004d6e:	2b64      	cmp	r3, #100	; 0x64
 8004d70:	d901      	bls.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004d72:	2303      	movs	r3, #3
 8004d74:	e357      	b.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004d76:	4b2c      	ldr	r3, [pc, #176]	; (8004e28 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d0f0      	beq.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004d82:	4b28      	ldr	r3, [pc, #160]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d8a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d035      	beq.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d9a:	693a      	ldr	r2, [r7, #16]
 8004d9c:	429a      	cmp	r2, r3
 8004d9e:	d02e      	beq.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004da0:	4b20      	ldr	r3, [pc, #128]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004da2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004da4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004da8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004daa:	4b1e      	ldr	r3, [pc, #120]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dae:	4a1d      	ldr	r2, [pc, #116]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004db0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004db4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004db6:	4b1b      	ldr	r3, [pc, #108]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004db8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dba:	4a1a      	ldr	r2, [pc, #104]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dbc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004dc0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004dc2:	4a18      	ldr	r2, [pc, #96]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dc4:	693b      	ldr	r3, [r7, #16]
 8004dc6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004dc8:	4b16      	ldr	r3, [pc, #88]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dcc:	f003 0301 	and.w	r3, r3, #1
 8004dd0:	2b01      	cmp	r3, #1
 8004dd2:	d114      	bne.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dd4:	f7fd f98a 	bl	80020ec <HAL_GetTick>
 8004dd8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dda:	e00a      	b.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ddc:	f7fd f986 	bl	80020ec <HAL_GetTick>
 8004de0:	4602      	mov	r2, r0
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	1ad3      	subs	r3, r2, r3
 8004de6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d901      	bls.n	8004df2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004dee:	2303      	movs	r3, #3
 8004df0:	e319      	b.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004df2:	4b0c      	ldr	r3, [pc, #48]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004df4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004df6:	f003 0302 	and.w	r3, r3, #2
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d0ee      	beq.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e06:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e0a:	d111      	bne.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004e0c:	4b05      	ldr	r3, [pc, #20]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004e18:	4b04      	ldr	r3, [pc, #16]	; (8004e2c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004e1a:	400b      	ands	r3, r1
 8004e1c:	4901      	ldr	r1, [pc, #4]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	608b      	str	r3, [r1, #8]
 8004e22:	e00b      	b.n	8004e3c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004e24:	40023800 	.word	0x40023800
 8004e28:	40007000 	.word	0x40007000
 8004e2c:	0ffffcff 	.word	0x0ffffcff
 8004e30:	4baa      	ldr	r3, [pc, #680]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e32:	689b      	ldr	r3, [r3, #8]
 8004e34:	4aa9      	ldr	r2, [pc, #676]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e36:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004e3a:	6093      	str	r3, [r2, #8]
 8004e3c:	4ba7      	ldr	r3, [pc, #668]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e3e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e48:	49a4      	ldr	r1, [pc, #656]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f003 0310 	and.w	r3, r3, #16
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d010      	beq.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004e5a:	4ba0      	ldr	r3, [pc, #640]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e60:	4a9e      	ldr	r2, [pc, #632]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e66:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004e6a:	4b9c      	ldr	r3, [pc, #624]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e6c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e74:	4999      	ldr	r1, [pc, #612]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e76:	4313      	orrs	r3, r2
 8004e78:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d00a      	beq.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004e88:	4b94      	ldr	r3, [pc, #592]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e8e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e96:	4991      	ldr	r1, [pc, #580]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d00a      	beq.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004eaa:	4b8c      	ldr	r3, [pc, #560]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004eac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eb0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004eb8:	4988      	ldr	r1, [pc, #544]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d00a      	beq.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004ecc:	4b83      	ldr	r3, [pc, #524]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ece:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ed2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004eda:	4980      	ldr	r1, [pc, #512]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004edc:	4313      	orrs	r3, r2
 8004ede:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d00a      	beq.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004eee:	4b7b      	ldr	r3, [pc, #492]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ef0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ef4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004efc:	4977      	ldr	r1, [pc, #476]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004efe:	4313      	orrs	r3, r2
 8004f00:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d00a      	beq.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004f10:	4b72      	ldr	r3, [pc, #456]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f16:	f023 0203 	bic.w	r2, r3, #3
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f1e:	496f      	ldr	r1, [pc, #444]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f20:	4313      	orrs	r3, r2
 8004f22:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d00a      	beq.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004f32:	4b6a      	ldr	r3, [pc, #424]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f38:	f023 020c 	bic.w	r2, r3, #12
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f40:	4966      	ldr	r1, [pc, #408]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f42:	4313      	orrs	r3, r2
 8004f44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d00a      	beq.n	8004f6a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004f54:	4b61      	ldr	r3, [pc, #388]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f5a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f62:	495e      	ldr	r1, [pc, #376]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f64:	4313      	orrs	r3, r2
 8004f66:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d00a      	beq.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004f76:	4b59      	ldr	r3, [pc, #356]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f7c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f84:	4955      	ldr	r1, [pc, #340]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f86:	4313      	orrs	r3, r2
 8004f88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d00a      	beq.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004f98:	4b50      	ldr	r3, [pc, #320]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f9e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fa6:	494d      	ldr	r1, [pc, #308]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d00a      	beq.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004fba:	4b48      	ldr	r3, [pc, #288]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004fbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fc0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fc8:	4944      	ldr	r1, [pc, #272]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d00a      	beq.n	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004fdc:	4b3f      	ldr	r3, [pc, #252]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004fde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fe2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fea:	493c      	ldr	r1, [pc, #240]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004fec:	4313      	orrs	r3, r2
 8004fee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d00a      	beq.n	8005014 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004ffe:	4b37      	ldr	r3, [pc, #220]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005000:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005004:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800500c:	4933      	ldr	r1, [pc, #204]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800500e:	4313      	orrs	r3, r2
 8005010:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800501c:	2b00      	cmp	r3, #0
 800501e:	d00a      	beq.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005020:	4b2e      	ldr	r3, [pc, #184]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005022:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005026:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800502e:	492b      	ldr	r1, [pc, #172]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005030:	4313      	orrs	r3, r2
 8005032:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800503e:	2b00      	cmp	r3, #0
 8005040:	d011      	beq.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005042:	4b26      	ldr	r3, [pc, #152]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005044:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005048:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005050:	4922      	ldr	r1, [pc, #136]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005052:	4313      	orrs	r3, r2
 8005054:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800505c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005060:	d101      	bne.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005062:	2301      	movs	r3, #1
 8005064:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f003 0308 	and.w	r3, r3, #8
 800506e:	2b00      	cmp	r3, #0
 8005070:	d001      	beq.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005072:	2301      	movs	r3, #1
 8005074:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800507e:	2b00      	cmp	r3, #0
 8005080:	d00a      	beq.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005082:	4b16      	ldr	r3, [pc, #88]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005084:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005088:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005090:	4912      	ldr	r1, [pc, #72]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005092:	4313      	orrs	r3, r2
 8005094:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d00b      	beq.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80050a4:	4b0d      	ldr	r3, [pc, #52]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80050a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050aa:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80050b4:	4909      	ldr	r1, [pc, #36]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80050b6:	4313      	orrs	r3, r2
 80050b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80050bc:	69fb      	ldr	r3, [r7, #28]
 80050be:	2b01      	cmp	r3, #1
 80050c0:	d006      	beq.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	f000 80d9 	beq.w	8005282 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80050d0:	4b02      	ldr	r3, [pc, #8]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a01      	ldr	r2, [pc, #4]	; (80050dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80050d6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80050da:	e001      	b.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80050dc:	40023800 	.word	0x40023800
 80050e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050e2:	f7fd f803 	bl	80020ec <HAL_GetTick>
 80050e6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80050e8:	e008      	b.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80050ea:	f7fc ffff 	bl	80020ec <HAL_GetTick>
 80050ee:	4602      	mov	r2, r0
 80050f0:	697b      	ldr	r3, [r7, #20]
 80050f2:	1ad3      	subs	r3, r2, r3
 80050f4:	2b64      	cmp	r3, #100	; 0x64
 80050f6:	d901      	bls.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80050f8:	2303      	movs	r3, #3
 80050fa:	e194      	b.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80050fc:	4b6c      	ldr	r3, [pc, #432]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005104:	2b00      	cmp	r3, #0
 8005106:	d1f0      	bne.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f003 0301 	and.w	r3, r3, #1
 8005110:	2b00      	cmp	r3, #0
 8005112:	d021      	beq.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005118:	2b00      	cmp	r3, #0
 800511a:	d11d      	bne.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800511c:	4b64      	ldr	r3, [pc, #400]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800511e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005122:	0c1b      	lsrs	r3, r3, #16
 8005124:	f003 0303 	and.w	r3, r3, #3
 8005128:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800512a:	4b61      	ldr	r3, [pc, #388]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800512c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005130:	0e1b      	lsrs	r3, r3, #24
 8005132:	f003 030f 	and.w	r3, r3, #15
 8005136:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	019a      	lsls	r2, r3, #6
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	041b      	lsls	r3, r3, #16
 8005142:	431a      	orrs	r2, r3
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	061b      	lsls	r3, r3, #24
 8005148:	431a      	orrs	r2, r3
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	689b      	ldr	r3, [r3, #8]
 800514e:	071b      	lsls	r3, r3, #28
 8005150:	4957      	ldr	r1, [pc, #348]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005152:	4313      	orrs	r3, r2
 8005154:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005160:	2b00      	cmp	r3, #0
 8005162:	d004      	beq.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005168:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800516c:	d00a      	beq.n	8005184 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005176:	2b00      	cmp	r3, #0
 8005178:	d02e      	beq.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800517e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005182:	d129      	bne.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005184:	4b4a      	ldr	r3, [pc, #296]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005186:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800518a:	0c1b      	lsrs	r3, r3, #16
 800518c:	f003 0303 	and.w	r3, r3, #3
 8005190:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005192:	4b47      	ldr	r3, [pc, #284]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005194:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005198:	0f1b      	lsrs	r3, r3, #28
 800519a:	f003 0307 	and.w	r3, r3, #7
 800519e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	019a      	lsls	r2, r3, #6
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	041b      	lsls	r3, r3, #16
 80051aa:	431a      	orrs	r2, r3
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	68db      	ldr	r3, [r3, #12]
 80051b0:	061b      	lsls	r3, r3, #24
 80051b2:	431a      	orrs	r2, r3
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	071b      	lsls	r3, r3, #28
 80051b8:	493d      	ldr	r1, [pc, #244]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80051ba:	4313      	orrs	r3, r2
 80051bc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80051c0:	4b3b      	ldr	r3, [pc, #236]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80051c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051c6:	f023 021f 	bic.w	r2, r3, #31
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ce:	3b01      	subs	r3, #1
 80051d0:	4937      	ldr	r1, [pc, #220]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80051d2:	4313      	orrs	r3, r2
 80051d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d01d      	beq.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80051e4:	4b32      	ldr	r3, [pc, #200]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80051e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051ea:	0e1b      	lsrs	r3, r3, #24
 80051ec:	f003 030f 	and.w	r3, r3, #15
 80051f0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80051f2:	4b2f      	ldr	r3, [pc, #188]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80051f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051f8:	0f1b      	lsrs	r3, r3, #28
 80051fa:	f003 0307 	and.w	r3, r3, #7
 80051fe:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	019a      	lsls	r2, r3, #6
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	691b      	ldr	r3, [r3, #16]
 800520a:	041b      	lsls	r3, r3, #16
 800520c:	431a      	orrs	r2, r3
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	061b      	lsls	r3, r3, #24
 8005212:	431a      	orrs	r2, r3
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	071b      	lsls	r3, r3, #28
 8005218:	4925      	ldr	r1, [pc, #148]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800521a:	4313      	orrs	r3, r2
 800521c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005228:	2b00      	cmp	r3, #0
 800522a:	d011      	beq.n	8005250 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	019a      	lsls	r2, r3, #6
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	691b      	ldr	r3, [r3, #16]
 8005236:	041b      	lsls	r3, r3, #16
 8005238:	431a      	orrs	r2, r3
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	68db      	ldr	r3, [r3, #12]
 800523e:	061b      	lsls	r3, r3, #24
 8005240:	431a      	orrs	r2, r3
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	689b      	ldr	r3, [r3, #8]
 8005246:	071b      	lsls	r3, r3, #28
 8005248:	4919      	ldr	r1, [pc, #100]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800524a:	4313      	orrs	r3, r2
 800524c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005250:	4b17      	ldr	r3, [pc, #92]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a16      	ldr	r2, [pc, #88]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005256:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800525a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800525c:	f7fc ff46 	bl	80020ec <HAL_GetTick>
 8005260:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005262:	e008      	b.n	8005276 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005264:	f7fc ff42 	bl	80020ec <HAL_GetTick>
 8005268:	4602      	mov	r2, r0
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	1ad3      	subs	r3, r2, r3
 800526e:	2b64      	cmp	r3, #100	; 0x64
 8005270:	d901      	bls.n	8005276 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005272:	2303      	movs	r3, #3
 8005274:	e0d7      	b.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005276:	4b0e      	ldr	r3, [pc, #56]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800527e:	2b00      	cmp	r3, #0
 8005280:	d0f0      	beq.n	8005264 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005282:	69bb      	ldr	r3, [r7, #24]
 8005284:	2b01      	cmp	r3, #1
 8005286:	f040 80cd 	bne.w	8005424 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800528a:	4b09      	ldr	r3, [pc, #36]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4a08      	ldr	r2, [pc, #32]	; (80052b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005290:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005294:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005296:	f7fc ff29 	bl	80020ec <HAL_GetTick>
 800529a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800529c:	e00a      	b.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800529e:	f7fc ff25 	bl	80020ec <HAL_GetTick>
 80052a2:	4602      	mov	r2, r0
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	1ad3      	subs	r3, r2, r3
 80052a8:	2b64      	cmp	r3, #100	; 0x64
 80052aa:	d903      	bls.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80052ac:	2303      	movs	r3, #3
 80052ae:	e0ba      	b.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80052b0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80052b4:	4b5e      	ldr	r3, [pc, #376]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80052bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052c0:	d0ed      	beq.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d003      	beq.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0x682>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d009      	beq.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d02e      	beq.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d12a      	bne.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80052ea:	4b51      	ldr	r3, [pc, #324]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80052ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052f0:	0c1b      	lsrs	r3, r3, #16
 80052f2:	f003 0303 	and.w	r3, r3, #3
 80052f6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80052f8:	4b4d      	ldr	r3, [pc, #308]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80052fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052fe:	0f1b      	lsrs	r3, r3, #28
 8005300:	f003 0307 	and.w	r3, r3, #7
 8005304:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	695b      	ldr	r3, [r3, #20]
 800530a:	019a      	lsls	r2, r3, #6
 800530c:	693b      	ldr	r3, [r7, #16]
 800530e:	041b      	lsls	r3, r3, #16
 8005310:	431a      	orrs	r2, r3
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	699b      	ldr	r3, [r3, #24]
 8005316:	061b      	lsls	r3, r3, #24
 8005318:	431a      	orrs	r2, r3
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	071b      	lsls	r3, r3, #28
 800531e:	4944      	ldr	r1, [pc, #272]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005320:	4313      	orrs	r3, r2
 8005322:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005326:	4b42      	ldr	r3, [pc, #264]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005328:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800532c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005334:	3b01      	subs	r3, #1
 8005336:	021b      	lsls	r3, r3, #8
 8005338:	493d      	ldr	r1, [pc, #244]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800533a:	4313      	orrs	r3, r2
 800533c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005348:	2b00      	cmp	r3, #0
 800534a:	d022      	beq.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005350:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005354:	d11d      	bne.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005356:	4b36      	ldr	r3, [pc, #216]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005358:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800535c:	0e1b      	lsrs	r3, r3, #24
 800535e:	f003 030f 	and.w	r3, r3, #15
 8005362:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005364:	4b32      	ldr	r3, [pc, #200]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005366:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800536a:	0f1b      	lsrs	r3, r3, #28
 800536c:	f003 0307 	and.w	r3, r3, #7
 8005370:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	695b      	ldr	r3, [r3, #20]
 8005376:	019a      	lsls	r2, r3, #6
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6a1b      	ldr	r3, [r3, #32]
 800537c:	041b      	lsls	r3, r3, #16
 800537e:	431a      	orrs	r2, r3
 8005380:	693b      	ldr	r3, [r7, #16]
 8005382:	061b      	lsls	r3, r3, #24
 8005384:	431a      	orrs	r2, r3
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	071b      	lsls	r3, r3, #28
 800538a:	4929      	ldr	r1, [pc, #164]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800538c:	4313      	orrs	r3, r2
 800538e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f003 0308 	and.w	r3, r3, #8
 800539a:	2b00      	cmp	r3, #0
 800539c:	d028      	beq.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800539e:	4b24      	ldr	r3, [pc, #144]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80053a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053a4:	0e1b      	lsrs	r3, r3, #24
 80053a6:	f003 030f 	and.w	r3, r3, #15
 80053aa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80053ac:	4b20      	ldr	r3, [pc, #128]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80053ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053b2:	0c1b      	lsrs	r3, r3, #16
 80053b4:	f003 0303 	and.w	r3, r3, #3
 80053b8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	695b      	ldr	r3, [r3, #20]
 80053be:	019a      	lsls	r2, r3, #6
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	041b      	lsls	r3, r3, #16
 80053c4:	431a      	orrs	r2, r3
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	061b      	lsls	r3, r3, #24
 80053ca:	431a      	orrs	r2, r3
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	69db      	ldr	r3, [r3, #28]
 80053d0:	071b      	lsls	r3, r3, #28
 80053d2:	4917      	ldr	r1, [pc, #92]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80053d4:	4313      	orrs	r3, r2
 80053d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80053da:	4b15      	ldr	r3, [pc, #84]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80053dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80053e0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053e8:	4911      	ldr	r1, [pc, #68]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80053ea:	4313      	orrs	r3, r2
 80053ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80053f0:	4b0f      	ldr	r3, [pc, #60]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a0e      	ldr	r2, [pc, #56]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80053f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053fc:	f7fc fe76 	bl	80020ec <HAL_GetTick>
 8005400:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005402:	e008      	b.n	8005416 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005404:	f7fc fe72 	bl	80020ec <HAL_GetTick>
 8005408:	4602      	mov	r2, r0
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	1ad3      	subs	r3, r2, r3
 800540e:	2b64      	cmp	r3, #100	; 0x64
 8005410:	d901      	bls.n	8005416 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005412:	2303      	movs	r3, #3
 8005414:	e007      	b.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005416:	4b06      	ldr	r3, [pc, #24]	; (8005430 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800541e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005422:	d1ef      	bne.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8005424:	2300      	movs	r3, #0
}
 8005426:	4618      	mov	r0, r3
 8005428:	3720      	adds	r7, #32
 800542a:	46bd      	mov	sp, r7
 800542c:	bd80      	pop	{r7, pc}
 800542e:	bf00      	nop
 8005430:	40023800 	.word	0x40023800

08005434 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005434:	b084      	sub	sp, #16
 8005436:	b580      	push	{r7, lr}
 8005438:	b084      	sub	sp, #16
 800543a:	af00      	add	r7, sp, #0
 800543c:	6078      	str	r0, [r7, #4]
 800543e:	f107 001c 	add.w	r0, r7, #28
 8005442:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005448:	2b01      	cmp	r3, #1
 800544a:	d120      	bne.n	800548e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005450:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	68da      	ldr	r2, [r3, #12]
 800545c:	4b20      	ldr	r3, [pc, #128]	; (80054e0 <USB_CoreInit+0xac>)
 800545e:	4013      	ands	r3, r2
 8005460:	687a      	ldr	r2, [r7, #4]
 8005462:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	68db      	ldr	r3, [r3, #12]
 8005468:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005470:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005472:	2b01      	cmp	r3, #1
 8005474:	d105      	bne.n	8005482 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	68db      	ldr	r3, [r3, #12]
 800547a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	f001 fbee 	bl	8006c64 <USB_CoreReset>
 8005488:	4603      	mov	r3, r0
 800548a:	73fb      	strb	r3, [r7, #15]
 800548c:	e010      	b.n	80054b0 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	68db      	ldr	r3, [r3, #12]
 8005492:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	f001 fbe2 	bl	8006c64 <USB_CoreReset>
 80054a0:	4603      	mov	r3, r0
 80054a2:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054a8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80054b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054b2:	2b01      	cmp	r3, #1
 80054b4:	d10b      	bne.n	80054ce <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	689b      	ldr	r3, [r3, #8]
 80054ba:	f043 0206 	orr.w	r2, r3, #6
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	689b      	ldr	r3, [r3, #8]
 80054c6:	f043 0220 	orr.w	r2, r3, #32
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80054ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80054d0:	4618      	mov	r0, r3
 80054d2:	3710      	adds	r7, #16
 80054d4:	46bd      	mov	sp, r7
 80054d6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80054da:	b004      	add	sp, #16
 80054dc:	4770      	bx	lr
 80054de:	bf00      	nop
 80054e0:	ffbdffbf 	.word	0xffbdffbf

080054e4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b087      	sub	sp, #28
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	60f8      	str	r0, [r7, #12]
 80054ec:	60b9      	str	r1, [r7, #8]
 80054ee:	4613      	mov	r3, r2
 80054f0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80054f2:	79fb      	ldrb	r3, [r7, #7]
 80054f4:	2b02      	cmp	r3, #2
 80054f6:	d165      	bne.n	80055c4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	4a41      	ldr	r2, [pc, #260]	; (8005600 <USB_SetTurnaroundTime+0x11c>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d906      	bls.n	800550e <USB_SetTurnaroundTime+0x2a>
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	4a40      	ldr	r2, [pc, #256]	; (8005604 <USB_SetTurnaroundTime+0x120>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d202      	bcs.n	800550e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005508:	230f      	movs	r3, #15
 800550a:	617b      	str	r3, [r7, #20]
 800550c:	e062      	b.n	80055d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	4a3c      	ldr	r2, [pc, #240]	; (8005604 <USB_SetTurnaroundTime+0x120>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d306      	bcc.n	8005524 <USB_SetTurnaroundTime+0x40>
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	4a3b      	ldr	r2, [pc, #236]	; (8005608 <USB_SetTurnaroundTime+0x124>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d202      	bcs.n	8005524 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800551e:	230e      	movs	r3, #14
 8005520:	617b      	str	r3, [r7, #20]
 8005522:	e057      	b.n	80055d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	4a38      	ldr	r2, [pc, #224]	; (8005608 <USB_SetTurnaroundTime+0x124>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d306      	bcc.n	800553a <USB_SetTurnaroundTime+0x56>
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	4a37      	ldr	r2, [pc, #220]	; (800560c <USB_SetTurnaroundTime+0x128>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d202      	bcs.n	800553a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005534:	230d      	movs	r3, #13
 8005536:	617b      	str	r3, [r7, #20]
 8005538:	e04c      	b.n	80055d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	4a33      	ldr	r2, [pc, #204]	; (800560c <USB_SetTurnaroundTime+0x128>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d306      	bcc.n	8005550 <USB_SetTurnaroundTime+0x6c>
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	4a32      	ldr	r2, [pc, #200]	; (8005610 <USB_SetTurnaroundTime+0x12c>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d802      	bhi.n	8005550 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800554a:	230c      	movs	r3, #12
 800554c:	617b      	str	r3, [r7, #20]
 800554e:	e041      	b.n	80055d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	4a2f      	ldr	r2, [pc, #188]	; (8005610 <USB_SetTurnaroundTime+0x12c>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d906      	bls.n	8005566 <USB_SetTurnaroundTime+0x82>
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	4a2e      	ldr	r2, [pc, #184]	; (8005614 <USB_SetTurnaroundTime+0x130>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d802      	bhi.n	8005566 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005560:	230b      	movs	r3, #11
 8005562:	617b      	str	r3, [r7, #20]
 8005564:	e036      	b.n	80055d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	4a2a      	ldr	r2, [pc, #168]	; (8005614 <USB_SetTurnaroundTime+0x130>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d906      	bls.n	800557c <USB_SetTurnaroundTime+0x98>
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	4a29      	ldr	r2, [pc, #164]	; (8005618 <USB_SetTurnaroundTime+0x134>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d802      	bhi.n	800557c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005576:	230a      	movs	r3, #10
 8005578:	617b      	str	r3, [r7, #20]
 800557a:	e02b      	b.n	80055d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	4a26      	ldr	r2, [pc, #152]	; (8005618 <USB_SetTurnaroundTime+0x134>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d906      	bls.n	8005592 <USB_SetTurnaroundTime+0xae>
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	4a25      	ldr	r2, [pc, #148]	; (800561c <USB_SetTurnaroundTime+0x138>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d202      	bcs.n	8005592 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800558c:	2309      	movs	r3, #9
 800558e:	617b      	str	r3, [r7, #20]
 8005590:	e020      	b.n	80055d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	4a21      	ldr	r2, [pc, #132]	; (800561c <USB_SetTurnaroundTime+0x138>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d306      	bcc.n	80055a8 <USB_SetTurnaroundTime+0xc4>
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	4a20      	ldr	r2, [pc, #128]	; (8005620 <USB_SetTurnaroundTime+0x13c>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d802      	bhi.n	80055a8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80055a2:	2308      	movs	r3, #8
 80055a4:	617b      	str	r3, [r7, #20]
 80055a6:	e015      	b.n	80055d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	4a1d      	ldr	r2, [pc, #116]	; (8005620 <USB_SetTurnaroundTime+0x13c>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d906      	bls.n	80055be <USB_SetTurnaroundTime+0xda>
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	4a1c      	ldr	r2, [pc, #112]	; (8005624 <USB_SetTurnaroundTime+0x140>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d202      	bcs.n	80055be <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80055b8:	2307      	movs	r3, #7
 80055ba:	617b      	str	r3, [r7, #20]
 80055bc:	e00a      	b.n	80055d4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80055be:	2306      	movs	r3, #6
 80055c0:	617b      	str	r3, [r7, #20]
 80055c2:	e007      	b.n	80055d4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80055c4:	79fb      	ldrb	r3, [r7, #7]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d102      	bne.n	80055d0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80055ca:	2309      	movs	r3, #9
 80055cc:	617b      	str	r3, [r7, #20]
 80055ce:	e001      	b.n	80055d4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80055d0:	2309      	movs	r3, #9
 80055d2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	68db      	ldr	r3, [r3, #12]
 80055d8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	68da      	ldr	r2, [r3, #12]
 80055e4:	697b      	ldr	r3, [r7, #20]
 80055e6:	029b      	lsls	r3, r3, #10
 80055e8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80055ec:	431a      	orrs	r2, r3
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80055f2:	2300      	movs	r3, #0
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	371c      	adds	r7, #28
 80055f8:	46bd      	mov	sp, r7
 80055fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fe:	4770      	bx	lr
 8005600:	00d8acbf 	.word	0x00d8acbf
 8005604:	00e4e1c0 	.word	0x00e4e1c0
 8005608:	00f42400 	.word	0x00f42400
 800560c:	01067380 	.word	0x01067380
 8005610:	011a499f 	.word	0x011a499f
 8005614:	01312cff 	.word	0x01312cff
 8005618:	014ca43f 	.word	0x014ca43f
 800561c:	016e3600 	.word	0x016e3600
 8005620:	01a6ab1f 	.word	0x01a6ab1f
 8005624:	01e84800 	.word	0x01e84800

08005628 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005628:	b480      	push	{r7}
 800562a:	b083      	sub	sp, #12
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	689b      	ldr	r3, [r3, #8]
 8005634:	f043 0201 	orr.w	r2, r3, #1
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800563c:	2300      	movs	r3, #0
}
 800563e:	4618      	mov	r0, r3
 8005640:	370c      	adds	r7, #12
 8005642:	46bd      	mov	sp, r7
 8005644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005648:	4770      	bx	lr

0800564a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800564a:	b480      	push	{r7}
 800564c:	b083      	sub	sp, #12
 800564e:	af00      	add	r7, sp, #0
 8005650:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	689b      	ldr	r3, [r3, #8]
 8005656:	f023 0201 	bic.w	r2, r3, #1
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800565e:	2300      	movs	r3, #0
}
 8005660:	4618      	mov	r0, r3
 8005662:	370c      	adds	r7, #12
 8005664:	46bd      	mov	sp, r7
 8005666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566a:	4770      	bx	lr

0800566c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b084      	sub	sp, #16
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
 8005674:	460b      	mov	r3, r1
 8005676:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005678:	2300      	movs	r3, #0
 800567a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	68db      	ldr	r3, [r3, #12]
 8005680:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005688:	78fb      	ldrb	r3, [r7, #3]
 800568a:	2b01      	cmp	r3, #1
 800568c:	d115      	bne.n	80056ba <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	68db      	ldr	r3, [r3, #12]
 8005692:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800569a:	2001      	movs	r0, #1
 800569c:	f7fc fd32 	bl	8002104 <HAL_Delay>
      ms++;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	3301      	adds	r3, #1
 80056a4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80056a6:	6878      	ldr	r0, [r7, #4]
 80056a8:	f001 fa4b 	bl	8006b42 <USB_GetMode>
 80056ac:	4603      	mov	r3, r0
 80056ae:	2b01      	cmp	r3, #1
 80056b0:	d01e      	beq.n	80056f0 <USB_SetCurrentMode+0x84>
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	2b31      	cmp	r3, #49	; 0x31
 80056b6:	d9f0      	bls.n	800569a <USB_SetCurrentMode+0x2e>
 80056b8:	e01a      	b.n	80056f0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80056ba:	78fb      	ldrb	r3, [r7, #3]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d115      	bne.n	80056ec <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	68db      	ldr	r3, [r3, #12]
 80056c4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80056cc:	2001      	movs	r0, #1
 80056ce:	f7fc fd19 	bl	8002104 <HAL_Delay>
      ms++;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	3301      	adds	r3, #1
 80056d6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80056d8:	6878      	ldr	r0, [r7, #4]
 80056da:	f001 fa32 	bl	8006b42 <USB_GetMode>
 80056de:	4603      	mov	r3, r0
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d005      	beq.n	80056f0 <USB_SetCurrentMode+0x84>
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	2b31      	cmp	r3, #49	; 0x31
 80056e8:	d9f0      	bls.n	80056cc <USB_SetCurrentMode+0x60>
 80056ea:	e001      	b.n	80056f0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80056ec:	2301      	movs	r3, #1
 80056ee:	e005      	b.n	80056fc <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	2b32      	cmp	r3, #50	; 0x32
 80056f4:	d101      	bne.n	80056fa <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80056f6:	2301      	movs	r3, #1
 80056f8:	e000      	b.n	80056fc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80056fa:	2300      	movs	r3, #0
}
 80056fc:	4618      	mov	r0, r3
 80056fe:	3710      	adds	r7, #16
 8005700:	46bd      	mov	sp, r7
 8005702:	bd80      	pop	{r7, pc}

08005704 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005704:	b084      	sub	sp, #16
 8005706:	b580      	push	{r7, lr}
 8005708:	b086      	sub	sp, #24
 800570a:	af00      	add	r7, sp, #0
 800570c:	6078      	str	r0, [r7, #4]
 800570e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005712:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005716:	2300      	movs	r3, #0
 8005718:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800571e:	2300      	movs	r3, #0
 8005720:	613b      	str	r3, [r7, #16]
 8005722:	e009      	b.n	8005738 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005724:	687a      	ldr	r2, [r7, #4]
 8005726:	693b      	ldr	r3, [r7, #16]
 8005728:	3340      	adds	r3, #64	; 0x40
 800572a:	009b      	lsls	r3, r3, #2
 800572c:	4413      	add	r3, r2
 800572e:	2200      	movs	r2, #0
 8005730:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005732:	693b      	ldr	r3, [r7, #16]
 8005734:	3301      	adds	r3, #1
 8005736:	613b      	str	r3, [r7, #16]
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	2b0e      	cmp	r3, #14
 800573c:	d9f2      	bls.n	8005724 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800573e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005740:	2b00      	cmp	r3, #0
 8005742:	d11c      	bne.n	800577e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	68fa      	ldr	r2, [r7, #12]
 800574e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005752:	f043 0302 	orr.w	r3, r3, #2
 8005756:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800575c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	601a      	str	r2, [r3, #0]
 800577c:	e005      	b.n	800578a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005782:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005790:	461a      	mov	r2, r3
 8005792:	2300      	movs	r3, #0
 8005794:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800579c:	4619      	mov	r1, r3
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057a4:	461a      	mov	r2, r3
 80057a6:	680b      	ldr	r3, [r1, #0]
 80057a8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80057aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057ac:	2b01      	cmp	r3, #1
 80057ae:	d10c      	bne.n	80057ca <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80057b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d104      	bne.n	80057c0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80057b6:	2100      	movs	r1, #0
 80057b8:	6878      	ldr	r0, [r7, #4]
 80057ba:	f000 f965 	bl	8005a88 <USB_SetDevSpeed>
 80057be:	e008      	b.n	80057d2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80057c0:	2101      	movs	r1, #1
 80057c2:	6878      	ldr	r0, [r7, #4]
 80057c4:	f000 f960 	bl	8005a88 <USB_SetDevSpeed>
 80057c8:	e003      	b.n	80057d2 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80057ca:	2103      	movs	r1, #3
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	f000 f95b 	bl	8005a88 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80057d2:	2110      	movs	r1, #16
 80057d4:	6878      	ldr	r0, [r7, #4]
 80057d6:	f000 f8f3 	bl	80059c0 <USB_FlushTxFifo>
 80057da:	4603      	mov	r3, r0
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d001      	beq.n	80057e4 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80057e0:	2301      	movs	r3, #1
 80057e2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	f000 f91f 	bl	8005a28 <USB_FlushRxFifo>
 80057ea:	4603      	mov	r3, r0
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d001      	beq.n	80057f4 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80057f0:	2301      	movs	r3, #1
 80057f2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057fa:	461a      	mov	r2, r3
 80057fc:	2300      	movs	r3, #0
 80057fe:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005806:	461a      	mov	r2, r3
 8005808:	2300      	movs	r3, #0
 800580a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005812:	461a      	mov	r2, r3
 8005814:	2300      	movs	r3, #0
 8005816:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005818:	2300      	movs	r3, #0
 800581a:	613b      	str	r3, [r7, #16]
 800581c:	e043      	b.n	80058a6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800581e:	693b      	ldr	r3, [r7, #16]
 8005820:	015a      	lsls	r2, r3, #5
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	4413      	add	r3, r2
 8005826:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005830:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005834:	d118      	bne.n	8005868 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8005836:	693b      	ldr	r3, [r7, #16]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d10a      	bne.n	8005852 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	015a      	lsls	r2, r3, #5
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	4413      	add	r3, r2
 8005844:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005848:	461a      	mov	r2, r3
 800584a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800584e:	6013      	str	r3, [r2, #0]
 8005850:	e013      	b.n	800587a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	015a      	lsls	r2, r3, #5
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	4413      	add	r3, r2
 800585a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800585e:	461a      	mov	r2, r3
 8005860:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005864:	6013      	str	r3, [r2, #0]
 8005866:	e008      	b.n	800587a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	015a      	lsls	r2, r3, #5
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	4413      	add	r3, r2
 8005870:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005874:	461a      	mov	r2, r3
 8005876:	2300      	movs	r3, #0
 8005878:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	015a      	lsls	r2, r3, #5
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	4413      	add	r3, r2
 8005882:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005886:	461a      	mov	r2, r3
 8005888:	2300      	movs	r3, #0
 800588a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800588c:	693b      	ldr	r3, [r7, #16]
 800588e:	015a      	lsls	r2, r3, #5
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	4413      	add	r3, r2
 8005894:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005898:	461a      	mov	r2, r3
 800589a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800589e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80058a0:	693b      	ldr	r3, [r7, #16]
 80058a2:	3301      	adds	r3, #1
 80058a4:	613b      	str	r3, [r7, #16]
 80058a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a8:	693a      	ldr	r2, [r7, #16]
 80058aa:	429a      	cmp	r2, r3
 80058ac:	d3b7      	bcc.n	800581e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80058ae:	2300      	movs	r3, #0
 80058b0:	613b      	str	r3, [r7, #16]
 80058b2:	e043      	b.n	800593c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	015a      	lsls	r2, r3, #5
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	4413      	add	r3, r2
 80058bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80058c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80058ca:	d118      	bne.n	80058fe <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80058cc:	693b      	ldr	r3, [r7, #16]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d10a      	bne.n	80058e8 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80058d2:	693b      	ldr	r3, [r7, #16]
 80058d4:	015a      	lsls	r2, r3, #5
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	4413      	add	r3, r2
 80058da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058de:	461a      	mov	r2, r3
 80058e0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80058e4:	6013      	str	r3, [r2, #0]
 80058e6:	e013      	b.n	8005910 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	015a      	lsls	r2, r3, #5
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	4413      	add	r3, r2
 80058f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058f4:	461a      	mov	r2, r3
 80058f6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80058fa:	6013      	str	r3, [r2, #0]
 80058fc:	e008      	b.n	8005910 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80058fe:	693b      	ldr	r3, [r7, #16]
 8005900:	015a      	lsls	r2, r3, #5
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	4413      	add	r3, r2
 8005906:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800590a:	461a      	mov	r2, r3
 800590c:	2300      	movs	r3, #0
 800590e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005910:	693b      	ldr	r3, [r7, #16]
 8005912:	015a      	lsls	r2, r3, #5
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	4413      	add	r3, r2
 8005918:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800591c:	461a      	mov	r2, r3
 800591e:	2300      	movs	r3, #0
 8005920:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005922:	693b      	ldr	r3, [r7, #16]
 8005924:	015a      	lsls	r2, r3, #5
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	4413      	add	r3, r2
 800592a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800592e:	461a      	mov	r2, r3
 8005930:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005934:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005936:	693b      	ldr	r3, [r7, #16]
 8005938:	3301      	adds	r3, #1
 800593a:	613b      	str	r3, [r7, #16]
 800593c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800593e:	693a      	ldr	r2, [r7, #16]
 8005940:	429a      	cmp	r2, r3
 8005942:	d3b7      	bcc.n	80058b4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800594a:	691b      	ldr	r3, [r3, #16]
 800594c:	68fa      	ldr	r2, [r7, #12]
 800594e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005952:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005956:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2200      	movs	r2, #0
 800595c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005964:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005968:	2b00      	cmp	r3, #0
 800596a:	d105      	bne.n	8005978 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	699b      	ldr	r3, [r3, #24]
 8005970:	f043 0210 	orr.w	r2, r3, #16
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	699a      	ldr	r2, [r3, #24]
 800597c:	4b0e      	ldr	r3, [pc, #56]	; (80059b8 <USB_DevInit+0x2b4>)
 800597e:	4313      	orrs	r3, r2
 8005980:	687a      	ldr	r2, [r7, #4]
 8005982:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005984:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005986:	2b00      	cmp	r3, #0
 8005988:	d005      	beq.n	8005996 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	699b      	ldr	r3, [r3, #24]
 800598e:	f043 0208 	orr.w	r2, r3, #8
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005996:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005998:	2b01      	cmp	r3, #1
 800599a:	d105      	bne.n	80059a8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	699a      	ldr	r2, [r3, #24]
 80059a0:	4b06      	ldr	r3, [pc, #24]	; (80059bc <USB_DevInit+0x2b8>)
 80059a2:	4313      	orrs	r3, r2
 80059a4:	687a      	ldr	r2, [r7, #4]
 80059a6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80059a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	3718      	adds	r7, #24
 80059ae:	46bd      	mov	sp, r7
 80059b0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80059b4:	b004      	add	sp, #16
 80059b6:	4770      	bx	lr
 80059b8:	803c3800 	.word	0x803c3800
 80059bc:	40000004 	.word	0x40000004

080059c0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80059c0:	b480      	push	{r7}
 80059c2:	b085      	sub	sp, #20
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
 80059c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80059ca:	2300      	movs	r3, #0
 80059cc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	3301      	adds	r3, #1
 80059d2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	4a13      	ldr	r2, [pc, #76]	; (8005a24 <USB_FlushTxFifo+0x64>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d901      	bls.n	80059e0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80059dc:	2303      	movs	r3, #3
 80059de:	e01b      	b.n	8005a18 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	691b      	ldr	r3, [r3, #16]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	daf2      	bge.n	80059ce <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80059e8:	2300      	movs	r3, #0
 80059ea:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	019b      	lsls	r3, r3, #6
 80059f0:	f043 0220 	orr.w	r2, r3, #32
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	3301      	adds	r3, #1
 80059fc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	4a08      	ldr	r2, [pc, #32]	; (8005a24 <USB_FlushTxFifo+0x64>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d901      	bls.n	8005a0a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005a06:	2303      	movs	r3, #3
 8005a08:	e006      	b.n	8005a18 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	691b      	ldr	r3, [r3, #16]
 8005a0e:	f003 0320 	and.w	r3, r3, #32
 8005a12:	2b20      	cmp	r3, #32
 8005a14:	d0f0      	beq.n	80059f8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005a16:	2300      	movs	r3, #0
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	3714      	adds	r7, #20
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a22:	4770      	bx	lr
 8005a24:	00030d40 	.word	0x00030d40

08005a28 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b085      	sub	sp, #20
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005a30:	2300      	movs	r3, #0
 8005a32:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	3301      	adds	r3, #1
 8005a38:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	4a11      	ldr	r2, [pc, #68]	; (8005a84 <USB_FlushRxFifo+0x5c>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d901      	bls.n	8005a46 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005a42:	2303      	movs	r3, #3
 8005a44:	e018      	b.n	8005a78 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	691b      	ldr	r3, [r3, #16]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	daf2      	bge.n	8005a34 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005a4e:	2300      	movs	r3, #0
 8005a50:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2210      	movs	r2, #16
 8005a56:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	3301      	adds	r3, #1
 8005a5c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	4a08      	ldr	r2, [pc, #32]	; (8005a84 <USB_FlushRxFifo+0x5c>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d901      	bls.n	8005a6a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005a66:	2303      	movs	r3, #3
 8005a68:	e006      	b.n	8005a78 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	691b      	ldr	r3, [r3, #16]
 8005a6e:	f003 0310 	and.w	r3, r3, #16
 8005a72:	2b10      	cmp	r3, #16
 8005a74:	d0f0      	beq.n	8005a58 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005a76:	2300      	movs	r3, #0
}
 8005a78:	4618      	mov	r0, r3
 8005a7a:	3714      	adds	r7, #20
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a82:	4770      	bx	lr
 8005a84:	00030d40 	.word	0x00030d40

08005a88 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	b085      	sub	sp, #20
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
 8005a90:	460b      	mov	r3, r1
 8005a92:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a9e:	681a      	ldr	r2, [r3, #0]
 8005aa0:	78fb      	ldrb	r3, [r7, #3]
 8005aa2:	68f9      	ldr	r1, [r7, #12]
 8005aa4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005aac:	2300      	movs	r3, #0
}
 8005aae:	4618      	mov	r0, r3
 8005ab0:	3714      	adds	r7, #20
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab8:	4770      	bx	lr

08005aba <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005aba:	b480      	push	{r7}
 8005abc:	b087      	sub	sp, #28
 8005abe:	af00      	add	r7, sp, #0
 8005ac0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005ac6:	693b      	ldr	r3, [r7, #16]
 8005ac8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005acc:	689b      	ldr	r3, [r3, #8]
 8005ace:	f003 0306 	and.w	r3, r3, #6
 8005ad2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d102      	bne.n	8005ae0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005ada:	2300      	movs	r3, #0
 8005adc:	75fb      	strb	r3, [r7, #23]
 8005ade:	e00a      	b.n	8005af6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	2b02      	cmp	r3, #2
 8005ae4:	d002      	beq.n	8005aec <USB_GetDevSpeed+0x32>
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	2b06      	cmp	r3, #6
 8005aea:	d102      	bne.n	8005af2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005aec:	2302      	movs	r3, #2
 8005aee:	75fb      	strb	r3, [r7, #23]
 8005af0:	e001      	b.n	8005af6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005af2:	230f      	movs	r3, #15
 8005af4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005af6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005af8:	4618      	mov	r0, r3
 8005afa:	371c      	adds	r7, #28
 8005afc:	46bd      	mov	sp, r7
 8005afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b02:	4770      	bx	lr

08005b04 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005b04:	b480      	push	{r7}
 8005b06:	b085      	sub	sp, #20
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
 8005b0c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	781b      	ldrb	r3, [r3, #0]
 8005b16:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	785b      	ldrb	r3, [r3, #1]
 8005b1c:	2b01      	cmp	r3, #1
 8005b1e:	d139      	bne.n	8005b94 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b26:	69da      	ldr	r2, [r3, #28]
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	781b      	ldrb	r3, [r3, #0]
 8005b2c:	f003 030f 	and.w	r3, r3, #15
 8005b30:	2101      	movs	r1, #1
 8005b32:	fa01 f303 	lsl.w	r3, r1, r3
 8005b36:	b29b      	uxth	r3, r3
 8005b38:	68f9      	ldr	r1, [r7, #12]
 8005b3a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	015a      	lsls	r2, r3, #5
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	4413      	add	r3, r2
 8005b4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d153      	bne.n	8005c00 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	015a      	lsls	r2, r3, #5
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	4413      	add	r3, r2
 8005b60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b64:	681a      	ldr	r2, [r3, #0]
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	68db      	ldr	r3, [r3, #12]
 8005b6a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	791b      	ldrb	r3, [r3, #4]
 8005b72:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005b74:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	059b      	lsls	r3, r3, #22
 8005b7a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005b7c:	431a      	orrs	r2, r3
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	0159      	lsls	r1, r3, #5
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	440b      	add	r3, r1
 8005b86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b8a:	4619      	mov	r1, r3
 8005b8c:	4b20      	ldr	r3, [pc, #128]	; (8005c10 <USB_ActivateEndpoint+0x10c>)
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	600b      	str	r3, [r1, #0]
 8005b92:	e035      	b.n	8005c00 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b9a:	69da      	ldr	r2, [r3, #28]
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	781b      	ldrb	r3, [r3, #0]
 8005ba0:	f003 030f 	and.w	r3, r3, #15
 8005ba4:	2101      	movs	r1, #1
 8005ba6:	fa01 f303 	lsl.w	r3, r1, r3
 8005baa:	041b      	lsls	r3, r3, #16
 8005bac:	68f9      	ldr	r1, [r7, #12]
 8005bae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	015a      	lsls	r2, r3, #5
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	4413      	add	r3, r2
 8005bbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d119      	bne.n	8005c00 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	015a      	lsls	r2, r3, #5
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	4413      	add	r3, r2
 8005bd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bd8:	681a      	ldr	r2, [r3, #0]
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	68db      	ldr	r3, [r3, #12]
 8005bde:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	791b      	ldrb	r3, [r3, #4]
 8005be6:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005be8:	430b      	orrs	r3, r1
 8005bea:	431a      	orrs	r2, r3
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	0159      	lsls	r1, r3, #5
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	440b      	add	r3, r1
 8005bf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bf8:	4619      	mov	r1, r3
 8005bfa:	4b05      	ldr	r3, [pc, #20]	; (8005c10 <USB_ActivateEndpoint+0x10c>)
 8005bfc:	4313      	orrs	r3, r2
 8005bfe:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005c00:	2300      	movs	r3, #0
}
 8005c02:	4618      	mov	r0, r3
 8005c04:	3714      	adds	r7, #20
 8005c06:	46bd      	mov	sp, r7
 8005c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0c:	4770      	bx	lr
 8005c0e:	bf00      	nop
 8005c10:	10008000 	.word	0x10008000

08005c14 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005c14:	b480      	push	{r7}
 8005c16:	b085      	sub	sp, #20
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
 8005c1c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	781b      	ldrb	r3, [r3, #0]
 8005c26:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	785b      	ldrb	r3, [r3, #1]
 8005c2c:	2b01      	cmp	r3, #1
 8005c2e:	d161      	bne.n	8005cf4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	015a      	lsls	r2, r3, #5
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	4413      	add	r3, r2
 8005c38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c42:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c46:	d11f      	bne.n	8005c88 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	015a      	lsls	r2, r3, #5
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	4413      	add	r3, r2
 8005c50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	68ba      	ldr	r2, [r7, #8]
 8005c58:	0151      	lsls	r1, r2, #5
 8005c5a:	68fa      	ldr	r2, [r7, #12]
 8005c5c:	440a      	add	r2, r1
 8005c5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c62:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005c66:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	015a      	lsls	r2, r3, #5
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	4413      	add	r3, r2
 8005c70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	68ba      	ldr	r2, [r7, #8]
 8005c78:	0151      	lsls	r1, r2, #5
 8005c7a:	68fa      	ldr	r2, [r7, #12]
 8005c7c:	440a      	add	r2, r1
 8005c7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c82:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005c86:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c8e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	781b      	ldrb	r3, [r3, #0]
 8005c94:	f003 030f 	and.w	r3, r3, #15
 8005c98:	2101      	movs	r1, #1
 8005c9a:	fa01 f303 	lsl.w	r3, r1, r3
 8005c9e:	b29b      	uxth	r3, r3
 8005ca0:	43db      	mvns	r3, r3
 8005ca2:	68f9      	ldr	r1, [r7, #12]
 8005ca4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ca8:	4013      	ands	r3, r2
 8005caa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cb2:	69da      	ldr	r2, [r3, #28]
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	781b      	ldrb	r3, [r3, #0]
 8005cb8:	f003 030f 	and.w	r3, r3, #15
 8005cbc:	2101      	movs	r1, #1
 8005cbe:	fa01 f303 	lsl.w	r3, r1, r3
 8005cc2:	b29b      	uxth	r3, r3
 8005cc4:	43db      	mvns	r3, r3
 8005cc6:	68f9      	ldr	r1, [r7, #12]
 8005cc8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ccc:	4013      	ands	r3, r2
 8005cce:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	015a      	lsls	r2, r3, #5
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	4413      	add	r3, r2
 8005cd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cdc:	681a      	ldr	r2, [r3, #0]
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	0159      	lsls	r1, r3, #5
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	440b      	add	r3, r1
 8005ce6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cea:	4619      	mov	r1, r3
 8005cec:	4b35      	ldr	r3, [pc, #212]	; (8005dc4 <USB_DeactivateEndpoint+0x1b0>)
 8005cee:	4013      	ands	r3, r2
 8005cf0:	600b      	str	r3, [r1, #0]
 8005cf2:	e060      	b.n	8005db6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	015a      	lsls	r2, r3, #5
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	4413      	add	r3, r2
 8005cfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d06:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d0a:	d11f      	bne.n	8005d4c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	015a      	lsls	r2, r3, #5
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	4413      	add	r3, r2
 8005d14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	68ba      	ldr	r2, [r7, #8]
 8005d1c:	0151      	lsls	r1, r2, #5
 8005d1e:	68fa      	ldr	r2, [r7, #12]
 8005d20:	440a      	add	r2, r1
 8005d22:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d26:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005d2a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	015a      	lsls	r2, r3, #5
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	4413      	add	r3, r2
 8005d34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	68ba      	ldr	r2, [r7, #8]
 8005d3c:	0151      	lsls	r1, r2, #5
 8005d3e:	68fa      	ldr	r2, [r7, #12]
 8005d40:	440a      	add	r2, r1
 8005d42:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d46:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005d4a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	781b      	ldrb	r3, [r3, #0]
 8005d58:	f003 030f 	and.w	r3, r3, #15
 8005d5c:	2101      	movs	r1, #1
 8005d5e:	fa01 f303 	lsl.w	r3, r1, r3
 8005d62:	041b      	lsls	r3, r3, #16
 8005d64:	43db      	mvns	r3, r3
 8005d66:	68f9      	ldr	r1, [r7, #12]
 8005d68:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d6c:	4013      	ands	r3, r2
 8005d6e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d76:	69da      	ldr	r2, [r3, #28]
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	781b      	ldrb	r3, [r3, #0]
 8005d7c:	f003 030f 	and.w	r3, r3, #15
 8005d80:	2101      	movs	r1, #1
 8005d82:	fa01 f303 	lsl.w	r3, r1, r3
 8005d86:	041b      	lsls	r3, r3, #16
 8005d88:	43db      	mvns	r3, r3
 8005d8a:	68f9      	ldr	r1, [r7, #12]
 8005d8c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d90:	4013      	ands	r3, r2
 8005d92:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	015a      	lsls	r2, r3, #5
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	4413      	add	r3, r2
 8005d9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005da0:	681a      	ldr	r2, [r3, #0]
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	0159      	lsls	r1, r3, #5
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	440b      	add	r3, r1
 8005daa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dae:	4619      	mov	r1, r3
 8005db0:	4b05      	ldr	r3, [pc, #20]	; (8005dc8 <USB_DeactivateEndpoint+0x1b4>)
 8005db2:	4013      	ands	r3, r2
 8005db4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005db6:	2300      	movs	r3, #0
}
 8005db8:	4618      	mov	r0, r3
 8005dba:	3714      	adds	r7, #20
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc2:	4770      	bx	lr
 8005dc4:	ec337800 	.word	0xec337800
 8005dc8:	eff37800 	.word	0xeff37800

08005dcc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b08a      	sub	sp, #40	; 0x28
 8005dd0:	af02      	add	r7, sp, #8
 8005dd2:	60f8      	str	r0, [r7, #12]
 8005dd4:	60b9      	str	r1, [r7, #8]
 8005dd6:	4613      	mov	r3, r2
 8005dd8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	781b      	ldrb	r3, [r3, #0]
 8005de2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	785b      	ldrb	r3, [r3, #1]
 8005de8:	2b01      	cmp	r3, #1
 8005dea:	f040 8163 	bne.w	80060b4 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	699b      	ldr	r3, [r3, #24]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d132      	bne.n	8005e5c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005df6:	69bb      	ldr	r3, [r7, #24]
 8005df8:	015a      	lsls	r2, r3, #5
 8005dfa:	69fb      	ldr	r3, [r7, #28]
 8005dfc:	4413      	add	r3, r2
 8005dfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e02:	691a      	ldr	r2, [r3, #16]
 8005e04:	69bb      	ldr	r3, [r7, #24]
 8005e06:	0159      	lsls	r1, r3, #5
 8005e08:	69fb      	ldr	r3, [r7, #28]
 8005e0a:	440b      	add	r3, r1
 8005e0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e10:	4619      	mov	r1, r3
 8005e12:	4ba5      	ldr	r3, [pc, #660]	; (80060a8 <USB_EPStartXfer+0x2dc>)
 8005e14:	4013      	ands	r3, r2
 8005e16:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005e18:	69bb      	ldr	r3, [r7, #24]
 8005e1a:	015a      	lsls	r2, r3, #5
 8005e1c:	69fb      	ldr	r3, [r7, #28]
 8005e1e:	4413      	add	r3, r2
 8005e20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e24:	691b      	ldr	r3, [r3, #16]
 8005e26:	69ba      	ldr	r2, [r7, #24]
 8005e28:	0151      	lsls	r1, r2, #5
 8005e2a:	69fa      	ldr	r2, [r7, #28]
 8005e2c:	440a      	add	r2, r1
 8005e2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e32:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005e36:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005e38:	69bb      	ldr	r3, [r7, #24]
 8005e3a:	015a      	lsls	r2, r3, #5
 8005e3c:	69fb      	ldr	r3, [r7, #28]
 8005e3e:	4413      	add	r3, r2
 8005e40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e44:	691a      	ldr	r2, [r3, #16]
 8005e46:	69bb      	ldr	r3, [r7, #24]
 8005e48:	0159      	lsls	r1, r3, #5
 8005e4a:	69fb      	ldr	r3, [r7, #28]
 8005e4c:	440b      	add	r3, r1
 8005e4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e52:	4619      	mov	r1, r3
 8005e54:	4b95      	ldr	r3, [pc, #596]	; (80060ac <USB_EPStartXfer+0x2e0>)
 8005e56:	4013      	ands	r3, r2
 8005e58:	610b      	str	r3, [r1, #16]
 8005e5a:	e074      	b.n	8005f46 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005e5c:	69bb      	ldr	r3, [r7, #24]
 8005e5e:	015a      	lsls	r2, r3, #5
 8005e60:	69fb      	ldr	r3, [r7, #28]
 8005e62:	4413      	add	r3, r2
 8005e64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e68:	691a      	ldr	r2, [r3, #16]
 8005e6a:	69bb      	ldr	r3, [r7, #24]
 8005e6c:	0159      	lsls	r1, r3, #5
 8005e6e:	69fb      	ldr	r3, [r7, #28]
 8005e70:	440b      	add	r3, r1
 8005e72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e76:	4619      	mov	r1, r3
 8005e78:	4b8c      	ldr	r3, [pc, #560]	; (80060ac <USB_EPStartXfer+0x2e0>)
 8005e7a:	4013      	ands	r3, r2
 8005e7c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005e7e:	69bb      	ldr	r3, [r7, #24]
 8005e80:	015a      	lsls	r2, r3, #5
 8005e82:	69fb      	ldr	r3, [r7, #28]
 8005e84:	4413      	add	r3, r2
 8005e86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e8a:	691a      	ldr	r2, [r3, #16]
 8005e8c:	69bb      	ldr	r3, [r7, #24]
 8005e8e:	0159      	lsls	r1, r3, #5
 8005e90:	69fb      	ldr	r3, [r7, #28]
 8005e92:	440b      	add	r3, r1
 8005e94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e98:	4619      	mov	r1, r3
 8005e9a:	4b83      	ldr	r3, [pc, #524]	; (80060a8 <USB_EPStartXfer+0x2dc>)
 8005e9c:	4013      	ands	r3, r2
 8005e9e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005ea0:	69bb      	ldr	r3, [r7, #24]
 8005ea2:	015a      	lsls	r2, r3, #5
 8005ea4:	69fb      	ldr	r3, [r7, #28]
 8005ea6:	4413      	add	r3, r2
 8005ea8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005eac:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	6999      	ldr	r1, [r3, #24]
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	68db      	ldr	r3, [r3, #12]
 8005eb6:	440b      	add	r3, r1
 8005eb8:	1e59      	subs	r1, r3, #1
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	68db      	ldr	r3, [r3, #12]
 8005ebe:	fbb1 f3f3 	udiv	r3, r1, r3
 8005ec2:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005ec4:	4b7a      	ldr	r3, [pc, #488]	; (80060b0 <USB_EPStartXfer+0x2e4>)
 8005ec6:	400b      	ands	r3, r1
 8005ec8:	69b9      	ldr	r1, [r7, #24]
 8005eca:	0148      	lsls	r0, r1, #5
 8005ecc:	69f9      	ldr	r1, [r7, #28]
 8005ece:	4401      	add	r1, r0
 8005ed0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005ed4:	4313      	orrs	r3, r2
 8005ed6:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005ed8:	69bb      	ldr	r3, [r7, #24]
 8005eda:	015a      	lsls	r2, r3, #5
 8005edc:	69fb      	ldr	r3, [r7, #28]
 8005ede:	4413      	add	r3, r2
 8005ee0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ee4:	691a      	ldr	r2, [r3, #16]
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	699b      	ldr	r3, [r3, #24]
 8005eea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005eee:	69b9      	ldr	r1, [r7, #24]
 8005ef0:	0148      	lsls	r0, r1, #5
 8005ef2:	69f9      	ldr	r1, [r7, #28]
 8005ef4:	4401      	add	r1, r0
 8005ef6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005efa:	4313      	orrs	r3, r2
 8005efc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005efe:	68bb      	ldr	r3, [r7, #8]
 8005f00:	791b      	ldrb	r3, [r3, #4]
 8005f02:	2b01      	cmp	r3, #1
 8005f04:	d11f      	bne.n	8005f46 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005f06:	69bb      	ldr	r3, [r7, #24]
 8005f08:	015a      	lsls	r2, r3, #5
 8005f0a:	69fb      	ldr	r3, [r7, #28]
 8005f0c:	4413      	add	r3, r2
 8005f0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f12:	691b      	ldr	r3, [r3, #16]
 8005f14:	69ba      	ldr	r2, [r7, #24]
 8005f16:	0151      	lsls	r1, r2, #5
 8005f18:	69fa      	ldr	r2, [r7, #28]
 8005f1a:	440a      	add	r2, r1
 8005f1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f20:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005f24:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005f26:	69bb      	ldr	r3, [r7, #24]
 8005f28:	015a      	lsls	r2, r3, #5
 8005f2a:	69fb      	ldr	r3, [r7, #28]
 8005f2c:	4413      	add	r3, r2
 8005f2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f32:	691b      	ldr	r3, [r3, #16]
 8005f34:	69ba      	ldr	r2, [r7, #24]
 8005f36:	0151      	lsls	r1, r2, #5
 8005f38:	69fa      	ldr	r2, [r7, #28]
 8005f3a:	440a      	add	r2, r1
 8005f3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f40:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005f44:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005f46:	79fb      	ldrb	r3, [r7, #7]
 8005f48:	2b01      	cmp	r3, #1
 8005f4a:	d14b      	bne.n	8005fe4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	695b      	ldr	r3, [r3, #20]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d009      	beq.n	8005f68 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005f54:	69bb      	ldr	r3, [r7, #24]
 8005f56:	015a      	lsls	r2, r3, #5
 8005f58:	69fb      	ldr	r3, [r7, #28]
 8005f5a:	4413      	add	r3, r2
 8005f5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f60:	461a      	mov	r2, r3
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	695b      	ldr	r3, [r3, #20]
 8005f66:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	791b      	ldrb	r3, [r3, #4]
 8005f6c:	2b01      	cmp	r3, #1
 8005f6e:	d128      	bne.n	8005fc2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005f70:	69fb      	ldr	r3, [r7, #28]
 8005f72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f76:	689b      	ldr	r3, [r3, #8]
 8005f78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d110      	bne.n	8005fa2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005f80:	69bb      	ldr	r3, [r7, #24]
 8005f82:	015a      	lsls	r2, r3, #5
 8005f84:	69fb      	ldr	r3, [r7, #28]
 8005f86:	4413      	add	r3, r2
 8005f88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	69ba      	ldr	r2, [r7, #24]
 8005f90:	0151      	lsls	r1, r2, #5
 8005f92:	69fa      	ldr	r2, [r7, #28]
 8005f94:	440a      	add	r2, r1
 8005f96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f9a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005f9e:	6013      	str	r3, [r2, #0]
 8005fa0:	e00f      	b.n	8005fc2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005fa2:	69bb      	ldr	r3, [r7, #24]
 8005fa4:	015a      	lsls	r2, r3, #5
 8005fa6:	69fb      	ldr	r3, [r7, #28]
 8005fa8:	4413      	add	r3, r2
 8005faa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	69ba      	ldr	r2, [r7, #24]
 8005fb2:	0151      	lsls	r1, r2, #5
 8005fb4:	69fa      	ldr	r2, [r7, #28]
 8005fb6:	440a      	add	r2, r1
 8005fb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fc0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005fc2:	69bb      	ldr	r3, [r7, #24]
 8005fc4:	015a      	lsls	r2, r3, #5
 8005fc6:	69fb      	ldr	r3, [r7, #28]
 8005fc8:	4413      	add	r3, r2
 8005fca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	69ba      	ldr	r2, [r7, #24]
 8005fd2:	0151      	lsls	r1, r2, #5
 8005fd4:	69fa      	ldr	r2, [r7, #28]
 8005fd6:	440a      	add	r2, r1
 8005fd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fdc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005fe0:	6013      	str	r3, [r2, #0]
 8005fe2:	e137      	b.n	8006254 <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005fe4:	69bb      	ldr	r3, [r7, #24]
 8005fe6:	015a      	lsls	r2, r3, #5
 8005fe8:	69fb      	ldr	r3, [r7, #28]
 8005fea:	4413      	add	r3, r2
 8005fec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	69ba      	ldr	r2, [r7, #24]
 8005ff4:	0151      	lsls	r1, r2, #5
 8005ff6:	69fa      	ldr	r2, [r7, #28]
 8005ff8:	440a      	add	r2, r1
 8005ffa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ffe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006002:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	791b      	ldrb	r3, [r3, #4]
 8006008:	2b01      	cmp	r3, #1
 800600a:	d015      	beq.n	8006038 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	699b      	ldr	r3, [r3, #24]
 8006010:	2b00      	cmp	r3, #0
 8006012:	f000 811f 	beq.w	8006254 <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006016:	69fb      	ldr	r3, [r7, #28]
 8006018:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800601c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	781b      	ldrb	r3, [r3, #0]
 8006022:	f003 030f 	and.w	r3, r3, #15
 8006026:	2101      	movs	r1, #1
 8006028:	fa01 f303 	lsl.w	r3, r1, r3
 800602c:	69f9      	ldr	r1, [r7, #28]
 800602e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006032:	4313      	orrs	r3, r2
 8006034:	634b      	str	r3, [r1, #52]	; 0x34
 8006036:	e10d      	b.n	8006254 <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006038:	69fb      	ldr	r3, [r7, #28]
 800603a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800603e:	689b      	ldr	r3, [r3, #8]
 8006040:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006044:	2b00      	cmp	r3, #0
 8006046:	d110      	bne.n	800606a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006048:	69bb      	ldr	r3, [r7, #24]
 800604a:	015a      	lsls	r2, r3, #5
 800604c:	69fb      	ldr	r3, [r7, #28]
 800604e:	4413      	add	r3, r2
 8006050:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	69ba      	ldr	r2, [r7, #24]
 8006058:	0151      	lsls	r1, r2, #5
 800605a:	69fa      	ldr	r2, [r7, #28]
 800605c:	440a      	add	r2, r1
 800605e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006062:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006066:	6013      	str	r3, [r2, #0]
 8006068:	e00f      	b.n	800608a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800606a:	69bb      	ldr	r3, [r7, #24]
 800606c:	015a      	lsls	r2, r3, #5
 800606e:	69fb      	ldr	r3, [r7, #28]
 8006070:	4413      	add	r3, r2
 8006072:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	69ba      	ldr	r2, [r7, #24]
 800607a:	0151      	lsls	r1, r2, #5
 800607c:	69fa      	ldr	r2, [r7, #28]
 800607e:	440a      	add	r2, r1
 8006080:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006084:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006088:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	6919      	ldr	r1, [r3, #16]
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	781a      	ldrb	r2, [r3, #0]
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	699b      	ldr	r3, [r3, #24]
 8006096:	b298      	uxth	r0, r3
 8006098:	79fb      	ldrb	r3, [r7, #7]
 800609a:	9300      	str	r3, [sp, #0]
 800609c:	4603      	mov	r3, r0
 800609e:	68f8      	ldr	r0, [r7, #12]
 80060a0:	f000 faea 	bl	8006678 <USB_WritePacket>
 80060a4:	e0d6      	b.n	8006254 <USB_EPStartXfer+0x488>
 80060a6:	bf00      	nop
 80060a8:	e007ffff 	.word	0xe007ffff
 80060ac:	fff80000 	.word	0xfff80000
 80060b0:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80060b4:	69bb      	ldr	r3, [r7, #24]
 80060b6:	015a      	lsls	r2, r3, #5
 80060b8:	69fb      	ldr	r3, [r7, #28]
 80060ba:	4413      	add	r3, r2
 80060bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060c0:	691a      	ldr	r2, [r3, #16]
 80060c2:	69bb      	ldr	r3, [r7, #24]
 80060c4:	0159      	lsls	r1, r3, #5
 80060c6:	69fb      	ldr	r3, [r7, #28]
 80060c8:	440b      	add	r3, r1
 80060ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060ce:	4619      	mov	r1, r3
 80060d0:	4b63      	ldr	r3, [pc, #396]	; (8006260 <USB_EPStartXfer+0x494>)
 80060d2:	4013      	ands	r3, r2
 80060d4:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80060d6:	69bb      	ldr	r3, [r7, #24]
 80060d8:	015a      	lsls	r2, r3, #5
 80060da:	69fb      	ldr	r3, [r7, #28]
 80060dc:	4413      	add	r3, r2
 80060de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060e2:	691a      	ldr	r2, [r3, #16]
 80060e4:	69bb      	ldr	r3, [r7, #24]
 80060e6:	0159      	lsls	r1, r3, #5
 80060e8:	69fb      	ldr	r3, [r7, #28]
 80060ea:	440b      	add	r3, r1
 80060ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060f0:	4619      	mov	r1, r3
 80060f2:	4b5c      	ldr	r3, [pc, #368]	; (8006264 <USB_EPStartXfer+0x498>)
 80060f4:	4013      	ands	r3, r2
 80060f6:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	699b      	ldr	r3, [r3, #24]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d123      	bne.n	8006148 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006100:	69bb      	ldr	r3, [r7, #24]
 8006102:	015a      	lsls	r2, r3, #5
 8006104:	69fb      	ldr	r3, [r7, #28]
 8006106:	4413      	add	r3, r2
 8006108:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800610c:	691a      	ldr	r2, [r3, #16]
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	68db      	ldr	r3, [r3, #12]
 8006112:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006116:	69b9      	ldr	r1, [r7, #24]
 8006118:	0148      	lsls	r0, r1, #5
 800611a:	69f9      	ldr	r1, [r7, #28]
 800611c:	4401      	add	r1, r0
 800611e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006122:	4313      	orrs	r3, r2
 8006124:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006126:	69bb      	ldr	r3, [r7, #24]
 8006128:	015a      	lsls	r2, r3, #5
 800612a:	69fb      	ldr	r3, [r7, #28]
 800612c:	4413      	add	r3, r2
 800612e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006132:	691b      	ldr	r3, [r3, #16]
 8006134:	69ba      	ldr	r2, [r7, #24]
 8006136:	0151      	lsls	r1, r2, #5
 8006138:	69fa      	ldr	r2, [r7, #28]
 800613a:	440a      	add	r2, r1
 800613c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006140:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006144:	6113      	str	r3, [r2, #16]
 8006146:	e037      	b.n	80061b8 <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	699a      	ldr	r2, [r3, #24]
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	68db      	ldr	r3, [r3, #12]
 8006150:	4413      	add	r3, r2
 8006152:	1e5a      	subs	r2, r3, #1
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	68db      	ldr	r3, [r3, #12]
 8006158:	fbb2 f3f3 	udiv	r3, r2, r3
 800615c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	68db      	ldr	r3, [r3, #12]
 8006162:	8afa      	ldrh	r2, [r7, #22]
 8006164:	fb03 f202 	mul.w	r2, r3, r2
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800616c:	69bb      	ldr	r3, [r7, #24]
 800616e:	015a      	lsls	r2, r3, #5
 8006170:	69fb      	ldr	r3, [r7, #28]
 8006172:	4413      	add	r3, r2
 8006174:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006178:	691a      	ldr	r2, [r3, #16]
 800617a:	8afb      	ldrh	r3, [r7, #22]
 800617c:	04d9      	lsls	r1, r3, #19
 800617e:	4b3a      	ldr	r3, [pc, #232]	; (8006268 <USB_EPStartXfer+0x49c>)
 8006180:	400b      	ands	r3, r1
 8006182:	69b9      	ldr	r1, [r7, #24]
 8006184:	0148      	lsls	r0, r1, #5
 8006186:	69f9      	ldr	r1, [r7, #28]
 8006188:	4401      	add	r1, r0
 800618a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800618e:	4313      	orrs	r3, r2
 8006190:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006192:	69bb      	ldr	r3, [r7, #24]
 8006194:	015a      	lsls	r2, r3, #5
 8006196:	69fb      	ldr	r3, [r7, #28]
 8006198:	4413      	add	r3, r2
 800619a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800619e:	691a      	ldr	r2, [r3, #16]
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	69db      	ldr	r3, [r3, #28]
 80061a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80061a8:	69b9      	ldr	r1, [r7, #24]
 80061aa:	0148      	lsls	r0, r1, #5
 80061ac:	69f9      	ldr	r1, [r7, #28]
 80061ae:	4401      	add	r1, r0
 80061b0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80061b4:	4313      	orrs	r3, r2
 80061b6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80061b8:	79fb      	ldrb	r3, [r7, #7]
 80061ba:	2b01      	cmp	r3, #1
 80061bc:	d10d      	bne.n	80061da <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	691b      	ldr	r3, [r3, #16]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d009      	beq.n	80061da <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	6919      	ldr	r1, [r3, #16]
 80061ca:	69bb      	ldr	r3, [r7, #24]
 80061cc:	015a      	lsls	r2, r3, #5
 80061ce:	69fb      	ldr	r3, [r7, #28]
 80061d0:	4413      	add	r3, r2
 80061d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061d6:	460a      	mov	r2, r1
 80061d8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	791b      	ldrb	r3, [r3, #4]
 80061de:	2b01      	cmp	r3, #1
 80061e0:	d128      	bne.n	8006234 <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80061e2:	69fb      	ldr	r3, [r7, #28]
 80061e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061e8:	689b      	ldr	r3, [r3, #8]
 80061ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d110      	bne.n	8006214 <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80061f2:	69bb      	ldr	r3, [r7, #24]
 80061f4:	015a      	lsls	r2, r3, #5
 80061f6:	69fb      	ldr	r3, [r7, #28]
 80061f8:	4413      	add	r3, r2
 80061fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	69ba      	ldr	r2, [r7, #24]
 8006202:	0151      	lsls	r1, r2, #5
 8006204:	69fa      	ldr	r2, [r7, #28]
 8006206:	440a      	add	r2, r1
 8006208:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800620c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006210:	6013      	str	r3, [r2, #0]
 8006212:	e00f      	b.n	8006234 <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006214:	69bb      	ldr	r3, [r7, #24]
 8006216:	015a      	lsls	r2, r3, #5
 8006218:	69fb      	ldr	r3, [r7, #28]
 800621a:	4413      	add	r3, r2
 800621c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	69ba      	ldr	r2, [r7, #24]
 8006224:	0151      	lsls	r1, r2, #5
 8006226:	69fa      	ldr	r2, [r7, #28]
 8006228:	440a      	add	r2, r1
 800622a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800622e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006232:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006234:	69bb      	ldr	r3, [r7, #24]
 8006236:	015a      	lsls	r2, r3, #5
 8006238:	69fb      	ldr	r3, [r7, #28]
 800623a:	4413      	add	r3, r2
 800623c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	69ba      	ldr	r2, [r7, #24]
 8006244:	0151      	lsls	r1, r2, #5
 8006246:	69fa      	ldr	r2, [r7, #28]
 8006248:	440a      	add	r2, r1
 800624a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800624e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006252:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006254:	2300      	movs	r3, #0
}
 8006256:	4618      	mov	r0, r3
 8006258:	3720      	adds	r7, #32
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}
 800625e:	bf00      	nop
 8006260:	fff80000 	.word	0xfff80000
 8006264:	e007ffff 	.word	0xe007ffff
 8006268:	1ff80000 	.word	0x1ff80000

0800626c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800626c:	b480      	push	{r7}
 800626e:	b087      	sub	sp, #28
 8006270:	af00      	add	r7, sp, #0
 8006272:	60f8      	str	r0, [r7, #12]
 8006274:	60b9      	str	r1, [r7, #8]
 8006276:	4613      	mov	r3, r2
 8006278:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	781b      	ldrb	r3, [r3, #0]
 8006282:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	785b      	ldrb	r3, [r3, #1]
 8006288:	2b01      	cmp	r3, #1
 800628a:	f040 80ce 	bne.w	800642a <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	699b      	ldr	r3, [r3, #24]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d132      	bne.n	80062fc <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006296:	693b      	ldr	r3, [r7, #16]
 8006298:	015a      	lsls	r2, r3, #5
 800629a:	697b      	ldr	r3, [r7, #20]
 800629c:	4413      	add	r3, r2
 800629e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062a2:	691a      	ldr	r2, [r3, #16]
 80062a4:	693b      	ldr	r3, [r7, #16]
 80062a6:	0159      	lsls	r1, r3, #5
 80062a8:	697b      	ldr	r3, [r7, #20]
 80062aa:	440b      	add	r3, r1
 80062ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062b0:	4619      	mov	r1, r3
 80062b2:	4b9a      	ldr	r3, [pc, #616]	; (800651c <USB_EP0StartXfer+0x2b0>)
 80062b4:	4013      	ands	r3, r2
 80062b6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80062b8:	693b      	ldr	r3, [r7, #16]
 80062ba:	015a      	lsls	r2, r3, #5
 80062bc:	697b      	ldr	r3, [r7, #20]
 80062be:	4413      	add	r3, r2
 80062c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062c4:	691b      	ldr	r3, [r3, #16]
 80062c6:	693a      	ldr	r2, [r7, #16]
 80062c8:	0151      	lsls	r1, r2, #5
 80062ca:	697a      	ldr	r2, [r7, #20]
 80062cc:	440a      	add	r2, r1
 80062ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062d2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80062d6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80062d8:	693b      	ldr	r3, [r7, #16]
 80062da:	015a      	lsls	r2, r3, #5
 80062dc:	697b      	ldr	r3, [r7, #20]
 80062de:	4413      	add	r3, r2
 80062e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062e4:	691a      	ldr	r2, [r3, #16]
 80062e6:	693b      	ldr	r3, [r7, #16]
 80062e8:	0159      	lsls	r1, r3, #5
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	440b      	add	r3, r1
 80062ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062f2:	4619      	mov	r1, r3
 80062f4:	4b8a      	ldr	r3, [pc, #552]	; (8006520 <USB_EP0StartXfer+0x2b4>)
 80062f6:	4013      	ands	r3, r2
 80062f8:	610b      	str	r3, [r1, #16]
 80062fa:	e04e      	b.n	800639a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80062fc:	693b      	ldr	r3, [r7, #16]
 80062fe:	015a      	lsls	r2, r3, #5
 8006300:	697b      	ldr	r3, [r7, #20]
 8006302:	4413      	add	r3, r2
 8006304:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006308:	691a      	ldr	r2, [r3, #16]
 800630a:	693b      	ldr	r3, [r7, #16]
 800630c:	0159      	lsls	r1, r3, #5
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	440b      	add	r3, r1
 8006312:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006316:	4619      	mov	r1, r3
 8006318:	4b81      	ldr	r3, [pc, #516]	; (8006520 <USB_EP0StartXfer+0x2b4>)
 800631a:	4013      	ands	r3, r2
 800631c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800631e:	693b      	ldr	r3, [r7, #16]
 8006320:	015a      	lsls	r2, r3, #5
 8006322:	697b      	ldr	r3, [r7, #20]
 8006324:	4413      	add	r3, r2
 8006326:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800632a:	691a      	ldr	r2, [r3, #16]
 800632c:	693b      	ldr	r3, [r7, #16]
 800632e:	0159      	lsls	r1, r3, #5
 8006330:	697b      	ldr	r3, [r7, #20]
 8006332:	440b      	add	r3, r1
 8006334:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006338:	4619      	mov	r1, r3
 800633a:	4b78      	ldr	r3, [pc, #480]	; (800651c <USB_EP0StartXfer+0x2b0>)
 800633c:	4013      	ands	r3, r2
 800633e:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	699a      	ldr	r2, [r3, #24]
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	68db      	ldr	r3, [r3, #12]
 8006348:	429a      	cmp	r2, r3
 800634a:	d903      	bls.n	8006354 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	68da      	ldr	r2, [r3, #12]
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006354:	693b      	ldr	r3, [r7, #16]
 8006356:	015a      	lsls	r2, r3, #5
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	4413      	add	r3, r2
 800635c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006360:	691b      	ldr	r3, [r3, #16]
 8006362:	693a      	ldr	r2, [r7, #16]
 8006364:	0151      	lsls	r1, r2, #5
 8006366:	697a      	ldr	r2, [r7, #20]
 8006368:	440a      	add	r2, r1
 800636a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800636e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006372:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006374:	693b      	ldr	r3, [r7, #16]
 8006376:	015a      	lsls	r2, r3, #5
 8006378:	697b      	ldr	r3, [r7, #20]
 800637a:	4413      	add	r3, r2
 800637c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006380:	691a      	ldr	r2, [r3, #16]
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	699b      	ldr	r3, [r3, #24]
 8006386:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800638a:	6939      	ldr	r1, [r7, #16]
 800638c:	0148      	lsls	r0, r1, #5
 800638e:	6979      	ldr	r1, [r7, #20]
 8006390:	4401      	add	r1, r0
 8006392:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006396:	4313      	orrs	r3, r2
 8006398:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800639a:	79fb      	ldrb	r3, [r7, #7]
 800639c:	2b01      	cmp	r3, #1
 800639e:	d11e      	bne.n	80063de <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	695b      	ldr	r3, [r3, #20]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d009      	beq.n	80063bc <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80063a8:	693b      	ldr	r3, [r7, #16]
 80063aa:	015a      	lsls	r2, r3, #5
 80063ac:	697b      	ldr	r3, [r7, #20]
 80063ae:	4413      	add	r3, r2
 80063b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063b4:	461a      	mov	r2, r3
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	695b      	ldr	r3, [r3, #20]
 80063ba:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80063bc:	693b      	ldr	r3, [r7, #16]
 80063be:	015a      	lsls	r2, r3, #5
 80063c0:	697b      	ldr	r3, [r7, #20]
 80063c2:	4413      	add	r3, r2
 80063c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	693a      	ldr	r2, [r7, #16]
 80063cc:	0151      	lsls	r1, r2, #5
 80063ce:	697a      	ldr	r2, [r7, #20]
 80063d0:	440a      	add	r2, r1
 80063d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063d6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80063da:	6013      	str	r3, [r2, #0]
 80063dc:	e097      	b.n	800650e <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80063de:	693b      	ldr	r3, [r7, #16]
 80063e0:	015a      	lsls	r2, r3, #5
 80063e2:	697b      	ldr	r3, [r7, #20]
 80063e4:	4413      	add	r3, r2
 80063e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	693a      	ldr	r2, [r7, #16]
 80063ee:	0151      	lsls	r1, r2, #5
 80063f0:	697a      	ldr	r2, [r7, #20]
 80063f2:	440a      	add	r2, r1
 80063f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063f8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80063fc:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	699b      	ldr	r3, [r3, #24]
 8006402:	2b00      	cmp	r3, #0
 8006404:	f000 8083 	beq.w	800650e <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006408:	697b      	ldr	r3, [r7, #20]
 800640a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800640e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	781b      	ldrb	r3, [r3, #0]
 8006414:	f003 030f 	and.w	r3, r3, #15
 8006418:	2101      	movs	r1, #1
 800641a:	fa01 f303 	lsl.w	r3, r1, r3
 800641e:	6979      	ldr	r1, [r7, #20]
 8006420:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006424:	4313      	orrs	r3, r2
 8006426:	634b      	str	r3, [r1, #52]	; 0x34
 8006428:	e071      	b.n	800650e <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800642a:	693b      	ldr	r3, [r7, #16]
 800642c:	015a      	lsls	r2, r3, #5
 800642e:	697b      	ldr	r3, [r7, #20]
 8006430:	4413      	add	r3, r2
 8006432:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006436:	691a      	ldr	r2, [r3, #16]
 8006438:	693b      	ldr	r3, [r7, #16]
 800643a:	0159      	lsls	r1, r3, #5
 800643c:	697b      	ldr	r3, [r7, #20]
 800643e:	440b      	add	r3, r1
 8006440:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006444:	4619      	mov	r1, r3
 8006446:	4b36      	ldr	r3, [pc, #216]	; (8006520 <USB_EP0StartXfer+0x2b4>)
 8006448:	4013      	ands	r3, r2
 800644a:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800644c:	693b      	ldr	r3, [r7, #16]
 800644e:	015a      	lsls	r2, r3, #5
 8006450:	697b      	ldr	r3, [r7, #20]
 8006452:	4413      	add	r3, r2
 8006454:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006458:	691a      	ldr	r2, [r3, #16]
 800645a:	693b      	ldr	r3, [r7, #16]
 800645c:	0159      	lsls	r1, r3, #5
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	440b      	add	r3, r1
 8006462:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006466:	4619      	mov	r1, r3
 8006468:	4b2c      	ldr	r3, [pc, #176]	; (800651c <USB_EP0StartXfer+0x2b0>)
 800646a:	4013      	ands	r3, r2
 800646c:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 800646e:	68bb      	ldr	r3, [r7, #8]
 8006470:	699b      	ldr	r3, [r3, #24]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d003      	beq.n	800647e <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	68da      	ldr	r2, [r3, #12]
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	68da      	ldr	r2, [r3, #12]
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006486:	693b      	ldr	r3, [r7, #16]
 8006488:	015a      	lsls	r2, r3, #5
 800648a:	697b      	ldr	r3, [r7, #20]
 800648c:	4413      	add	r3, r2
 800648e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006492:	691b      	ldr	r3, [r3, #16]
 8006494:	693a      	ldr	r2, [r7, #16]
 8006496:	0151      	lsls	r1, r2, #5
 8006498:	697a      	ldr	r2, [r7, #20]
 800649a:	440a      	add	r2, r1
 800649c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064a0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80064a4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80064a6:	693b      	ldr	r3, [r7, #16]
 80064a8:	015a      	lsls	r2, r3, #5
 80064aa:	697b      	ldr	r3, [r7, #20]
 80064ac:	4413      	add	r3, r2
 80064ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064b2:	691a      	ldr	r2, [r3, #16]
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	69db      	ldr	r3, [r3, #28]
 80064b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80064bc:	6939      	ldr	r1, [r7, #16]
 80064be:	0148      	lsls	r0, r1, #5
 80064c0:	6979      	ldr	r1, [r7, #20]
 80064c2:	4401      	add	r1, r0
 80064c4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80064c8:	4313      	orrs	r3, r2
 80064ca:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80064cc:	79fb      	ldrb	r3, [r7, #7]
 80064ce:	2b01      	cmp	r3, #1
 80064d0:	d10d      	bne.n	80064ee <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	691b      	ldr	r3, [r3, #16]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d009      	beq.n	80064ee <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80064da:	68bb      	ldr	r3, [r7, #8]
 80064dc:	6919      	ldr	r1, [r3, #16]
 80064de:	693b      	ldr	r3, [r7, #16]
 80064e0:	015a      	lsls	r2, r3, #5
 80064e2:	697b      	ldr	r3, [r7, #20]
 80064e4:	4413      	add	r3, r2
 80064e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064ea:	460a      	mov	r2, r1
 80064ec:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80064ee:	693b      	ldr	r3, [r7, #16]
 80064f0:	015a      	lsls	r2, r3, #5
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	4413      	add	r3, r2
 80064f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	693a      	ldr	r2, [r7, #16]
 80064fe:	0151      	lsls	r1, r2, #5
 8006500:	697a      	ldr	r2, [r7, #20]
 8006502:	440a      	add	r2, r1
 8006504:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006508:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800650c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800650e:	2300      	movs	r3, #0
}
 8006510:	4618      	mov	r0, r3
 8006512:	371c      	adds	r7, #28
 8006514:	46bd      	mov	sp, r7
 8006516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651a:	4770      	bx	lr
 800651c:	e007ffff 	.word	0xe007ffff
 8006520:	fff80000 	.word	0xfff80000

08006524 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006524:	b480      	push	{r7}
 8006526:	b087      	sub	sp, #28
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
 800652c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800652e:	2300      	movs	r3, #0
 8006530:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006532:	2300      	movs	r3, #0
 8006534:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	785b      	ldrb	r3, [r3, #1]
 800653e:	2b01      	cmp	r3, #1
 8006540:	d14a      	bne.n	80065d8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	781b      	ldrb	r3, [r3, #0]
 8006546:	015a      	lsls	r2, r3, #5
 8006548:	693b      	ldr	r3, [r7, #16]
 800654a:	4413      	add	r3, r2
 800654c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006556:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800655a:	f040 8086 	bne.w	800666a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	781b      	ldrb	r3, [r3, #0]
 8006562:	015a      	lsls	r2, r3, #5
 8006564:	693b      	ldr	r3, [r7, #16]
 8006566:	4413      	add	r3, r2
 8006568:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	683a      	ldr	r2, [r7, #0]
 8006570:	7812      	ldrb	r2, [r2, #0]
 8006572:	0151      	lsls	r1, r2, #5
 8006574:	693a      	ldr	r2, [r7, #16]
 8006576:	440a      	add	r2, r1
 8006578:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800657c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006580:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	781b      	ldrb	r3, [r3, #0]
 8006586:	015a      	lsls	r2, r3, #5
 8006588:	693b      	ldr	r3, [r7, #16]
 800658a:	4413      	add	r3, r2
 800658c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	683a      	ldr	r2, [r7, #0]
 8006594:	7812      	ldrb	r2, [r2, #0]
 8006596:	0151      	lsls	r1, r2, #5
 8006598:	693a      	ldr	r2, [r7, #16]
 800659a:	440a      	add	r2, r1
 800659c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065a0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80065a4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	3301      	adds	r3, #1
 80065aa:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	f242 7210 	movw	r2, #10000	; 0x2710
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d902      	bls.n	80065bc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80065b6:	2301      	movs	r3, #1
 80065b8:	75fb      	strb	r3, [r7, #23]
          break;
 80065ba:	e056      	b.n	800666a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	781b      	ldrb	r3, [r3, #0]
 80065c0:	015a      	lsls	r2, r3, #5
 80065c2:	693b      	ldr	r3, [r7, #16]
 80065c4:	4413      	add	r3, r2
 80065c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80065d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80065d4:	d0e7      	beq.n	80065a6 <USB_EPStopXfer+0x82>
 80065d6:	e048      	b.n	800666a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	781b      	ldrb	r3, [r3, #0]
 80065dc:	015a      	lsls	r2, r3, #5
 80065de:	693b      	ldr	r3, [r7, #16]
 80065e0:	4413      	add	r3, r2
 80065e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80065ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80065f0:	d13b      	bne.n	800666a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	781b      	ldrb	r3, [r3, #0]
 80065f6:	015a      	lsls	r2, r3, #5
 80065f8:	693b      	ldr	r3, [r7, #16]
 80065fa:	4413      	add	r3, r2
 80065fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	683a      	ldr	r2, [r7, #0]
 8006604:	7812      	ldrb	r2, [r2, #0]
 8006606:	0151      	lsls	r1, r2, #5
 8006608:	693a      	ldr	r2, [r7, #16]
 800660a:	440a      	add	r2, r1
 800660c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006610:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006614:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	781b      	ldrb	r3, [r3, #0]
 800661a:	015a      	lsls	r2, r3, #5
 800661c:	693b      	ldr	r3, [r7, #16]
 800661e:	4413      	add	r3, r2
 8006620:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	683a      	ldr	r2, [r7, #0]
 8006628:	7812      	ldrb	r2, [r2, #0]
 800662a:	0151      	lsls	r1, r2, #5
 800662c:	693a      	ldr	r2, [r7, #16]
 800662e:	440a      	add	r2, r1
 8006630:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006634:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006638:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	3301      	adds	r3, #1
 800663e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	f242 7210 	movw	r2, #10000	; 0x2710
 8006646:	4293      	cmp	r3, r2
 8006648:	d902      	bls.n	8006650 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800664a:	2301      	movs	r3, #1
 800664c:	75fb      	strb	r3, [r7, #23]
          break;
 800664e:	e00c      	b.n	800666a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	781b      	ldrb	r3, [r3, #0]
 8006654:	015a      	lsls	r2, r3, #5
 8006656:	693b      	ldr	r3, [r7, #16]
 8006658:	4413      	add	r3, r2
 800665a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006664:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006668:	d0e7      	beq.n	800663a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800666a:	7dfb      	ldrb	r3, [r7, #23]
}
 800666c:	4618      	mov	r0, r3
 800666e:	371c      	adds	r7, #28
 8006670:	46bd      	mov	sp, r7
 8006672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006676:	4770      	bx	lr

08006678 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006678:	b480      	push	{r7}
 800667a:	b089      	sub	sp, #36	; 0x24
 800667c:	af00      	add	r7, sp, #0
 800667e:	60f8      	str	r0, [r7, #12]
 8006680:	60b9      	str	r1, [r7, #8]
 8006682:	4611      	mov	r1, r2
 8006684:	461a      	mov	r2, r3
 8006686:	460b      	mov	r3, r1
 8006688:	71fb      	strb	r3, [r7, #7]
 800668a:	4613      	mov	r3, r2
 800668c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006696:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800669a:	2b00      	cmp	r3, #0
 800669c:	d123      	bne.n	80066e6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800669e:	88bb      	ldrh	r3, [r7, #4]
 80066a0:	3303      	adds	r3, #3
 80066a2:	089b      	lsrs	r3, r3, #2
 80066a4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80066a6:	2300      	movs	r3, #0
 80066a8:	61bb      	str	r3, [r7, #24]
 80066aa:	e018      	b.n	80066de <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80066ac:	79fb      	ldrb	r3, [r7, #7]
 80066ae:	031a      	lsls	r2, r3, #12
 80066b0:	697b      	ldr	r3, [r7, #20]
 80066b2:	4413      	add	r3, r2
 80066b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066b8:	461a      	mov	r2, r3
 80066ba:	69fb      	ldr	r3, [r7, #28]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	6013      	str	r3, [r2, #0]
      pSrc++;
 80066c0:	69fb      	ldr	r3, [r7, #28]
 80066c2:	3301      	adds	r3, #1
 80066c4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80066c6:	69fb      	ldr	r3, [r7, #28]
 80066c8:	3301      	adds	r3, #1
 80066ca:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80066cc:	69fb      	ldr	r3, [r7, #28]
 80066ce:	3301      	adds	r3, #1
 80066d0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80066d2:	69fb      	ldr	r3, [r7, #28]
 80066d4:	3301      	adds	r3, #1
 80066d6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80066d8:	69bb      	ldr	r3, [r7, #24]
 80066da:	3301      	adds	r3, #1
 80066dc:	61bb      	str	r3, [r7, #24]
 80066de:	69ba      	ldr	r2, [r7, #24]
 80066e0:	693b      	ldr	r3, [r7, #16]
 80066e2:	429a      	cmp	r2, r3
 80066e4:	d3e2      	bcc.n	80066ac <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80066e6:	2300      	movs	r3, #0
}
 80066e8:	4618      	mov	r0, r3
 80066ea:	3724      	adds	r7, #36	; 0x24
 80066ec:	46bd      	mov	sp, r7
 80066ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f2:	4770      	bx	lr

080066f4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80066f4:	b480      	push	{r7}
 80066f6:	b08b      	sub	sp, #44	; 0x2c
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	60f8      	str	r0, [r7, #12]
 80066fc:	60b9      	str	r1, [r7, #8]
 80066fe:	4613      	mov	r3, r2
 8006700:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800670a:	88fb      	ldrh	r3, [r7, #6]
 800670c:	089b      	lsrs	r3, r3, #2
 800670e:	b29b      	uxth	r3, r3
 8006710:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006712:	88fb      	ldrh	r3, [r7, #6]
 8006714:	f003 0303 	and.w	r3, r3, #3
 8006718:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800671a:	2300      	movs	r3, #0
 800671c:	623b      	str	r3, [r7, #32]
 800671e:	e014      	b.n	800674a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006720:	69bb      	ldr	r3, [r7, #24]
 8006722:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006726:	681a      	ldr	r2, [r3, #0]
 8006728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800672a:	601a      	str	r2, [r3, #0]
    pDest++;
 800672c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800672e:	3301      	adds	r3, #1
 8006730:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006734:	3301      	adds	r3, #1
 8006736:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800673a:	3301      	adds	r3, #1
 800673c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800673e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006740:	3301      	adds	r3, #1
 8006742:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006744:	6a3b      	ldr	r3, [r7, #32]
 8006746:	3301      	adds	r3, #1
 8006748:	623b      	str	r3, [r7, #32]
 800674a:	6a3a      	ldr	r2, [r7, #32]
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	429a      	cmp	r2, r3
 8006750:	d3e6      	bcc.n	8006720 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006752:	8bfb      	ldrh	r3, [r7, #30]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d01e      	beq.n	8006796 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006758:	2300      	movs	r3, #0
 800675a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800675c:	69bb      	ldr	r3, [r7, #24]
 800675e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006762:	461a      	mov	r2, r3
 8006764:	f107 0310 	add.w	r3, r7, #16
 8006768:	6812      	ldr	r2, [r2, #0]
 800676a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800676c:	693a      	ldr	r2, [r7, #16]
 800676e:	6a3b      	ldr	r3, [r7, #32]
 8006770:	b2db      	uxtb	r3, r3
 8006772:	00db      	lsls	r3, r3, #3
 8006774:	fa22 f303 	lsr.w	r3, r2, r3
 8006778:	b2da      	uxtb	r2, r3
 800677a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800677c:	701a      	strb	r2, [r3, #0]
      i++;
 800677e:	6a3b      	ldr	r3, [r7, #32]
 8006780:	3301      	adds	r3, #1
 8006782:	623b      	str	r3, [r7, #32]
      pDest++;
 8006784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006786:	3301      	adds	r3, #1
 8006788:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800678a:	8bfb      	ldrh	r3, [r7, #30]
 800678c:	3b01      	subs	r3, #1
 800678e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006790:	8bfb      	ldrh	r3, [r7, #30]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d1ea      	bne.n	800676c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006798:	4618      	mov	r0, r3
 800679a:	372c      	adds	r7, #44	; 0x2c
 800679c:	46bd      	mov	sp, r7
 800679e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a2:	4770      	bx	lr

080067a4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80067a4:	b480      	push	{r7}
 80067a6:	b085      	sub	sp, #20
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
 80067ac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	781b      	ldrb	r3, [r3, #0]
 80067b6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	785b      	ldrb	r3, [r3, #1]
 80067bc:	2b01      	cmp	r3, #1
 80067be:	d12c      	bne.n	800681a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	015a      	lsls	r2, r3, #5
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	4413      	add	r3, r2
 80067c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	db12      	blt.n	80067f8 <USB_EPSetStall+0x54>
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d00f      	beq.n	80067f8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80067d8:	68bb      	ldr	r3, [r7, #8]
 80067da:	015a      	lsls	r2, r3, #5
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	4413      	add	r3, r2
 80067e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	68ba      	ldr	r2, [r7, #8]
 80067e8:	0151      	lsls	r1, r2, #5
 80067ea:	68fa      	ldr	r2, [r7, #12]
 80067ec:	440a      	add	r2, r1
 80067ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067f2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80067f6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80067f8:	68bb      	ldr	r3, [r7, #8]
 80067fa:	015a      	lsls	r2, r3, #5
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	4413      	add	r3, r2
 8006800:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	68ba      	ldr	r2, [r7, #8]
 8006808:	0151      	lsls	r1, r2, #5
 800680a:	68fa      	ldr	r2, [r7, #12]
 800680c:	440a      	add	r2, r1
 800680e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006812:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006816:	6013      	str	r3, [r2, #0]
 8006818:	e02b      	b.n	8006872 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	015a      	lsls	r2, r3, #5
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	4413      	add	r3, r2
 8006822:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	2b00      	cmp	r3, #0
 800682a:	db12      	blt.n	8006852 <USB_EPSetStall+0xae>
 800682c:	68bb      	ldr	r3, [r7, #8]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d00f      	beq.n	8006852 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006832:	68bb      	ldr	r3, [r7, #8]
 8006834:	015a      	lsls	r2, r3, #5
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	4413      	add	r3, r2
 800683a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	68ba      	ldr	r2, [r7, #8]
 8006842:	0151      	lsls	r1, r2, #5
 8006844:	68fa      	ldr	r2, [r7, #12]
 8006846:	440a      	add	r2, r1
 8006848:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800684c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006850:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006852:	68bb      	ldr	r3, [r7, #8]
 8006854:	015a      	lsls	r2, r3, #5
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	4413      	add	r3, r2
 800685a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	68ba      	ldr	r2, [r7, #8]
 8006862:	0151      	lsls	r1, r2, #5
 8006864:	68fa      	ldr	r2, [r7, #12]
 8006866:	440a      	add	r2, r1
 8006868:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800686c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006870:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006872:	2300      	movs	r3, #0
}
 8006874:	4618      	mov	r0, r3
 8006876:	3714      	adds	r7, #20
 8006878:	46bd      	mov	sp, r7
 800687a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687e:	4770      	bx	lr

08006880 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006880:	b480      	push	{r7}
 8006882:	b085      	sub	sp, #20
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
 8006888:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	781b      	ldrb	r3, [r3, #0]
 8006892:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	785b      	ldrb	r3, [r3, #1]
 8006898:	2b01      	cmp	r3, #1
 800689a:	d128      	bne.n	80068ee <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	015a      	lsls	r2, r3, #5
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	4413      	add	r3, r2
 80068a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	68ba      	ldr	r2, [r7, #8]
 80068ac:	0151      	lsls	r1, r2, #5
 80068ae:	68fa      	ldr	r2, [r7, #12]
 80068b0:	440a      	add	r2, r1
 80068b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068b6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80068ba:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	791b      	ldrb	r3, [r3, #4]
 80068c0:	2b03      	cmp	r3, #3
 80068c2:	d003      	beq.n	80068cc <USB_EPClearStall+0x4c>
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	791b      	ldrb	r3, [r3, #4]
 80068c8:	2b02      	cmp	r3, #2
 80068ca:	d138      	bne.n	800693e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	015a      	lsls	r2, r3, #5
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	4413      	add	r3, r2
 80068d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	68ba      	ldr	r2, [r7, #8]
 80068dc:	0151      	lsls	r1, r2, #5
 80068de:	68fa      	ldr	r2, [r7, #12]
 80068e0:	440a      	add	r2, r1
 80068e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068ea:	6013      	str	r3, [r2, #0]
 80068ec:	e027      	b.n	800693e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	015a      	lsls	r2, r3, #5
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	4413      	add	r3, r2
 80068f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	68ba      	ldr	r2, [r7, #8]
 80068fe:	0151      	lsls	r1, r2, #5
 8006900:	68fa      	ldr	r2, [r7, #12]
 8006902:	440a      	add	r2, r1
 8006904:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006908:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800690c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	791b      	ldrb	r3, [r3, #4]
 8006912:	2b03      	cmp	r3, #3
 8006914:	d003      	beq.n	800691e <USB_EPClearStall+0x9e>
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	791b      	ldrb	r3, [r3, #4]
 800691a:	2b02      	cmp	r3, #2
 800691c:	d10f      	bne.n	800693e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800691e:	68bb      	ldr	r3, [r7, #8]
 8006920:	015a      	lsls	r2, r3, #5
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	4413      	add	r3, r2
 8006926:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	68ba      	ldr	r2, [r7, #8]
 800692e:	0151      	lsls	r1, r2, #5
 8006930:	68fa      	ldr	r2, [r7, #12]
 8006932:	440a      	add	r2, r1
 8006934:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006938:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800693c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800693e:	2300      	movs	r3, #0
}
 8006940:	4618      	mov	r0, r3
 8006942:	3714      	adds	r7, #20
 8006944:	46bd      	mov	sp, r7
 8006946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694a:	4770      	bx	lr

0800694c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800694c:	b480      	push	{r7}
 800694e:	b085      	sub	sp, #20
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
 8006954:	460b      	mov	r3, r1
 8006956:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	68fa      	ldr	r2, [r7, #12]
 8006966:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800696a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800696e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006976:	681a      	ldr	r2, [r3, #0]
 8006978:	78fb      	ldrb	r3, [r7, #3]
 800697a:	011b      	lsls	r3, r3, #4
 800697c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006980:	68f9      	ldr	r1, [r7, #12]
 8006982:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006986:	4313      	orrs	r3, r2
 8006988:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800698a:	2300      	movs	r3, #0
}
 800698c:	4618      	mov	r0, r3
 800698e:	3714      	adds	r7, #20
 8006990:	46bd      	mov	sp, r7
 8006992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006996:	4770      	bx	lr

08006998 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006998:	b480      	push	{r7}
 800699a:	b085      	sub	sp, #20
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	68fa      	ldr	r2, [r7, #12]
 80069ae:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80069b2:	f023 0303 	bic.w	r3, r3, #3
 80069b6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069be:	685b      	ldr	r3, [r3, #4]
 80069c0:	68fa      	ldr	r2, [r7, #12]
 80069c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80069c6:	f023 0302 	bic.w	r3, r3, #2
 80069ca:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80069cc:	2300      	movs	r3, #0
}
 80069ce:	4618      	mov	r0, r3
 80069d0:	3714      	adds	r7, #20
 80069d2:	46bd      	mov	sp, r7
 80069d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d8:	4770      	bx	lr

080069da <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80069da:	b480      	push	{r7}
 80069dc:	b085      	sub	sp, #20
 80069de:	af00      	add	r7, sp, #0
 80069e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	68fa      	ldr	r2, [r7, #12]
 80069f0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80069f4:	f023 0303 	bic.w	r3, r3, #3
 80069f8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a00:	685b      	ldr	r3, [r3, #4]
 8006a02:	68fa      	ldr	r2, [r7, #12]
 8006a04:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006a08:	f043 0302 	orr.w	r3, r3, #2
 8006a0c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006a0e:	2300      	movs	r3, #0
}
 8006a10:	4618      	mov	r0, r3
 8006a12:	3714      	adds	r7, #20
 8006a14:	46bd      	mov	sp, r7
 8006a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1a:	4770      	bx	lr

08006a1c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	b085      	sub	sp, #20
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	695b      	ldr	r3, [r3, #20]
 8006a28:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	699b      	ldr	r3, [r3, #24]
 8006a2e:	68fa      	ldr	r2, [r7, #12]
 8006a30:	4013      	ands	r3, r2
 8006a32:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006a34:	68fb      	ldr	r3, [r7, #12]
}
 8006a36:	4618      	mov	r0, r3
 8006a38:	3714      	adds	r7, #20
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a40:	4770      	bx	lr

08006a42 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006a42:	b480      	push	{r7}
 8006a44:	b085      	sub	sp, #20
 8006a46:	af00      	add	r7, sp, #0
 8006a48:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a54:	699b      	ldr	r3, [r3, #24]
 8006a56:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a5e:	69db      	ldr	r3, [r3, #28]
 8006a60:	68ba      	ldr	r2, [r7, #8]
 8006a62:	4013      	ands	r3, r2
 8006a64:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006a66:	68bb      	ldr	r3, [r7, #8]
 8006a68:	0c1b      	lsrs	r3, r3, #16
}
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	3714      	adds	r7, #20
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a74:	4770      	bx	lr

08006a76 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006a76:	b480      	push	{r7}
 8006a78:	b085      	sub	sp, #20
 8006a7a:	af00      	add	r7, sp, #0
 8006a7c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a88:	699b      	ldr	r3, [r3, #24]
 8006a8a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a92:	69db      	ldr	r3, [r3, #28]
 8006a94:	68ba      	ldr	r2, [r7, #8]
 8006a96:	4013      	ands	r3, r2
 8006a98:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	b29b      	uxth	r3, r3
}
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	3714      	adds	r7, #20
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa8:	4770      	bx	lr

08006aaa <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006aaa:	b480      	push	{r7}
 8006aac:	b085      	sub	sp, #20
 8006aae:	af00      	add	r7, sp, #0
 8006ab0:	6078      	str	r0, [r7, #4]
 8006ab2:	460b      	mov	r3, r1
 8006ab4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006aba:	78fb      	ldrb	r3, [r7, #3]
 8006abc:	015a      	lsls	r2, r3, #5
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	4413      	add	r3, r2
 8006ac2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ac6:	689b      	ldr	r3, [r3, #8]
 8006ac8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ad0:	695b      	ldr	r3, [r3, #20]
 8006ad2:	68ba      	ldr	r2, [r7, #8]
 8006ad4:	4013      	ands	r3, r2
 8006ad6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006ad8:	68bb      	ldr	r3, [r7, #8]
}
 8006ada:	4618      	mov	r0, r3
 8006adc:	3714      	adds	r7, #20
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae4:	4770      	bx	lr

08006ae6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006ae6:	b480      	push	{r7}
 8006ae8:	b087      	sub	sp, #28
 8006aea:	af00      	add	r7, sp, #0
 8006aec:	6078      	str	r0, [r7, #4]
 8006aee:	460b      	mov	r3, r1
 8006af0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006af6:	697b      	ldr	r3, [r7, #20]
 8006af8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006afc:	691b      	ldr	r3, [r3, #16]
 8006afe:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006b00:	697b      	ldr	r3, [r7, #20]
 8006b02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b08:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006b0a:	78fb      	ldrb	r3, [r7, #3]
 8006b0c:	f003 030f 	and.w	r3, r3, #15
 8006b10:	68fa      	ldr	r2, [r7, #12]
 8006b12:	fa22 f303 	lsr.w	r3, r2, r3
 8006b16:	01db      	lsls	r3, r3, #7
 8006b18:	b2db      	uxtb	r3, r3
 8006b1a:	693a      	ldr	r2, [r7, #16]
 8006b1c:	4313      	orrs	r3, r2
 8006b1e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006b20:	78fb      	ldrb	r3, [r7, #3]
 8006b22:	015a      	lsls	r2, r3, #5
 8006b24:	697b      	ldr	r3, [r7, #20]
 8006b26:	4413      	add	r3, r2
 8006b28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b2c:	689b      	ldr	r3, [r3, #8]
 8006b2e:	693a      	ldr	r2, [r7, #16]
 8006b30:	4013      	ands	r3, r2
 8006b32:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006b34:	68bb      	ldr	r3, [r7, #8]
}
 8006b36:	4618      	mov	r0, r3
 8006b38:	371c      	adds	r7, #28
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b40:	4770      	bx	lr

08006b42 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006b42:	b480      	push	{r7}
 8006b44:	b083      	sub	sp, #12
 8006b46:	af00      	add	r7, sp, #0
 8006b48:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	695b      	ldr	r3, [r3, #20]
 8006b4e:	f003 0301 	and.w	r3, r3, #1
}
 8006b52:	4618      	mov	r0, r3
 8006b54:	370c      	adds	r7, #12
 8006b56:	46bd      	mov	sp, r7
 8006b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5c:	4770      	bx	lr
	...

08006b60 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006b60:	b480      	push	{r7}
 8006b62:	b085      	sub	sp, #20
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b72:	681a      	ldr	r2, [r3, #0]
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b7a:	4619      	mov	r1, r3
 8006b7c:	4b09      	ldr	r3, [pc, #36]	; (8006ba4 <USB_ActivateSetup+0x44>)
 8006b7e:	4013      	ands	r3, r2
 8006b80:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b88:	685b      	ldr	r3, [r3, #4]
 8006b8a:	68fa      	ldr	r2, [r7, #12]
 8006b8c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006b90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b94:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006b96:	2300      	movs	r3, #0
}
 8006b98:	4618      	mov	r0, r3
 8006b9a:	3714      	adds	r7, #20
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba2:	4770      	bx	lr
 8006ba4:	fffff800 	.word	0xfffff800

08006ba8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006ba8:	b480      	push	{r7}
 8006baa:	b087      	sub	sp, #28
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	60f8      	str	r0, [r7, #12]
 8006bb0:	460b      	mov	r3, r1
 8006bb2:	607a      	str	r2, [r7, #4]
 8006bb4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	333c      	adds	r3, #60	; 0x3c
 8006bbe:	3304      	adds	r3, #4
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006bc4:	693b      	ldr	r3, [r7, #16]
 8006bc6:	4a26      	ldr	r2, [pc, #152]	; (8006c60 <USB_EP0_OutStart+0xb8>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d90a      	bls.n	8006be2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006bcc:	697b      	ldr	r3, [r7, #20]
 8006bce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006bd8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006bdc:	d101      	bne.n	8006be2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006bde:	2300      	movs	r3, #0
 8006be0:	e037      	b.n	8006c52 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006be2:	697b      	ldr	r3, [r7, #20]
 8006be4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006be8:	461a      	mov	r2, r3
 8006bea:	2300      	movs	r3, #0
 8006bec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006bee:	697b      	ldr	r3, [r7, #20]
 8006bf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bf4:	691b      	ldr	r3, [r3, #16]
 8006bf6:	697a      	ldr	r2, [r7, #20]
 8006bf8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006bfc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006c00:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006c02:	697b      	ldr	r3, [r7, #20]
 8006c04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c08:	691b      	ldr	r3, [r3, #16]
 8006c0a:	697a      	ldr	r2, [r7, #20]
 8006c0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c10:	f043 0318 	orr.w	r3, r3, #24
 8006c14:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006c16:	697b      	ldr	r3, [r7, #20]
 8006c18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c1c:	691b      	ldr	r3, [r3, #16]
 8006c1e:	697a      	ldr	r2, [r7, #20]
 8006c20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c24:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006c28:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006c2a:	7afb      	ldrb	r3, [r7, #11]
 8006c2c:	2b01      	cmp	r3, #1
 8006c2e:	d10f      	bne.n	8006c50 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006c30:	697b      	ldr	r3, [r7, #20]
 8006c32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c36:	461a      	mov	r2, r3
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006c3c:	697b      	ldr	r3, [r7, #20]
 8006c3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	697a      	ldr	r2, [r7, #20]
 8006c46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c4a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006c4e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006c50:	2300      	movs	r3, #0
}
 8006c52:	4618      	mov	r0, r3
 8006c54:	371c      	adds	r7, #28
 8006c56:	46bd      	mov	sp, r7
 8006c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5c:	4770      	bx	lr
 8006c5e:	bf00      	nop
 8006c60:	4f54300a 	.word	0x4f54300a

08006c64 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006c64:	b480      	push	{r7}
 8006c66:	b085      	sub	sp, #20
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	3301      	adds	r3, #1
 8006c74:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	4a13      	ldr	r2, [pc, #76]	; (8006cc8 <USB_CoreReset+0x64>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d901      	bls.n	8006c82 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006c7e:	2303      	movs	r3, #3
 8006c80:	e01b      	b.n	8006cba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	691b      	ldr	r3, [r3, #16]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	daf2      	bge.n	8006c70 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	691b      	ldr	r3, [r3, #16]
 8006c92:	f043 0201 	orr.w	r2, r3, #1
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	3301      	adds	r3, #1
 8006c9e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	4a09      	ldr	r2, [pc, #36]	; (8006cc8 <USB_CoreReset+0x64>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d901      	bls.n	8006cac <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006ca8:	2303      	movs	r3, #3
 8006caa:	e006      	b.n	8006cba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	691b      	ldr	r3, [r3, #16]
 8006cb0:	f003 0301 	and.w	r3, r3, #1
 8006cb4:	2b01      	cmp	r3, #1
 8006cb6:	d0f0      	beq.n	8006c9a <USB_CoreReset+0x36>

  return HAL_OK;
 8006cb8:	2300      	movs	r3, #0
}
 8006cba:	4618      	mov	r0, r3
 8006cbc:	3714      	adds	r7, #20
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc4:	4770      	bx	lr
 8006cc6:	bf00      	nop
 8006cc8:	00030d40 	.word	0x00030d40

08006ccc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b084      	sub	sp, #16
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
 8006cd4:	460b      	mov	r3, r1
 8006cd6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006cd8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006cdc:	f002 fea8 	bl	8009a30 <malloc>
 8006ce0:	4603      	mov	r3, r0
 8006ce2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d109      	bne.n	8006cfe <USBD_CDC_Init+0x32>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	32b0      	adds	r2, #176	; 0xb0
 8006cf4:	2100      	movs	r1, #0
 8006cf6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006cfa:	2302      	movs	r3, #2
 8006cfc:	e0d4      	b.n	8006ea8 <USBD_CDC_Init+0x1dc>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006cfe:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8006d02:	2100      	movs	r1, #0
 8006d04:	68f8      	ldr	r0, [r7, #12]
 8006d06:	f002 fea3 	bl	8009a50 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	32b0      	adds	r2, #176	; 0xb0
 8006d14:	68f9      	ldr	r1, [r7, #12]
 8006d16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	32b0      	adds	r2, #176	; 0xb0
 8006d24:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	7c1b      	ldrb	r3, [r3, #16]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d138      	bne.n	8006da8 <USBD_CDC_Init+0xdc>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006d36:	4b5e      	ldr	r3, [pc, #376]	; (8006eb0 <USBD_CDC_Init+0x1e4>)
 8006d38:	7819      	ldrb	r1, [r3, #0]
 8006d3a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006d3e:	2202      	movs	r2, #2
 8006d40:	6878      	ldr	r0, [r7, #4]
 8006d42:	f002 fc9c 	bl	800967e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006d46:	4b5a      	ldr	r3, [pc, #360]	; (8006eb0 <USBD_CDC_Init+0x1e4>)
 8006d48:	781b      	ldrb	r3, [r3, #0]
 8006d4a:	f003 020f 	and.w	r2, r3, #15
 8006d4e:	6879      	ldr	r1, [r7, #4]
 8006d50:	4613      	mov	r3, r2
 8006d52:	009b      	lsls	r3, r3, #2
 8006d54:	4413      	add	r3, r2
 8006d56:	009b      	lsls	r3, r3, #2
 8006d58:	440b      	add	r3, r1
 8006d5a:	3324      	adds	r3, #36	; 0x24
 8006d5c:	2201      	movs	r2, #1
 8006d5e:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006d60:	4b54      	ldr	r3, [pc, #336]	; (8006eb4 <USBD_CDC_Init+0x1e8>)
 8006d62:	7819      	ldrb	r1, [r3, #0]
 8006d64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006d68:	2202      	movs	r2, #2
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	f002 fc87 	bl	800967e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006d70:	4b50      	ldr	r3, [pc, #320]	; (8006eb4 <USBD_CDC_Init+0x1e8>)
 8006d72:	781b      	ldrb	r3, [r3, #0]
 8006d74:	f003 020f 	and.w	r2, r3, #15
 8006d78:	6879      	ldr	r1, [r7, #4]
 8006d7a:	4613      	mov	r3, r2
 8006d7c:	009b      	lsls	r3, r3, #2
 8006d7e:	4413      	add	r3, r2
 8006d80:	009b      	lsls	r3, r3, #2
 8006d82:	440b      	add	r3, r1
 8006d84:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006d88:	2201      	movs	r2, #1
 8006d8a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006d8c:	4b4a      	ldr	r3, [pc, #296]	; (8006eb8 <USBD_CDC_Init+0x1ec>)
 8006d8e:	781b      	ldrb	r3, [r3, #0]
 8006d90:	f003 020f 	and.w	r2, r3, #15
 8006d94:	6879      	ldr	r1, [r7, #4]
 8006d96:	4613      	mov	r3, r2
 8006d98:	009b      	lsls	r3, r3, #2
 8006d9a:	4413      	add	r3, r2
 8006d9c:	009b      	lsls	r3, r3, #2
 8006d9e:	440b      	add	r3, r1
 8006da0:	3326      	adds	r3, #38	; 0x26
 8006da2:	2210      	movs	r2, #16
 8006da4:	801a      	strh	r2, [r3, #0]
 8006da6:	e035      	b.n	8006e14 <USBD_CDC_Init+0x148>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006da8:	4b41      	ldr	r3, [pc, #260]	; (8006eb0 <USBD_CDC_Init+0x1e4>)
 8006daa:	7819      	ldrb	r1, [r3, #0]
 8006dac:	2340      	movs	r3, #64	; 0x40
 8006dae:	2202      	movs	r2, #2
 8006db0:	6878      	ldr	r0, [r7, #4]
 8006db2:	f002 fc64 	bl	800967e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006db6:	4b3e      	ldr	r3, [pc, #248]	; (8006eb0 <USBD_CDC_Init+0x1e4>)
 8006db8:	781b      	ldrb	r3, [r3, #0]
 8006dba:	f003 020f 	and.w	r2, r3, #15
 8006dbe:	6879      	ldr	r1, [r7, #4]
 8006dc0:	4613      	mov	r3, r2
 8006dc2:	009b      	lsls	r3, r3, #2
 8006dc4:	4413      	add	r3, r2
 8006dc6:	009b      	lsls	r3, r3, #2
 8006dc8:	440b      	add	r3, r1
 8006dca:	3324      	adds	r3, #36	; 0x24
 8006dcc:	2201      	movs	r2, #1
 8006dce:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006dd0:	4b38      	ldr	r3, [pc, #224]	; (8006eb4 <USBD_CDC_Init+0x1e8>)
 8006dd2:	7819      	ldrb	r1, [r3, #0]
 8006dd4:	2340      	movs	r3, #64	; 0x40
 8006dd6:	2202      	movs	r2, #2
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	f002 fc50 	bl	800967e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006dde:	4b35      	ldr	r3, [pc, #212]	; (8006eb4 <USBD_CDC_Init+0x1e8>)
 8006de0:	781b      	ldrb	r3, [r3, #0]
 8006de2:	f003 020f 	and.w	r2, r3, #15
 8006de6:	6879      	ldr	r1, [r7, #4]
 8006de8:	4613      	mov	r3, r2
 8006dea:	009b      	lsls	r3, r3, #2
 8006dec:	4413      	add	r3, r2
 8006dee:	009b      	lsls	r3, r3, #2
 8006df0:	440b      	add	r3, r1
 8006df2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006df6:	2201      	movs	r2, #1
 8006df8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006dfa:	4b2f      	ldr	r3, [pc, #188]	; (8006eb8 <USBD_CDC_Init+0x1ec>)
 8006dfc:	781b      	ldrb	r3, [r3, #0]
 8006dfe:	f003 020f 	and.w	r2, r3, #15
 8006e02:	6879      	ldr	r1, [r7, #4]
 8006e04:	4613      	mov	r3, r2
 8006e06:	009b      	lsls	r3, r3, #2
 8006e08:	4413      	add	r3, r2
 8006e0a:	009b      	lsls	r3, r3, #2
 8006e0c:	440b      	add	r3, r1
 8006e0e:	3326      	adds	r3, #38	; 0x26
 8006e10:	2210      	movs	r2, #16
 8006e12:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006e14:	4b28      	ldr	r3, [pc, #160]	; (8006eb8 <USBD_CDC_Init+0x1ec>)
 8006e16:	7819      	ldrb	r1, [r3, #0]
 8006e18:	2308      	movs	r3, #8
 8006e1a:	2203      	movs	r2, #3
 8006e1c:	6878      	ldr	r0, [r7, #4]
 8006e1e:	f002 fc2e 	bl	800967e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006e22:	4b25      	ldr	r3, [pc, #148]	; (8006eb8 <USBD_CDC_Init+0x1ec>)
 8006e24:	781b      	ldrb	r3, [r3, #0]
 8006e26:	f003 020f 	and.w	r2, r3, #15
 8006e2a:	6879      	ldr	r1, [r7, #4]
 8006e2c:	4613      	mov	r3, r2
 8006e2e:	009b      	lsls	r3, r3, #2
 8006e30:	4413      	add	r3, r2
 8006e32:	009b      	lsls	r3, r3, #2
 8006e34:	440b      	add	r3, r1
 8006e36:	3324      	adds	r3, #36	; 0x24
 8006e38:	2201      	movs	r2, #1
 8006e3a:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	2200      	movs	r2, #0
 8006e40:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006e4a:	687a      	ldr	r2, [r7, #4]
 8006e4c:	33b0      	adds	r3, #176	; 0xb0
 8006e4e:	009b      	lsls	r3, r3, #2
 8006e50:	4413      	add	r3, r2
 8006e52:	685b      	ldr	r3, [r3, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	2200      	movs	r2, #0
 8006e64:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d101      	bne.n	8006e76 <USBD_CDC_Init+0x1aa>
  {
    return (uint8_t)USBD_EMEM;
 8006e72:	2302      	movs	r3, #2
 8006e74:	e018      	b.n	8006ea8 <USBD_CDC_Init+0x1dc>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	7c1b      	ldrb	r3, [r3, #16]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d10a      	bne.n	8006e94 <USBD_CDC_Init+0x1c8>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006e7e:	4b0d      	ldr	r3, [pc, #52]	; (8006eb4 <USBD_CDC_Init+0x1e8>)
 8006e80:	7819      	ldrb	r1, [r3, #0]
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006e88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006e8c:	6878      	ldr	r0, [r7, #4]
 8006e8e:	f002 fce5 	bl	800985c <USBD_LL_PrepareReceive>
 8006e92:	e008      	b.n	8006ea6 <USBD_CDC_Init+0x1da>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006e94:	4b07      	ldr	r3, [pc, #28]	; (8006eb4 <USBD_CDC_Init+0x1e8>)
 8006e96:	7819      	ldrb	r1, [r3, #0]
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006e9e:	2340      	movs	r3, #64	; 0x40
 8006ea0:	6878      	ldr	r0, [r7, #4]
 8006ea2:	f002 fcdb 	bl	800985c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006ea6:	2300      	movs	r3, #0
}
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	3710      	adds	r7, #16
 8006eac:	46bd      	mov	sp, r7
 8006eae:	bd80      	pop	{r7, pc}
 8006eb0:	200000e3 	.word	0x200000e3
 8006eb4:	200000e4 	.word	0x200000e4
 8006eb8:	200000e5 	.word	0x200000e5

08006ebc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b082      	sub	sp, #8
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
 8006ec4:	460b      	mov	r3, r1
 8006ec6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006ec8:	4b3a      	ldr	r3, [pc, #232]	; (8006fb4 <USBD_CDC_DeInit+0xf8>)
 8006eca:	781b      	ldrb	r3, [r3, #0]
 8006ecc:	4619      	mov	r1, r3
 8006ece:	6878      	ldr	r0, [r7, #4]
 8006ed0:	f002 fbfb 	bl	80096ca <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006ed4:	4b37      	ldr	r3, [pc, #220]	; (8006fb4 <USBD_CDC_DeInit+0xf8>)
 8006ed6:	781b      	ldrb	r3, [r3, #0]
 8006ed8:	f003 020f 	and.w	r2, r3, #15
 8006edc:	6879      	ldr	r1, [r7, #4]
 8006ede:	4613      	mov	r3, r2
 8006ee0:	009b      	lsls	r3, r3, #2
 8006ee2:	4413      	add	r3, r2
 8006ee4:	009b      	lsls	r3, r3, #2
 8006ee6:	440b      	add	r3, r1
 8006ee8:	3324      	adds	r3, #36	; 0x24
 8006eea:	2200      	movs	r2, #0
 8006eec:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006eee:	4b32      	ldr	r3, [pc, #200]	; (8006fb8 <USBD_CDC_DeInit+0xfc>)
 8006ef0:	781b      	ldrb	r3, [r3, #0]
 8006ef2:	4619      	mov	r1, r3
 8006ef4:	6878      	ldr	r0, [r7, #4]
 8006ef6:	f002 fbe8 	bl	80096ca <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006efa:	4b2f      	ldr	r3, [pc, #188]	; (8006fb8 <USBD_CDC_DeInit+0xfc>)
 8006efc:	781b      	ldrb	r3, [r3, #0]
 8006efe:	f003 020f 	and.w	r2, r3, #15
 8006f02:	6879      	ldr	r1, [r7, #4]
 8006f04:	4613      	mov	r3, r2
 8006f06:	009b      	lsls	r3, r3, #2
 8006f08:	4413      	add	r3, r2
 8006f0a:	009b      	lsls	r3, r3, #2
 8006f0c:	440b      	add	r3, r1
 8006f0e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006f12:	2200      	movs	r2, #0
 8006f14:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006f16:	4b29      	ldr	r3, [pc, #164]	; (8006fbc <USBD_CDC_DeInit+0x100>)
 8006f18:	781b      	ldrb	r3, [r3, #0]
 8006f1a:	4619      	mov	r1, r3
 8006f1c:	6878      	ldr	r0, [r7, #4]
 8006f1e:	f002 fbd4 	bl	80096ca <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006f22:	4b26      	ldr	r3, [pc, #152]	; (8006fbc <USBD_CDC_DeInit+0x100>)
 8006f24:	781b      	ldrb	r3, [r3, #0]
 8006f26:	f003 020f 	and.w	r2, r3, #15
 8006f2a:	6879      	ldr	r1, [r7, #4]
 8006f2c:	4613      	mov	r3, r2
 8006f2e:	009b      	lsls	r3, r3, #2
 8006f30:	4413      	add	r3, r2
 8006f32:	009b      	lsls	r3, r3, #2
 8006f34:	440b      	add	r3, r1
 8006f36:	3324      	adds	r3, #36	; 0x24
 8006f38:	2200      	movs	r2, #0
 8006f3a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006f3c:	4b1f      	ldr	r3, [pc, #124]	; (8006fbc <USBD_CDC_DeInit+0x100>)
 8006f3e:	781b      	ldrb	r3, [r3, #0]
 8006f40:	f003 020f 	and.w	r2, r3, #15
 8006f44:	6879      	ldr	r1, [r7, #4]
 8006f46:	4613      	mov	r3, r2
 8006f48:	009b      	lsls	r3, r3, #2
 8006f4a:	4413      	add	r3, r2
 8006f4c:	009b      	lsls	r3, r3, #2
 8006f4e:	440b      	add	r3, r1
 8006f50:	3326      	adds	r3, #38	; 0x26
 8006f52:	2200      	movs	r2, #0
 8006f54:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	32b0      	adds	r2, #176	; 0xb0
 8006f60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d01f      	beq.n	8006fa8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006f6e:	687a      	ldr	r2, [r7, #4]
 8006f70:	33b0      	adds	r3, #176	; 0xb0
 8006f72:	009b      	lsls	r3, r3, #2
 8006f74:	4413      	add	r3, r2
 8006f76:	685b      	ldr	r3, [r3, #4]
 8006f78:	685b      	ldr	r3, [r3, #4]
 8006f7a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	32b0      	adds	r2, #176	; 0xb0
 8006f86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	f002 fd58 	bl	8009a40 <free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	32b0      	adds	r2, #176	; 0xb0
 8006f9a:	2100      	movs	r1, #0
 8006f9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006fa8:	2300      	movs	r3, #0
}
 8006faa:	4618      	mov	r0, r3
 8006fac:	3708      	adds	r7, #8
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	bd80      	pop	{r7, pc}
 8006fb2:	bf00      	nop
 8006fb4:	200000e3 	.word	0x200000e3
 8006fb8:	200000e4 	.word	0x200000e4
 8006fbc:	200000e5 	.word	0x200000e5

08006fc0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b086      	sub	sp, #24
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
 8006fc8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	32b0      	adds	r2, #176	; 0xb0
 8006fd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fd8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006fda:	2300      	movs	r3, #0
 8006fdc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006fde:	2300      	movs	r3, #0
 8006fe0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006fe6:	693b      	ldr	r3, [r7, #16]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d101      	bne.n	8006ff0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006fec:	2303      	movs	r3, #3
 8006fee:	e0bf      	b.n	8007170 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	781b      	ldrb	r3, [r3, #0]
 8006ff4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d050      	beq.n	800709e <USBD_CDC_Setup+0xde>
 8006ffc:	2b20      	cmp	r3, #32
 8006ffe:	f040 80af 	bne.w	8007160 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	88db      	ldrh	r3, [r3, #6]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d03a      	beq.n	8007080 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	781b      	ldrb	r3, [r3, #0]
 800700e:	b25b      	sxtb	r3, r3
 8007010:	2b00      	cmp	r3, #0
 8007012:	da1b      	bge.n	800704c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800701a:	687a      	ldr	r2, [r7, #4]
 800701c:	33b0      	adds	r3, #176	; 0xb0
 800701e:	009b      	lsls	r3, r3, #2
 8007020:	4413      	add	r3, r2
 8007022:	685b      	ldr	r3, [r3, #4]
 8007024:	689b      	ldr	r3, [r3, #8]
 8007026:	683a      	ldr	r2, [r7, #0]
 8007028:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800702a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800702c:	683a      	ldr	r2, [r7, #0]
 800702e:	88d2      	ldrh	r2, [r2, #6]
 8007030:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	88db      	ldrh	r3, [r3, #6]
 8007036:	2b07      	cmp	r3, #7
 8007038:	bf28      	it	cs
 800703a:	2307      	movcs	r3, #7
 800703c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800703e:	693b      	ldr	r3, [r7, #16]
 8007040:	89fa      	ldrh	r2, [r7, #14]
 8007042:	4619      	mov	r1, r3
 8007044:	6878      	ldr	r0, [r7, #4]
 8007046:	f001 fdad 	bl	8008ba4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800704a:	e090      	b.n	800716e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	785a      	ldrb	r2, [r3, #1]
 8007050:	693b      	ldr	r3, [r7, #16]
 8007052:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	88db      	ldrh	r3, [r3, #6]
 800705a:	2b3f      	cmp	r3, #63	; 0x3f
 800705c:	d803      	bhi.n	8007066 <USBD_CDC_Setup+0xa6>
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	88db      	ldrh	r3, [r3, #6]
 8007062:	b2da      	uxtb	r2, r3
 8007064:	e000      	b.n	8007068 <USBD_CDC_Setup+0xa8>
 8007066:	2240      	movs	r2, #64	; 0x40
 8007068:	693b      	ldr	r3, [r7, #16]
 800706a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800706e:	6939      	ldr	r1, [r7, #16]
 8007070:	693b      	ldr	r3, [r7, #16]
 8007072:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8007076:	461a      	mov	r2, r3
 8007078:	6878      	ldr	r0, [r7, #4]
 800707a:	f001 fdbf 	bl	8008bfc <USBD_CtlPrepareRx>
      break;
 800707e:	e076      	b.n	800716e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007086:	687a      	ldr	r2, [r7, #4]
 8007088:	33b0      	adds	r3, #176	; 0xb0
 800708a:	009b      	lsls	r3, r3, #2
 800708c:	4413      	add	r3, r2
 800708e:	685b      	ldr	r3, [r3, #4]
 8007090:	689b      	ldr	r3, [r3, #8]
 8007092:	683a      	ldr	r2, [r7, #0]
 8007094:	7850      	ldrb	r0, [r2, #1]
 8007096:	2200      	movs	r2, #0
 8007098:	6839      	ldr	r1, [r7, #0]
 800709a:	4798      	blx	r3
      break;
 800709c:	e067      	b.n	800716e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	785b      	ldrb	r3, [r3, #1]
 80070a2:	2b0b      	cmp	r3, #11
 80070a4:	d851      	bhi.n	800714a <USBD_CDC_Setup+0x18a>
 80070a6:	a201      	add	r2, pc, #4	; (adr r2, 80070ac <USBD_CDC_Setup+0xec>)
 80070a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070ac:	080070dd 	.word	0x080070dd
 80070b0:	08007159 	.word	0x08007159
 80070b4:	0800714b 	.word	0x0800714b
 80070b8:	0800714b 	.word	0x0800714b
 80070bc:	0800714b 	.word	0x0800714b
 80070c0:	0800714b 	.word	0x0800714b
 80070c4:	0800714b 	.word	0x0800714b
 80070c8:	0800714b 	.word	0x0800714b
 80070cc:	0800714b 	.word	0x0800714b
 80070d0:	0800714b 	.word	0x0800714b
 80070d4:	08007107 	.word	0x08007107
 80070d8:	08007131 	.word	0x08007131
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070e2:	b2db      	uxtb	r3, r3
 80070e4:	2b03      	cmp	r3, #3
 80070e6:	d107      	bne.n	80070f8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80070e8:	f107 030a 	add.w	r3, r7, #10
 80070ec:	2202      	movs	r2, #2
 80070ee:	4619      	mov	r1, r3
 80070f0:	6878      	ldr	r0, [r7, #4]
 80070f2:	f001 fd57 	bl	8008ba4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80070f6:	e032      	b.n	800715e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80070f8:	6839      	ldr	r1, [r7, #0]
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	f001 fce1 	bl	8008ac2 <USBD_CtlError>
            ret = USBD_FAIL;
 8007100:	2303      	movs	r3, #3
 8007102:	75fb      	strb	r3, [r7, #23]
          break;
 8007104:	e02b      	b.n	800715e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800710c:	b2db      	uxtb	r3, r3
 800710e:	2b03      	cmp	r3, #3
 8007110:	d107      	bne.n	8007122 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007112:	f107 030d 	add.w	r3, r7, #13
 8007116:	2201      	movs	r2, #1
 8007118:	4619      	mov	r1, r3
 800711a:	6878      	ldr	r0, [r7, #4]
 800711c:	f001 fd42 	bl	8008ba4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007120:	e01d      	b.n	800715e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007122:	6839      	ldr	r1, [r7, #0]
 8007124:	6878      	ldr	r0, [r7, #4]
 8007126:	f001 fccc 	bl	8008ac2 <USBD_CtlError>
            ret = USBD_FAIL;
 800712a:	2303      	movs	r3, #3
 800712c:	75fb      	strb	r3, [r7, #23]
          break;
 800712e:	e016      	b.n	800715e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007136:	b2db      	uxtb	r3, r3
 8007138:	2b03      	cmp	r3, #3
 800713a:	d00f      	beq.n	800715c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800713c:	6839      	ldr	r1, [r7, #0]
 800713e:	6878      	ldr	r0, [r7, #4]
 8007140:	f001 fcbf 	bl	8008ac2 <USBD_CtlError>
            ret = USBD_FAIL;
 8007144:	2303      	movs	r3, #3
 8007146:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007148:	e008      	b.n	800715c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800714a:	6839      	ldr	r1, [r7, #0]
 800714c:	6878      	ldr	r0, [r7, #4]
 800714e:	f001 fcb8 	bl	8008ac2 <USBD_CtlError>
          ret = USBD_FAIL;
 8007152:	2303      	movs	r3, #3
 8007154:	75fb      	strb	r3, [r7, #23]
          break;
 8007156:	e002      	b.n	800715e <USBD_CDC_Setup+0x19e>
          break;
 8007158:	bf00      	nop
 800715a:	e008      	b.n	800716e <USBD_CDC_Setup+0x1ae>
          break;
 800715c:	bf00      	nop
      }
      break;
 800715e:	e006      	b.n	800716e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007160:	6839      	ldr	r1, [r7, #0]
 8007162:	6878      	ldr	r0, [r7, #4]
 8007164:	f001 fcad 	bl	8008ac2 <USBD_CtlError>
      ret = USBD_FAIL;
 8007168:	2303      	movs	r3, #3
 800716a:	75fb      	strb	r3, [r7, #23]
      break;
 800716c:	bf00      	nop
  }

  return (uint8_t)ret;
 800716e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007170:	4618      	mov	r0, r3
 8007172:	3718      	adds	r7, #24
 8007174:	46bd      	mov	sp, r7
 8007176:	bd80      	pop	{r7, pc}

08007178 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b084      	sub	sp, #16
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
 8007180:	460b      	mov	r3, r1
 8007182:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800718a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	32b0      	adds	r2, #176	; 0xb0
 8007196:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d101      	bne.n	80071a2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800719e:	2303      	movs	r3, #3
 80071a0:	e065      	b.n	800726e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	32b0      	adds	r2, #176	; 0xb0
 80071ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071b0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80071b2:	78fb      	ldrb	r3, [r7, #3]
 80071b4:	f003 020f 	and.w	r2, r3, #15
 80071b8:	6879      	ldr	r1, [r7, #4]
 80071ba:	4613      	mov	r3, r2
 80071bc:	009b      	lsls	r3, r3, #2
 80071be:	4413      	add	r3, r2
 80071c0:	009b      	lsls	r3, r3, #2
 80071c2:	440b      	add	r3, r1
 80071c4:	3318      	adds	r3, #24
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d02f      	beq.n	800722c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80071cc:	78fb      	ldrb	r3, [r7, #3]
 80071ce:	f003 020f 	and.w	r2, r3, #15
 80071d2:	6879      	ldr	r1, [r7, #4]
 80071d4:	4613      	mov	r3, r2
 80071d6:	009b      	lsls	r3, r3, #2
 80071d8:	4413      	add	r3, r2
 80071da:	009b      	lsls	r3, r3, #2
 80071dc:	440b      	add	r3, r1
 80071de:	3318      	adds	r3, #24
 80071e0:	681a      	ldr	r2, [r3, #0]
 80071e2:	78fb      	ldrb	r3, [r7, #3]
 80071e4:	f003 010f 	and.w	r1, r3, #15
 80071e8:	68f8      	ldr	r0, [r7, #12]
 80071ea:	460b      	mov	r3, r1
 80071ec:	00db      	lsls	r3, r3, #3
 80071ee:	440b      	add	r3, r1
 80071f0:	009b      	lsls	r3, r3, #2
 80071f2:	4403      	add	r3, r0
 80071f4:	3348      	adds	r3, #72	; 0x48
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	fbb2 f1f3 	udiv	r1, r2, r3
 80071fc:	fb01 f303 	mul.w	r3, r1, r3
 8007200:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8007202:	2b00      	cmp	r3, #0
 8007204:	d112      	bne.n	800722c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8007206:	78fb      	ldrb	r3, [r7, #3]
 8007208:	f003 020f 	and.w	r2, r3, #15
 800720c:	6879      	ldr	r1, [r7, #4]
 800720e:	4613      	mov	r3, r2
 8007210:	009b      	lsls	r3, r3, #2
 8007212:	4413      	add	r3, r2
 8007214:	009b      	lsls	r3, r3, #2
 8007216:	440b      	add	r3, r1
 8007218:	3318      	adds	r3, #24
 800721a:	2200      	movs	r2, #0
 800721c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800721e:	78f9      	ldrb	r1, [r7, #3]
 8007220:	2300      	movs	r3, #0
 8007222:	2200      	movs	r2, #0
 8007224:	6878      	ldr	r0, [r7, #4]
 8007226:	f002 faf8 	bl	800981a <USBD_LL_Transmit>
 800722a:	e01f      	b.n	800726c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800722c:	68bb      	ldr	r3, [r7, #8]
 800722e:	2200      	movs	r2, #0
 8007230:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800723a:	687a      	ldr	r2, [r7, #4]
 800723c:	33b0      	adds	r3, #176	; 0xb0
 800723e:	009b      	lsls	r3, r3, #2
 8007240:	4413      	add	r3, r2
 8007242:	685b      	ldr	r3, [r3, #4]
 8007244:	691b      	ldr	r3, [r3, #16]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d010      	beq.n	800726c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007250:	687a      	ldr	r2, [r7, #4]
 8007252:	33b0      	adds	r3, #176	; 0xb0
 8007254:	009b      	lsls	r3, r3, #2
 8007256:	4413      	add	r3, r2
 8007258:	685b      	ldr	r3, [r3, #4]
 800725a:	691b      	ldr	r3, [r3, #16]
 800725c:	68ba      	ldr	r2, [r7, #8]
 800725e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8007262:	68ba      	ldr	r2, [r7, #8]
 8007264:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007268:	78fa      	ldrb	r2, [r7, #3]
 800726a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800726c:	2300      	movs	r3, #0
}
 800726e:	4618      	mov	r0, r3
 8007270:	3710      	adds	r7, #16
 8007272:	46bd      	mov	sp, r7
 8007274:	bd80      	pop	{r7, pc}

08007276 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007276:	b580      	push	{r7, lr}
 8007278:	b084      	sub	sp, #16
 800727a:	af00      	add	r7, sp, #0
 800727c:	6078      	str	r0, [r7, #4]
 800727e:	460b      	mov	r3, r1
 8007280:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	32b0      	adds	r2, #176	; 0xb0
 800728c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007290:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	32b0      	adds	r2, #176	; 0xb0
 800729c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d101      	bne.n	80072a8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80072a4:	2303      	movs	r3, #3
 80072a6:	e01a      	b.n	80072de <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80072a8:	78fb      	ldrb	r3, [r7, #3]
 80072aa:	4619      	mov	r1, r3
 80072ac:	6878      	ldr	r0, [r7, #4]
 80072ae:	f002 faf6 	bl	800989e <USBD_LL_GetRxDataSize>
 80072b2:	4602      	mov	r2, r0
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80072c0:	687a      	ldr	r2, [r7, #4]
 80072c2:	33b0      	adds	r3, #176	; 0xb0
 80072c4:	009b      	lsls	r3, r3, #2
 80072c6:	4413      	add	r3, r2
 80072c8:	685b      	ldr	r3, [r3, #4]
 80072ca:	68db      	ldr	r3, [r3, #12]
 80072cc:	68fa      	ldr	r2, [r7, #12]
 80072ce:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80072d2:	68fa      	ldr	r2, [r7, #12]
 80072d4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80072d8:	4611      	mov	r1, r2
 80072da:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80072dc:	2300      	movs	r3, #0
}
 80072de:	4618      	mov	r0, r3
 80072e0:	3710      	adds	r7, #16
 80072e2:	46bd      	mov	sp, r7
 80072e4:	bd80      	pop	{r7, pc}

080072e6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80072e6:	b580      	push	{r7, lr}
 80072e8:	b084      	sub	sp, #16
 80072ea:	af00      	add	r7, sp, #0
 80072ec:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	32b0      	adds	r2, #176	; 0xb0
 80072f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072fc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d101      	bne.n	8007308 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007304:	2303      	movs	r3, #3
 8007306:	e025      	b.n	8007354 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800730e:	687a      	ldr	r2, [r7, #4]
 8007310:	33b0      	adds	r3, #176	; 0xb0
 8007312:	009b      	lsls	r3, r3, #2
 8007314:	4413      	add	r3, r2
 8007316:	685b      	ldr	r3, [r3, #4]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d01a      	beq.n	8007352 <USBD_CDC_EP0_RxReady+0x6c>
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007322:	2bff      	cmp	r3, #255	; 0xff
 8007324:	d015      	beq.n	8007352 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800732c:	687a      	ldr	r2, [r7, #4]
 800732e:	33b0      	adds	r3, #176	; 0xb0
 8007330:	009b      	lsls	r3, r3, #2
 8007332:	4413      	add	r3, r2
 8007334:	685b      	ldr	r3, [r3, #4]
 8007336:	689b      	ldr	r3, [r3, #8]
 8007338:	68fa      	ldr	r2, [r7, #12]
 800733a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800733e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007340:	68fa      	ldr	r2, [r7, #12]
 8007342:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007346:	b292      	uxth	r2, r2
 8007348:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	22ff      	movs	r2, #255	; 0xff
 800734e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8007352:	2300      	movs	r3, #0
}
 8007354:	4618      	mov	r0, r3
 8007356:	3710      	adds	r7, #16
 8007358:	46bd      	mov	sp, r7
 800735a:	bd80      	pop	{r7, pc}

0800735c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b086      	sub	sp, #24
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007364:	2182      	movs	r1, #130	; 0x82
 8007366:	4818      	ldr	r0, [pc, #96]	; (80073c8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007368:	f000 fd49 	bl	8007dfe <USBD_GetEpDesc>
 800736c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800736e:	2101      	movs	r1, #1
 8007370:	4815      	ldr	r0, [pc, #84]	; (80073c8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007372:	f000 fd44 	bl	8007dfe <USBD_GetEpDesc>
 8007376:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007378:	2181      	movs	r1, #129	; 0x81
 800737a:	4813      	ldr	r0, [pc, #76]	; (80073c8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800737c:	f000 fd3f 	bl	8007dfe <USBD_GetEpDesc>
 8007380:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007382:	697b      	ldr	r3, [r7, #20]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d002      	beq.n	800738e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007388:	697b      	ldr	r3, [r7, #20]
 800738a:	2210      	movs	r2, #16
 800738c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800738e:	693b      	ldr	r3, [r7, #16]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d006      	beq.n	80073a2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007394:	693b      	ldr	r3, [r7, #16]
 8007396:	2200      	movs	r2, #0
 8007398:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800739c:	711a      	strb	r2, [r3, #4]
 800739e:	2200      	movs	r2, #0
 80073a0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d006      	beq.n	80073b6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	2200      	movs	r2, #0
 80073ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80073b0:	711a      	strb	r2, [r3, #4]
 80073b2:	2200      	movs	r2, #0
 80073b4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2243      	movs	r2, #67	; 0x43
 80073ba:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80073bc:	4b02      	ldr	r3, [pc, #8]	; (80073c8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80073be:	4618      	mov	r0, r3
 80073c0:	3718      	adds	r7, #24
 80073c2:	46bd      	mov	sp, r7
 80073c4:	bd80      	pop	{r7, pc}
 80073c6:	bf00      	nop
 80073c8:	200000a0 	.word	0x200000a0

080073cc <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b086      	sub	sp, #24
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80073d4:	2182      	movs	r1, #130	; 0x82
 80073d6:	4818      	ldr	r0, [pc, #96]	; (8007438 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80073d8:	f000 fd11 	bl	8007dfe <USBD_GetEpDesc>
 80073dc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80073de:	2101      	movs	r1, #1
 80073e0:	4815      	ldr	r0, [pc, #84]	; (8007438 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80073e2:	f000 fd0c 	bl	8007dfe <USBD_GetEpDesc>
 80073e6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80073e8:	2181      	movs	r1, #129	; 0x81
 80073ea:	4813      	ldr	r0, [pc, #76]	; (8007438 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80073ec:	f000 fd07 	bl	8007dfe <USBD_GetEpDesc>
 80073f0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80073f2:	697b      	ldr	r3, [r7, #20]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d002      	beq.n	80073fe <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80073f8:	697b      	ldr	r3, [r7, #20]
 80073fa:	2210      	movs	r2, #16
 80073fc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80073fe:	693b      	ldr	r3, [r7, #16]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d006      	beq.n	8007412 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007404:	693b      	ldr	r3, [r7, #16]
 8007406:	2200      	movs	r2, #0
 8007408:	711a      	strb	r2, [r3, #4]
 800740a:	2200      	movs	r2, #0
 800740c:	f042 0202 	orr.w	r2, r2, #2
 8007410:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d006      	beq.n	8007426 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	2200      	movs	r2, #0
 800741c:	711a      	strb	r2, [r3, #4]
 800741e:	2200      	movs	r2, #0
 8007420:	f042 0202 	orr.w	r2, r2, #2
 8007424:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	2243      	movs	r2, #67	; 0x43
 800742a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800742c:	4b02      	ldr	r3, [pc, #8]	; (8007438 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800742e:	4618      	mov	r0, r3
 8007430:	3718      	adds	r7, #24
 8007432:	46bd      	mov	sp, r7
 8007434:	bd80      	pop	{r7, pc}
 8007436:	bf00      	nop
 8007438:	200000a0 	.word	0x200000a0

0800743c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b086      	sub	sp, #24
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007444:	2182      	movs	r1, #130	; 0x82
 8007446:	4818      	ldr	r0, [pc, #96]	; (80074a8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007448:	f000 fcd9 	bl	8007dfe <USBD_GetEpDesc>
 800744c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800744e:	2101      	movs	r1, #1
 8007450:	4815      	ldr	r0, [pc, #84]	; (80074a8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007452:	f000 fcd4 	bl	8007dfe <USBD_GetEpDesc>
 8007456:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007458:	2181      	movs	r1, #129	; 0x81
 800745a:	4813      	ldr	r0, [pc, #76]	; (80074a8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800745c:	f000 fccf 	bl	8007dfe <USBD_GetEpDesc>
 8007460:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8007462:	697b      	ldr	r3, [r7, #20]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d002      	beq.n	800746e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007468:	697b      	ldr	r3, [r7, #20]
 800746a:	2210      	movs	r2, #16
 800746c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800746e:	693b      	ldr	r3, [r7, #16]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d006      	beq.n	8007482 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007474:	693b      	ldr	r3, [r7, #16]
 8007476:	2200      	movs	r2, #0
 8007478:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800747c:	711a      	strb	r2, [r3, #4]
 800747e:	2200      	movs	r2, #0
 8007480:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d006      	beq.n	8007496 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	2200      	movs	r2, #0
 800748c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007490:	711a      	strb	r2, [r3, #4]
 8007492:	2200      	movs	r2, #0
 8007494:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2243      	movs	r2, #67	; 0x43
 800749a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800749c:	4b02      	ldr	r3, [pc, #8]	; (80074a8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800749e:	4618      	mov	r0, r3
 80074a0:	3718      	adds	r7, #24
 80074a2:	46bd      	mov	sp, r7
 80074a4:	bd80      	pop	{r7, pc}
 80074a6:	bf00      	nop
 80074a8:	200000a0 	.word	0x200000a0

080074ac <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80074ac:	b480      	push	{r7}
 80074ae:	b083      	sub	sp, #12
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	220a      	movs	r2, #10
 80074b8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80074ba:	4b03      	ldr	r3, [pc, #12]	; (80074c8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80074bc:	4618      	mov	r0, r3
 80074be:	370c      	adds	r7, #12
 80074c0:	46bd      	mov	sp, r7
 80074c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c6:	4770      	bx	lr
 80074c8:	2000005c 	.word	0x2000005c

080074cc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80074cc:	b480      	push	{r7}
 80074ce:	b083      	sub	sp, #12
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
 80074d4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d101      	bne.n	80074e0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80074dc:	2303      	movs	r3, #3
 80074de:	e009      	b.n	80074f4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80074e6:	687a      	ldr	r2, [r7, #4]
 80074e8:	33b0      	adds	r3, #176	; 0xb0
 80074ea:	009b      	lsls	r3, r3, #2
 80074ec:	4413      	add	r3, r2
 80074ee:	683a      	ldr	r2, [r7, #0]
 80074f0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80074f2:	2300      	movs	r3, #0
}
 80074f4:	4618      	mov	r0, r3
 80074f6:	370c      	adds	r7, #12
 80074f8:	46bd      	mov	sp, r7
 80074fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fe:	4770      	bx	lr

08007500 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007500:	b480      	push	{r7}
 8007502:	b087      	sub	sp, #28
 8007504:	af00      	add	r7, sp, #0
 8007506:	60f8      	str	r0, [r7, #12]
 8007508:	60b9      	str	r1, [r7, #8]
 800750a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	32b0      	adds	r2, #176	; 0xb0
 8007516:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800751a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800751c:	697b      	ldr	r3, [r7, #20]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d101      	bne.n	8007526 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8007522:	2303      	movs	r3, #3
 8007524:	e008      	b.n	8007538 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8007526:	697b      	ldr	r3, [r7, #20]
 8007528:	68ba      	ldr	r2, [r7, #8]
 800752a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800752e:	697b      	ldr	r3, [r7, #20]
 8007530:	687a      	ldr	r2, [r7, #4]
 8007532:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007536:	2300      	movs	r3, #0
}
 8007538:	4618      	mov	r0, r3
 800753a:	371c      	adds	r7, #28
 800753c:	46bd      	mov	sp, r7
 800753e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007542:	4770      	bx	lr

08007544 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007544:	b480      	push	{r7}
 8007546:	b085      	sub	sp, #20
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
 800754c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	32b0      	adds	r2, #176	; 0xb0
 8007558:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800755c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d101      	bne.n	8007568 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007564:	2303      	movs	r3, #3
 8007566:	e004      	b.n	8007572 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	683a      	ldr	r2, [r7, #0]
 800756c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8007570:	2300      	movs	r3, #0
}
 8007572:	4618      	mov	r0, r3
 8007574:	3714      	adds	r7, #20
 8007576:	46bd      	mov	sp, r7
 8007578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757c:	4770      	bx	lr
	...

08007580 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b084      	sub	sp, #16
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	32b0      	adds	r2, #176	; 0xb0
 8007592:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007596:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8007598:	2301      	movs	r3, #1
 800759a:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800759c:	68bb      	ldr	r3, [r7, #8]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d101      	bne.n	80075a6 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80075a2:	2303      	movs	r3, #3
 80075a4:	e025      	b.n	80075f2 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d11f      	bne.n	80075f0 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	2201      	movs	r2, #1
 80075b4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80075b8:	4b10      	ldr	r3, [pc, #64]	; (80075fc <USBD_CDC_TransmitPacket+0x7c>)
 80075ba:	781b      	ldrb	r3, [r3, #0]
 80075bc:	f003 020f 	and.w	r2, r3, #15
 80075c0:	68bb      	ldr	r3, [r7, #8]
 80075c2:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 80075c6:	6878      	ldr	r0, [r7, #4]
 80075c8:	4613      	mov	r3, r2
 80075ca:	009b      	lsls	r3, r3, #2
 80075cc:	4413      	add	r3, r2
 80075ce:	009b      	lsls	r3, r3, #2
 80075d0:	4403      	add	r3, r0
 80075d2:	3318      	adds	r3, #24
 80075d4:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80075d6:	4b09      	ldr	r3, [pc, #36]	; (80075fc <USBD_CDC_TransmitPacket+0x7c>)
 80075d8:	7819      	ldrb	r1, [r3, #0]
 80075da:	68bb      	ldr	r3, [r7, #8]
 80075dc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80075e0:	68bb      	ldr	r3, [r7, #8]
 80075e2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80075e6:	6878      	ldr	r0, [r7, #4]
 80075e8:	f002 f917 	bl	800981a <USBD_LL_Transmit>

    ret = USBD_OK;
 80075ec:	2300      	movs	r3, #0
 80075ee:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80075f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80075f2:	4618      	mov	r0, r3
 80075f4:	3710      	adds	r7, #16
 80075f6:	46bd      	mov	sp, r7
 80075f8:	bd80      	pop	{r7, pc}
 80075fa:	bf00      	nop
 80075fc:	200000e3 	.word	0x200000e3

08007600 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007600:	b580      	push	{r7, lr}
 8007602:	b084      	sub	sp, #16
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	32b0      	adds	r2, #176	; 0xb0
 8007612:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007616:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	32b0      	adds	r2, #176	; 0xb0
 8007622:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d101      	bne.n	800762e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800762a:	2303      	movs	r3, #3
 800762c:	e018      	b.n	8007660 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	7c1b      	ldrb	r3, [r3, #16]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d10a      	bne.n	800764c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007636:	4b0c      	ldr	r3, [pc, #48]	; (8007668 <USBD_CDC_ReceivePacket+0x68>)
 8007638:	7819      	ldrb	r1, [r3, #0]
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007640:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007644:	6878      	ldr	r0, [r7, #4]
 8007646:	f002 f909 	bl	800985c <USBD_LL_PrepareReceive>
 800764a:	e008      	b.n	800765e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800764c:	4b06      	ldr	r3, [pc, #24]	; (8007668 <USBD_CDC_ReceivePacket+0x68>)
 800764e:	7819      	ldrb	r1, [r3, #0]
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007656:	2340      	movs	r3, #64	; 0x40
 8007658:	6878      	ldr	r0, [r7, #4]
 800765a:	f002 f8ff 	bl	800985c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800765e:	2300      	movs	r3, #0
}
 8007660:	4618      	mov	r0, r3
 8007662:	3710      	adds	r7, #16
 8007664:	46bd      	mov	sp, r7
 8007666:	bd80      	pop	{r7, pc}
 8007668:	200000e4 	.word	0x200000e4

0800766c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b086      	sub	sp, #24
 8007670:	af00      	add	r7, sp, #0
 8007672:	60f8      	str	r0, [r7, #12]
 8007674:	60b9      	str	r1, [r7, #8]
 8007676:	4613      	mov	r3, r2
 8007678:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d101      	bne.n	8007684 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007680:	2303      	movs	r3, #3
 8007682:	e01f      	b.n	80076c4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	2200      	movs	r2, #0
 8007688:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	2200      	movs	r2, #0
 8007690:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	2200      	movs	r2, #0
 8007698:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d003      	beq.n	80076aa <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	68ba      	ldr	r2, [r7, #8]
 80076a6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	2201      	movs	r2, #1
 80076ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	79fa      	ldrb	r2, [r7, #7]
 80076b6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80076b8:	68f8      	ldr	r0, [r7, #12]
 80076ba:	f001 ff79 	bl	80095b0 <USBD_LL_Init>
 80076be:	4603      	mov	r3, r0
 80076c0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80076c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80076c4:	4618      	mov	r0, r3
 80076c6:	3718      	adds	r7, #24
 80076c8:	46bd      	mov	sp, r7
 80076ca:	bd80      	pop	{r7, pc}

080076cc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b084      	sub	sp, #16
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
 80076d4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80076d6:	2300      	movs	r3, #0
 80076d8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d101      	bne.n	80076e4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80076e0:	2303      	movs	r3, #3
 80076e2:	e025      	b.n	8007730 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	683a      	ldr	r2, [r7, #0]
 80076e8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	32ae      	adds	r2, #174	; 0xae
 80076f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d00f      	beq.n	8007720 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	32ae      	adds	r2, #174	; 0xae
 800770a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800770e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007710:	f107 020e 	add.w	r2, r7, #14
 8007714:	4610      	mov	r0, r2
 8007716:	4798      	blx	r3
 8007718:	4602      	mov	r2, r0
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8007726:	1c5a      	adds	r2, r3, #1
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800772e:	2300      	movs	r3, #0
}
 8007730:	4618      	mov	r0, r3
 8007732:	3710      	adds	r7, #16
 8007734:	46bd      	mov	sp, r7
 8007736:	bd80      	pop	{r7, pc}

08007738 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b082      	sub	sp, #8
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007740:	6878      	ldr	r0, [r7, #4]
 8007742:	f001 ff81 	bl	8009648 <USBD_LL_Start>
 8007746:	4603      	mov	r3, r0
}
 8007748:	4618      	mov	r0, r3
 800774a:	3708      	adds	r7, #8
 800774c:	46bd      	mov	sp, r7
 800774e:	bd80      	pop	{r7, pc}

08007750 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007750:	b480      	push	{r7}
 8007752:	b083      	sub	sp, #12
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007758:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800775a:	4618      	mov	r0, r3
 800775c:	370c      	adds	r7, #12
 800775e:	46bd      	mov	sp, r7
 8007760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007764:	4770      	bx	lr

08007766 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007766:	b580      	push	{r7, lr}
 8007768:	b084      	sub	sp, #16
 800776a:	af00      	add	r7, sp, #0
 800776c:	6078      	str	r0, [r7, #4]
 800776e:	460b      	mov	r3, r1
 8007770:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007772:	2300      	movs	r3, #0
 8007774:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800777c:	2b00      	cmp	r3, #0
 800777e:	d009      	beq.n	8007794 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	78fa      	ldrb	r2, [r7, #3]
 800778a:	4611      	mov	r1, r2
 800778c:	6878      	ldr	r0, [r7, #4]
 800778e:	4798      	blx	r3
 8007790:	4603      	mov	r3, r0
 8007792:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007794:	7bfb      	ldrb	r3, [r7, #15]
}
 8007796:	4618      	mov	r0, r3
 8007798:	3710      	adds	r7, #16
 800779a:	46bd      	mov	sp, r7
 800779c:	bd80      	pop	{r7, pc}

0800779e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800779e:	b580      	push	{r7, lr}
 80077a0:	b084      	sub	sp, #16
 80077a2:	af00      	add	r7, sp, #0
 80077a4:	6078      	str	r0, [r7, #4]
 80077a6:	460b      	mov	r3, r1
 80077a8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80077aa:	2300      	movs	r3, #0
 80077ac:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077b4:	685b      	ldr	r3, [r3, #4]
 80077b6:	78fa      	ldrb	r2, [r7, #3]
 80077b8:	4611      	mov	r1, r2
 80077ba:	6878      	ldr	r0, [r7, #4]
 80077bc:	4798      	blx	r3
 80077be:	4603      	mov	r3, r0
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d001      	beq.n	80077c8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80077c4:	2303      	movs	r3, #3
 80077c6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80077c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80077ca:	4618      	mov	r0, r3
 80077cc:	3710      	adds	r7, #16
 80077ce:	46bd      	mov	sp, r7
 80077d0:	bd80      	pop	{r7, pc}

080077d2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80077d2:	b580      	push	{r7, lr}
 80077d4:	b084      	sub	sp, #16
 80077d6:	af00      	add	r7, sp, #0
 80077d8:	6078      	str	r0, [r7, #4]
 80077da:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80077e2:	6839      	ldr	r1, [r7, #0]
 80077e4:	4618      	mov	r0, r3
 80077e6:	f001 f932 	bl	8008a4e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2201      	movs	r2, #1
 80077ee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80077f8:	461a      	mov	r2, r3
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007806:	f003 031f 	and.w	r3, r3, #31
 800780a:	2b02      	cmp	r3, #2
 800780c:	d01a      	beq.n	8007844 <USBD_LL_SetupStage+0x72>
 800780e:	2b02      	cmp	r3, #2
 8007810:	d822      	bhi.n	8007858 <USBD_LL_SetupStage+0x86>
 8007812:	2b00      	cmp	r3, #0
 8007814:	d002      	beq.n	800781c <USBD_LL_SetupStage+0x4a>
 8007816:	2b01      	cmp	r3, #1
 8007818:	d00a      	beq.n	8007830 <USBD_LL_SetupStage+0x5e>
 800781a:	e01d      	b.n	8007858 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007822:	4619      	mov	r1, r3
 8007824:	6878      	ldr	r0, [r7, #4]
 8007826:	f000 fb5f 	bl	8007ee8 <USBD_StdDevReq>
 800782a:	4603      	mov	r3, r0
 800782c:	73fb      	strb	r3, [r7, #15]
      break;
 800782e:	e020      	b.n	8007872 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007836:	4619      	mov	r1, r3
 8007838:	6878      	ldr	r0, [r7, #4]
 800783a:	f000 fbc7 	bl	8007fcc <USBD_StdItfReq>
 800783e:	4603      	mov	r3, r0
 8007840:	73fb      	strb	r3, [r7, #15]
      break;
 8007842:	e016      	b.n	8007872 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800784a:	4619      	mov	r1, r3
 800784c:	6878      	ldr	r0, [r7, #4]
 800784e:	f000 fc29 	bl	80080a4 <USBD_StdEPReq>
 8007852:	4603      	mov	r3, r0
 8007854:	73fb      	strb	r3, [r7, #15]
      break;
 8007856:	e00c      	b.n	8007872 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800785e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007862:	b2db      	uxtb	r3, r3
 8007864:	4619      	mov	r1, r3
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f001 ff4e 	bl	8009708 <USBD_LL_StallEP>
 800786c:	4603      	mov	r3, r0
 800786e:	73fb      	strb	r3, [r7, #15]
      break;
 8007870:	bf00      	nop
  }

  return ret;
 8007872:	7bfb      	ldrb	r3, [r7, #15]
}
 8007874:	4618      	mov	r0, r3
 8007876:	3710      	adds	r7, #16
 8007878:	46bd      	mov	sp, r7
 800787a:	bd80      	pop	{r7, pc}

0800787c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b086      	sub	sp, #24
 8007880:	af00      	add	r7, sp, #0
 8007882:	60f8      	str	r0, [r7, #12]
 8007884:	460b      	mov	r3, r1
 8007886:	607a      	str	r2, [r7, #4]
 8007888:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800788a:	2300      	movs	r3, #0
 800788c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800788e:	7afb      	ldrb	r3, [r7, #11]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d16e      	bne.n	8007972 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800789a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80078a2:	2b03      	cmp	r3, #3
 80078a4:	f040 8098 	bne.w	80079d8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80078a8:	693b      	ldr	r3, [r7, #16]
 80078aa:	689a      	ldr	r2, [r3, #8]
 80078ac:	693b      	ldr	r3, [r7, #16]
 80078ae:	68db      	ldr	r3, [r3, #12]
 80078b0:	429a      	cmp	r2, r3
 80078b2:	d913      	bls.n	80078dc <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80078b4:	693b      	ldr	r3, [r7, #16]
 80078b6:	689a      	ldr	r2, [r3, #8]
 80078b8:	693b      	ldr	r3, [r7, #16]
 80078ba:	68db      	ldr	r3, [r3, #12]
 80078bc:	1ad2      	subs	r2, r2, r3
 80078be:	693b      	ldr	r3, [r7, #16]
 80078c0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80078c2:	693b      	ldr	r3, [r7, #16]
 80078c4:	68da      	ldr	r2, [r3, #12]
 80078c6:	693b      	ldr	r3, [r7, #16]
 80078c8:	689b      	ldr	r3, [r3, #8]
 80078ca:	4293      	cmp	r3, r2
 80078cc:	bf28      	it	cs
 80078ce:	4613      	movcs	r3, r2
 80078d0:	461a      	mov	r2, r3
 80078d2:	6879      	ldr	r1, [r7, #4]
 80078d4:	68f8      	ldr	r0, [r7, #12]
 80078d6:	f001 f9ae 	bl	8008c36 <USBD_CtlContinueRx>
 80078da:	e07d      	b.n	80079d8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80078e2:	f003 031f 	and.w	r3, r3, #31
 80078e6:	2b02      	cmp	r3, #2
 80078e8:	d014      	beq.n	8007914 <USBD_LL_DataOutStage+0x98>
 80078ea:	2b02      	cmp	r3, #2
 80078ec:	d81d      	bhi.n	800792a <USBD_LL_DataOutStage+0xae>
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d002      	beq.n	80078f8 <USBD_LL_DataOutStage+0x7c>
 80078f2:	2b01      	cmp	r3, #1
 80078f4:	d003      	beq.n	80078fe <USBD_LL_DataOutStage+0x82>
 80078f6:	e018      	b.n	800792a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80078f8:	2300      	movs	r3, #0
 80078fa:	75bb      	strb	r3, [r7, #22]
            break;
 80078fc:	e018      	b.n	8007930 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007904:	b2db      	uxtb	r3, r3
 8007906:	4619      	mov	r1, r3
 8007908:	68f8      	ldr	r0, [r7, #12]
 800790a:	f000 fa5e 	bl	8007dca <USBD_CoreFindIF>
 800790e:	4603      	mov	r3, r0
 8007910:	75bb      	strb	r3, [r7, #22]
            break;
 8007912:	e00d      	b.n	8007930 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800791a:	b2db      	uxtb	r3, r3
 800791c:	4619      	mov	r1, r3
 800791e:	68f8      	ldr	r0, [r7, #12]
 8007920:	f000 fa60 	bl	8007de4 <USBD_CoreFindEP>
 8007924:	4603      	mov	r3, r0
 8007926:	75bb      	strb	r3, [r7, #22]
            break;
 8007928:	e002      	b.n	8007930 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800792a:	2300      	movs	r3, #0
 800792c:	75bb      	strb	r3, [r7, #22]
            break;
 800792e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007930:	7dbb      	ldrb	r3, [r7, #22]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d119      	bne.n	800796a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800793c:	b2db      	uxtb	r3, r3
 800793e:	2b03      	cmp	r3, #3
 8007940:	d113      	bne.n	800796a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007942:	7dba      	ldrb	r2, [r7, #22]
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	32ae      	adds	r2, #174	; 0xae
 8007948:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800794c:	691b      	ldr	r3, [r3, #16]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d00b      	beq.n	800796a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007952:	7dba      	ldrb	r2, [r7, #22]
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800795a:	7dba      	ldrb	r2, [r7, #22]
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	32ae      	adds	r2, #174	; 0xae
 8007960:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007964:	691b      	ldr	r3, [r3, #16]
 8007966:	68f8      	ldr	r0, [r7, #12]
 8007968:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800796a:	68f8      	ldr	r0, [r7, #12]
 800796c:	f001 f974 	bl	8008c58 <USBD_CtlSendStatus>
 8007970:	e032      	b.n	80079d8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007972:	7afb      	ldrb	r3, [r7, #11]
 8007974:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007978:	b2db      	uxtb	r3, r3
 800797a:	4619      	mov	r1, r3
 800797c:	68f8      	ldr	r0, [r7, #12]
 800797e:	f000 fa31 	bl	8007de4 <USBD_CoreFindEP>
 8007982:	4603      	mov	r3, r0
 8007984:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007986:	7dbb      	ldrb	r3, [r7, #22]
 8007988:	2bff      	cmp	r3, #255	; 0xff
 800798a:	d025      	beq.n	80079d8 <USBD_LL_DataOutStage+0x15c>
 800798c:	7dbb      	ldrb	r3, [r7, #22]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d122      	bne.n	80079d8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007998:	b2db      	uxtb	r3, r3
 800799a:	2b03      	cmp	r3, #3
 800799c:	d117      	bne.n	80079ce <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800799e:	7dba      	ldrb	r2, [r7, #22]
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	32ae      	adds	r2, #174	; 0xae
 80079a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079a8:	699b      	ldr	r3, [r3, #24]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d00f      	beq.n	80079ce <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80079ae:	7dba      	ldrb	r2, [r7, #22]
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80079b6:	7dba      	ldrb	r2, [r7, #22]
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	32ae      	adds	r2, #174	; 0xae
 80079bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079c0:	699b      	ldr	r3, [r3, #24]
 80079c2:	7afa      	ldrb	r2, [r7, #11]
 80079c4:	4611      	mov	r1, r2
 80079c6:	68f8      	ldr	r0, [r7, #12]
 80079c8:	4798      	blx	r3
 80079ca:	4603      	mov	r3, r0
 80079cc:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80079ce:	7dfb      	ldrb	r3, [r7, #23]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d001      	beq.n	80079d8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80079d4:	7dfb      	ldrb	r3, [r7, #23]
 80079d6:	e000      	b.n	80079da <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80079d8:	2300      	movs	r3, #0
}
 80079da:	4618      	mov	r0, r3
 80079dc:	3718      	adds	r7, #24
 80079de:	46bd      	mov	sp, r7
 80079e0:	bd80      	pop	{r7, pc}

080079e2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80079e2:	b580      	push	{r7, lr}
 80079e4:	b086      	sub	sp, #24
 80079e6:	af00      	add	r7, sp, #0
 80079e8:	60f8      	str	r0, [r7, #12]
 80079ea:	460b      	mov	r3, r1
 80079ec:	607a      	str	r2, [r7, #4]
 80079ee:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80079f0:	7afb      	ldrb	r3, [r7, #11]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d16f      	bne.n	8007ad6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	3314      	adds	r3, #20
 80079fa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007a02:	2b02      	cmp	r3, #2
 8007a04:	d15a      	bne.n	8007abc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007a06:	693b      	ldr	r3, [r7, #16]
 8007a08:	689a      	ldr	r2, [r3, #8]
 8007a0a:	693b      	ldr	r3, [r7, #16]
 8007a0c:	68db      	ldr	r3, [r3, #12]
 8007a0e:	429a      	cmp	r2, r3
 8007a10:	d914      	bls.n	8007a3c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007a12:	693b      	ldr	r3, [r7, #16]
 8007a14:	689a      	ldr	r2, [r3, #8]
 8007a16:	693b      	ldr	r3, [r7, #16]
 8007a18:	68db      	ldr	r3, [r3, #12]
 8007a1a:	1ad2      	subs	r2, r2, r3
 8007a1c:	693b      	ldr	r3, [r7, #16]
 8007a1e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007a20:	693b      	ldr	r3, [r7, #16]
 8007a22:	689b      	ldr	r3, [r3, #8]
 8007a24:	461a      	mov	r2, r3
 8007a26:	6879      	ldr	r1, [r7, #4]
 8007a28:	68f8      	ldr	r0, [r7, #12]
 8007a2a:	f001 f8d6 	bl	8008bda <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007a2e:	2300      	movs	r3, #0
 8007a30:	2200      	movs	r2, #0
 8007a32:	2100      	movs	r1, #0
 8007a34:	68f8      	ldr	r0, [r7, #12]
 8007a36:	f001 ff11 	bl	800985c <USBD_LL_PrepareReceive>
 8007a3a:	e03f      	b.n	8007abc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007a3c:	693b      	ldr	r3, [r7, #16]
 8007a3e:	68da      	ldr	r2, [r3, #12]
 8007a40:	693b      	ldr	r3, [r7, #16]
 8007a42:	689b      	ldr	r3, [r3, #8]
 8007a44:	429a      	cmp	r2, r3
 8007a46:	d11c      	bne.n	8007a82 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007a48:	693b      	ldr	r3, [r7, #16]
 8007a4a:	685a      	ldr	r2, [r3, #4]
 8007a4c:	693b      	ldr	r3, [r7, #16]
 8007a4e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007a50:	429a      	cmp	r2, r3
 8007a52:	d316      	bcc.n	8007a82 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007a54:	693b      	ldr	r3, [r7, #16]
 8007a56:	685a      	ldr	r2, [r3, #4]
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007a5e:	429a      	cmp	r2, r3
 8007a60:	d20f      	bcs.n	8007a82 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007a62:	2200      	movs	r2, #0
 8007a64:	2100      	movs	r1, #0
 8007a66:	68f8      	ldr	r0, [r7, #12]
 8007a68:	f001 f8b7 	bl	8008bda <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	2200      	movs	r2, #0
 8007a70:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007a74:	2300      	movs	r3, #0
 8007a76:	2200      	movs	r2, #0
 8007a78:	2100      	movs	r1, #0
 8007a7a:	68f8      	ldr	r0, [r7, #12]
 8007a7c:	f001 feee 	bl	800985c <USBD_LL_PrepareReceive>
 8007a80:	e01c      	b.n	8007abc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a88:	b2db      	uxtb	r3, r3
 8007a8a:	2b03      	cmp	r3, #3
 8007a8c:	d10f      	bne.n	8007aae <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a94:	68db      	ldr	r3, [r3, #12]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d009      	beq.n	8007aae <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007aa8:	68db      	ldr	r3, [r3, #12]
 8007aaa:	68f8      	ldr	r0, [r7, #12]
 8007aac:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007aae:	2180      	movs	r1, #128	; 0x80
 8007ab0:	68f8      	ldr	r0, [r7, #12]
 8007ab2:	f001 fe29 	bl	8009708 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007ab6:	68f8      	ldr	r0, [r7, #12]
 8007ab8:	f001 f8e1 	bl	8008c7e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d03a      	beq.n	8007b3c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007ac6:	68f8      	ldr	r0, [r7, #12]
 8007ac8:	f7ff fe42 	bl	8007750 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	2200      	movs	r2, #0
 8007ad0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007ad4:	e032      	b.n	8007b3c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007ad6:	7afb      	ldrb	r3, [r7, #11]
 8007ad8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007adc:	b2db      	uxtb	r3, r3
 8007ade:	4619      	mov	r1, r3
 8007ae0:	68f8      	ldr	r0, [r7, #12]
 8007ae2:	f000 f97f 	bl	8007de4 <USBD_CoreFindEP>
 8007ae6:	4603      	mov	r3, r0
 8007ae8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007aea:	7dfb      	ldrb	r3, [r7, #23]
 8007aec:	2bff      	cmp	r3, #255	; 0xff
 8007aee:	d025      	beq.n	8007b3c <USBD_LL_DataInStage+0x15a>
 8007af0:	7dfb      	ldrb	r3, [r7, #23]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d122      	bne.n	8007b3c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007afc:	b2db      	uxtb	r3, r3
 8007afe:	2b03      	cmp	r3, #3
 8007b00:	d11c      	bne.n	8007b3c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007b02:	7dfa      	ldrb	r2, [r7, #23]
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	32ae      	adds	r2, #174	; 0xae
 8007b08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b0c:	695b      	ldr	r3, [r3, #20]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d014      	beq.n	8007b3c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007b12:	7dfa      	ldrb	r2, [r7, #23]
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007b1a:	7dfa      	ldrb	r2, [r7, #23]
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	32ae      	adds	r2, #174	; 0xae
 8007b20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b24:	695b      	ldr	r3, [r3, #20]
 8007b26:	7afa      	ldrb	r2, [r7, #11]
 8007b28:	4611      	mov	r1, r2
 8007b2a:	68f8      	ldr	r0, [r7, #12]
 8007b2c:	4798      	blx	r3
 8007b2e:	4603      	mov	r3, r0
 8007b30:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007b32:	7dbb      	ldrb	r3, [r7, #22]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d001      	beq.n	8007b3c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007b38:	7dbb      	ldrb	r3, [r7, #22]
 8007b3a:	e000      	b.n	8007b3e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007b3c:	2300      	movs	r3, #0
}
 8007b3e:	4618      	mov	r0, r3
 8007b40:	3718      	adds	r7, #24
 8007b42:	46bd      	mov	sp, r7
 8007b44:	bd80      	pop	{r7, pc}

08007b46 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007b46:	b580      	push	{r7, lr}
 8007b48:	b084      	sub	sp, #16
 8007b4a:	af00      	add	r7, sp, #0
 8007b4c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007b4e:	2300      	movs	r3, #0
 8007b50:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	2201      	movs	r2, #1
 8007b56:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2200      	movs	r2, #0
 8007b66:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2200      	movs	r2, #0
 8007b74:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d014      	beq.n	8007bac <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b88:	685b      	ldr	r3, [r3, #4]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d00e      	beq.n	8007bac <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b94:	685b      	ldr	r3, [r3, #4]
 8007b96:	687a      	ldr	r2, [r7, #4]
 8007b98:	6852      	ldr	r2, [r2, #4]
 8007b9a:	b2d2      	uxtb	r2, r2
 8007b9c:	4611      	mov	r1, r2
 8007b9e:	6878      	ldr	r0, [r7, #4]
 8007ba0:	4798      	blx	r3
 8007ba2:	4603      	mov	r3, r0
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d001      	beq.n	8007bac <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007ba8:	2303      	movs	r3, #3
 8007baa:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007bac:	2340      	movs	r3, #64	; 0x40
 8007bae:	2200      	movs	r2, #0
 8007bb0:	2100      	movs	r1, #0
 8007bb2:	6878      	ldr	r0, [r7, #4]
 8007bb4:	f001 fd63 	bl	800967e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	2201      	movs	r2, #1
 8007bbc:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2240      	movs	r2, #64	; 0x40
 8007bc4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007bc8:	2340      	movs	r3, #64	; 0x40
 8007bca:	2200      	movs	r2, #0
 8007bcc:	2180      	movs	r1, #128	; 0x80
 8007bce:	6878      	ldr	r0, [r7, #4]
 8007bd0:	f001 fd55 	bl	800967e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2201      	movs	r2, #1
 8007bd8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2240      	movs	r2, #64	; 0x40
 8007bde:	621a      	str	r2, [r3, #32]

  return ret;
 8007be0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007be2:	4618      	mov	r0, r3
 8007be4:	3710      	adds	r7, #16
 8007be6:	46bd      	mov	sp, r7
 8007be8:	bd80      	pop	{r7, pc}

08007bea <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007bea:	b480      	push	{r7}
 8007bec:	b083      	sub	sp, #12
 8007bee:	af00      	add	r7, sp, #0
 8007bf0:	6078      	str	r0, [r7, #4]
 8007bf2:	460b      	mov	r3, r1
 8007bf4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	78fa      	ldrb	r2, [r7, #3]
 8007bfa:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007bfc:	2300      	movs	r3, #0
}
 8007bfe:	4618      	mov	r0, r3
 8007c00:	370c      	adds	r7, #12
 8007c02:	46bd      	mov	sp, r7
 8007c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c08:	4770      	bx	lr

08007c0a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007c0a:	b480      	push	{r7}
 8007c0c:	b083      	sub	sp, #12
 8007c0e:	af00      	add	r7, sp, #0
 8007c10:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c18:	b2da      	uxtb	r2, r3
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2204      	movs	r2, #4
 8007c24:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007c28:	2300      	movs	r3, #0
}
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	370c      	adds	r7, #12
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c34:	4770      	bx	lr

08007c36 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007c36:	b480      	push	{r7}
 8007c38:	b083      	sub	sp, #12
 8007c3a:	af00      	add	r7, sp, #0
 8007c3c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c44:	b2db      	uxtb	r3, r3
 8007c46:	2b04      	cmp	r3, #4
 8007c48:	d106      	bne.n	8007c58 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007c50:	b2da      	uxtb	r2, r3
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007c58:	2300      	movs	r3, #0
}
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	370c      	adds	r7, #12
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c64:	4770      	bx	lr

08007c66 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007c66:	b580      	push	{r7, lr}
 8007c68:	b082      	sub	sp, #8
 8007c6a:	af00      	add	r7, sp, #0
 8007c6c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c74:	b2db      	uxtb	r3, r3
 8007c76:	2b03      	cmp	r3, #3
 8007c78:	d110      	bne.n	8007c9c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d00b      	beq.n	8007c9c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c8a:	69db      	ldr	r3, [r3, #28]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d005      	beq.n	8007c9c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c96:	69db      	ldr	r3, [r3, #28]
 8007c98:	6878      	ldr	r0, [r7, #4]
 8007c9a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007c9c:	2300      	movs	r3, #0
}
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	3708      	adds	r7, #8
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	bd80      	pop	{r7, pc}

08007ca6 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007ca6:	b580      	push	{r7, lr}
 8007ca8:	b082      	sub	sp, #8
 8007caa:	af00      	add	r7, sp, #0
 8007cac:	6078      	str	r0, [r7, #4]
 8007cae:	460b      	mov	r3, r1
 8007cb0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	32ae      	adds	r2, #174	; 0xae
 8007cbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d101      	bne.n	8007cc8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007cc4:	2303      	movs	r3, #3
 8007cc6:	e01c      	b.n	8007d02 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cce:	b2db      	uxtb	r3, r3
 8007cd0:	2b03      	cmp	r3, #3
 8007cd2:	d115      	bne.n	8007d00 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	32ae      	adds	r2, #174	; 0xae
 8007cde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ce2:	6a1b      	ldr	r3, [r3, #32]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d00b      	beq.n	8007d00 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	32ae      	adds	r2, #174	; 0xae
 8007cf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cf6:	6a1b      	ldr	r3, [r3, #32]
 8007cf8:	78fa      	ldrb	r2, [r7, #3]
 8007cfa:	4611      	mov	r1, r2
 8007cfc:	6878      	ldr	r0, [r7, #4]
 8007cfe:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007d00:	2300      	movs	r3, #0
}
 8007d02:	4618      	mov	r0, r3
 8007d04:	3708      	adds	r7, #8
 8007d06:	46bd      	mov	sp, r7
 8007d08:	bd80      	pop	{r7, pc}

08007d0a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007d0a:	b580      	push	{r7, lr}
 8007d0c:	b082      	sub	sp, #8
 8007d0e:	af00      	add	r7, sp, #0
 8007d10:	6078      	str	r0, [r7, #4]
 8007d12:	460b      	mov	r3, r1
 8007d14:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	32ae      	adds	r2, #174	; 0xae
 8007d20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d101      	bne.n	8007d2c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007d28:	2303      	movs	r3, #3
 8007d2a:	e01c      	b.n	8007d66 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d32:	b2db      	uxtb	r3, r3
 8007d34:	2b03      	cmp	r3, #3
 8007d36:	d115      	bne.n	8007d64 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	32ae      	adds	r2, #174	; 0xae
 8007d42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d00b      	beq.n	8007d64 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	32ae      	adds	r2, #174	; 0xae
 8007d56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d5c:	78fa      	ldrb	r2, [r7, #3]
 8007d5e:	4611      	mov	r1, r2
 8007d60:	6878      	ldr	r0, [r7, #4]
 8007d62:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007d64:	2300      	movs	r3, #0
}
 8007d66:	4618      	mov	r0, r3
 8007d68:	3708      	adds	r7, #8
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	bd80      	pop	{r7, pc}

08007d6e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007d6e:	b480      	push	{r7}
 8007d70:	b083      	sub	sp, #12
 8007d72:	af00      	add	r7, sp, #0
 8007d74:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007d76:	2300      	movs	r3, #0
}
 8007d78:	4618      	mov	r0, r3
 8007d7a:	370c      	adds	r7, #12
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d82:	4770      	bx	lr

08007d84 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b084      	sub	sp, #16
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2201      	movs	r2, #1
 8007d94:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d00e      	beq.n	8007dc0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007da8:	685b      	ldr	r3, [r3, #4]
 8007daa:	687a      	ldr	r2, [r7, #4]
 8007dac:	6852      	ldr	r2, [r2, #4]
 8007dae:	b2d2      	uxtb	r2, r2
 8007db0:	4611      	mov	r1, r2
 8007db2:	6878      	ldr	r0, [r7, #4]
 8007db4:	4798      	blx	r3
 8007db6:	4603      	mov	r3, r0
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d001      	beq.n	8007dc0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007dbc:	2303      	movs	r3, #3
 8007dbe:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007dc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	3710      	adds	r7, #16
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	bd80      	pop	{r7, pc}

08007dca <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007dca:	b480      	push	{r7}
 8007dcc:	b083      	sub	sp, #12
 8007dce:	af00      	add	r7, sp, #0
 8007dd0:	6078      	str	r0, [r7, #4]
 8007dd2:	460b      	mov	r3, r1
 8007dd4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007dd6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007dd8:	4618      	mov	r0, r3
 8007dda:	370c      	adds	r7, #12
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de2:	4770      	bx	lr

08007de4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007de4:	b480      	push	{r7}
 8007de6:	b083      	sub	sp, #12
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
 8007dec:	460b      	mov	r3, r1
 8007dee:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007df0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007df2:	4618      	mov	r0, r3
 8007df4:	370c      	adds	r7, #12
 8007df6:	46bd      	mov	sp, r7
 8007df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfc:	4770      	bx	lr

08007dfe <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007dfe:	b580      	push	{r7, lr}
 8007e00:	b086      	sub	sp, #24
 8007e02:	af00      	add	r7, sp, #0
 8007e04:	6078      	str	r0, [r7, #4]
 8007e06:	460b      	mov	r3, r1
 8007e08:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007e12:	2300      	movs	r3, #0
 8007e14:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	885b      	ldrh	r3, [r3, #2]
 8007e1a:	b29a      	uxth	r2, r3
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	781b      	ldrb	r3, [r3, #0]
 8007e20:	b29b      	uxth	r3, r3
 8007e22:	429a      	cmp	r2, r3
 8007e24:	d920      	bls.n	8007e68 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	781b      	ldrb	r3, [r3, #0]
 8007e2a:	b29b      	uxth	r3, r3
 8007e2c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007e2e:	e013      	b.n	8007e58 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007e30:	f107 030a 	add.w	r3, r7, #10
 8007e34:	4619      	mov	r1, r3
 8007e36:	6978      	ldr	r0, [r7, #20]
 8007e38:	f000 f81b 	bl	8007e72 <USBD_GetNextDesc>
 8007e3c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007e3e:	697b      	ldr	r3, [r7, #20]
 8007e40:	785b      	ldrb	r3, [r3, #1]
 8007e42:	2b05      	cmp	r3, #5
 8007e44:	d108      	bne.n	8007e58 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007e46:	697b      	ldr	r3, [r7, #20]
 8007e48:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007e4a:	693b      	ldr	r3, [r7, #16]
 8007e4c:	789b      	ldrb	r3, [r3, #2]
 8007e4e:	78fa      	ldrb	r2, [r7, #3]
 8007e50:	429a      	cmp	r2, r3
 8007e52:	d008      	beq.n	8007e66 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007e54:	2300      	movs	r3, #0
 8007e56:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	885b      	ldrh	r3, [r3, #2]
 8007e5c:	b29a      	uxth	r2, r3
 8007e5e:	897b      	ldrh	r3, [r7, #10]
 8007e60:	429a      	cmp	r2, r3
 8007e62:	d8e5      	bhi.n	8007e30 <USBD_GetEpDesc+0x32>
 8007e64:	e000      	b.n	8007e68 <USBD_GetEpDesc+0x6a>
          break;
 8007e66:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007e68:	693b      	ldr	r3, [r7, #16]
}
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	3718      	adds	r7, #24
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	bd80      	pop	{r7, pc}

08007e72 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007e72:	b480      	push	{r7}
 8007e74:	b085      	sub	sp, #20
 8007e76:	af00      	add	r7, sp, #0
 8007e78:	6078      	str	r0, [r7, #4]
 8007e7a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	881a      	ldrh	r2, [r3, #0]
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	781b      	ldrb	r3, [r3, #0]
 8007e88:	b29b      	uxth	r3, r3
 8007e8a:	4413      	add	r3, r2
 8007e8c:	b29a      	uxth	r2, r3
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	781b      	ldrb	r3, [r3, #0]
 8007e96:	461a      	mov	r2, r3
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	4413      	add	r3, r2
 8007e9c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007e9e:	68fb      	ldr	r3, [r7, #12]
}
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	3714      	adds	r7, #20
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eaa:	4770      	bx	lr

08007eac <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007eac:	b480      	push	{r7}
 8007eae:	b087      	sub	sp, #28
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007eb8:	697b      	ldr	r3, [r7, #20]
 8007eba:	781b      	ldrb	r3, [r3, #0]
 8007ebc:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007ebe:	697b      	ldr	r3, [r7, #20]
 8007ec0:	3301      	adds	r3, #1
 8007ec2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007ec4:	697b      	ldr	r3, [r7, #20]
 8007ec6:	781b      	ldrb	r3, [r3, #0]
 8007ec8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007eca:	8a3b      	ldrh	r3, [r7, #16]
 8007ecc:	021b      	lsls	r3, r3, #8
 8007ece:	b21a      	sxth	r2, r3
 8007ed0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007ed4:	4313      	orrs	r3, r2
 8007ed6:	b21b      	sxth	r3, r3
 8007ed8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007eda:	89fb      	ldrh	r3, [r7, #14]
}
 8007edc:	4618      	mov	r0, r3
 8007ede:	371c      	adds	r7, #28
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee6:	4770      	bx	lr

08007ee8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b084      	sub	sp, #16
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
 8007ef0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	781b      	ldrb	r3, [r3, #0]
 8007efa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007efe:	2b40      	cmp	r3, #64	; 0x40
 8007f00:	d005      	beq.n	8007f0e <USBD_StdDevReq+0x26>
 8007f02:	2b40      	cmp	r3, #64	; 0x40
 8007f04:	d857      	bhi.n	8007fb6 <USBD_StdDevReq+0xce>
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d00f      	beq.n	8007f2a <USBD_StdDevReq+0x42>
 8007f0a:	2b20      	cmp	r3, #32
 8007f0c:	d153      	bne.n	8007fb6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	32ae      	adds	r2, #174	; 0xae
 8007f18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f1c:	689b      	ldr	r3, [r3, #8]
 8007f1e:	6839      	ldr	r1, [r7, #0]
 8007f20:	6878      	ldr	r0, [r7, #4]
 8007f22:	4798      	blx	r3
 8007f24:	4603      	mov	r3, r0
 8007f26:	73fb      	strb	r3, [r7, #15]
      break;
 8007f28:	e04a      	b.n	8007fc0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007f2a:	683b      	ldr	r3, [r7, #0]
 8007f2c:	785b      	ldrb	r3, [r3, #1]
 8007f2e:	2b09      	cmp	r3, #9
 8007f30:	d83b      	bhi.n	8007faa <USBD_StdDevReq+0xc2>
 8007f32:	a201      	add	r2, pc, #4	; (adr r2, 8007f38 <USBD_StdDevReq+0x50>)
 8007f34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f38:	08007f8d 	.word	0x08007f8d
 8007f3c:	08007fa1 	.word	0x08007fa1
 8007f40:	08007fab 	.word	0x08007fab
 8007f44:	08007f97 	.word	0x08007f97
 8007f48:	08007fab 	.word	0x08007fab
 8007f4c:	08007f6b 	.word	0x08007f6b
 8007f50:	08007f61 	.word	0x08007f61
 8007f54:	08007fab 	.word	0x08007fab
 8007f58:	08007f83 	.word	0x08007f83
 8007f5c:	08007f75 	.word	0x08007f75
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007f60:	6839      	ldr	r1, [r7, #0]
 8007f62:	6878      	ldr	r0, [r7, #4]
 8007f64:	f000 fa3c 	bl	80083e0 <USBD_GetDescriptor>
          break;
 8007f68:	e024      	b.n	8007fb4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007f6a:	6839      	ldr	r1, [r7, #0]
 8007f6c:	6878      	ldr	r0, [r7, #4]
 8007f6e:	f000 fbcb 	bl	8008708 <USBD_SetAddress>
          break;
 8007f72:	e01f      	b.n	8007fb4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007f74:	6839      	ldr	r1, [r7, #0]
 8007f76:	6878      	ldr	r0, [r7, #4]
 8007f78:	f000 fc0a 	bl	8008790 <USBD_SetConfig>
 8007f7c:	4603      	mov	r3, r0
 8007f7e:	73fb      	strb	r3, [r7, #15]
          break;
 8007f80:	e018      	b.n	8007fb4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007f82:	6839      	ldr	r1, [r7, #0]
 8007f84:	6878      	ldr	r0, [r7, #4]
 8007f86:	f000 fcad 	bl	80088e4 <USBD_GetConfig>
          break;
 8007f8a:	e013      	b.n	8007fb4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007f8c:	6839      	ldr	r1, [r7, #0]
 8007f8e:	6878      	ldr	r0, [r7, #4]
 8007f90:	f000 fcde 	bl	8008950 <USBD_GetStatus>
          break;
 8007f94:	e00e      	b.n	8007fb4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007f96:	6839      	ldr	r1, [r7, #0]
 8007f98:	6878      	ldr	r0, [r7, #4]
 8007f9a:	f000 fd0d 	bl	80089b8 <USBD_SetFeature>
          break;
 8007f9e:	e009      	b.n	8007fb4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007fa0:	6839      	ldr	r1, [r7, #0]
 8007fa2:	6878      	ldr	r0, [r7, #4]
 8007fa4:	f000 fd31 	bl	8008a0a <USBD_ClrFeature>
          break;
 8007fa8:	e004      	b.n	8007fb4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007faa:	6839      	ldr	r1, [r7, #0]
 8007fac:	6878      	ldr	r0, [r7, #4]
 8007fae:	f000 fd88 	bl	8008ac2 <USBD_CtlError>
          break;
 8007fb2:	bf00      	nop
      }
      break;
 8007fb4:	e004      	b.n	8007fc0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007fb6:	6839      	ldr	r1, [r7, #0]
 8007fb8:	6878      	ldr	r0, [r7, #4]
 8007fba:	f000 fd82 	bl	8008ac2 <USBD_CtlError>
      break;
 8007fbe:	bf00      	nop
  }

  return ret;
 8007fc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	3710      	adds	r7, #16
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	bd80      	pop	{r7, pc}
 8007fca:	bf00      	nop

08007fcc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b084      	sub	sp, #16
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
 8007fd4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	781b      	ldrb	r3, [r3, #0]
 8007fde:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007fe2:	2b40      	cmp	r3, #64	; 0x40
 8007fe4:	d005      	beq.n	8007ff2 <USBD_StdItfReq+0x26>
 8007fe6:	2b40      	cmp	r3, #64	; 0x40
 8007fe8:	d852      	bhi.n	8008090 <USBD_StdItfReq+0xc4>
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d001      	beq.n	8007ff2 <USBD_StdItfReq+0x26>
 8007fee:	2b20      	cmp	r3, #32
 8007ff0:	d14e      	bne.n	8008090 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ff8:	b2db      	uxtb	r3, r3
 8007ffa:	3b01      	subs	r3, #1
 8007ffc:	2b02      	cmp	r3, #2
 8007ffe:	d840      	bhi.n	8008082 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	889b      	ldrh	r3, [r3, #4]
 8008004:	b2db      	uxtb	r3, r3
 8008006:	2b01      	cmp	r3, #1
 8008008:	d836      	bhi.n	8008078 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	889b      	ldrh	r3, [r3, #4]
 800800e:	b2db      	uxtb	r3, r3
 8008010:	4619      	mov	r1, r3
 8008012:	6878      	ldr	r0, [r7, #4]
 8008014:	f7ff fed9 	bl	8007dca <USBD_CoreFindIF>
 8008018:	4603      	mov	r3, r0
 800801a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800801c:	7bbb      	ldrb	r3, [r7, #14]
 800801e:	2bff      	cmp	r3, #255	; 0xff
 8008020:	d01d      	beq.n	800805e <USBD_StdItfReq+0x92>
 8008022:	7bbb      	ldrb	r3, [r7, #14]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d11a      	bne.n	800805e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008028:	7bba      	ldrb	r2, [r7, #14]
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	32ae      	adds	r2, #174	; 0xae
 800802e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008032:	689b      	ldr	r3, [r3, #8]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d00f      	beq.n	8008058 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008038:	7bba      	ldrb	r2, [r7, #14]
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008040:	7bba      	ldrb	r2, [r7, #14]
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	32ae      	adds	r2, #174	; 0xae
 8008046:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800804a:	689b      	ldr	r3, [r3, #8]
 800804c:	6839      	ldr	r1, [r7, #0]
 800804e:	6878      	ldr	r0, [r7, #4]
 8008050:	4798      	blx	r3
 8008052:	4603      	mov	r3, r0
 8008054:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008056:	e004      	b.n	8008062 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008058:	2303      	movs	r3, #3
 800805a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800805c:	e001      	b.n	8008062 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800805e:	2303      	movs	r3, #3
 8008060:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	88db      	ldrh	r3, [r3, #6]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d110      	bne.n	800808c <USBD_StdItfReq+0xc0>
 800806a:	7bfb      	ldrb	r3, [r7, #15]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d10d      	bne.n	800808c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008070:	6878      	ldr	r0, [r7, #4]
 8008072:	f000 fdf1 	bl	8008c58 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008076:	e009      	b.n	800808c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008078:	6839      	ldr	r1, [r7, #0]
 800807a:	6878      	ldr	r0, [r7, #4]
 800807c:	f000 fd21 	bl	8008ac2 <USBD_CtlError>
          break;
 8008080:	e004      	b.n	800808c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008082:	6839      	ldr	r1, [r7, #0]
 8008084:	6878      	ldr	r0, [r7, #4]
 8008086:	f000 fd1c 	bl	8008ac2 <USBD_CtlError>
          break;
 800808a:	e000      	b.n	800808e <USBD_StdItfReq+0xc2>
          break;
 800808c:	bf00      	nop
      }
      break;
 800808e:	e004      	b.n	800809a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008090:	6839      	ldr	r1, [r7, #0]
 8008092:	6878      	ldr	r0, [r7, #4]
 8008094:	f000 fd15 	bl	8008ac2 <USBD_CtlError>
      break;
 8008098:	bf00      	nop
  }

  return ret;
 800809a:	7bfb      	ldrb	r3, [r7, #15]
}
 800809c:	4618      	mov	r0, r3
 800809e:	3710      	adds	r7, #16
 80080a0:	46bd      	mov	sp, r7
 80080a2:	bd80      	pop	{r7, pc}

080080a4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b084      	sub	sp, #16
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
 80080ac:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80080ae:	2300      	movs	r3, #0
 80080b0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	889b      	ldrh	r3, [r3, #4]
 80080b6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	781b      	ldrb	r3, [r3, #0]
 80080bc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80080c0:	2b40      	cmp	r3, #64	; 0x40
 80080c2:	d007      	beq.n	80080d4 <USBD_StdEPReq+0x30>
 80080c4:	2b40      	cmp	r3, #64	; 0x40
 80080c6:	f200 817f 	bhi.w	80083c8 <USBD_StdEPReq+0x324>
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d02a      	beq.n	8008124 <USBD_StdEPReq+0x80>
 80080ce:	2b20      	cmp	r3, #32
 80080d0:	f040 817a 	bne.w	80083c8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80080d4:	7bbb      	ldrb	r3, [r7, #14]
 80080d6:	4619      	mov	r1, r3
 80080d8:	6878      	ldr	r0, [r7, #4]
 80080da:	f7ff fe83 	bl	8007de4 <USBD_CoreFindEP>
 80080de:	4603      	mov	r3, r0
 80080e0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80080e2:	7b7b      	ldrb	r3, [r7, #13]
 80080e4:	2bff      	cmp	r3, #255	; 0xff
 80080e6:	f000 8174 	beq.w	80083d2 <USBD_StdEPReq+0x32e>
 80080ea:	7b7b      	ldrb	r3, [r7, #13]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	f040 8170 	bne.w	80083d2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80080f2:	7b7a      	ldrb	r2, [r7, #13]
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80080fa:	7b7a      	ldrb	r2, [r7, #13]
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	32ae      	adds	r2, #174	; 0xae
 8008100:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008104:	689b      	ldr	r3, [r3, #8]
 8008106:	2b00      	cmp	r3, #0
 8008108:	f000 8163 	beq.w	80083d2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800810c:	7b7a      	ldrb	r2, [r7, #13]
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	32ae      	adds	r2, #174	; 0xae
 8008112:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008116:	689b      	ldr	r3, [r3, #8]
 8008118:	6839      	ldr	r1, [r7, #0]
 800811a:	6878      	ldr	r0, [r7, #4]
 800811c:	4798      	blx	r3
 800811e:	4603      	mov	r3, r0
 8008120:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008122:	e156      	b.n	80083d2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008124:	683b      	ldr	r3, [r7, #0]
 8008126:	785b      	ldrb	r3, [r3, #1]
 8008128:	2b03      	cmp	r3, #3
 800812a:	d008      	beq.n	800813e <USBD_StdEPReq+0x9a>
 800812c:	2b03      	cmp	r3, #3
 800812e:	f300 8145 	bgt.w	80083bc <USBD_StdEPReq+0x318>
 8008132:	2b00      	cmp	r3, #0
 8008134:	f000 809b 	beq.w	800826e <USBD_StdEPReq+0x1ca>
 8008138:	2b01      	cmp	r3, #1
 800813a:	d03c      	beq.n	80081b6 <USBD_StdEPReq+0x112>
 800813c:	e13e      	b.n	80083bc <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008144:	b2db      	uxtb	r3, r3
 8008146:	2b02      	cmp	r3, #2
 8008148:	d002      	beq.n	8008150 <USBD_StdEPReq+0xac>
 800814a:	2b03      	cmp	r3, #3
 800814c:	d016      	beq.n	800817c <USBD_StdEPReq+0xd8>
 800814e:	e02c      	b.n	80081aa <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008150:	7bbb      	ldrb	r3, [r7, #14]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d00d      	beq.n	8008172 <USBD_StdEPReq+0xce>
 8008156:	7bbb      	ldrb	r3, [r7, #14]
 8008158:	2b80      	cmp	r3, #128	; 0x80
 800815a:	d00a      	beq.n	8008172 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800815c:	7bbb      	ldrb	r3, [r7, #14]
 800815e:	4619      	mov	r1, r3
 8008160:	6878      	ldr	r0, [r7, #4]
 8008162:	f001 fad1 	bl	8009708 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008166:	2180      	movs	r1, #128	; 0x80
 8008168:	6878      	ldr	r0, [r7, #4]
 800816a:	f001 facd 	bl	8009708 <USBD_LL_StallEP>
 800816e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008170:	e020      	b.n	80081b4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008172:	6839      	ldr	r1, [r7, #0]
 8008174:	6878      	ldr	r0, [r7, #4]
 8008176:	f000 fca4 	bl	8008ac2 <USBD_CtlError>
              break;
 800817a:	e01b      	b.n	80081b4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	885b      	ldrh	r3, [r3, #2]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d10e      	bne.n	80081a2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008184:	7bbb      	ldrb	r3, [r7, #14]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d00b      	beq.n	80081a2 <USBD_StdEPReq+0xfe>
 800818a:	7bbb      	ldrb	r3, [r7, #14]
 800818c:	2b80      	cmp	r3, #128	; 0x80
 800818e:	d008      	beq.n	80081a2 <USBD_StdEPReq+0xfe>
 8008190:	683b      	ldr	r3, [r7, #0]
 8008192:	88db      	ldrh	r3, [r3, #6]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d104      	bne.n	80081a2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008198:	7bbb      	ldrb	r3, [r7, #14]
 800819a:	4619      	mov	r1, r3
 800819c:	6878      	ldr	r0, [r7, #4]
 800819e:	f001 fab3 	bl	8009708 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80081a2:	6878      	ldr	r0, [r7, #4]
 80081a4:	f000 fd58 	bl	8008c58 <USBD_CtlSendStatus>

              break;
 80081a8:	e004      	b.n	80081b4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80081aa:	6839      	ldr	r1, [r7, #0]
 80081ac:	6878      	ldr	r0, [r7, #4]
 80081ae:	f000 fc88 	bl	8008ac2 <USBD_CtlError>
              break;
 80081b2:	bf00      	nop
          }
          break;
 80081b4:	e107      	b.n	80083c6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081bc:	b2db      	uxtb	r3, r3
 80081be:	2b02      	cmp	r3, #2
 80081c0:	d002      	beq.n	80081c8 <USBD_StdEPReq+0x124>
 80081c2:	2b03      	cmp	r3, #3
 80081c4:	d016      	beq.n	80081f4 <USBD_StdEPReq+0x150>
 80081c6:	e04b      	b.n	8008260 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80081c8:	7bbb      	ldrb	r3, [r7, #14]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d00d      	beq.n	80081ea <USBD_StdEPReq+0x146>
 80081ce:	7bbb      	ldrb	r3, [r7, #14]
 80081d0:	2b80      	cmp	r3, #128	; 0x80
 80081d2:	d00a      	beq.n	80081ea <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80081d4:	7bbb      	ldrb	r3, [r7, #14]
 80081d6:	4619      	mov	r1, r3
 80081d8:	6878      	ldr	r0, [r7, #4]
 80081da:	f001 fa95 	bl	8009708 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80081de:	2180      	movs	r1, #128	; 0x80
 80081e0:	6878      	ldr	r0, [r7, #4]
 80081e2:	f001 fa91 	bl	8009708 <USBD_LL_StallEP>
 80081e6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80081e8:	e040      	b.n	800826c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80081ea:	6839      	ldr	r1, [r7, #0]
 80081ec:	6878      	ldr	r0, [r7, #4]
 80081ee:	f000 fc68 	bl	8008ac2 <USBD_CtlError>
              break;
 80081f2:	e03b      	b.n	800826c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	885b      	ldrh	r3, [r3, #2]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d136      	bne.n	800826a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80081fc:	7bbb      	ldrb	r3, [r7, #14]
 80081fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008202:	2b00      	cmp	r3, #0
 8008204:	d004      	beq.n	8008210 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008206:	7bbb      	ldrb	r3, [r7, #14]
 8008208:	4619      	mov	r1, r3
 800820a:	6878      	ldr	r0, [r7, #4]
 800820c:	f001 fa9b 	bl	8009746 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008210:	6878      	ldr	r0, [r7, #4]
 8008212:	f000 fd21 	bl	8008c58 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008216:	7bbb      	ldrb	r3, [r7, #14]
 8008218:	4619      	mov	r1, r3
 800821a:	6878      	ldr	r0, [r7, #4]
 800821c:	f7ff fde2 	bl	8007de4 <USBD_CoreFindEP>
 8008220:	4603      	mov	r3, r0
 8008222:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008224:	7b7b      	ldrb	r3, [r7, #13]
 8008226:	2bff      	cmp	r3, #255	; 0xff
 8008228:	d01f      	beq.n	800826a <USBD_StdEPReq+0x1c6>
 800822a:	7b7b      	ldrb	r3, [r7, #13]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d11c      	bne.n	800826a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008230:	7b7a      	ldrb	r2, [r7, #13]
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008238:	7b7a      	ldrb	r2, [r7, #13]
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	32ae      	adds	r2, #174	; 0xae
 800823e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008242:	689b      	ldr	r3, [r3, #8]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d010      	beq.n	800826a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008248:	7b7a      	ldrb	r2, [r7, #13]
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	32ae      	adds	r2, #174	; 0xae
 800824e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008252:	689b      	ldr	r3, [r3, #8]
 8008254:	6839      	ldr	r1, [r7, #0]
 8008256:	6878      	ldr	r0, [r7, #4]
 8008258:	4798      	blx	r3
 800825a:	4603      	mov	r3, r0
 800825c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800825e:	e004      	b.n	800826a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008260:	6839      	ldr	r1, [r7, #0]
 8008262:	6878      	ldr	r0, [r7, #4]
 8008264:	f000 fc2d 	bl	8008ac2 <USBD_CtlError>
              break;
 8008268:	e000      	b.n	800826c <USBD_StdEPReq+0x1c8>
              break;
 800826a:	bf00      	nop
          }
          break;
 800826c:	e0ab      	b.n	80083c6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008274:	b2db      	uxtb	r3, r3
 8008276:	2b02      	cmp	r3, #2
 8008278:	d002      	beq.n	8008280 <USBD_StdEPReq+0x1dc>
 800827a:	2b03      	cmp	r3, #3
 800827c:	d032      	beq.n	80082e4 <USBD_StdEPReq+0x240>
 800827e:	e097      	b.n	80083b0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008280:	7bbb      	ldrb	r3, [r7, #14]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d007      	beq.n	8008296 <USBD_StdEPReq+0x1f2>
 8008286:	7bbb      	ldrb	r3, [r7, #14]
 8008288:	2b80      	cmp	r3, #128	; 0x80
 800828a:	d004      	beq.n	8008296 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800828c:	6839      	ldr	r1, [r7, #0]
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	f000 fc17 	bl	8008ac2 <USBD_CtlError>
                break;
 8008294:	e091      	b.n	80083ba <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008296:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800829a:	2b00      	cmp	r3, #0
 800829c:	da0b      	bge.n	80082b6 <USBD_StdEPReq+0x212>
 800829e:	7bbb      	ldrb	r3, [r7, #14]
 80082a0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80082a4:	4613      	mov	r3, r2
 80082a6:	009b      	lsls	r3, r3, #2
 80082a8:	4413      	add	r3, r2
 80082aa:	009b      	lsls	r3, r3, #2
 80082ac:	3310      	adds	r3, #16
 80082ae:	687a      	ldr	r2, [r7, #4]
 80082b0:	4413      	add	r3, r2
 80082b2:	3304      	adds	r3, #4
 80082b4:	e00b      	b.n	80082ce <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80082b6:	7bbb      	ldrb	r3, [r7, #14]
 80082b8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80082bc:	4613      	mov	r3, r2
 80082be:	009b      	lsls	r3, r3, #2
 80082c0:	4413      	add	r3, r2
 80082c2:	009b      	lsls	r3, r3, #2
 80082c4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80082c8:	687a      	ldr	r2, [r7, #4]
 80082ca:	4413      	add	r3, r2
 80082cc:	3304      	adds	r3, #4
 80082ce:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80082d0:	68bb      	ldr	r3, [r7, #8]
 80082d2:	2200      	movs	r2, #0
 80082d4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80082d6:	68bb      	ldr	r3, [r7, #8]
 80082d8:	2202      	movs	r2, #2
 80082da:	4619      	mov	r1, r3
 80082dc:	6878      	ldr	r0, [r7, #4]
 80082de:	f000 fc61 	bl	8008ba4 <USBD_CtlSendData>
              break;
 80082e2:	e06a      	b.n	80083ba <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80082e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	da11      	bge.n	8008310 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80082ec:	7bbb      	ldrb	r3, [r7, #14]
 80082ee:	f003 020f 	and.w	r2, r3, #15
 80082f2:	6879      	ldr	r1, [r7, #4]
 80082f4:	4613      	mov	r3, r2
 80082f6:	009b      	lsls	r3, r3, #2
 80082f8:	4413      	add	r3, r2
 80082fa:	009b      	lsls	r3, r3, #2
 80082fc:	440b      	add	r3, r1
 80082fe:	3324      	adds	r3, #36	; 0x24
 8008300:	881b      	ldrh	r3, [r3, #0]
 8008302:	2b00      	cmp	r3, #0
 8008304:	d117      	bne.n	8008336 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008306:	6839      	ldr	r1, [r7, #0]
 8008308:	6878      	ldr	r0, [r7, #4]
 800830a:	f000 fbda 	bl	8008ac2 <USBD_CtlError>
                  break;
 800830e:	e054      	b.n	80083ba <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008310:	7bbb      	ldrb	r3, [r7, #14]
 8008312:	f003 020f 	and.w	r2, r3, #15
 8008316:	6879      	ldr	r1, [r7, #4]
 8008318:	4613      	mov	r3, r2
 800831a:	009b      	lsls	r3, r3, #2
 800831c:	4413      	add	r3, r2
 800831e:	009b      	lsls	r3, r3, #2
 8008320:	440b      	add	r3, r1
 8008322:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008326:	881b      	ldrh	r3, [r3, #0]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d104      	bne.n	8008336 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800832c:	6839      	ldr	r1, [r7, #0]
 800832e:	6878      	ldr	r0, [r7, #4]
 8008330:	f000 fbc7 	bl	8008ac2 <USBD_CtlError>
                  break;
 8008334:	e041      	b.n	80083ba <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008336:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800833a:	2b00      	cmp	r3, #0
 800833c:	da0b      	bge.n	8008356 <USBD_StdEPReq+0x2b2>
 800833e:	7bbb      	ldrb	r3, [r7, #14]
 8008340:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008344:	4613      	mov	r3, r2
 8008346:	009b      	lsls	r3, r3, #2
 8008348:	4413      	add	r3, r2
 800834a:	009b      	lsls	r3, r3, #2
 800834c:	3310      	adds	r3, #16
 800834e:	687a      	ldr	r2, [r7, #4]
 8008350:	4413      	add	r3, r2
 8008352:	3304      	adds	r3, #4
 8008354:	e00b      	b.n	800836e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008356:	7bbb      	ldrb	r3, [r7, #14]
 8008358:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800835c:	4613      	mov	r3, r2
 800835e:	009b      	lsls	r3, r3, #2
 8008360:	4413      	add	r3, r2
 8008362:	009b      	lsls	r3, r3, #2
 8008364:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008368:	687a      	ldr	r2, [r7, #4]
 800836a:	4413      	add	r3, r2
 800836c:	3304      	adds	r3, #4
 800836e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008370:	7bbb      	ldrb	r3, [r7, #14]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d002      	beq.n	800837c <USBD_StdEPReq+0x2d8>
 8008376:	7bbb      	ldrb	r3, [r7, #14]
 8008378:	2b80      	cmp	r3, #128	; 0x80
 800837a:	d103      	bne.n	8008384 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800837c:	68bb      	ldr	r3, [r7, #8]
 800837e:	2200      	movs	r2, #0
 8008380:	601a      	str	r2, [r3, #0]
 8008382:	e00e      	b.n	80083a2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008384:	7bbb      	ldrb	r3, [r7, #14]
 8008386:	4619      	mov	r1, r3
 8008388:	6878      	ldr	r0, [r7, #4]
 800838a:	f001 f9fb 	bl	8009784 <USBD_LL_IsStallEP>
 800838e:	4603      	mov	r3, r0
 8008390:	2b00      	cmp	r3, #0
 8008392:	d003      	beq.n	800839c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008394:	68bb      	ldr	r3, [r7, #8]
 8008396:	2201      	movs	r2, #1
 8008398:	601a      	str	r2, [r3, #0]
 800839a:	e002      	b.n	80083a2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800839c:	68bb      	ldr	r3, [r7, #8]
 800839e:	2200      	movs	r2, #0
 80083a0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80083a2:	68bb      	ldr	r3, [r7, #8]
 80083a4:	2202      	movs	r2, #2
 80083a6:	4619      	mov	r1, r3
 80083a8:	6878      	ldr	r0, [r7, #4]
 80083aa:	f000 fbfb 	bl	8008ba4 <USBD_CtlSendData>
              break;
 80083ae:	e004      	b.n	80083ba <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80083b0:	6839      	ldr	r1, [r7, #0]
 80083b2:	6878      	ldr	r0, [r7, #4]
 80083b4:	f000 fb85 	bl	8008ac2 <USBD_CtlError>
              break;
 80083b8:	bf00      	nop
          }
          break;
 80083ba:	e004      	b.n	80083c6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80083bc:	6839      	ldr	r1, [r7, #0]
 80083be:	6878      	ldr	r0, [r7, #4]
 80083c0:	f000 fb7f 	bl	8008ac2 <USBD_CtlError>
          break;
 80083c4:	bf00      	nop
      }
      break;
 80083c6:	e005      	b.n	80083d4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80083c8:	6839      	ldr	r1, [r7, #0]
 80083ca:	6878      	ldr	r0, [r7, #4]
 80083cc:	f000 fb79 	bl	8008ac2 <USBD_CtlError>
      break;
 80083d0:	e000      	b.n	80083d4 <USBD_StdEPReq+0x330>
      break;
 80083d2:	bf00      	nop
  }

  return ret;
 80083d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80083d6:	4618      	mov	r0, r3
 80083d8:	3710      	adds	r7, #16
 80083da:	46bd      	mov	sp, r7
 80083dc:	bd80      	pop	{r7, pc}
	...

080083e0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b084      	sub	sp, #16
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
 80083e8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80083ea:	2300      	movs	r3, #0
 80083ec:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80083ee:	2300      	movs	r3, #0
 80083f0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80083f2:	2300      	movs	r3, #0
 80083f4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80083f6:	683b      	ldr	r3, [r7, #0]
 80083f8:	885b      	ldrh	r3, [r3, #2]
 80083fa:	0a1b      	lsrs	r3, r3, #8
 80083fc:	b29b      	uxth	r3, r3
 80083fe:	3b01      	subs	r3, #1
 8008400:	2b0e      	cmp	r3, #14
 8008402:	f200 8152 	bhi.w	80086aa <USBD_GetDescriptor+0x2ca>
 8008406:	a201      	add	r2, pc, #4	; (adr r2, 800840c <USBD_GetDescriptor+0x2c>)
 8008408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800840c:	0800847d 	.word	0x0800847d
 8008410:	08008495 	.word	0x08008495
 8008414:	080084d5 	.word	0x080084d5
 8008418:	080086ab 	.word	0x080086ab
 800841c:	080086ab 	.word	0x080086ab
 8008420:	0800864b 	.word	0x0800864b
 8008424:	08008677 	.word	0x08008677
 8008428:	080086ab 	.word	0x080086ab
 800842c:	080086ab 	.word	0x080086ab
 8008430:	080086ab 	.word	0x080086ab
 8008434:	080086ab 	.word	0x080086ab
 8008438:	080086ab 	.word	0x080086ab
 800843c:	080086ab 	.word	0x080086ab
 8008440:	080086ab 	.word	0x080086ab
 8008444:	08008449 	.word	0x08008449
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800844e:	69db      	ldr	r3, [r3, #28]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d00b      	beq.n	800846c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800845a:	69db      	ldr	r3, [r3, #28]
 800845c:	687a      	ldr	r2, [r7, #4]
 800845e:	7c12      	ldrb	r2, [r2, #16]
 8008460:	f107 0108 	add.w	r1, r7, #8
 8008464:	4610      	mov	r0, r2
 8008466:	4798      	blx	r3
 8008468:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800846a:	e126      	b.n	80086ba <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800846c:	6839      	ldr	r1, [r7, #0]
 800846e:	6878      	ldr	r0, [r7, #4]
 8008470:	f000 fb27 	bl	8008ac2 <USBD_CtlError>
        err++;
 8008474:	7afb      	ldrb	r3, [r7, #11]
 8008476:	3301      	adds	r3, #1
 8008478:	72fb      	strb	r3, [r7, #11]
      break;
 800847a:	e11e      	b.n	80086ba <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	687a      	ldr	r2, [r7, #4]
 8008486:	7c12      	ldrb	r2, [r2, #16]
 8008488:	f107 0108 	add.w	r1, r7, #8
 800848c:	4610      	mov	r0, r2
 800848e:	4798      	blx	r3
 8008490:	60f8      	str	r0, [r7, #12]
      break;
 8008492:	e112      	b.n	80086ba <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	7c1b      	ldrb	r3, [r3, #16]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d10d      	bne.n	80084b8 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084a4:	f107 0208 	add.w	r2, r7, #8
 80084a8:	4610      	mov	r0, r2
 80084aa:	4798      	blx	r3
 80084ac:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	3301      	adds	r3, #1
 80084b2:	2202      	movs	r2, #2
 80084b4:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80084b6:	e100      	b.n	80086ba <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084c0:	f107 0208 	add.w	r2, r7, #8
 80084c4:	4610      	mov	r0, r2
 80084c6:	4798      	blx	r3
 80084c8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	3301      	adds	r3, #1
 80084ce:	2202      	movs	r2, #2
 80084d0:	701a      	strb	r2, [r3, #0]
      break;
 80084d2:	e0f2      	b.n	80086ba <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80084d4:	683b      	ldr	r3, [r7, #0]
 80084d6:	885b      	ldrh	r3, [r3, #2]
 80084d8:	b2db      	uxtb	r3, r3
 80084da:	2b05      	cmp	r3, #5
 80084dc:	f200 80ac 	bhi.w	8008638 <USBD_GetDescriptor+0x258>
 80084e0:	a201      	add	r2, pc, #4	; (adr r2, 80084e8 <USBD_GetDescriptor+0x108>)
 80084e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084e6:	bf00      	nop
 80084e8:	08008501 	.word	0x08008501
 80084ec:	08008535 	.word	0x08008535
 80084f0:	08008569 	.word	0x08008569
 80084f4:	0800859d 	.word	0x0800859d
 80084f8:	080085d1 	.word	0x080085d1
 80084fc:	08008605 	.word	0x08008605
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008506:	685b      	ldr	r3, [r3, #4]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d00b      	beq.n	8008524 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008512:	685b      	ldr	r3, [r3, #4]
 8008514:	687a      	ldr	r2, [r7, #4]
 8008516:	7c12      	ldrb	r2, [r2, #16]
 8008518:	f107 0108 	add.w	r1, r7, #8
 800851c:	4610      	mov	r0, r2
 800851e:	4798      	blx	r3
 8008520:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008522:	e091      	b.n	8008648 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008524:	6839      	ldr	r1, [r7, #0]
 8008526:	6878      	ldr	r0, [r7, #4]
 8008528:	f000 facb 	bl	8008ac2 <USBD_CtlError>
            err++;
 800852c:	7afb      	ldrb	r3, [r7, #11]
 800852e:	3301      	adds	r3, #1
 8008530:	72fb      	strb	r3, [r7, #11]
          break;
 8008532:	e089      	b.n	8008648 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800853a:	689b      	ldr	r3, [r3, #8]
 800853c:	2b00      	cmp	r3, #0
 800853e:	d00b      	beq.n	8008558 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008546:	689b      	ldr	r3, [r3, #8]
 8008548:	687a      	ldr	r2, [r7, #4]
 800854a:	7c12      	ldrb	r2, [r2, #16]
 800854c:	f107 0108 	add.w	r1, r7, #8
 8008550:	4610      	mov	r0, r2
 8008552:	4798      	blx	r3
 8008554:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008556:	e077      	b.n	8008648 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008558:	6839      	ldr	r1, [r7, #0]
 800855a:	6878      	ldr	r0, [r7, #4]
 800855c:	f000 fab1 	bl	8008ac2 <USBD_CtlError>
            err++;
 8008560:	7afb      	ldrb	r3, [r7, #11]
 8008562:	3301      	adds	r3, #1
 8008564:	72fb      	strb	r3, [r7, #11]
          break;
 8008566:	e06f      	b.n	8008648 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800856e:	68db      	ldr	r3, [r3, #12]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d00b      	beq.n	800858c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800857a:	68db      	ldr	r3, [r3, #12]
 800857c:	687a      	ldr	r2, [r7, #4]
 800857e:	7c12      	ldrb	r2, [r2, #16]
 8008580:	f107 0108 	add.w	r1, r7, #8
 8008584:	4610      	mov	r0, r2
 8008586:	4798      	blx	r3
 8008588:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800858a:	e05d      	b.n	8008648 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800858c:	6839      	ldr	r1, [r7, #0]
 800858e:	6878      	ldr	r0, [r7, #4]
 8008590:	f000 fa97 	bl	8008ac2 <USBD_CtlError>
            err++;
 8008594:	7afb      	ldrb	r3, [r7, #11]
 8008596:	3301      	adds	r3, #1
 8008598:	72fb      	strb	r3, [r7, #11]
          break;
 800859a:	e055      	b.n	8008648 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085a2:	691b      	ldr	r3, [r3, #16]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d00b      	beq.n	80085c0 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085ae:	691b      	ldr	r3, [r3, #16]
 80085b0:	687a      	ldr	r2, [r7, #4]
 80085b2:	7c12      	ldrb	r2, [r2, #16]
 80085b4:	f107 0108 	add.w	r1, r7, #8
 80085b8:	4610      	mov	r0, r2
 80085ba:	4798      	blx	r3
 80085bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80085be:	e043      	b.n	8008648 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80085c0:	6839      	ldr	r1, [r7, #0]
 80085c2:	6878      	ldr	r0, [r7, #4]
 80085c4:	f000 fa7d 	bl	8008ac2 <USBD_CtlError>
            err++;
 80085c8:	7afb      	ldrb	r3, [r7, #11]
 80085ca:	3301      	adds	r3, #1
 80085cc:	72fb      	strb	r3, [r7, #11]
          break;
 80085ce:	e03b      	b.n	8008648 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085d6:	695b      	ldr	r3, [r3, #20]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d00b      	beq.n	80085f4 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085e2:	695b      	ldr	r3, [r3, #20]
 80085e4:	687a      	ldr	r2, [r7, #4]
 80085e6:	7c12      	ldrb	r2, [r2, #16]
 80085e8:	f107 0108 	add.w	r1, r7, #8
 80085ec:	4610      	mov	r0, r2
 80085ee:	4798      	blx	r3
 80085f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80085f2:	e029      	b.n	8008648 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80085f4:	6839      	ldr	r1, [r7, #0]
 80085f6:	6878      	ldr	r0, [r7, #4]
 80085f8:	f000 fa63 	bl	8008ac2 <USBD_CtlError>
            err++;
 80085fc:	7afb      	ldrb	r3, [r7, #11]
 80085fe:	3301      	adds	r3, #1
 8008600:	72fb      	strb	r3, [r7, #11]
          break;
 8008602:	e021      	b.n	8008648 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800860a:	699b      	ldr	r3, [r3, #24]
 800860c:	2b00      	cmp	r3, #0
 800860e:	d00b      	beq.n	8008628 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008616:	699b      	ldr	r3, [r3, #24]
 8008618:	687a      	ldr	r2, [r7, #4]
 800861a:	7c12      	ldrb	r2, [r2, #16]
 800861c:	f107 0108 	add.w	r1, r7, #8
 8008620:	4610      	mov	r0, r2
 8008622:	4798      	blx	r3
 8008624:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008626:	e00f      	b.n	8008648 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008628:	6839      	ldr	r1, [r7, #0]
 800862a:	6878      	ldr	r0, [r7, #4]
 800862c:	f000 fa49 	bl	8008ac2 <USBD_CtlError>
            err++;
 8008630:	7afb      	ldrb	r3, [r7, #11]
 8008632:	3301      	adds	r3, #1
 8008634:	72fb      	strb	r3, [r7, #11]
          break;
 8008636:	e007      	b.n	8008648 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008638:	6839      	ldr	r1, [r7, #0]
 800863a:	6878      	ldr	r0, [r7, #4]
 800863c:	f000 fa41 	bl	8008ac2 <USBD_CtlError>
          err++;
 8008640:	7afb      	ldrb	r3, [r7, #11]
 8008642:	3301      	adds	r3, #1
 8008644:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8008646:	bf00      	nop
      }
      break;
 8008648:	e037      	b.n	80086ba <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	7c1b      	ldrb	r3, [r3, #16]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d109      	bne.n	8008666 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008658:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800865a:	f107 0208 	add.w	r2, r7, #8
 800865e:	4610      	mov	r0, r2
 8008660:	4798      	blx	r3
 8008662:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008664:	e029      	b.n	80086ba <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008666:	6839      	ldr	r1, [r7, #0]
 8008668:	6878      	ldr	r0, [r7, #4]
 800866a:	f000 fa2a 	bl	8008ac2 <USBD_CtlError>
        err++;
 800866e:	7afb      	ldrb	r3, [r7, #11]
 8008670:	3301      	adds	r3, #1
 8008672:	72fb      	strb	r3, [r7, #11]
      break;
 8008674:	e021      	b.n	80086ba <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	7c1b      	ldrb	r3, [r3, #16]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d10d      	bne.n	800869a <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008686:	f107 0208 	add.w	r2, r7, #8
 800868a:	4610      	mov	r0, r2
 800868c:	4798      	blx	r3
 800868e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	3301      	adds	r3, #1
 8008694:	2207      	movs	r2, #7
 8008696:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008698:	e00f      	b.n	80086ba <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800869a:	6839      	ldr	r1, [r7, #0]
 800869c:	6878      	ldr	r0, [r7, #4]
 800869e:	f000 fa10 	bl	8008ac2 <USBD_CtlError>
        err++;
 80086a2:	7afb      	ldrb	r3, [r7, #11]
 80086a4:	3301      	adds	r3, #1
 80086a6:	72fb      	strb	r3, [r7, #11]
      break;
 80086a8:	e007      	b.n	80086ba <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80086aa:	6839      	ldr	r1, [r7, #0]
 80086ac:	6878      	ldr	r0, [r7, #4]
 80086ae:	f000 fa08 	bl	8008ac2 <USBD_CtlError>
      err++;
 80086b2:	7afb      	ldrb	r3, [r7, #11]
 80086b4:	3301      	adds	r3, #1
 80086b6:	72fb      	strb	r3, [r7, #11]
      break;
 80086b8:	bf00      	nop
  }

  if (err != 0U)
 80086ba:	7afb      	ldrb	r3, [r7, #11]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d11e      	bne.n	80086fe <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	88db      	ldrh	r3, [r3, #6]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d016      	beq.n	80086f6 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80086c8:	893b      	ldrh	r3, [r7, #8]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d00e      	beq.n	80086ec <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80086ce:	683b      	ldr	r3, [r7, #0]
 80086d0:	88da      	ldrh	r2, [r3, #6]
 80086d2:	893b      	ldrh	r3, [r7, #8]
 80086d4:	4293      	cmp	r3, r2
 80086d6:	bf28      	it	cs
 80086d8:	4613      	movcs	r3, r2
 80086da:	b29b      	uxth	r3, r3
 80086dc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80086de:	893b      	ldrh	r3, [r7, #8]
 80086e0:	461a      	mov	r2, r3
 80086e2:	68f9      	ldr	r1, [r7, #12]
 80086e4:	6878      	ldr	r0, [r7, #4]
 80086e6:	f000 fa5d 	bl	8008ba4 <USBD_CtlSendData>
 80086ea:	e009      	b.n	8008700 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80086ec:	6839      	ldr	r1, [r7, #0]
 80086ee:	6878      	ldr	r0, [r7, #4]
 80086f0:	f000 f9e7 	bl	8008ac2 <USBD_CtlError>
 80086f4:	e004      	b.n	8008700 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80086f6:	6878      	ldr	r0, [r7, #4]
 80086f8:	f000 faae 	bl	8008c58 <USBD_CtlSendStatus>
 80086fc:	e000      	b.n	8008700 <USBD_GetDescriptor+0x320>
    return;
 80086fe:	bf00      	nop
  }
}
 8008700:	3710      	adds	r7, #16
 8008702:	46bd      	mov	sp, r7
 8008704:	bd80      	pop	{r7, pc}
 8008706:	bf00      	nop

08008708 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008708:	b580      	push	{r7, lr}
 800870a:	b084      	sub	sp, #16
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
 8008710:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008712:	683b      	ldr	r3, [r7, #0]
 8008714:	889b      	ldrh	r3, [r3, #4]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d131      	bne.n	800877e <USBD_SetAddress+0x76>
 800871a:	683b      	ldr	r3, [r7, #0]
 800871c:	88db      	ldrh	r3, [r3, #6]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d12d      	bne.n	800877e <USBD_SetAddress+0x76>
 8008722:	683b      	ldr	r3, [r7, #0]
 8008724:	885b      	ldrh	r3, [r3, #2]
 8008726:	2b7f      	cmp	r3, #127	; 0x7f
 8008728:	d829      	bhi.n	800877e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800872a:	683b      	ldr	r3, [r7, #0]
 800872c:	885b      	ldrh	r3, [r3, #2]
 800872e:	b2db      	uxtb	r3, r3
 8008730:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008734:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800873c:	b2db      	uxtb	r3, r3
 800873e:	2b03      	cmp	r3, #3
 8008740:	d104      	bne.n	800874c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008742:	6839      	ldr	r1, [r7, #0]
 8008744:	6878      	ldr	r0, [r7, #4]
 8008746:	f000 f9bc 	bl	8008ac2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800874a:	e01d      	b.n	8008788 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	7bfa      	ldrb	r2, [r7, #15]
 8008750:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008754:	7bfb      	ldrb	r3, [r7, #15]
 8008756:	4619      	mov	r1, r3
 8008758:	6878      	ldr	r0, [r7, #4]
 800875a:	f001 f83f 	bl	80097dc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800875e:	6878      	ldr	r0, [r7, #4]
 8008760:	f000 fa7a 	bl	8008c58 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008764:	7bfb      	ldrb	r3, [r7, #15]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d004      	beq.n	8008774 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	2202      	movs	r2, #2
 800876e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008772:	e009      	b.n	8008788 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	2201      	movs	r2, #1
 8008778:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800877c:	e004      	b.n	8008788 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800877e:	6839      	ldr	r1, [r7, #0]
 8008780:	6878      	ldr	r0, [r7, #4]
 8008782:	f000 f99e 	bl	8008ac2 <USBD_CtlError>
  }
}
 8008786:	bf00      	nop
 8008788:	bf00      	nop
 800878a:	3710      	adds	r7, #16
 800878c:	46bd      	mov	sp, r7
 800878e:	bd80      	pop	{r7, pc}

08008790 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008790:	b580      	push	{r7, lr}
 8008792:	b084      	sub	sp, #16
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
 8008798:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800879a:	2300      	movs	r3, #0
 800879c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	885b      	ldrh	r3, [r3, #2]
 80087a2:	b2da      	uxtb	r2, r3
 80087a4:	4b4e      	ldr	r3, [pc, #312]	; (80088e0 <USBD_SetConfig+0x150>)
 80087a6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80087a8:	4b4d      	ldr	r3, [pc, #308]	; (80088e0 <USBD_SetConfig+0x150>)
 80087aa:	781b      	ldrb	r3, [r3, #0]
 80087ac:	2b01      	cmp	r3, #1
 80087ae:	d905      	bls.n	80087bc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80087b0:	6839      	ldr	r1, [r7, #0]
 80087b2:	6878      	ldr	r0, [r7, #4]
 80087b4:	f000 f985 	bl	8008ac2 <USBD_CtlError>
    return USBD_FAIL;
 80087b8:	2303      	movs	r3, #3
 80087ba:	e08c      	b.n	80088d6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087c2:	b2db      	uxtb	r3, r3
 80087c4:	2b02      	cmp	r3, #2
 80087c6:	d002      	beq.n	80087ce <USBD_SetConfig+0x3e>
 80087c8:	2b03      	cmp	r3, #3
 80087ca:	d029      	beq.n	8008820 <USBD_SetConfig+0x90>
 80087cc:	e075      	b.n	80088ba <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80087ce:	4b44      	ldr	r3, [pc, #272]	; (80088e0 <USBD_SetConfig+0x150>)
 80087d0:	781b      	ldrb	r3, [r3, #0]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d020      	beq.n	8008818 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80087d6:	4b42      	ldr	r3, [pc, #264]	; (80088e0 <USBD_SetConfig+0x150>)
 80087d8:	781b      	ldrb	r3, [r3, #0]
 80087da:	461a      	mov	r2, r3
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80087e0:	4b3f      	ldr	r3, [pc, #252]	; (80088e0 <USBD_SetConfig+0x150>)
 80087e2:	781b      	ldrb	r3, [r3, #0]
 80087e4:	4619      	mov	r1, r3
 80087e6:	6878      	ldr	r0, [r7, #4]
 80087e8:	f7fe ffbd 	bl	8007766 <USBD_SetClassConfig>
 80087ec:	4603      	mov	r3, r0
 80087ee:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80087f0:	7bfb      	ldrb	r3, [r7, #15]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d008      	beq.n	8008808 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80087f6:	6839      	ldr	r1, [r7, #0]
 80087f8:	6878      	ldr	r0, [r7, #4]
 80087fa:	f000 f962 	bl	8008ac2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	2202      	movs	r2, #2
 8008802:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008806:	e065      	b.n	80088d4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008808:	6878      	ldr	r0, [r7, #4]
 800880a:	f000 fa25 	bl	8008c58 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	2203      	movs	r2, #3
 8008812:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008816:	e05d      	b.n	80088d4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008818:	6878      	ldr	r0, [r7, #4]
 800881a:	f000 fa1d 	bl	8008c58 <USBD_CtlSendStatus>
      break;
 800881e:	e059      	b.n	80088d4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008820:	4b2f      	ldr	r3, [pc, #188]	; (80088e0 <USBD_SetConfig+0x150>)
 8008822:	781b      	ldrb	r3, [r3, #0]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d112      	bne.n	800884e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	2202      	movs	r2, #2
 800882c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008830:	4b2b      	ldr	r3, [pc, #172]	; (80088e0 <USBD_SetConfig+0x150>)
 8008832:	781b      	ldrb	r3, [r3, #0]
 8008834:	461a      	mov	r2, r3
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800883a:	4b29      	ldr	r3, [pc, #164]	; (80088e0 <USBD_SetConfig+0x150>)
 800883c:	781b      	ldrb	r3, [r3, #0]
 800883e:	4619      	mov	r1, r3
 8008840:	6878      	ldr	r0, [r7, #4]
 8008842:	f7fe ffac 	bl	800779e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008846:	6878      	ldr	r0, [r7, #4]
 8008848:	f000 fa06 	bl	8008c58 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800884c:	e042      	b.n	80088d4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800884e:	4b24      	ldr	r3, [pc, #144]	; (80088e0 <USBD_SetConfig+0x150>)
 8008850:	781b      	ldrb	r3, [r3, #0]
 8008852:	461a      	mov	r2, r3
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	685b      	ldr	r3, [r3, #4]
 8008858:	429a      	cmp	r2, r3
 800885a:	d02a      	beq.n	80088b2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	685b      	ldr	r3, [r3, #4]
 8008860:	b2db      	uxtb	r3, r3
 8008862:	4619      	mov	r1, r3
 8008864:	6878      	ldr	r0, [r7, #4]
 8008866:	f7fe ff9a 	bl	800779e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800886a:	4b1d      	ldr	r3, [pc, #116]	; (80088e0 <USBD_SetConfig+0x150>)
 800886c:	781b      	ldrb	r3, [r3, #0]
 800886e:	461a      	mov	r2, r3
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008874:	4b1a      	ldr	r3, [pc, #104]	; (80088e0 <USBD_SetConfig+0x150>)
 8008876:	781b      	ldrb	r3, [r3, #0]
 8008878:	4619      	mov	r1, r3
 800887a:	6878      	ldr	r0, [r7, #4]
 800887c:	f7fe ff73 	bl	8007766 <USBD_SetClassConfig>
 8008880:	4603      	mov	r3, r0
 8008882:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008884:	7bfb      	ldrb	r3, [r7, #15]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d00f      	beq.n	80088aa <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800888a:	6839      	ldr	r1, [r7, #0]
 800888c:	6878      	ldr	r0, [r7, #4]
 800888e:	f000 f918 	bl	8008ac2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	685b      	ldr	r3, [r3, #4]
 8008896:	b2db      	uxtb	r3, r3
 8008898:	4619      	mov	r1, r3
 800889a:	6878      	ldr	r0, [r7, #4]
 800889c:	f7fe ff7f 	bl	800779e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2202      	movs	r2, #2
 80088a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80088a8:	e014      	b.n	80088d4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80088aa:	6878      	ldr	r0, [r7, #4]
 80088ac:	f000 f9d4 	bl	8008c58 <USBD_CtlSendStatus>
      break;
 80088b0:	e010      	b.n	80088d4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80088b2:	6878      	ldr	r0, [r7, #4]
 80088b4:	f000 f9d0 	bl	8008c58 <USBD_CtlSendStatus>
      break;
 80088b8:	e00c      	b.n	80088d4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80088ba:	6839      	ldr	r1, [r7, #0]
 80088bc:	6878      	ldr	r0, [r7, #4]
 80088be:	f000 f900 	bl	8008ac2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80088c2:	4b07      	ldr	r3, [pc, #28]	; (80088e0 <USBD_SetConfig+0x150>)
 80088c4:	781b      	ldrb	r3, [r3, #0]
 80088c6:	4619      	mov	r1, r3
 80088c8:	6878      	ldr	r0, [r7, #4]
 80088ca:	f7fe ff68 	bl	800779e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80088ce:	2303      	movs	r3, #3
 80088d0:	73fb      	strb	r3, [r7, #15]
      break;
 80088d2:	bf00      	nop
  }

  return ret;
 80088d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80088d6:	4618      	mov	r0, r3
 80088d8:	3710      	adds	r7, #16
 80088da:	46bd      	mov	sp, r7
 80088dc:	bd80      	pop	{r7, pc}
 80088de:	bf00      	nop
 80088e0:	20000724 	.word	0x20000724

080088e4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088e4:	b580      	push	{r7, lr}
 80088e6:	b082      	sub	sp, #8
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
 80088ec:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80088ee:	683b      	ldr	r3, [r7, #0]
 80088f0:	88db      	ldrh	r3, [r3, #6]
 80088f2:	2b01      	cmp	r3, #1
 80088f4:	d004      	beq.n	8008900 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80088f6:	6839      	ldr	r1, [r7, #0]
 80088f8:	6878      	ldr	r0, [r7, #4]
 80088fa:	f000 f8e2 	bl	8008ac2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80088fe:	e023      	b.n	8008948 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008906:	b2db      	uxtb	r3, r3
 8008908:	2b02      	cmp	r3, #2
 800890a:	dc02      	bgt.n	8008912 <USBD_GetConfig+0x2e>
 800890c:	2b00      	cmp	r3, #0
 800890e:	dc03      	bgt.n	8008918 <USBD_GetConfig+0x34>
 8008910:	e015      	b.n	800893e <USBD_GetConfig+0x5a>
 8008912:	2b03      	cmp	r3, #3
 8008914:	d00b      	beq.n	800892e <USBD_GetConfig+0x4a>
 8008916:	e012      	b.n	800893e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	2200      	movs	r2, #0
 800891c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	3308      	adds	r3, #8
 8008922:	2201      	movs	r2, #1
 8008924:	4619      	mov	r1, r3
 8008926:	6878      	ldr	r0, [r7, #4]
 8008928:	f000 f93c 	bl	8008ba4 <USBD_CtlSendData>
        break;
 800892c:	e00c      	b.n	8008948 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	3304      	adds	r3, #4
 8008932:	2201      	movs	r2, #1
 8008934:	4619      	mov	r1, r3
 8008936:	6878      	ldr	r0, [r7, #4]
 8008938:	f000 f934 	bl	8008ba4 <USBD_CtlSendData>
        break;
 800893c:	e004      	b.n	8008948 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800893e:	6839      	ldr	r1, [r7, #0]
 8008940:	6878      	ldr	r0, [r7, #4]
 8008942:	f000 f8be 	bl	8008ac2 <USBD_CtlError>
        break;
 8008946:	bf00      	nop
}
 8008948:	bf00      	nop
 800894a:	3708      	adds	r7, #8
 800894c:	46bd      	mov	sp, r7
 800894e:	bd80      	pop	{r7, pc}

08008950 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b082      	sub	sp, #8
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
 8008958:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008960:	b2db      	uxtb	r3, r3
 8008962:	3b01      	subs	r3, #1
 8008964:	2b02      	cmp	r3, #2
 8008966:	d81e      	bhi.n	80089a6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008968:	683b      	ldr	r3, [r7, #0]
 800896a:	88db      	ldrh	r3, [r3, #6]
 800896c:	2b02      	cmp	r3, #2
 800896e:	d004      	beq.n	800897a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008970:	6839      	ldr	r1, [r7, #0]
 8008972:	6878      	ldr	r0, [r7, #4]
 8008974:	f000 f8a5 	bl	8008ac2 <USBD_CtlError>
        break;
 8008978:	e01a      	b.n	80089b0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	2201      	movs	r2, #1
 800897e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008986:	2b00      	cmp	r3, #0
 8008988:	d005      	beq.n	8008996 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	68db      	ldr	r3, [r3, #12]
 800898e:	f043 0202 	orr.w	r2, r3, #2
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	330c      	adds	r3, #12
 800899a:	2202      	movs	r2, #2
 800899c:	4619      	mov	r1, r3
 800899e:	6878      	ldr	r0, [r7, #4]
 80089a0:	f000 f900 	bl	8008ba4 <USBD_CtlSendData>
      break;
 80089a4:	e004      	b.n	80089b0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80089a6:	6839      	ldr	r1, [r7, #0]
 80089a8:	6878      	ldr	r0, [r7, #4]
 80089aa:	f000 f88a 	bl	8008ac2 <USBD_CtlError>
      break;
 80089ae:	bf00      	nop
  }
}
 80089b0:	bf00      	nop
 80089b2:	3708      	adds	r7, #8
 80089b4:	46bd      	mov	sp, r7
 80089b6:	bd80      	pop	{r7, pc}

080089b8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b082      	sub	sp, #8
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
 80089c0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80089c2:	683b      	ldr	r3, [r7, #0]
 80089c4:	885b      	ldrh	r3, [r3, #2]
 80089c6:	2b01      	cmp	r3, #1
 80089c8:	d107      	bne.n	80089da <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	2201      	movs	r2, #1
 80089ce:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80089d2:	6878      	ldr	r0, [r7, #4]
 80089d4:	f000 f940 	bl	8008c58 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80089d8:	e013      	b.n	8008a02 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80089da:	683b      	ldr	r3, [r7, #0]
 80089dc:	885b      	ldrh	r3, [r3, #2]
 80089de:	2b02      	cmp	r3, #2
 80089e0:	d10b      	bne.n	80089fa <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80089e2:	683b      	ldr	r3, [r7, #0]
 80089e4:	889b      	ldrh	r3, [r3, #4]
 80089e6:	0a1b      	lsrs	r3, r3, #8
 80089e8:	b29b      	uxth	r3, r3
 80089ea:	b2da      	uxtb	r2, r3
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80089f2:	6878      	ldr	r0, [r7, #4]
 80089f4:	f000 f930 	bl	8008c58 <USBD_CtlSendStatus>
}
 80089f8:	e003      	b.n	8008a02 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80089fa:	6839      	ldr	r1, [r7, #0]
 80089fc:	6878      	ldr	r0, [r7, #4]
 80089fe:	f000 f860 	bl	8008ac2 <USBD_CtlError>
}
 8008a02:	bf00      	nop
 8008a04:	3708      	adds	r7, #8
 8008a06:	46bd      	mov	sp, r7
 8008a08:	bd80      	pop	{r7, pc}

08008a0a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a0a:	b580      	push	{r7, lr}
 8008a0c:	b082      	sub	sp, #8
 8008a0e:	af00      	add	r7, sp, #0
 8008a10:	6078      	str	r0, [r7, #4]
 8008a12:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a1a:	b2db      	uxtb	r3, r3
 8008a1c:	3b01      	subs	r3, #1
 8008a1e:	2b02      	cmp	r3, #2
 8008a20:	d80b      	bhi.n	8008a3a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008a22:	683b      	ldr	r3, [r7, #0]
 8008a24:	885b      	ldrh	r3, [r3, #2]
 8008a26:	2b01      	cmp	r3, #1
 8008a28:	d10c      	bne.n	8008a44 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008a32:	6878      	ldr	r0, [r7, #4]
 8008a34:	f000 f910 	bl	8008c58 <USBD_CtlSendStatus>
      }
      break;
 8008a38:	e004      	b.n	8008a44 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008a3a:	6839      	ldr	r1, [r7, #0]
 8008a3c:	6878      	ldr	r0, [r7, #4]
 8008a3e:	f000 f840 	bl	8008ac2 <USBD_CtlError>
      break;
 8008a42:	e000      	b.n	8008a46 <USBD_ClrFeature+0x3c>
      break;
 8008a44:	bf00      	nop
  }
}
 8008a46:	bf00      	nop
 8008a48:	3708      	adds	r7, #8
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	bd80      	pop	{r7, pc}

08008a4e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008a4e:	b580      	push	{r7, lr}
 8008a50:	b084      	sub	sp, #16
 8008a52:	af00      	add	r7, sp, #0
 8008a54:	6078      	str	r0, [r7, #4]
 8008a56:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008a58:	683b      	ldr	r3, [r7, #0]
 8008a5a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	781a      	ldrb	r2, [r3, #0]
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	3301      	adds	r3, #1
 8008a68:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	781a      	ldrb	r2, [r3, #0]
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	3301      	adds	r3, #1
 8008a76:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008a78:	68f8      	ldr	r0, [r7, #12]
 8008a7a:	f7ff fa17 	bl	8007eac <SWAPBYTE>
 8008a7e:	4603      	mov	r3, r0
 8008a80:	461a      	mov	r2, r3
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	3301      	adds	r3, #1
 8008a8a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	3301      	adds	r3, #1
 8008a90:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008a92:	68f8      	ldr	r0, [r7, #12]
 8008a94:	f7ff fa0a 	bl	8007eac <SWAPBYTE>
 8008a98:	4603      	mov	r3, r0
 8008a9a:	461a      	mov	r2, r3
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	3301      	adds	r3, #1
 8008aa4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	3301      	adds	r3, #1
 8008aaa:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008aac:	68f8      	ldr	r0, [r7, #12]
 8008aae:	f7ff f9fd 	bl	8007eac <SWAPBYTE>
 8008ab2:	4603      	mov	r3, r0
 8008ab4:	461a      	mov	r2, r3
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	80da      	strh	r2, [r3, #6]
}
 8008aba:	bf00      	nop
 8008abc:	3710      	adds	r7, #16
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	bd80      	pop	{r7, pc}

08008ac2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ac2:	b580      	push	{r7, lr}
 8008ac4:	b082      	sub	sp, #8
 8008ac6:	af00      	add	r7, sp, #0
 8008ac8:	6078      	str	r0, [r7, #4]
 8008aca:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008acc:	2180      	movs	r1, #128	; 0x80
 8008ace:	6878      	ldr	r0, [r7, #4]
 8008ad0:	f000 fe1a 	bl	8009708 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008ad4:	2100      	movs	r1, #0
 8008ad6:	6878      	ldr	r0, [r7, #4]
 8008ad8:	f000 fe16 	bl	8009708 <USBD_LL_StallEP>
}
 8008adc:	bf00      	nop
 8008ade:	3708      	adds	r7, #8
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	bd80      	pop	{r7, pc}

08008ae4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b086      	sub	sp, #24
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	60f8      	str	r0, [r7, #12]
 8008aec:	60b9      	str	r1, [r7, #8]
 8008aee:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008af0:	2300      	movs	r3, #0
 8008af2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d036      	beq.n	8008b68 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008afe:	6938      	ldr	r0, [r7, #16]
 8008b00:	f000 f836 	bl	8008b70 <USBD_GetLen>
 8008b04:	4603      	mov	r3, r0
 8008b06:	3301      	adds	r3, #1
 8008b08:	b29b      	uxth	r3, r3
 8008b0a:	005b      	lsls	r3, r3, #1
 8008b0c:	b29a      	uxth	r2, r3
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008b12:	7dfb      	ldrb	r3, [r7, #23]
 8008b14:	68ba      	ldr	r2, [r7, #8]
 8008b16:	4413      	add	r3, r2
 8008b18:	687a      	ldr	r2, [r7, #4]
 8008b1a:	7812      	ldrb	r2, [r2, #0]
 8008b1c:	701a      	strb	r2, [r3, #0]
  idx++;
 8008b1e:	7dfb      	ldrb	r3, [r7, #23]
 8008b20:	3301      	adds	r3, #1
 8008b22:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008b24:	7dfb      	ldrb	r3, [r7, #23]
 8008b26:	68ba      	ldr	r2, [r7, #8]
 8008b28:	4413      	add	r3, r2
 8008b2a:	2203      	movs	r2, #3
 8008b2c:	701a      	strb	r2, [r3, #0]
  idx++;
 8008b2e:	7dfb      	ldrb	r3, [r7, #23]
 8008b30:	3301      	adds	r3, #1
 8008b32:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008b34:	e013      	b.n	8008b5e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008b36:	7dfb      	ldrb	r3, [r7, #23]
 8008b38:	68ba      	ldr	r2, [r7, #8]
 8008b3a:	4413      	add	r3, r2
 8008b3c:	693a      	ldr	r2, [r7, #16]
 8008b3e:	7812      	ldrb	r2, [r2, #0]
 8008b40:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008b42:	693b      	ldr	r3, [r7, #16]
 8008b44:	3301      	adds	r3, #1
 8008b46:	613b      	str	r3, [r7, #16]
    idx++;
 8008b48:	7dfb      	ldrb	r3, [r7, #23]
 8008b4a:	3301      	adds	r3, #1
 8008b4c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008b4e:	7dfb      	ldrb	r3, [r7, #23]
 8008b50:	68ba      	ldr	r2, [r7, #8]
 8008b52:	4413      	add	r3, r2
 8008b54:	2200      	movs	r2, #0
 8008b56:	701a      	strb	r2, [r3, #0]
    idx++;
 8008b58:	7dfb      	ldrb	r3, [r7, #23]
 8008b5a:	3301      	adds	r3, #1
 8008b5c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008b5e:	693b      	ldr	r3, [r7, #16]
 8008b60:	781b      	ldrb	r3, [r3, #0]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d1e7      	bne.n	8008b36 <USBD_GetString+0x52>
 8008b66:	e000      	b.n	8008b6a <USBD_GetString+0x86>
    return;
 8008b68:	bf00      	nop
  }
}
 8008b6a:	3718      	adds	r7, #24
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	bd80      	pop	{r7, pc}

08008b70 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008b70:	b480      	push	{r7}
 8008b72:	b085      	sub	sp, #20
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008b78:	2300      	movs	r3, #0
 8008b7a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008b80:	e005      	b.n	8008b8e <USBD_GetLen+0x1e>
  {
    len++;
 8008b82:	7bfb      	ldrb	r3, [r7, #15]
 8008b84:	3301      	adds	r3, #1
 8008b86:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008b88:	68bb      	ldr	r3, [r7, #8]
 8008b8a:	3301      	adds	r3, #1
 8008b8c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008b8e:	68bb      	ldr	r3, [r7, #8]
 8008b90:	781b      	ldrb	r3, [r3, #0]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d1f5      	bne.n	8008b82 <USBD_GetLen+0x12>
  }

  return len;
 8008b96:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b98:	4618      	mov	r0, r3
 8008b9a:	3714      	adds	r7, #20
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba2:	4770      	bx	lr

08008ba4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b084      	sub	sp, #16
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	60f8      	str	r0, [r7, #12]
 8008bac:	60b9      	str	r1, [r7, #8]
 8008bae:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	2202      	movs	r2, #2
 8008bb4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	687a      	ldr	r2, [r7, #4]
 8008bbc:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	687a      	ldr	r2, [r7, #4]
 8008bc2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	68ba      	ldr	r2, [r7, #8]
 8008bc8:	2100      	movs	r1, #0
 8008bca:	68f8      	ldr	r0, [r7, #12]
 8008bcc:	f000 fe25 	bl	800981a <USBD_LL_Transmit>

  return USBD_OK;
 8008bd0:	2300      	movs	r3, #0
}
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	3710      	adds	r7, #16
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	bd80      	pop	{r7, pc}

08008bda <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008bda:	b580      	push	{r7, lr}
 8008bdc:	b084      	sub	sp, #16
 8008bde:	af00      	add	r7, sp, #0
 8008be0:	60f8      	str	r0, [r7, #12]
 8008be2:	60b9      	str	r1, [r7, #8]
 8008be4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	68ba      	ldr	r2, [r7, #8]
 8008bea:	2100      	movs	r1, #0
 8008bec:	68f8      	ldr	r0, [r7, #12]
 8008bee:	f000 fe14 	bl	800981a <USBD_LL_Transmit>

  return USBD_OK;
 8008bf2:	2300      	movs	r3, #0
}
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	3710      	adds	r7, #16
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	bd80      	pop	{r7, pc}

08008bfc <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b084      	sub	sp, #16
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	60f8      	str	r0, [r7, #12]
 8008c04:	60b9      	str	r1, [r7, #8]
 8008c06:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	2203      	movs	r2, #3
 8008c0c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	687a      	ldr	r2, [r7, #4]
 8008c14:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	687a      	ldr	r2, [r7, #4]
 8008c1c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	68ba      	ldr	r2, [r7, #8]
 8008c24:	2100      	movs	r1, #0
 8008c26:	68f8      	ldr	r0, [r7, #12]
 8008c28:	f000 fe18 	bl	800985c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008c2c:	2300      	movs	r3, #0
}
 8008c2e:	4618      	mov	r0, r3
 8008c30:	3710      	adds	r7, #16
 8008c32:	46bd      	mov	sp, r7
 8008c34:	bd80      	pop	{r7, pc}

08008c36 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008c36:	b580      	push	{r7, lr}
 8008c38:	b084      	sub	sp, #16
 8008c3a:	af00      	add	r7, sp, #0
 8008c3c:	60f8      	str	r0, [r7, #12]
 8008c3e:	60b9      	str	r1, [r7, #8]
 8008c40:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	68ba      	ldr	r2, [r7, #8]
 8008c46:	2100      	movs	r1, #0
 8008c48:	68f8      	ldr	r0, [r7, #12]
 8008c4a:	f000 fe07 	bl	800985c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008c4e:	2300      	movs	r3, #0
}
 8008c50:	4618      	mov	r0, r3
 8008c52:	3710      	adds	r7, #16
 8008c54:	46bd      	mov	sp, r7
 8008c56:	bd80      	pop	{r7, pc}

08008c58 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b082      	sub	sp, #8
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	2204      	movs	r2, #4
 8008c64:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008c68:	2300      	movs	r3, #0
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	2100      	movs	r1, #0
 8008c6e:	6878      	ldr	r0, [r7, #4]
 8008c70:	f000 fdd3 	bl	800981a <USBD_LL_Transmit>

  return USBD_OK;
 8008c74:	2300      	movs	r3, #0
}
 8008c76:	4618      	mov	r0, r3
 8008c78:	3708      	adds	r7, #8
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	bd80      	pop	{r7, pc}

08008c7e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008c7e:	b580      	push	{r7, lr}
 8008c80:	b082      	sub	sp, #8
 8008c82:	af00      	add	r7, sp, #0
 8008c84:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	2205      	movs	r2, #5
 8008c8a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008c8e:	2300      	movs	r3, #0
 8008c90:	2200      	movs	r2, #0
 8008c92:	2100      	movs	r1, #0
 8008c94:	6878      	ldr	r0, [r7, #4]
 8008c96:	f000 fde1 	bl	800985c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008c9a:	2300      	movs	r3, #0
}
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	3708      	adds	r7, #8
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	bd80      	pop	{r7, pc}

08008ca4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008ca8:	2200      	movs	r2, #0
 8008caa:	4912      	ldr	r1, [pc, #72]	; (8008cf4 <MX_USB_DEVICE_Init+0x50>)
 8008cac:	4812      	ldr	r0, [pc, #72]	; (8008cf8 <MX_USB_DEVICE_Init+0x54>)
 8008cae:	f7fe fcdd 	bl	800766c <USBD_Init>
 8008cb2:	4603      	mov	r3, r0
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d001      	beq.n	8008cbc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008cb8:	f7f8 fb6e 	bl	8001398 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008cbc:	490f      	ldr	r1, [pc, #60]	; (8008cfc <MX_USB_DEVICE_Init+0x58>)
 8008cbe:	480e      	ldr	r0, [pc, #56]	; (8008cf8 <MX_USB_DEVICE_Init+0x54>)
 8008cc0:	f7fe fd04 	bl	80076cc <USBD_RegisterClass>
 8008cc4:	4603      	mov	r3, r0
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d001      	beq.n	8008cce <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008cca:	f7f8 fb65 	bl	8001398 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008cce:	490c      	ldr	r1, [pc, #48]	; (8008d00 <MX_USB_DEVICE_Init+0x5c>)
 8008cd0:	4809      	ldr	r0, [pc, #36]	; (8008cf8 <MX_USB_DEVICE_Init+0x54>)
 8008cd2:	f7fe fbfb 	bl	80074cc <USBD_CDC_RegisterInterface>
 8008cd6:	4603      	mov	r3, r0
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d001      	beq.n	8008ce0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008cdc:	f7f8 fb5c 	bl	8001398 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008ce0:	4805      	ldr	r0, [pc, #20]	; (8008cf8 <MX_USB_DEVICE_Init+0x54>)
 8008ce2:	f7fe fd29 	bl	8007738 <USBD_Start>
 8008ce6:	4603      	mov	r3, r0
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d001      	beq.n	8008cf0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008cec:	f7f8 fb54 	bl	8001398 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008cf0:	bf00      	nop
 8008cf2:	bd80      	pop	{r7, pc}
 8008cf4:	20000108 	.word	0x20000108
 8008cf8:	20000728 	.word	0x20000728
 8008cfc:	20000068 	.word	0x20000068
 8008d00:	200000f4 	.word	0x200000f4

08008d04 <cdcAvailable>:
uint8_t  rx_buf[1024];



uint32_t cdcAvailable(void)
{
 8008d04:	b480      	push	{r7}
 8008d06:	b083      	sub	sp, #12
 8008d08:	af00      	add	r7, sp, #0
  uint32_t ret;

  ret = (rx_in - rx_out) % rx_len;
 8008d0a:	4b0a      	ldr	r3, [pc, #40]	; (8008d34 <cdcAvailable+0x30>)
 8008d0c:	681a      	ldr	r2, [r3, #0]
 8008d0e:	4b0a      	ldr	r3, [pc, #40]	; (8008d38 <cdcAvailable+0x34>)
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	1ad3      	subs	r3, r2, r3
 8008d14:	4a09      	ldr	r2, [pc, #36]	; (8008d3c <cdcAvailable+0x38>)
 8008d16:	6812      	ldr	r2, [r2, #0]
 8008d18:	fbb3 f1f2 	udiv	r1, r3, r2
 8008d1c:	fb01 f202 	mul.w	r2, r1, r2
 8008d20:	1a9b      	subs	r3, r3, r2
 8008d22:	607b      	str	r3, [r7, #4]

  return ret;
 8008d24:	687b      	ldr	r3, [r7, #4]
}
 8008d26:	4618      	mov	r0, r3
 8008d28:	370c      	adds	r7, #12
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d30:	4770      	bx	lr
 8008d32:	bf00      	nop
 8008d34:	20000a04 	.word	0x20000a04
 8008d38:	20000a08 	.word	0x20000a08
 8008d3c:	200000f0 	.word	0x200000f0

08008d40 <cdcRead>:

uint8_t cdcRead(void)
{
 8008d40:	b480      	push	{r7}
 8008d42:	b083      	sub	sp, #12
 8008d44:	af00      	add	r7, sp, #0
  uint8_t ret;

  ret = rx_buf[rx_out];
 8008d46:	4b0f      	ldr	r3, [pc, #60]	; (8008d84 <cdcRead+0x44>)
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	4a0f      	ldr	r2, [pc, #60]	; (8008d88 <cdcRead+0x48>)
 8008d4c:	5cd3      	ldrb	r3, [r2, r3]
 8008d4e:	71fb      	strb	r3, [r7, #7]

  if(rx_out != rx_in)
 8008d50:	4b0c      	ldr	r3, [pc, #48]	; (8008d84 <cdcRead+0x44>)
 8008d52:	681a      	ldr	r2, [r3, #0]
 8008d54:	4b0d      	ldr	r3, [pc, #52]	; (8008d8c <cdcRead+0x4c>)
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	429a      	cmp	r2, r3
 8008d5a:	d00b      	beq.n	8008d74 <cdcRead+0x34>
  {
    rx_out = (rx_out + 1) % rx_len;
 8008d5c:	4b09      	ldr	r3, [pc, #36]	; (8008d84 <cdcRead+0x44>)
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	3301      	adds	r3, #1
 8008d62:	4a0b      	ldr	r2, [pc, #44]	; (8008d90 <cdcRead+0x50>)
 8008d64:	6812      	ldr	r2, [r2, #0]
 8008d66:	fbb3 f1f2 	udiv	r1, r3, r2
 8008d6a:	fb01 f202 	mul.w	r2, r1, r2
 8008d6e:	1a9b      	subs	r3, r3, r2
 8008d70:	4a04      	ldr	r2, [pc, #16]	; (8008d84 <cdcRead+0x44>)
 8008d72:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8008d74:	79fb      	ldrb	r3, [r7, #7]
}
 8008d76:	4618      	mov	r0, r3
 8008d78:	370c      	adds	r7, #12
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d80:	4770      	bx	lr
 8008d82:	bf00      	nop
 8008d84:	20000a08 	.word	0x20000a08
 8008d88:	20000a0c 	.word	0x20000a0c
 8008d8c:	20000a04 	.word	0x20000a04
 8008d90:	200000f0 	.word	0x200000f0

08008d94 <cdcDataIn>:

void cdcDataIn(uint8_t rx_data)
{
 8008d94:	b480      	push	{r7}
 8008d96:	b085      	sub	sp, #20
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	4603      	mov	r3, r0
 8008d9c:	71fb      	strb	r3, [r7, #7]
  uint32_t next_rx_in;

  rx_buf[rx_in] = rx_data;
 8008d9e:	4b0f      	ldr	r3, [pc, #60]	; (8008ddc <cdcDataIn+0x48>)
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	490f      	ldr	r1, [pc, #60]	; (8008de0 <cdcDataIn+0x4c>)
 8008da4:	79fa      	ldrb	r2, [r7, #7]
 8008da6:	54ca      	strb	r2, [r1, r3]

  next_rx_in = (rx_in + 1) % rx_len;
 8008da8:	4b0c      	ldr	r3, [pc, #48]	; (8008ddc <cdcDataIn+0x48>)
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	3301      	adds	r3, #1
 8008dae:	4a0d      	ldr	r2, [pc, #52]	; (8008de4 <cdcDataIn+0x50>)
 8008db0:	6812      	ldr	r2, [r2, #0]
 8008db2:	fbb3 f1f2 	udiv	r1, r3, r2
 8008db6:	fb01 f202 	mul.w	r2, r1, r2
 8008dba:	1a9b      	subs	r3, r3, r2
 8008dbc:	60fb      	str	r3, [r7, #12]

  if(next_rx_in != rx_out)
 8008dbe:	4b0a      	ldr	r3, [pc, #40]	; (8008de8 <cdcDataIn+0x54>)
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	68fa      	ldr	r2, [r7, #12]
 8008dc4:	429a      	cmp	r2, r3
 8008dc6:	d002      	beq.n	8008dce <cdcDataIn+0x3a>
  {
    rx_in = next_rx_in;
 8008dc8:	4a04      	ldr	r2, [pc, #16]	; (8008ddc <cdcDataIn+0x48>)
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	6013      	str	r3, [r2, #0]
  }
}
 8008dce:	bf00      	nop
 8008dd0:	3714      	adds	r7, #20
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd8:	4770      	bx	lr
 8008dda:	bf00      	nop
 8008ddc:	20000a04 	.word	0x20000a04
 8008de0:	20000a0c 	.word	0x20000a0c
 8008de4:	200000f0 	.word	0x200000f0
 8008de8:	20000a08 	.word	0x20000a08

08008dec <cdcWrite>:

uint32_t cdcWrite(uint8_t *p_data, uint32_t length)
{
 8008dec:	b580      	push	{r7, lr}
 8008dee:	b084      	sub	sp, #16
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
 8008df4:	6039      	str	r1, [r7, #0]
  uint32_t pre_time;
  uint8_t ret;

  pre_time = HAL_GetTick();
 8008df6:	f7f9 f979 	bl	80020ec <HAL_GetTick>
 8008dfa:	60f8      	str	r0, [r7, #12]

  while(1)
  {
    ret = CDC_Transmit_FS(p_data, length);
 8008dfc:	683b      	ldr	r3, [r7, #0]
 8008dfe:	b29b      	uxth	r3, r3
 8008e00:	4619      	mov	r1, r3
 8008e02:	6878      	ldr	r0, [r7, #4]
 8008e04:	f000 f916 	bl	8009034 <CDC_Transmit_FS>
 8008e08:	4603      	mov	r3, r0
 8008e0a:	72fb      	strb	r3, [r7, #11]

    if(ret == USBD_OK)
 8008e0c:	7afb      	ldrb	r3, [r7, #11]
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d101      	bne.n	8008e16 <cdcWrite+0x2a>
    {
      return length;
 8008e12:	683b      	ldr	r3, [r7, #0]
 8008e14:	e00e      	b.n	8008e34 <cdcWrite+0x48>
    }
    else if(ret == USBD_FAIL)
 8008e16:	7afb      	ldrb	r3, [r7, #11]
 8008e18:	2b03      	cmp	r3, #3
 8008e1a:	d101      	bne.n	8008e20 <cdcWrite+0x34>
    {
      return 0;
 8008e1c:	2300      	movs	r3, #0
 8008e1e:	e009      	b.n	8008e34 <cdcWrite+0x48>
    }

    if(HAL_GetTick() - pre_time >= 100)
 8008e20:	f7f9 f964 	bl	80020ec <HAL_GetTick>
 8008e24:	4602      	mov	r2, r0
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	1ad3      	subs	r3, r2, r3
 8008e2a:	2b63      	cmp	r3, #99	; 0x63
 8008e2c:	d800      	bhi.n	8008e30 <cdcWrite+0x44>
    ret = CDC_Transmit_FS(p_data, length);
 8008e2e:	e7e5      	b.n	8008dfc <cdcWrite+0x10>
    {
      break;
 8008e30:	bf00      	nop
    }
  }

  return 0;
 8008e32:	2300      	movs	r3, #0
}
 8008e34:	4618      	mov	r0, r3
 8008e36:	3710      	adds	r7, #16
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	bd80      	pop	{r7, pc}

08008e3c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008e40:	2200      	movs	r2, #0
 8008e42:	4905      	ldr	r1, [pc, #20]	; (8008e58 <CDC_Init_FS+0x1c>)
 8008e44:	4805      	ldr	r0, [pc, #20]	; (8008e5c <CDC_Init_FS+0x20>)
 8008e46:	f7fe fb5b 	bl	8007500 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008e4a:	4905      	ldr	r1, [pc, #20]	; (8008e60 <CDC_Init_FS+0x24>)
 8008e4c:	4803      	ldr	r0, [pc, #12]	; (8008e5c <CDC_Init_FS+0x20>)
 8008e4e:	f7fe fb79 	bl	8007544 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008e52:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008e54:	4618      	mov	r0, r3
 8008e56:	bd80      	pop	{r7, pc}
 8008e58:	2000120c 	.word	0x2000120c
 8008e5c:	20000728 	.word	0x20000728
 8008e60:	20000e0c 	.word	0x20000e0c

08008e64 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008e64:	b480      	push	{r7}
 8008e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008e68:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e72:	4770      	bx	lr

08008e74 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008e74:	b480      	push	{r7}
 8008e76:	b083      	sub	sp, #12
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	4603      	mov	r3, r0
 8008e7c:	6039      	str	r1, [r7, #0]
 8008e7e:	71fb      	strb	r3, [r7, #7]
 8008e80:	4613      	mov	r3, r2
 8008e82:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008e84:	79fb      	ldrb	r3, [r7, #7]
 8008e86:	2b23      	cmp	r3, #35	; 0x23
 8008e88:	f200 80a3 	bhi.w	8008fd2 <CDC_Control_FS+0x15e>
 8008e8c:	a201      	add	r2, pc, #4	; (adr r2, 8008e94 <CDC_Control_FS+0x20>)
 8008e8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e92:	bf00      	nop
 8008e94:	08008fd3 	.word	0x08008fd3
 8008e98:	08008fd3 	.word	0x08008fd3
 8008e9c:	08008fd3 	.word	0x08008fd3
 8008ea0:	08008fd3 	.word	0x08008fd3
 8008ea4:	08008fd3 	.word	0x08008fd3
 8008ea8:	08008fd3 	.word	0x08008fd3
 8008eac:	08008fd3 	.word	0x08008fd3
 8008eb0:	08008fd3 	.word	0x08008fd3
 8008eb4:	08008fd3 	.word	0x08008fd3
 8008eb8:	08008fd3 	.word	0x08008fd3
 8008ebc:	08008fd3 	.word	0x08008fd3
 8008ec0:	08008fd3 	.word	0x08008fd3
 8008ec4:	08008fd3 	.word	0x08008fd3
 8008ec8:	08008fd3 	.word	0x08008fd3
 8008ecc:	08008fd3 	.word	0x08008fd3
 8008ed0:	08008fd3 	.word	0x08008fd3
 8008ed4:	08008fd3 	.word	0x08008fd3
 8008ed8:	08008fd3 	.word	0x08008fd3
 8008edc:	08008fd3 	.word	0x08008fd3
 8008ee0:	08008fd3 	.word	0x08008fd3
 8008ee4:	08008fd3 	.word	0x08008fd3
 8008ee8:	08008fd3 	.word	0x08008fd3
 8008eec:	08008fd3 	.word	0x08008fd3
 8008ef0:	08008fd3 	.word	0x08008fd3
 8008ef4:	08008fd3 	.word	0x08008fd3
 8008ef8:	08008fd3 	.word	0x08008fd3
 8008efc:	08008fd3 	.word	0x08008fd3
 8008f00:	08008fd3 	.word	0x08008fd3
 8008f04:	08008fd3 	.word	0x08008fd3
 8008f08:	08008fd3 	.word	0x08008fd3
 8008f0c:	08008fd3 	.word	0x08008fd3
 8008f10:	08008fd3 	.word	0x08008fd3
 8008f14:	08008f25 	.word	0x08008f25
 8008f18:	08008f7f 	.word	0x08008f7f
 8008f1c:	08008fd3 	.word	0x08008fd3
 8008f20:	08008fd3 	.word	0x08008fd3
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
      LineCoding.bitrate    = (uint32_t)(pbuf[0]);
 8008f24:	683b      	ldr	r3, [r7, #0]
 8008f26:	781b      	ldrb	r3, [r3, #0]
 8008f28:	461a      	mov	r2, r3
 8008f2a:	4b2e      	ldr	r3, [pc, #184]	; (8008fe4 <CDC_Control_FS+0x170>)
 8008f2c:	601a      	str	r2, [r3, #0]
      LineCoding.bitrate   |= (uint32_t)(pbuf[1] << 8);
 8008f2e:	4b2d      	ldr	r3, [pc, #180]	; (8008fe4 <CDC_Control_FS+0x170>)
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	683a      	ldr	r2, [r7, #0]
 8008f34:	3201      	adds	r2, #1
 8008f36:	7812      	ldrb	r2, [r2, #0]
 8008f38:	0212      	lsls	r2, r2, #8
 8008f3a:	4313      	orrs	r3, r2
 8008f3c:	4a29      	ldr	r2, [pc, #164]	; (8008fe4 <CDC_Control_FS+0x170>)
 8008f3e:	6013      	str	r3, [r2, #0]
      LineCoding.bitrate   |= (uint32_t)(pbuf[2] << 16);
 8008f40:	4b28      	ldr	r3, [pc, #160]	; (8008fe4 <CDC_Control_FS+0x170>)
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	683a      	ldr	r2, [r7, #0]
 8008f46:	3202      	adds	r2, #2
 8008f48:	7812      	ldrb	r2, [r2, #0]
 8008f4a:	0412      	lsls	r2, r2, #16
 8008f4c:	4313      	orrs	r3, r2
 8008f4e:	4a25      	ldr	r2, [pc, #148]	; (8008fe4 <CDC_Control_FS+0x170>)
 8008f50:	6013      	str	r3, [r2, #0]
      LineCoding.bitrate   |= (uint32_t)(pbuf[3] << 24);
 8008f52:	4b24      	ldr	r3, [pc, #144]	; (8008fe4 <CDC_Control_FS+0x170>)
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	683a      	ldr	r2, [r7, #0]
 8008f58:	3203      	adds	r2, #3
 8008f5a:	7812      	ldrb	r2, [r2, #0]
 8008f5c:	0612      	lsls	r2, r2, #24
 8008f5e:	4313      	orrs	r3, r2
 8008f60:	4a20      	ldr	r2, [pc, #128]	; (8008fe4 <CDC_Control_FS+0x170>)
 8008f62:	6013      	str	r3, [r2, #0]
      LineCoding.format     = pbuf[4];
 8008f64:	683b      	ldr	r3, [r7, #0]
 8008f66:	791a      	ldrb	r2, [r3, #4]
 8008f68:	4b1e      	ldr	r3, [pc, #120]	; (8008fe4 <CDC_Control_FS+0x170>)
 8008f6a:	711a      	strb	r2, [r3, #4]
      LineCoding.paritytype = pbuf[5];
 8008f6c:	683b      	ldr	r3, [r7, #0]
 8008f6e:	795a      	ldrb	r2, [r3, #5]
 8008f70:	4b1c      	ldr	r3, [pc, #112]	; (8008fe4 <CDC_Control_FS+0x170>)
 8008f72:	715a      	strb	r2, [r3, #5]
      LineCoding.datatype   = pbuf[6];
 8008f74:	683b      	ldr	r3, [r7, #0]
 8008f76:	799a      	ldrb	r2, [r3, #6]
 8008f78:	4b1a      	ldr	r3, [pc, #104]	; (8008fe4 <CDC_Control_FS+0x170>)
 8008f7a:	719a      	strb	r2, [r3, #6]
    break;
 8008f7c:	e02a      	b.n	8008fd4 <CDC_Control_FS+0x160>

    case CDC_GET_LINE_CODING:
      pbuf[0] = (uint8_t)(LineCoding.bitrate);
 8008f7e:	4b19      	ldr	r3, [pc, #100]	; (8008fe4 <CDC_Control_FS+0x170>)
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	b2da      	uxtb	r2, r3
 8008f84:	683b      	ldr	r3, [r7, #0]
 8008f86:	701a      	strb	r2, [r3, #0]
      pbuf[1] = (uint8_t)(LineCoding.bitrate >> 8);
 8008f88:	4b16      	ldr	r3, [pc, #88]	; (8008fe4 <CDC_Control_FS+0x170>)
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	0a1a      	lsrs	r2, r3, #8
 8008f8e:	683b      	ldr	r3, [r7, #0]
 8008f90:	3301      	adds	r3, #1
 8008f92:	b2d2      	uxtb	r2, r2
 8008f94:	701a      	strb	r2, [r3, #0]
      pbuf[2] = (uint8_t)(LineCoding.bitrate >> 16);
 8008f96:	4b13      	ldr	r3, [pc, #76]	; (8008fe4 <CDC_Control_FS+0x170>)
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	0c1a      	lsrs	r2, r3, #16
 8008f9c:	683b      	ldr	r3, [r7, #0]
 8008f9e:	3302      	adds	r3, #2
 8008fa0:	b2d2      	uxtb	r2, r2
 8008fa2:	701a      	strb	r2, [r3, #0]
      pbuf[3] = (uint8_t)(LineCoding.bitrate >> 24);
 8008fa4:	4b0f      	ldr	r3, [pc, #60]	; (8008fe4 <CDC_Control_FS+0x170>)
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	0e1a      	lsrs	r2, r3, #24
 8008faa:	683b      	ldr	r3, [r7, #0]
 8008fac:	3303      	adds	r3, #3
 8008fae:	b2d2      	uxtb	r2, r2
 8008fb0:	701a      	strb	r2, [r3, #0]
      pbuf[4] = LineCoding.format;
 8008fb2:	683b      	ldr	r3, [r7, #0]
 8008fb4:	3304      	adds	r3, #4
 8008fb6:	4a0b      	ldr	r2, [pc, #44]	; (8008fe4 <CDC_Control_FS+0x170>)
 8008fb8:	7912      	ldrb	r2, [r2, #4]
 8008fba:	701a      	strb	r2, [r3, #0]
      pbuf[5] = LineCoding.paritytype;
 8008fbc:	683b      	ldr	r3, [r7, #0]
 8008fbe:	3305      	adds	r3, #5
 8008fc0:	4a08      	ldr	r2, [pc, #32]	; (8008fe4 <CDC_Control_FS+0x170>)
 8008fc2:	7952      	ldrb	r2, [r2, #5]
 8008fc4:	701a      	strb	r2, [r3, #0]
      pbuf[6] = LineCoding.datatype;
 8008fc6:	683b      	ldr	r3, [r7, #0]
 8008fc8:	3306      	adds	r3, #6
 8008fca:	4a06      	ldr	r2, [pc, #24]	; (8008fe4 <CDC_Control_FS+0x170>)
 8008fcc:	7992      	ldrb	r2, [r2, #6]
 8008fce:	701a      	strb	r2, [r3, #0]
    break;
 8008fd0:	e000      	b.n	8008fd4 <CDC_Control_FS+0x160>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008fd2:	bf00      	nop
  }

  return (USBD_OK);
 8008fd4:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	370c      	adds	r7, #12
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe0:	4770      	bx	lr
 8008fe2:	bf00      	nop
 8008fe4:	200000e8 	.word	0x200000e8

08008fe8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	b084      	sub	sp, #16
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
 8008ff0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008ff2:	6879      	ldr	r1, [r7, #4]
 8008ff4:	480e      	ldr	r0, [pc, #56]	; (8009030 <CDC_Receive_FS+0x48>)
 8008ff6:	f7fe faa5 	bl	8007544 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008ffa:	480d      	ldr	r0, [pc, #52]	; (8009030 <CDC_Receive_FS+0x48>)
 8008ffc:	f7fe fb00 	bl	8007600 <USBD_CDC_ReceivePacket>


  for(int i=0; i<*Len; i++)
 8009000:	2300      	movs	r3, #0
 8009002:	60fb      	str	r3, [r7, #12]
 8009004:	e009      	b.n	800901a <CDC_Receive_FS+0x32>
  {
    cdcDataIn(Buf[i]);
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	687a      	ldr	r2, [r7, #4]
 800900a:	4413      	add	r3, r2
 800900c:	781b      	ldrb	r3, [r3, #0]
 800900e:	4618      	mov	r0, r3
 8009010:	f7ff fec0 	bl	8008d94 <cdcDataIn>
  for(int i=0; i<*Len; i++)
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	3301      	adds	r3, #1
 8009018:	60fb      	str	r3, [r7, #12]
 800901a:	683b      	ldr	r3, [r7, #0]
 800901c:	681a      	ldr	r2, [r3, #0]
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	429a      	cmp	r2, r3
 8009022:	d8f0      	bhi.n	8009006 <CDC_Receive_FS+0x1e>
  }



  return (USBD_OK);
 8009024:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009026:	4618      	mov	r0, r3
 8009028:	3710      	adds	r7, #16
 800902a:	46bd      	mov	sp, r7
 800902c:	bd80      	pop	{r7, pc}
 800902e:	bf00      	nop
 8009030:	20000728 	.word	0x20000728

08009034 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009034:	b580      	push	{r7, lr}
 8009036:	b084      	sub	sp, #16
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]
 800903c:	460b      	mov	r3, r1
 800903e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009040:	2300      	movs	r3, #0
 8009042:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009044:	4b0d      	ldr	r3, [pc, #52]	; (800907c <CDC_Transmit_FS+0x48>)
 8009046:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800904a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800904c:	68bb      	ldr	r3, [r7, #8]
 800904e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009052:	2b00      	cmp	r3, #0
 8009054:	d001      	beq.n	800905a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009056:	2301      	movs	r3, #1
 8009058:	e00b      	b.n	8009072 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800905a:	887b      	ldrh	r3, [r7, #2]
 800905c:	461a      	mov	r2, r3
 800905e:	6879      	ldr	r1, [r7, #4]
 8009060:	4806      	ldr	r0, [pc, #24]	; (800907c <CDC_Transmit_FS+0x48>)
 8009062:	f7fe fa4d 	bl	8007500 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009066:	4805      	ldr	r0, [pc, #20]	; (800907c <CDC_Transmit_FS+0x48>)
 8009068:	f7fe fa8a 	bl	8007580 <USBD_CDC_TransmitPacket>
 800906c:	4603      	mov	r3, r0
 800906e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009070:	7bfb      	ldrb	r3, [r7, #15]
}
 8009072:	4618      	mov	r0, r3
 8009074:	3710      	adds	r7, #16
 8009076:	46bd      	mov	sp, r7
 8009078:	bd80      	pop	{r7, pc}
 800907a:	bf00      	nop
 800907c:	20000728 	.word	0x20000728

08009080 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009080:	b480      	push	{r7}
 8009082:	b087      	sub	sp, #28
 8009084:	af00      	add	r7, sp, #0
 8009086:	60f8      	str	r0, [r7, #12]
 8009088:	60b9      	str	r1, [r7, #8]
 800908a:	4613      	mov	r3, r2
 800908c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800908e:	2300      	movs	r3, #0
 8009090:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009092:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009096:	4618      	mov	r0, r3
 8009098:	371c      	adds	r7, #28
 800909a:	46bd      	mov	sp, r7
 800909c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a0:	4770      	bx	lr
	...

080090a4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80090a4:	b480      	push	{r7}
 80090a6:	b083      	sub	sp, #12
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	4603      	mov	r3, r0
 80090ac:	6039      	str	r1, [r7, #0]
 80090ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80090b0:	683b      	ldr	r3, [r7, #0]
 80090b2:	2212      	movs	r2, #18
 80090b4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80090b6:	4b03      	ldr	r3, [pc, #12]	; (80090c4 <USBD_FS_DeviceDescriptor+0x20>)
}
 80090b8:	4618      	mov	r0, r3
 80090ba:	370c      	adds	r7, #12
 80090bc:	46bd      	mov	sp, r7
 80090be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c2:	4770      	bx	lr
 80090c4:	20000128 	.word	0x20000128

080090c8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80090c8:	b480      	push	{r7}
 80090ca:	b083      	sub	sp, #12
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	4603      	mov	r3, r0
 80090d0:	6039      	str	r1, [r7, #0]
 80090d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80090d4:	683b      	ldr	r3, [r7, #0]
 80090d6:	2204      	movs	r2, #4
 80090d8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80090da:	4b03      	ldr	r3, [pc, #12]	; (80090e8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80090dc:	4618      	mov	r0, r3
 80090de:	370c      	adds	r7, #12
 80090e0:	46bd      	mov	sp, r7
 80090e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e6:	4770      	bx	lr
 80090e8:	20000148 	.word	0x20000148

080090ec <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b082      	sub	sp, #8
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	4603      	mov	r3, r0
 80090f4:	6039      	str	r1, [r7, #0]
 80090f6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80090f8:	79fb      	ldrb	r3, [r7, #7]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d105      	bne.n	800910a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80090fe:	683a      	ldr	r2, [r7, #0]
 8009100:	4907      	ldr	r1, [pc, #28]	; (8009120 <USBD_FS_ProductStrDescriptor+0x34>)
 8009102:	4808      	ldr	r0, [pc, #32]	; (8009124 <USBD_FS_ProductStrDescriptor+0x38>)
 8009104:	f7ff fcee 	bl	8008ae4 <USBD_GetString>
 8009108:	e004      	b.n	8009114 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800910a:	683a      	ldr	r2, [r7, #0]
 800910c:	4904      	ldr	r1, [pc, #16]	; (8009120 <USBD_FS_ProductStrDescriptor+0x34>)
 800910e:	4805      	ldr	r0, [pc, #20]	; (8009124 <USBD_FS_ProductStrDescriptor+0x38>)
 8009110:	f7ff fce8 	bl	8008ae4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009114:	4b02      	ldr	r3, [pc, #8]	; (8009120 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009116:	4618      	mov	r0, r3
 8009118:	3708      	adds	r7, #8
 800911a:	46bd      	mov	sp, r7
 800911c:	bd80      	pop	{r7, pc}
 800911e:	bf00      	nop
 8009120:	2000160c 	.word	0x2000160c
 8009124:	0800cf10 	.word	0x0800cf10

08009128 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009128:	b580      	push	{r7, lr}
 800912a:	b082      	sub	sp, #8
 800912c:	af00      	add	r7, sp, #0
 800912e:	4603      	mov	r3, r0
 8009130:	6039      	str	r1, [r7, #0]
 8009132:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009134:	683a      	ldr	r2, [r7, #0]
 8009136:	4904      	ldr	r1, [pc, #16]	; (8009148 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009138:	4804      	ldr	r0, [pc, #16]	; (800914c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800913a:	f7ff fcd3 	bl	8008ae4 <USBD_GetString>
  return USBD_StrDesc;
 800913e:	4b02      	ldr	r3, [pc, #8]	; (8009148 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009140:	4618      	mov	r0, r3
 8009142:	3708      	adds	r7, #8
 8009144:	46bd      	mov	sp, r7
 8009146:	bd80      	pop	{r7, pc}
 8009148:	2000160c 	.word	0x2000160c
 800914c:	0800cf28 	.word	0x0800cf28

08009150 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009150:	b580      	push	{r7, lr}
 8009152:	b082      	sub	sp, #8
 8009154:	af00      	add	r7, sp, #0
 8009156:	4603      	mov	r3, r0
 8009158:	6039      	str	r1, [r7, #0]
 800915a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800915c:	683b      	ldr	r3, [r7, #0]
 800915e:	221a      	movs	r2, #26
 8009160:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009162:	f000 f855 	bl	8009210 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009166:	4b02      	ldr	r3, [pc, #8]	; (8009170 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009168:	4618      	mov	r0, r3
 800916a:	3708      	adds	r7, #8
 800916c:	46bd      	mov	sp, r7
 800916e:	bd80      	pop	{r7, pc}
 8009170:	2000014c 	.word	0x2000014c

08009174 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009174:	b580      	push	{r7, lr}
 8009176:	b082      	sub	sp, #8
 8009178:	af00      	add	r7, sp, #0
 800917a:	4603      	mov	r3, r0
 800917c:	6039      	str	r1, [r7, #0]
 800917e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009180:	79fb      	ldrb	r3, [r7, #7]
 8009182:	2b00      	cmp	r3, #0
 8009184:	d105      	bne.n	8009192 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009186:	683a      	ldr	r2, [r7, #0]
 8009188:	4907      	ldr	r1, [pc, #28]	; (80091a8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800918a:	4808      	ldr	r0, [pc, #32]	; (80091ac <USBD_FS_ConfigStrDescriptor+0x38>)
 800918c:	f7ff fcaa 	bl	8008ae4 <USBD_GetString>
 8009190:	e004      	b.n	800919c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009192:	683a      	ldr	r2, [r7, #0]
 8009194:	4904      	ldr	r1, [pc, #16]	; (80091a8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009196:	4805      	ldr	r0, [pc, #20]	; (80091ac <USBD_FS_ConfigStrDescriptor+0x38>)
 8009198:	f7ff fca4 	bl	8008ae4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800919c:	4b02      	ldr	r3, [pc, #8]	; (80091a8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800919e:	4618      	mov	r0, r3
 80091a0:	3708      	adds	r7, #8
 80091a2:	46bd      	mov	sp, r7
 80091a4:	bd80      	pop	{r7, pc}
 80091a6:	bf00      	nop
 80091a8:	2000160c 	.word	0x2000160c
 80091ac:	0800cf3c 	.word	0x0800cf3c

080091b0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80091b0:	b580      	push	{r7, lr}
 80091b2:	b082      	sub	sp, #8
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	4603      	mov	r3, r0
 80091b8:	6039      	str	r1, [r7, #0]
 80091ba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80091bc:	79fb      	ldrb	r3, [r7, #7]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d105      	bne.n	80091ce <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80091c2:	683a      	ldr	r2, [r7, #0]
 80091c4:	4907      	ldr	r1, [pc, #28]	; (80091e4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80091c6:	4808      	ldr	r0, [pc, #32]	; (80091e8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80091c8:	f7ff fc8c 	bl	8008ae4 <USBD_GetString>
 80091cc:	e004      	b.n	80091d8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80091ce:	683a      	ldr	r2, [r7, #0]
 80091d0:	4904      	ldr	r1, [pc, #16]	; (80091e4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80091d2:	4805      	ldr	r0, [pc, #20]	; (80091e8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80091d4:	f7ff fc86 	bl	8008ae4 <USBD_GetString>
  }
  return USBD_StrDesc;
 80091d8:	4b02      	ldr	r3, [pc, #8]	; (80091e4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80091da:	4618      	mov	r0, r3
 80091dc:	3708      	adds	r7, #8
 80091de:	46bd      	mov	sp, r7
 80091e0:	bd80      	pop	{r7, pc}
 80091e2:	bf00      	nop
 80091e4:	2000160c 	.word	0x2000160c
 80091e8:	0800cf48 	.word	0x0800cf48

080091ec <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80091ec:	b480      	push	{r7}
 80091ee:	b083      	sub	sp, #12
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	4603      	mov	r3, r0
 80091f4:	6039      	str	r1, [r7, #0]
 80091f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 80091f8:	683b      	ldr	r3, [r7, #0]
 80091fa:	220c      	movs	r2, #12
 80091fc:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 80091fe:	4b03      	ldr	r3, [pc, #12]	; (800920c <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8009200:	4618      	mov	r0, r3
 8009202:	370c      	adds	r7, #12
 8009204:	46bd      	mov	sp, r7
 8009206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920a:	4770      	bx	lr
 800920c:	2000013c 	.word	0x2000013c

08009210 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009210:	b580      	push	{r7, lr}
 8009212:	b084      	sub	sp, #16
 8009214:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009216:	4b0f      	ldr	r3, [pc, #60]	; (8009254 <Get_SerialNum+0x44>)
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800921c:	4b0e      	ldr	r3, [pc, #56]	; (8009258 <Get_SerialNum+0x48>)
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009222:	4b0e      	ldr	r3, [pc, #56]	; (800925c <Get_SerialNum+0x4c>)
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009228:	68fa      	ldr	r2, [r7, #12]
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	4413      	add	r3, r2
 800922e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	2b00      	cmp	r3, #0
 8009234:	d009      	beq.n	800924a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009236:	2208      	movs	r2, #8
 8009238:	4909      	ldr	r1, [pc, #36]	; (8009260 <Get_SerialNum+0x50>)
 800923a:	68f8      	ldr	r0, [r7, #12]
 800923c:	f000 f814 	bl	8009268 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009240:	2204      	movs	r2, #4
 8009242:	4908      	ldr	r1, [pc, #32]	; (8009264 <Get_SerialNum+0x54>)
 8009244:	68b8      	ldr	r0, [r7, #8]
 8009246:	f000 f80f 	bl	8009268 <IntToUnicode>
  }
}
 800924a:	bf00      	nop
 800924c:	3710      	adds	r7, #16
 800924e:	46bd      	mov	sp, r7
 8009250:	bd80      	pop	{r7, pc}
 8009252:	bf00      	nop
 8009254:	1ff0f420 	.word	0x1ff0f420
 8009258:	1ff0f424 	.word	0x1ff0f424
 800925c:	1ff0f428 	.word	0x1ff0f428
 8009260:	2000014e 	.word	0x2000014e
 8009264:	2000015e 	.word	0x2000015e

08009268 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009268:	b480      	push	{r7}
 800926a:	b087      	sub	sp, #28
 800926c:	af00      	add	r7, sp, #0
 800926e:	60f8      	str	r0, [r7, #12]
 8009270:	60b9      	str	r1, [r7, #8]
 8009272:	4613      	mov	r3, r2
 8009274:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009276:	2300      	movs	r3, #0
 8009278:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800927a:	2300      	movs	r3, #0
 800927c:	75fb      	strb	r3, [r7, #23]
 800927e:	e027      	b.n	80092d0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	0f1b      	lsrs	r3, r3, #28
 8009284:	2b09      	cmp	r3, #9
 8009286:	d80b      	bhi.n	80092a0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	0f1b      	lsrs	r3, r3, #28
 800928c:	b2da      	uxtb	r2, r3
 800928e:	7dfb      	ldrb	r3, [r7, #23]
 8009290:	005b      	lsls	r3, r3, #1
 8009292:	4619      	mov	r1, r3
 8009294:	68bb      	ldr	r3, [r7, #8]
 8009296:	440b      	add	r3, r1
 8009298:	3230      	adds	r2, #48	; 0x30
 800929a:	b2d2      	uxtb	r2, r2
 800929c:	701a      	strb	r2, [r3, #0]
 800929e:	e00a      	b.n	80092b6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	0f1b      	lsrs	r3, r3, #28
 80092a4:	b2da      	uxtb	r2, r3
 80092a6:	7dfb      	ldrb	r3, [r7, #23]
 80092a8:	005b      	lsls	r3, r3, #1
 80092aa:	4619      	mov	r1, r3
 80092ac:	68bb      	ldr	r3, [r7, #8]
 80092ae:	440b      	add	r3, r1
 80092b0:	3237      	adds	r2, #55	; 0x37
 80092b2:	b2d2      	uxtb	r2, r2
 80092b4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	011b      	lsls	r3, r3, #4
 80092ba:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80092bc:	7dfb      	ldrb	r3, [r7, #23]
 80092be:	005b      	lsls	r3, r3, #1
 80092c0:	3301      	adds	r3, #1
 80092c2:	68ba      	ldr	r2, [r7, #8]
 80092c4:	4413      	add	r3, r2
 80092c6:	2200      	movs	r2, #0
 80092c8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80092ca:	7dfb      	ldrb	r3, [r7, #23]
 80092cc:	3301      	adds	r3, #1
 80092ce:	75fb      	strb	r3, [r7, #23]
 80092d0:	7dfa      	ldrb	r2, [r7, #23]
 80092d2:	79fb      	ldrb	r3, [r7, #7]
 80092d4:	429a      	cmp	r2, r3
 80092d6:	d3d3      	bcc.n	8009280 <IntToUnicode+0x18>
  }
}
 80092d8:	bf00      	nop
 80092da:	bf00      	nop
 80092dc:	371c      	adds	r7, #28
 80092de:	46bd      	mov	sp, r7
 80092e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e4:	4770      	bx	lr
	...

080092e8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b0ac      	sub	sp, #176	; 0xb0
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80092f0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80092f4:	2200      	movs	r2, #0
 80092f6:	601a      	str	r2, [r3, #0]
 80092f8:	605a      	str	r2, [r3, #4]
 80092fa:	609a      	str	r2, [r3, #8]
 80092fc:	60da      	str	r2, [r3, #12]
 80092fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8009300:	f107 0318 	add.w	r3, r7, #24
 8009304:	2284      	movs	r2, #132	; 0x84
 8009306:	2100      	movs	r1, #0
 8009308:	4618      	mov	r0, r3
 800930a:	f000 fba1 	bl	8009a50 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009316:	d151      	bne.n	80093bc <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8009318:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800931c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800931e:	2300      	movs	r3, #0
 8009320:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8009324:	f107 0318 	add.w	r3, r7, #24
 8009328:	4618      	mov	r0, r3
 800932a:	f7fb fc93 	bl	8004c54 <HAL_RCCEx_PeriphCLKConfig>
 800932e:	4603      	mov	r3, r0
 8009330:	2b00      	cmp	r3, #0
 8009332:	d001      	beq.n	8009338 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8009334:	f7f8 f830 	bl	8001398 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009338:	4b22      	ldr	r3, [pc, #136]	; (80093c4 <HAL_PCD_MspInit+0xdc>)
 800933a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800933c:	4a21      	ldr	r2, [pc, #132]	; (80093c4 <HAL_PCD_MspInit+0xdc>)
 800933e:	f043 0301 	orr.w	r3, r3, #1
 8009342:	6313      	str	r3, [r2, #48]	; 0x30
 8009344:	4b1f      	ldr	r3, [pc, #124]	; (80093c4 <HAL_PCD_MspInit+0xdc>)
 8009346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009348:	f003 0301 	and.w	r3, r3, #1
 800934c:	617b      	str	r3, [r7, #20]
 800934e:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 8009350:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8009354:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009358:	2302      	movs	r3, #2
 800935a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800935e:	2300      	movs	r3, #0
 8009360:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009364:	2303      	movs	r3, #3
 8009366:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800936a:	230a      	movs	r3, #10
 800936c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009370:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8009374:	4619      	mov	r1, r3
 8009376:	4814      	ldr	r0, [pc, #80]	; (80093c8 <HAL_PCD_MspInit+0xe0>)
 8009378:	f7f9 fb12 	bl	80029a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800937c:	4b11      	ldr	r3, [pc, #68]	; (80093c4 <HAL_PCD_MspInit+0xdc>)
 800937e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009380:	4a10      	ldr	r2, [pc, #64]	; (80093c4 <HAL_PCD_MspInit+0xdc>)
 8009382:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009386:	6353      	str	r3, [r2, #52]	; 0x34
 8009388:	4b0e      	ldr	r3, [pc, #56]	; (80093c4 <HAL_PCD_MspInit+0xdc>)
 800938a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800938c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009390:	613b      	str	r3, [r7, #16]
 8009392:	693b      	ldr	r3, [r7, #16]
 8009394:	4b0b      	ldr	r3, [pc, #44]	; (80093c4 <HAL_PCD_MspInit+0xdc>)
 8009396:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009398:	4a0a      	ldr	r2, [pc, #40]	; (80093c4 <HAL_PCD_MspInit+0xdc>)
 800939a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800939e:	6453      	str	r3, [r2, #68]	; 0x44
 80093a0:	4b08      	ldr	r3, [pc, #32]	; (80093c4 <HAL_PCD_MspInit+0xdc>)
 80093a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80093a8:	60fb      	str	r3, [r7, #12]
 80093aa:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80093ac:	2200      	movs	r2, #0
 80093ae:	2100      	movs	r1, #0
 80093b0:	2043      	movs	r0, #67	; 0x43
 80093b2:	f7f8 ffa6 	bl	8002302 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80093b6:	2043      	movs	r0, #67	; 0x43
 80093b8:	f7f8 ffbf 	bl	800233a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80093bc:	bf00      	nop
 80093be:	37b0      	adds	r7, #176	; 0xb0
 80093c0:	46bd      	mov	sp, r7
 80093c2:	bd80      	pop	{r7, pc}
 80093c4:	40023800 	.word	0x40023800
 80093c8:	40020000 	.word	0x40020000

080093cc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b082      	sub	sp, #8
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80093e0:	4619      	mov	r1, r3
 80093e2:	4610      	mov	r0, r2
 80093e4:	f7fe f9f5 	bl	80077d2 <USBD_LL_SetupStage>
}
 80093e8:	bf00      	nop
 80093ea:	3708      	adds	r7, #8
 80093ec:	46bd      	mov	sp, r7
 80093ee:	bd80      	pop	{r7, pc}

080093f0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093f0:	b580      	push	{r7, lr}
 80093f2:	b082      	sub	sp, #8
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
 80093f8:	460b      	mov	r3, r1
 80093fa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 8009402:	78fa      	ldrb	r2, [r7, #3]
 8009404:	6879      	ldr	r1, [r7, #4]
 8009406:	4613      	mov	r3, r2
 8009408:	00db      	lsls	r3, r3, #3
 800940a:	4413      	add	r3, r2
 800940c:	009b      	lsls	r3, r3, #2
 800940e:	440b      	add	r3, r1
 8009410:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8009414:	681a      	ldr	r2, [r3, #0]
 8009416:	78fb      	ldrb	r3, [r7, #3]
 8009418:	4619      	mov	r1, r3
 800941a:	f7fe fa2f 	bl	800787c <USBD_LL_DataOutStage>
}
 800941e:	bf00      	nop
 8009420:	3708      	adds	r7, #8
 8009422:	46bd      	mov	sp, r7
 8009424:	bd80      	pop	{r7, pc}

08009426 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009426:	b580      	push	{r7, lr}
 8009428:	b082      	sub	sp, #8
 800942a:	af00      	add	r7, sp, #0
 800942c:	6078      	str	r0, [r7, #4]
 800942e:	460b      	mov	r3, r1
 8009430:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 8009438:	78fa      	ldrb	r2, [r7, #3]
 800943a:	6879      	ldr	r1, [r7, #4]
 800943c:	4613      	mov	r3, r2
 800943e:	00db      	lsls	r3, r3, #3
 8009440:	4413      	add	r3, r2
 8009442:	009b      	lsls	r3, r3, #2
 8009444:	440b      	add	r3, r1
 8009446:	334c      	adds	r3, #76	; 0x4c
 8009448:	681a      	ldr	r2, [r3, #0]
 800944a:	78fb      	ldrb	r3, [r7, #3]
 800944c:	4619      	mov	r1, r3
 800944e:	f7fe fac8 	bl	80079e2 <USBD_LL_DataInStage>
}
 8009452:	bf00      	nop
 8009454:	3708      	adds	r7, #8
 8009456:	46bd      	mov	sp, r7
 8009458:	bd80      	pop	{r7, pc}

0800945a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800945a:	b580      	push	{r7, lr}
 800945c:	b082      	sub	sp, #8
 800945e:	af00      	add	r7, sp, #0
 8009460:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8009468:	4618      	mov	r0, r3
 800946a:	f7fe fbfc 	bl	8007c66 <USBD_LL_SOF>
}
 800946e:	bf00      	nop
 8009470:	3708      	adds	r7, #8
 8009472:	46bd      	mov	sp, r7
 8009474:	bd80      	pop	{r7, pc}

08009476 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009476:	b580      	push	{r7, lr}
 8009478:	b084      	sub	sp, #16
 800947a:	af00      	add	r7, sp, #0
 800947c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800947e:	2301      	movs	r3, #1
 8009480:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	68db      	ldr	r3, [r3, #12]
 8009486:	2b00      	cmp	r3, #0
 8009488:	d102      	bne.n	8009490 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800948a:	2300      	movs	r3, #0
 800948c:	73fb      	strb	r3, [r7, #15]
 800948e:	e008      	b.n	80094a2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	68db      	ldr	r3, [r3, #12]
 8009494:	2b02      	cmp	r3, #2
 8009496:	d102      	bne.n	800949e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8009498:	2301      	movs	r3, #1
 800949a:	73fb      	strb	r3, [r7, #15]
 800949c:	e001      	b.n	80094a2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800949e:	f7f7 ff7b 	bl	8001398 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80094a8:	7bfa      	ldrb	r2, [r7, #15]
 80094aa:	4611      	mov	r1, r2
 80094ac:	4618      	mov	r0, r3
 80094ae:	f7fe fb9c 	bl	8007bea <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80094b8:	4618      	mov	r0, r3
 80094ba:	f7fe fb44 	bl	8007b46 <USBD_LL_Reset>
}
 80094be:	bf00      	nop
 80094c0:	3710      	adds	r7, #16
 80094c2:	46bd      	mov	sp, r7
 80094c4:	bd80      	pop	{r7, pc}
	...

080094c8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094c8:	b580      	push	{r7, lr}
 80094ca:	b082      	sub	sp, #8
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80094d6:	4618      	mov	r0, r3
 80094d8:	f7fe fb97 	bl	8007c0a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	687a      	ldr	r2, [r7, #4]
 80094e8:	6812      	ldr	r2, [r2, #0]
 80094ea:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80094ee:	f043 0301 	orr.w	r3, r3, #1
 80094f2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	6a1b      	ldr	r3, [r3, #32]
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d005      	beq.n	8009508 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80094fc:	4b04      	ldr	r3, [pc, #16]	; (8009510 <HAL_PCD_SuspendCallback+0x48>)
 80094fe:	691b      	ldr	r3, [r3, #16]
 8009500:	4a03      	ldr	r2, [pc, #12]	; (8009510 <HAL_PCD_SuspendCallback+0x48>)
 8009502:	f043 0306 	orr.w	r3, r3, #6
 8009506:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009508:	bf00      	nop
 800950a:	3708      	adds	r7, #8
 800950c:	46bd      	mov	sp, r7
 800950e:	bd80      	pop	{r7, pc}
 8009510:	e000ed00 	.word	0xe000ed00

08009514 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009514:	b580      	push	{r7, lr}
 8009516:	b082      	sub	sp, #8
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8009522:	4618      	mov	r0, r3
 8009524:	f7fe fb87 	bl	8007c36 <USBD_LL_Resume>
}
 8009528:	bf00      	nop
 800952a:	3708      	adds	r7, #8
 800952c:	46bd      	mov	sp, r7
 800952e:	bd80      	pop	{r7, pc}

08009530 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009530:	b580      	push	{r7, lr}
 8009532:	b082      	sub	sp, #8
 8009534:	af00      	add	r7, sp, #0
 8009536:	6078      	str	r0, [r7, #4]
 8009538:	460b      	mov	r3, r1
 800953a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8009542:	78fa      	ldrb	r2, [r7, #3]
 8009544:	4611      	mov	r1, r2
 8009546:	4618      	mov	r0, r3
 8009548:	f7fe fbdf 	bl	8007d0a <USBD_LL_IsoOUTIncomplete>
}
 800954c:	bf00      	nop
 800954e:	3708      	adds	r7, #8
 8009550:	46bd      	mov	sp, r7
 8009552:	bd80      	pop	{r7, pc}

08009554 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009554:	b580      	push	{r7, lr}
 8009556:	b082      	sub	sp, #8
 8009558:	af00      	add	r7, sp, #0
 800955a:	6078      	str	r0, [r7, #4]
 800955c:	460b      	mov	r3, r1
 800955e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8009566:	78fa      	ldrb	r2, [r7, #3]
 8009568:	4611      	mov	r1, r2
 800956a:	4618      	mov	r0, r3
 800956c:	f7fe fb9b 	bl	8007ca6 <USBD_LL_IsoINIncomplete>
}
 8009570:	bf00      	nop
 8009572:	3708      	adds	r7, #8
 8009574:	46bd      	mov	sp, r7
 8009576:	bd80      	pop	{r7, pc}

08009578 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009578:	b580      	push	{r7, lr}
 800957a:	b082      	sub	sp, #8
 800957c:	af00      	add	r7, sp, #0
 800957e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8009586:	4618      	mov	r0, r3
 8009588:	f7fe fbf1 	bl	8007d6e <USBD_LL_DevConnected>
}
 800958c:	bf00      	nop
 800958e:	3708      	adds	r7, #8
 8009590:	46bd      	mov	sp, r7
 8009592:	bd80      	pop	{r7, pc}

08009594 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009594:	b580      	push	{r7, lr}
 8009596:	b082      	sub	sp, #8
 8009598:	af00      	add	r7, sp, #0
 800959a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80095a2:	4618      	mov	r0, r3
 80095a4:	f7fe fbee 	bl	8007d84 <USBD_LL_DevDisconnected>
}
 80095a8:	bf00      	nop
 80095aa:	3708      	adds	r7, #8
 80095ac:	46bd      	mov	sp, r7
 80095ae:	bd80      	pop	{r7, pc}

080095b0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80095b0:	b580      	push	{r7, lr}
 80095b2:	b082      	sub	sp, #8
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	781b      	ldrb	r3, [r3, #0]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d13c      	bne.n	800963a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80095c0:	4a20      	ldr	r2, [pc, #128]	; (8009644 <USBD_LL_Init+0x94>)
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
  pdev->pData = &hpcd_USB_OTG_FS;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	4a1e      	ldr	r2, [pc, #120]	; (8009644 <USBD_LL_Init+0x94>)
 80095cc:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80095d0:	4b1c      	ldr	r3, [pc, #112]	; (8009644 <USBD_LL_Init+0x94>)
 80095d2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80095d6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80095d8:	4b1a      	ldr	r3, [pc, #104]	; (8009644 <USBD_LL_Init+0x94>)
 80095da:	2206      	movs	r2, #6
 80095dc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80095de:	4b19      	ldr	r3, [pc, #100]	; (8009644 <USBD_LL_Init+0x94>)
 80095e0:	2202      	movs	r2, #2
 80095e2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80095e4:	4b17      	ldr	r3, [pc, #92]	; (8009644 <USBD_LL_Init+0x94>)
 80095e6:	2200      	movs	r2, #0
 80095e8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80095ea:	4b16      	ldr	r3, [pc, #88]	; (8009644 <USBD_LL_Init+0x94>)
 80095ec:	2202      	movs	r2, #2
 80095ee:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80095f0:	4b14      	ldr	r3, [pc, #80]	; (8009644 <USBD_LL_Init+0x94>)
 80095f2:	2200      	movs	r2, #0
 80095f4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80095f6:	4b13      	ldr	r3, [pc, #76]	; (8009644 <USBD_LL_Init+0x94>)
 80095f8:	2200      	movs	r2, #0
 80095fa:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80095fc:	4b11      	ldr	r3, [pc, #68]	; (8009644 <USBD_LL_Init+0x94>)
 80095fe:	2200      	movs	r2, #0
 8009600:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009602:	4b10      	ldr	r3, [pc, #64]	; (8009644 <USBD_LL_Init+0x94>)
 8009604:	2200      	movs	r2, #0
 8009606:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009608:	4b0e      	ldr	r3, [pc, #56]	; (8009644 <USBD_LL_Init+0x94>)
 800960a:	2200      	movs	r2, #0
 800960c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800960e:	480d      	ldr	r0, [pc, #52]	; (8009644 <USBD_LL_Init+0x94>)
 8009610:	f7f9 fba5 	bl	8002d5e <HAL_PCD_Init>
 8009614:	4603      	mov	r3, r0
 8009616:	2b00      	cmp	r3, #0
 8009618:	d001      	beq.n	800961e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800961a:	f7f7 febd 	bl	8001398 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800961e:	2180      	movs	r1, #128	; 0x80
 8009620:	4808      	ldr	r0, [pc, #32]	; (8009644 <USBD_LL_Init+0x94>)
 8009622:	f7fa fe20 	bl	8004266 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009626:	2240      	movs	r2, #64	; 0x40
 8009628:	2100      	movs	r1, #0
 800962a:	4806      	ldr	r0, [pc, #24]	; (8009644 <USBD_LL_Init+0x94>)
 800962c:	f7fa fdd4 	bl	80041d8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009630:	2280      	movs	r2, #128	; 0x80
 8009632:	2101      	movs	r1, #1
 8009634:	4803      	ldr	r0, [pc, #12]	; (8009644 <USBD_LL_Init+0x94>)
 8009636:	f7fa fdcf 	bl	80041d8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800963a:	2300      	movs	r3, #0
}
 800963c:	4618      	mov	r0, r3
 800963e:	3708      	adds	r7, #8
 8009640:	46bd      	mov	sp, r7
 8009642:	bd80      	pop	{r7, pc}
 8009644:	2000180c 	.word	0x2000180c

08009648 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009648:	b580      	push	{r7, lr}
 800964a:	b084      	sub	sp, #16
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009650:	2300      	movs	r3, #0
 8009652:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009654:	2300      	movs	r3, #0
 8009656:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800965e:	4618      	mov	r0, r3
 8009660:	f7f9 fca1 	bl	8002fa6 <HAL_PCD_Start>
 8009664:	4603      	mov	r3, r0
 8009666:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009668:	7bfb      	ldrb	r3, [r7, #15]
 800966a:	4618      	mov	r0, r3
 800966c:	f000 f97e 	bl	800996c <USBD_Get_USB_Status>
 8009670:	4603      	mov	r3, r0
 8009672:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009674:	7bbb      	ldrb	r3, [r7, #14]
}
 8009676:	4618      	mov	r0, r3
 8009678:	3710      	adds	r7, #16
 800967a:	46bd      	mov	sp, r7
 800967c:	bd80      	pop	{r7, pc}

0800967e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800967e:	b580      	push	{r7, lr}
 8009680:	b084      	sub	sp, #16
 8009682:	af00      	add	r7, sp, #0
 8009684:	6078      	str	r0, [r7, #4]
 8009686:	4608      	mov	r0, r1
 8009688:	4611      	mov	r1, r2
 800968a:	461a      	mov	r2, r3
 800968c:	4603      	mov	r3, r0
 800968e:	70fb      	strb	r3, [r7, #3]
 8009690:	460b      	mov	r3, r1
 8009692:	70bb      	strb	r3, [r7, #2]
 8009694:	4613      	mov	r3, r2
 8009696:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009698:	2300      	movs	r3, #0
 800969a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800969c:	2300      	movs	r3, #0
 800969e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80096a6:	78bb      	ldrb	r3, [r7, #2]
 80096a8:	883a      	ldrh	r2, [r7, #0]
 80096aa:	78f9      	ldrb	r1, [r7, #3]
 80096ac:	f7fa f98e 	bl	80039cc <HAL_PCD_EP_Open>
 80096b0:	4603      	mov	r3, r0
 80096b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80096b4:	7bfb      	ldrb	r3, [r7, #15]
 80096b6:	4618      	mov	r0, r3
 80096b8:	f000 f958 	bl	800996c <USBD_Get_USB_Status>
 80096bc:	4603      	mov	r3, r0
 80096be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80096c0:	7bbb      	ldrb	r3, [r7, #14]
}
 80096c2:	4618      	mov	r0, r3
 80096c4:	3710      	adds	r7, #16
 80096c6:	46bd      	mov	sp, r7
 80096c8:	bd80      	pop	{r7, pc}

080096ca <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80096ca:	b580      	push	{r7, lr}
 80096cc:	b084      	sub	sp, #16
 80096ce:	af00      	add	r7, sp, #0
 80096d0:	6078      	str	r0, [r7, #4]
 80096d2:	460b      	mov	r3, r1
 80096d4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096d6:	2300      	movs	r3, #0
 80096d8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096da:	2300      	movs	r3, #0
 80096dc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80096e4:	78fa      	ldrb	r2, [r7, #3]
 80096e6:	4611      	mov	r1, r2
 80096e8:	4618      	mov	r0, r3
 80096ea:	f7fa f9d7 	bl	8003a9c <HAL_PCD_EP_Close>
 80096ee:	4603      	mov	r3, r0
 80096f0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80096f2:	7bfb      	ldrb	r3, [r7, #15]
 80096f4:	4618      	mov	r0, r3
 80096f6:	f000 f939 	bl	800996c <USBD_Get_USB_Status>
 80096fa:	4603      	mov	r3, r0
 80096fc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80096fe:	7bbb      	ldrb	r3, [r7, #14]
}
 8009700:	4618      	mov	r0, r3
 8009702:	3710      	adds	r7, #16
 8009704:	46bd      	mov	sp, r7
 8009706:	bd80      	pop	{r7, pc}

08009708 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009708:	b580      	push	{r7, lr}
 800970a:	b084      	sub	sp, #16
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]
 8009710:	460b      	mov	r3, r1
 8009712:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009714:	2300      	movs	r3, #0
 8009716:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009718:	2300      	movs	r3, #0
 800971a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009722:	78fa      	ldrb	r2, [r7, #3]
 8009724:	4611      	mov	r1, r2
 8009726:	4618      	mov	r0, r3
 8009728:	f7fa faaf 	bl	8003c8a <HAL_PCD_EP_SetStall>
 800972c:	4603      	mov	r3, r0
 800972e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009730:	7bfb      	ldrb	r3, [r7, #15]
 8009732:	4618      	mov	r0, r3
 8009734:	f000 f91a 	bl	800996c <USBD_Get_USB_Status>
 8009738:	4603      	mov	r3, r0
 800973a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800973c:	7bbb      	ldrb	r3, [r7, #14]
}
 800973e:	4618      	mov	r0, r3
 8009740:	3710      	adds	r7, #16
 8009742:	46bd      	mov	sp, r7
 8009744:	bd80      	pop	{r7, pc}

08009746 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009746:	b580      	push	{r7, lr}
 8009748:	b084      	sub	sp, #16
 800974a:	af00      	add	r7, sp, #0
 800974c:	6078      	str	r0, [r7, #4]
 800974e:	460b      	mov	r3, r1
 8009750:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009752:	2300      	movs	r3, #0
 8009754:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009756:	2300      	movs	r3, #0
 8009758:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009760:	78fa      	ldrb	r2, [r7, #3]
 8009762:	4611      	mov	r1, r2
 8009764:	4618      	mov	r0, r3
 8009766:	f7fa faf4 	bl	8003d52 <HAL_PCD_EP_ClrStall>
 800976a:	4603      	mov	r3, r0
 800976c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800976e:	7bfb      	ldrb	r3, [r7, #15]
 8009770:	4618      	mov	r0, r3
 8009772:	f000 f8fb 	bl	800996c <USBD_Get_USB_Status>
 8009776:	4603      	mov	r3, r0
 8009778:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800977a:	7bbb      	ldrb	r3, [r7, #14]
}
 800977c:	4618      	mov	r0, r3
 800977e:	3710      	adds	r7, #16
 8009780:	46bd      	mov	sp, r7
 8009782:	bd80      	pop	{r7, pc}

08009784 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009784:	b480      	push	{r7}
 8009786:	b085      	sub	sp, #20
 8009788:	af00      	add	r7, sp, #0
 800978a:	6078      	str	r0, [r7, #4]
 800978c:	460b      	mov	r3, r1
 800978e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009796:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009798:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800979c:	2b00      	cmp	r3, #0
 800979e:	da0b      	bge.n	80097b8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80097a0:	78fb      	ldrb	r3, [r7, #3]
 80097a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80097a6:	68f9      	ldr	r1, [r7, #12]
 80097a8:	4613      	mov	r3, r2
 80097aa:	00db      	lsls	r3, r3, #3
 80097ac:	4413      	add	r3, r2
 80097ae:	009b      	lsls	r3, r3, #2
 80097b0:	440b      	add	r3, r1
 80097b2:	333e      	adds	r3, #62	; 0x3e
 80097b4:	781b      	ldrb	r3, [r3, #0]
 80097b6:	e00b      	b.n	80097d0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80097b8:	78fb      	ldrb	r3, [r7, #3]
 80097ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80097be:	68f9      	ldr	r1, [r7, #12]
 80097c0:	4613      	mov	r3, r2
 80097c2:	00db      	lsls	r3, r3, #3
 80097c4:	4413      	add	r3, r2
 80097c6:	009b      	lsls	r3, r3, #2
 80097c8:	440b      	add	r3, r1
 80097ca:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80097ce:	781b      	ldrb	r3, [r3, #0]
  }
}
 80097d0:	4618      	mov	r0, r3
 80097d2:	3714      	adds	r7, #20
 80097d4:	46bd      	mov	sp, r7
 80097d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097da:	4770      	bx	lr

080097dc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80097dc:	b580      	push	{r7, lr}
 80097de:	b084      	sub	sp, #16
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]
 80097e4:	460b      	mov	r3, r1
 80097e6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097e8:	2300      	movs	r3, #0
 80097ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097ec:	2300      	movs	r3, #0
 80097ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80097f6:	78fa      	ldrb	r2, [r7, #3]
 80097f8:	4611      	mov	r1, r2
 80097fa:	4618      	mov	r0, r3
 80097fc:	f7fa f8c1 	bl	8003982 <HAL_PCD_SetAddress>
 8009800:	4603      	mov	r3, r0
 8009802:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009804:	7bfb      	ldrb	r3, [r7, #15]
 8009806:	4618      	mov	r0, r3
 8009808:	f000 f8b0 	bl	800996c <USBD_Get_USB_Status>
 800980c:	4603      	mov	r3, r0
 800980e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009810:	7bbb      	ldrb	r3, [r7, #14]
}
 8009812:	4618      	mov	r0, r3
 8009814:	3710      	adds	r7, #16
 8009816:	46bd      	mov	sp, r7
 8009818:	bd80      	pop	{r7, pc}

0800981a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800981a:	b580      	push	{r7, lr}
 800981c:	b086      	sub	sp, #24
 800981e:	af00      	add	r7, sp, #0
 8009820:	60f8      	str	r0, [r7, #12]
 8009822:	607a      	str	r2, [r7, #4]
 8009824:	603b      	str	r3, [r7, #0]
 8009826:	460b      	mov	r3, r1
 8009828:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800982a:	2300      	movs	r3, #0
 800982c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800982e:	2300      	movs	r3, #0
 8009830:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009838:	7af9      	ldrb	r1, [r7, #11]
 800983a:	683b      	ldr	r3, [r7, #0]
 800983c:	687a      	ldr	r2, [r7, #4]
 800983e:	f7fa f9da 	bl	8003bf6 <HAL_PCD_EP_Transmit>
 8009842:	4603      	mov	r3, r0
 8009844:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009846:	7dfb      	ldrb	r3, [r7, #23]
 8009848:	4618      	mov	r0, r3
 800984a:	f000 f88f 	bl	800996c <USBD_Get_USB_Status>
 800984e:	4603      	mov	r3, r0
 8009850:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009852:	7dbb      	ldrb	r3, [r7, #22]
}
 8009854:	4618      	mov	r0, r3
 8009856:	3718      	adds	r7, #24
 8009858:	46bd      	mov	sp, r7
 800985a:	bd80      	pop	{r7, pc}

0800985c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800985c:	b580      	push	{r7, lr}
 800985e:	b086      	sub	sp, #24
 8009860:	af00      	add	r7, sp, #0
 8009862:	60f8      	str	r0, [r7, #12]
 8009864:	607a      	str	r2, [r7, #4]
 8009866:	603b      	str	r3, [r7, #0]
 8009868:	460b      	mov	r3, r1
 800986a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800986c:	2300      	movs	r3, #0
 800986e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009870:	2300      	movs	r3, #0
 8009872:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800987a:	7af9      	ldrb	r1, [r7, #11]
 800987c:	683b      	ldr	r3, [r7, #0]
 800987e:	687a      	ldr	r2, [r7, #4]
 8009880:	f7fa f956 	bl	8003b30 <HAL_PCD_EP_Receive>
 8009884:	4603      	mov	r3, r0
 8009886:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009888:	7dfb      	ldrb	r3, [r7, #23]
 800988a:	4618      	mov	r0, r3
 800988c:	f000 f86e 	bl	800996c <USBD_Get_USB_Status>
 8009890:	4603      	mov	r3, r0
 8009892:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009894:	7dbb      	ldrb	r3, [r7, #22]
}
 8009896:	4618      	mov	r0, r3
 8009898:	3718      	adds	r7, #24
 800989a:	46bd      	mov	sp, r7
 800989c:	bd80      	pop	{r7, pc}

0800989e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800989e:	b580      	push	{r7, lr}
 80098a0:	b082      	sub	sp, #8
 80098a2:	af00      	add	r7, sp, #0
 80098a4:	6078      	str	r0, [r7, #4]
 80098a6:	460b      	mov	r3, r1
 80098a8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80098b0:	78fa      	ldrb	r2, [r7, #3]
 80098b2:	4611      	mov	r1, r2
 80098b4:	4618      	mov	r0, r3
 80098b6:	f7fa f986 	bl	8003bc6 <HAL_PCD_EP_GetRxCount>
 80098ba:	4603      	mov	r3, r0
}
 80098bc:	4618      	mov	r0, r3
 80098be:	3708      	adds	r7, #8
 80098c0:	46bd      	mov	sp, r7
 80098c2:	bd80      	pop	{r7, pc}

080098c4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80098c4:	b580      	push	{r7, lr}
 80098c6:	b082      	sub	sp, #8
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	6078      	str	r0, [r7, #4]
 80098cc:	460b      	mov	r3, r1
 80098ce:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 80098d0:	78fb      	ldrb	r3, [r7, #3]
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d002      	beq.n	80098dc <HAL_PCDEx_LPM_Callback+0x18>
 80098d6:	2b01      	cmp	r3, #1
 80098d8:	d01f      	beq.n	800991a <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 80098da:	e03b      	b.n	8009954 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	6a1b      	ldr	r3, [r3, #32]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d007      	beq.n	80098f4 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 80098e4:	f000 f83c 	bl	8009960 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80098e8:	4b1c      	ldr	r3, [pc, #112]	; (800995c <HAL_PCDEx_LPM_Callback+0x98>)
 80098ea:	691b      	ldr	r3, [r3, #16]
 80098ec:	4a1b      	ldr	r2, [pc, #108]	; (800995c <HAL_PCDEx_LPM_Callback+0x98>)
 80098ee:	f023 0306 	bic.w	r3, r3, #6
 80098f2:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	687a      	ldr	r2, [r7, #4]
 8009900:	6812      	ldr	r2, [r2, #0]
 8009902:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009906:	f023 0301 	bic.w	r3, r3, #1
 800990a:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8009912:	4618      	mov	r0, r3
 8009914:	f7fe f98f 	bl	8007c36 <USBD_LL_Resume>
    break;
 8009918:	e01c      	b.n	8009954 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	687a      	ldr	r2, [r7, #4]
 8009926:	6812      	ldr	r2, [r2, #0]
 8009928:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800992c:	f043 0301 	orr.w	r3, r3, #1
 8009930:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8009938:	4618      	mov	r0, r3
 800993a:	f7fe f966 	bl	8007c0a <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	6a1b      	ldr	r3, [r3, #32]
 8009942:	2b00      	cmp	r3, #0
 8009944:	d005      	beq.n	8009952 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009946:	4b05      	ldr	r3, [pc, #20]	; (800995c <HAL_PCDEx_LPM_Callback+0x98>)
 8009948:	691b      	ldr	r3, [r3, #16]
 800994a:	4a04      	ldr	r2, [pc, #16]	; (800995c <HAL_PCDEx_LPM_Callback+0x98>)
 800994c:	f043 0306 	orr.w	r3, r3, #6
 8009950:	6113      	str	r3, [r2, #16]
    break;
 8009952:	bf00      	nop
}
 8009954:	bf00      	nop
 8009956:	3708      	adds	r7, #8
 8009958:	46bd      	mov	sp, r7
 800995a:	bd80      	pop	{r7, pc}
 800995c:	e000ed00 	.word	0xe000ed00

08009960 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8009960:	b580      	push	{r7, lr}
 8009962:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8009964:	f7f7 fc7c 	bl	8001260 <SystemClock_Config>
}
 8009968:	bf00      	nop
 800996a:	bd80      	pop	{r7, pc}

0800996c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800996c:	b480      	push	{r7}
 800996e:	b085      	sub	sp, #20
 8009970:	af00      	add	r7, sp, #0
 8009972:	4603      	mov	r3, r0
 8009974:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009976:	2300      	movs	r3, #0
 8009978:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800997a:	79fb      	ldrb	r3, [r7, #7]
 800997c:	2b03      	cmp	r3, #3
 800997e:	d817      	bhi.n	80099b0 <USBD_Get_USB_Status+0x44>
 8009980:	a201      	add	r2, pc, #4	; (adr r2, 8009988 <USBD_Get_USB_Status+0x1c>)
 8009982:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009986:	bf00      	nop
 8009988:	08009999 	.word	0x08009999
 800998c:	0800999f 	.word	0x0800999f
 8009990:	080099a5 	.word	0x080099a5
 8009994:	080099ab 	.word	0x080099ab
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009998:	2300      	movs	r3, #0
 800999a:	73fb      	strb	r3, [r7, #15]
    break;
 800999c:	e00b      	b.n	80099b6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800999e:	2303      	movs	r3, #3
 80099a0:	73fb      	strb	r3, [r7, #15]
    break;
 80099a2:	e008      	b.n	80099b6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80099a4:	2301      	movs	r3, #1
 80099a6:	73fb      	strb	r3, [r7, #15]
    break;
 80099a8:	e005      	b.n	80099b6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80099aa:	2303      	movs	r3, #3
 80099ac:	73fb      	strb	r3, [r7, #15]
    break;
 80099ae:	e002      	b.n	80099b6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80099b0:	2303      	movs	r3, #3
 80099b2:	73fb      	strb	r3, [r7, #15]
    break;
 80099b4:	bf00      	nop
  }
  return usb_status;
 80099b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80099b8:	4618      	mov	r0, r3
 80099ba:	3714      	adds	r7, #20
 80099bc:	46bd      	mov	sp, r7
 80099be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c2:	4770      	bx	lr

080099c4 <main>:

#include "main.h"


int main(void)
{
 80099c4:	b580      	push	{r7, lr}
 80099c6:	af00      	add	r7, sp, #0
  hwInit();
 80099c8:	f7f8 fb30 	bl	800202c <hwInit>
  apInit();
 80099cc:	f7f7 fb1c 	bl	8001008 <apInit>
  apMain();
 80099d0:	f7f7 fb24 	bl	800101c <apMain>

  return 0;
 80099d4:	2300      	movs	r3, #0
}
 80099d6:	4618      	mov	r0, r3
 80099d8:	bd80      	pop	{r7, pc}
	...

080099dc <__errno>:
 80099dc:	4b01      	ldr	r3, [pc, #4]	; (80099e4 <__errno+0x8>)
 80099de:	6818      	ldr	r0, [r3, #0]
 80099e0:	4770      	bx	lr
 80099e2:	bf00      	nop
 80099e4:	20000168 	.word	0x20000168

080099e8 <__libc_init_array>:
 80099e8:	b570      	push	{r4, r5, r6, lr}
 80099ea:	4d0d      	ldr	r5, [pc, #52]	; (8009a20 <__libc_init_array+0x38>)
 80099ec:	4c0d      	ldr	r4, [pc, #52]	; (8009a24 <__libc_init_array+0x3c>)
 80099ee:	1b64      	subs	r4, r4, r5
 80099f0:	10a4      	asrs	r4, r4, #2
 80099f2:	2600      	movs	r6, #0
 80099f4:	42a6      	cmp	r6, r4
 80099f6:	d109      	bne.n	8009a0c <__libc_init_array+0x24>
 80099f8:	4d0b      	ldr	r5, [pc, #44]	; (8009a28 <__libc_init_array+0x40>)
 80099fa:	4c0c      	ldr	r4, [pc, #48]	; (8009a2c <__libc_init_array+0x44>)
 80099fc:	f003 f9a2 	bl	800cd44 <_init>
 8009a00:	1b64      	subs	r4, r4, r5
 8009a02:	10a4      	asrs	r4, r4, #2
 8009a04:	2600      	movs	r6, #0
 8009a06:	42a6      	cmp	r6, r4
 8009a08:	d105      	bne.n	8009a16 <__libc_init_array+0x2e>
 8009a0a:	bd70      	pop	{r4, r5, r6, pc}
 8009a0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a10:	4798      	blx	r3
 8009a12:	3601      	adds	r6, #1
 8009a14:	e7ee      	b.n	80099f4 <__libc_init_array+0xc>
 8009a16:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a1a:	4798      	blx	r3
 8009a1c:	3601      	adds	r6, #1
 8009a1e:	e7f2      	b.n	8009a06 <__libc_init_array+0x1e>
 8009a20:	0800d39c 	.word	0x0800d39c
 8009a24:	0800d39c 	.word	0x0800d39c
 8009a28:	0800d39c 	.word	0x0800d39c
 8009a2c:	0800d3a0 	.word	0x0800d3a0

08009a30 <malloc>:
 8009a30:	4b02      	ldr	r3, [pc, #8]	; (8009a3c <malloc+0xc>)
 8009a32:	4601      	mov	r1, r0
 8009a34:	6818      	ldr	r0, [r3, #0]
 8009a36:	f000 b87f 	b.w	8009b38 <_malloc_r>
 8009a3a:	bf00      	nop
 8009a3c:	20000168 	.word	0x20000168

08009a40 <free>:
 8009a40:	4b02      	ldr	r3, [pc, #8]	; (8009a4c <free+0xc>)
 8009a42:	4601      	mov	r1, r0
 8009a44:	6818      	ldr	r0, [r3, #0]
 8009a46:	f000 b80b 	b.w	8009a60 <_free_r>
 8009a4a:	bf00      	nop
 8009a4c:	20000168 	.word	0x20000168

08009a50 <memset>:
 8009a50:	4402      	add	r2, r0
 8009a52:	4603      	mov	r3, r0
 8009a54:	4293      	cmp	r3, r2
 8009a56:	d100      	bne.n	8009a5a <memset+0xa>
 8009a58:	4770      	bx	lr
 8009a5a:	f803 1b01 	strb.w	r1, [r3], #1
 8009a5e:	e7f9      	b.n	8009a54 <memset+0x4>

08009a60 <_free_r>:
 8009a60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009a62:	2900      	cmp	r1, #0
 8009a64:	d044      	beq.n	8009af0 <_free_r+0x90>
 8009a66:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009a6a:	9001      	str	r0, [sp, #4]
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	f1a1 0404 	sub.w	r4, r1, #4
 8009a72:	bfb8      	it	lt
 8009a74:	18e4      	addlt	r4, r4, r3
 8009a76:	f001 fbaf 	bl	800b1d8 <__malloc_lock>
 8009a7a:	4a1e      	ldr	r2, [pc, #120]	; (8009af4 <_free_r+0x94>)
 8009a7c:	9801      	ldr	r0, [sp, #4]
 8009a7e:	6813      	ldr	r3, [r2, #0]
 8009a80:	b933      	cbnz	r3, 8009a90 <_free_r+0x30>
 8009a82:	6063      	str	r3, [r4, #4]
 8009a84:	6014      	str	r4, [r2, #0]
 8009a86:	b003      	add	sp, #12
 8009a88:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009a8c:	f001 bbaa 	b.w	800b1e4 <__malloc_unlock>
 8009a90:	42a3      	cmp	r3, r4
 8009a92:	d908      	bls.n	8009aa6 <_free_r+0x46>
 8009a94:	6825      	ldr	r5, [r4, #0]
 8009a96:	1961      	adds	r1, r4, r5
 8009a98:	428b      	cmp	r3, r1
 8009a9a:	bf01      	itttt	eq
 8009a9c:	6819      	ldreq	r1, [r3, #0]
 8009a9e:	685b      	ldreq	r3, [r3, #4]
 8009aa0:	1949      	addeq	r1, r1, r5
 8009aa2:	6021      	streq	r1, [r4, #0]
 8009aa4:	e7ed      	b.n	8009a82 <_free_r+0x22>
 8009aa6:	461a      	mov	r2, r3
 8009aa8:	685b      	ldr	r3, [r3, #4]
 8009aaa:	b10b      	cbz	r3, 8009ab0 <_free_r+0x50>
 8009aac:	42a3      	cmp	r3, r4
 8009aae:	d9fa      	bls.n	8009aa6 <_free_r+0x46>
 8009ab0:	6811      	ldr	r1, [r2, #0]
 8009ab2:	1855      	adds	r5, r2, r1
 8009ab4:	42a5      	cmp	r5, r4
 8009ab6:	d10b      	bne.n	8009ad0 <_free_r+0x70>
 8009ab8:	6824      	ldr	r4, [r4, #0]
 8009aba:	4421      	add	r1, r4
 8009abc:	1854      	adds	r4, r2, r1
 8009abe:	42a3      	cmp	r3, r4
 8009ac0:	6011      	str	r1, [r2, #0]
 8009ac2:	d1e0      	bne.n	8009a86 <_free_r+0x26>
 8009ac4:	681c      	ldr	r4, [r3, #0]
 8009ac6:	685b      	ldr	r3, [r3, #4]
 8009ac8:	6053      	str	r3, [r2, #4]
 8009aca:	4421      	add	r1, r4
 8009acc:	6011      	str	r1, [r2, #0]
 8009ace:	e7da      	b.n	8009a86 <_free_r+0x26>
 8009ad0:	d902      	bls.n	8009ad8 <_free_r+0x78>
 8009ad2:	230c      	movs	r3, #12
 8009ad4:	6003      	str	r3, [r0, #0]
 8009ad6:	e7d6      	b.n	8009a86 <_free_r+0x26>
 8009ad8:	6825      	ldr	r5, [r4, #0]
 8009ada:	1961      	adds	r1, r4, r5
 8009adc:	428b      	cmp	r3, r1
 8009ade:	bf04      	itt	eq
 8009ae0:	6819      	ldreq	r1, [r3, #0]
 8009ae2:	685b      	ldreq	r3, [r3, #4]
 8009ae4:	6063      	str	r3, [r4, #4]
 8009ae6:	bf04      	itt	eq
 8009ae8:	1949      	addeq	r1, r1, r5
 8009aea:	6021      	streq	r1, [r4, #0]
 8009aec:	6054      	str	r4, [r2, #4]
 8009aee:	e7ca      	b.n	8009a86 <_free_r+0x26>
 8009af0:	b003      	add	sp, #12
 8009af2:	bd30      	pop	{r4, r5, pc}
 8009af4:	20001d14 	.word	0x20001d14

08009af8 <sbrk_aligned>:
 8009af8:	b570      	push	{r4, r5, r6, lr}
 8009afa:	4e0e      	ldr	r6, [pc, #56]	; (8009b34 <sbrk_aligned+0x3c>)
 8009afc:	460c      	mov	r4, r1
 8009afe:	6831      	ldr	r1, [r6, #0]
 8009b00:	4605      	mov	r5, r0
 8009b02:	b911      	cbnz	r1, 8009b0a <sbrk_aligned+0x12>
 8009b04:	f000 f88c 	bl	8009c20 <_sbrk_r>
 8009b08:	6030      	str	r0, [r6, #0]
 8009b0a:	4621      	mov	r1, r4
 8009b0c:	4628      	mov	r0, r5
 8009b0e:	f000 f887 	bl	8009c20 <_sbrk_r>
 8009b12:	1c43      	adds	r3, r0, #1
 8009b14:	d00a      	beq.n	8009b2c <sbrk_aligned+0x34>
 8009b16:	1cc4      	adds	r4, r0, #3
 8009b18:	f024 0403 	bic.w	r4, r4, #3
 8009b1c:	42a0      	cmp	r0, r4
 8009b1e:	d007      	beq.n	8009b30 <sbrk_aligned+0x38>
 8009b20:	1a21      	subs	r1, r4, r0
 8009b22:	4628      	mov	r0, r5
 8009b24:	f000 f87c 	bl	8009c20 <_sbrk_r>
 8009b28:	3001      	adds	r0, #1
 8009b2a:	d101      	bne.n	8009b30 <sbrk_aligned+0x38>
 8009b2c:	f04f 34ff 	mov.w	r4, #4294967295
 8009b30:	4620      	mov	r0, r4
 8009b32:	bd70      	pop	{r4, r5, r6, pc}
 8009b34:	20001d18 	.word	0x20001d18

08009b38 <_malloc_r>:
 8009b38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b3c:	1ccd      	adds	r5, r1, #3
 8009b3e:	f025 0503 	bic.w	r5, r5, #3
 8009b42:	3508      	adds	r5, #8
 8009b44:	2d0c      	cmp	r5, #12
 8009b46:	bf38      	it	cc
 8009b48:	250c      	movcc	r5, #12
 8009b4a:	2d00      	cmp	r5, #0
 8009b4c:	4607      	mov	r7, r0
 8009b4e:	db01      	blt.n	8009b54 <_malloc_r+0x1c>
 8009b50:	42a9      	cmp	r1, r5
 8009b52:	d905      	bls.n	8009b60 <_malloc_r+0x28>
 8009b54:	230c      	movs	r3, #12
 8009b56:	603b      	str	r3, [r7, #0]
 8009b58:	2600      	movs	r6, #0
 8009b5a:	4630      	mov	r0, r6
 8009b5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b60:	4e2e      	ldr	r6, [pc, #184]	; (8009c1c <_malloc_r+0xe4>)
 8009b62:	f001 fb39 	bl	800b1d8 <__malloc_lock>
 8009b66:	6833      	ldr	r3, [r6, #0]
 8009b68:	461c      	mov	r4, r3
 8009b6a:	bb34      	cbnz	r4, 8009bba <_malloc_r+0x82>
 8009b6c:	4629      	mov	r1, r5
 8009b6e:	4638      	mov	r0, r7
 8009b70:	f7ff ffc2 	bl	8009af8 <sbrk_aligned>
 8009b74:	1c43      	adds	r3, r0, #1
 8009b76:	4604      	mov	r4, r0
 8009b78:	d14d      	bne.n	8009c16 <_malloc_r+0xde>
 8009b7a:	6834      	ldr	r4, [r6, #0]
 8009b7c:	4626      	mov	r6, r4
 8009b7e:	2e00      	cmp	r6, #0
 8009b80:	d140      	bne.n	8009c04 <_malloc_r+0xcc>
 8009b82:	6823      	ldr	r3, [r4, #0]
 8009b84:	4631      	mov	r1, r6
 8009b86:	4638      	mov	r0, r7
 8009b88:	eb04 0803 	add.w	r8, r4, r3
 8009b8c:	f000 f848 	bl	8009c20 <_sbrk_r>
 8009b90:	4580      	cmp	r8, r0
 8009b92:	d13a      	bne.n	8009c0a <_malloc_r+0xd2>
 8009b94:	6821      	ldr	r1, [r4, #0]
 8009b96:	3503      	adds	r5, #3
 8009b98:	1a6d      	subs	r5, r5, r1
 8009b9a:	f025 0503 	bic.w	r5, r5, #3
 8009b9e:	3508      	adds	r5, #8
 8009ba0:	2d0c      	cmp	r5, #12
 8009ba2:	bf38      	it	cc
 8009ba4:	250c      	movcc	r5, #12
 8009ba6:	4629      	mov	r1, r5
 8009ba8:	4638      	mov	r0, r7
 8009baa:	f7ff ffa5 	bl	8009af8 <sbrk_aligned>
 8009bae:	3001      	adds	r0, #1
 8009bb0:	d02b      	beq.n	8009c0a <_malloc_r+0xd2>
 8009bb2:	6823      	ldr	r3, [r4, #0]
 8009bb4:	442b      	add	r3, r5
 8009bb6:	6023      	str	r3, [r4, #0]
 8009bb8:	e00e      	b.n	8009bd8 <_malloc_r+0xa0>
 8009bba:	6822      	ldr	r2, [r4, #0]
 8009bbc:	1b52      	subs	r2, r2, r5
 8009bbe:	d41e      	bmi.n	8009bfe <_malloc_r+0xc6>
 8009bc0:	2a0b      	cmp	r2, #11
 8009bc2:	d916      	bls.n	8009bf2 <_malloc_r+0xba>
 8009bc4:	1961      	adds	r1, r4, r5
 8009bc6:	42a3      	cmp	r3, r4
 8009bc8:	6025      	str	r5, [r4, #0]
 8009bca:	bf18      	it	ne
 8009bcc:	6059      	strne	r1, [r3, #4]
 8009bce:	6863      	ldr	r3, [r4, #4]
 8009bd0:	bf08      	it	eq
 8009bd2:	6031      	streq	r1, [r6, #0]
 8009bd4:	5162      	str	r2, [r4, r5]
 8009bd6:	604b      	str	r3, [r1, #4]
 8009bd8:	4638      	mov	r0, r7
 8009bda:	f104 060b 	add.w	r6, r4, #11
 8009bde:	f001 fb01 	bl	800b1e4 <__malloc_unlock>
 8009be2:	f026 0607 	bic.w	r6, r6, #7
 8009be6:	1d23      	adds	r3, r4, #4
 8009be8:	1af2      	subs	r2, r6, r3
 8009bea:	d0b6      	beq.n	8009b5a <_malloc_r+0x22>
 8009bec:	1b9b      	subs	r3, r3, r6
 8009bee:	50a3      	str	r3, [r4, r2]
 8009bf0:	e7b3      	b.n	8009b5a <_malloc_r+0x22>
 8009bf2:	6862      	ldr	r2, [r4, #4]
 8009bf4:	42a3      	cmp	r3, r4
 8009bf6:	bf0c      	ite	eq
 8009bf8:	6032      	streq	r2, [r6, #0]
 8009bfa:	605a      	strne	r2, [r3, #4]
 8009bfc:	e7ec      	b.n	8009bd8 <_malloc_r+0xa0>
 8009bfe:	4623      	mov	r3, r4
 8009c00:	6864      	ldr	r4, [r4, #4]
 8009c02:	e7b2      	b.n	8009b6a <_malloc_r+0x32>
 8009c04:	4634      	mov	r4, r6
 8009c06:	6876      	ldr	r6, [r6, #4]
 8009c08:	e7b9      	b.n	8009b7e <_malloc_r+0x46>
 8009c0a:	230c      	movs	r3, #12
 8009c0c:	603b      	str	r3, [r7, #0]
 8009c0e:	4638      	mov	r0, r7
 8009c10:	f001 fae8 	bl	800b1e4 <__malloc_unlock>
 8009c14:	e7a1      	b.n	8009b5a <_malloc_r+0x22>
 8009c16:	6025      	str	r5, [r4, #0]
 8009c18:	e7de      	b.n	8009bd8 <_malloc_r+0xa0>
 8009c1a:	bf00      	nop
 8009c1c:	20001d14 	.word	0x20001d14

08009c20 <_sbrk_r>:
 8009c20:	b538      	push	{r3, r4, r5, lr}
 8009c22:	4d06      	ldr	r5, [pc, #24]	; (8009c3c <_sbrk_r+0x1c>)
 8009c24:	2300      	movs	r3, #0
 8009c26:	4604      	mov	r4, r0
 8009c28:	4608      	mov	r0, r1
 8009c2a:	602b      	str	r3, [r5, #0]
 8009c2c:	f7f7 fca2 	bl	8001574 <_sbrk>
 8009c30:	1c43      	adds	r3, r0, #1
 8009c32:	d102      	bne.n	8009c3a <_sbrk_r+0x1a>
 8009c34:	682b      	ldr	r3, [r5, #0]
 8009c36:	b103      	cbz	r3, 8009c3a <_sbrk_r+0x1a>
 8009c38:	6023      	str	r3, [r4, #0]
 8009c3a:	bd38      	pop	{r3, r4, r5, pc}
 8009c3c:	20001d1c 	.word	0x20001d1c

08009c40 <strcpy>:
 8009c40:	4603      	mov	r3, r0
 8009c42:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009c46:	f803 2b01 	strb.w	r2, [r3], #1
 8009c4a:	2a00      	cmp	r2, #0
 8009c4c:	d1f9      	bne.n	8009c42 <strcpy+0x2>
 8009c4e:	4770      	bx	lr

08009c50 <sulp>:
 8009c50:	b570      	push	{r4, r5, r6, lr}
 8009c52:	4604      	mov	r4, r0
 8009c54:	460d      	mov	r5, r1
 8009c56:	ec45 4b10 	vmov	d0, r4, r5
 8009c5a:	4616      	mov	r6, r2
 8009c5c:	f001 fe3a 	bl	800b8d4 <__ulp>
 8009c60:	ec51 0b10 	vmov	r0, r1, d0
 8009c64:	b17e      	cbz	r6, 8009c86 <sulp+0x36>
 8009c66:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009c6a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	dd09      	ble.n	8009c86 <sulp+0x36>
 8009c72:	051b      	lsls	r3, r3, #20
 8009c74:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8009c78:	2400      	movs	r4, #0
 8009c7a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8009c7e:	4622      	mov	r2, r4
 8009c80:	462b      	mov	r3, r5
 8009c82:	f7f6 fce9 	bl	8000658 <__aeabi_dmul>
 8009c86:	bd70      	pop	{r4, r5, r6, pc}

08009c88 <_strtod_l>:
 8009c88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c8c:	ed2d 8b02 	vpush	{d8}
 8009c90:	b09d      	sub	sp, #116	; 0x74
 8009c92:	461f      	mov	r7, r3
 8009c94:	2300      	movs	r3, #0
 8009c96:	9318      	str	r3, [sp, #96]	; 0x60
 8009c98:	4ba2      	ldr	r3, [pc, #648]	; (8009f24 <_strtod_l+0x29c>)
 8009c9a:	9213      	str	r2, [sp, #76]	; 0x4c
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	9305      	str	r3, [sp, #20]
 8009ca0:	4604      	mov	r4, r0
 8009ca2:	4618      	mov	r0, r3
 8009ca4:	4688      	mov	r8, r1
 8009ca6:	f7f6 fabd 	bl	8000224 <strlen>
 8009caa:	f04f 0a00 	mov.w	sl, #0
 8009cae:	4605      	mov	r5, r0
 8009cb0:	f04f 0b00 	mov.w	fp, #0
 8009cb4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8009cb8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009cba:	781a      	ldrb	r2, [r3, #0]
 8009cbc:	2a2b      	cmp	r2, #43	; 0x2b
 8009cbe:	d04e      	beq.n	8009d5e <_strtod_l+0xd6>
 8009cc0:	d83b      	bhi.n	8009d3a <_strtod_l+0xb2>
 8009cc2:	2a0d      	cmp	r2, #13
 8009cc4:	d834      	bhi.n	8009d30 <_strtod_l+0xa8>
 8009cc6:	2a08      	cmp	r2, #8
 8009cc8:	d834      	bhi.n	8009d34 <_strtod_l+0xac>
 8009cca:	2a00      	cmp	r2, #0
 8009ccc:	d03e      	beq.n	8009d4c <_strtod_l+0xc4>
 8009cce:	2300      	movs	r3, #0
 8009cd0:	930a      	str	r3, [sp, #40]	; 0x28
 8009cd2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8009cd4:	7833      	ldrb	r3, [r6, #0]
 8009cd6:	2b30      	cmp	r3, #48	; 0x30
 8009cd8:	f040 80b0 	bne.w	8009e3c <_strtod_l+0x1b4>
 8009cdc:	7873      	ldrb	r3, [r6, #1]
 8009cde:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009ce2:	2b58      	cmp	r3, #88	; 0x58
 8009ce4:	d168      	bne.n	8009db8 <_strtod_l+0x130>
 8009ce6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ce8:	9301      	str	r3, [sp, #4]
 8009cea:	ab18      	add	r3, sp, #96	; 0x60
 8009cec:	9702      	str	r7, [sp, #8]
 8009cee:	9300      	str	r3, [sp, #0]
 8009cf0:	4a8d      	ldr	r2, [pc, #564]	; (8009f28 <_strtod_l+0x2a0>)
 8009cf2:	ab19      	add	r3, sp, #100	; 0x64
 8009cf4:	a917      	add	r1, sp, #92	; 0x5c
 8009cf6:	4620      	mov	r0, r4
 8009cf8:	f000 ff46 	bl	800ab88 <__gethex>
 8009cfc:	f010 0707 	ands.w	r7, r0, #7
 8009d00:	4605      	mov	r5, r0
 8009d02:	d005      	beq.n	8009d10 <_strtod_l+0x88>
 8009d04:	2f06      	cmp	r7, #6
 8009d06:	d12c      	bne.n	8009d62 <_strtod_l+0xda>
 8009d08:	3601      	adds	r6, #1
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	9617      	str	r6, [sp, #92]	; 0x5c
 8009d0e:	930a      	str	r3, [sp, #40]	; 0x28
 8009d10:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	f040 8590 	bne.w	800a838 <_strtod_l+0xbb0>
 8009d18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d1a:	b1eb      	cbz	r3, 8009d58 <_strtod_l+0xd0>
 8009d1c:	4652      	mov	r2, sl
 8009d1e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009d22:	ec43 2b10 	vmov	d0, r2, r3
 8009d26:	b01d      	add	sp, #116	; 0x74
 8009d28:	ecbd 8b02 	vpop	{d8}
 8009d2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d30:	2a20      	cmp	r2, #32
 8009d32:	d1cc      	bne.n	8009cce <_strtod_l+0x46>
 8009d34:	3301      	adds	r3, #1
 8009d36:	9317      	str	r3, [sp, #92]	; 0x5c
 8009d38:	e7be      	b.n	8009cb8 <_strtod_l+0x30>
 8009d3a:	2a2d      	cmp	r2, #45	; 0x2d
 8009d3c:	d1c7      	bne.n	8009cce <_strtod_l+0x46>
 8009d3e:	2201      	movs	r2, #1
 8009d40:	920a      	str	r2, [sp, #40]	; 0x28
 8009d42:	1c5a      	adds	r2, r3, #1
 8009d44:	9217      	str	r2, [sp, #92]	; 0x5c
 8009d46:	785b      	ldrb	r3, [r3, #1]
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d1c2      	bne.n	8009cd2 <_strtod_l+0x4a>
 8009d4c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009d4e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	f040 856e 	bne.w	800a834 <_strtod_l+0xbac>
 8009d58:	4652      	mov	r2, sl
 8009d5a:	465b      	mov	r3, fp
 8009d5c:	e7e1      	b.n	8009d22 <_strtod_l+0x9a>
 8009d5e:	2200      	movs	r2, #0
 8009d60:	e7ee      	b.n	8009d40 <_strtod_l+0xb8>
 8009d62:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009d64:	b13a      	cbz	r2, 8009d76 <_strtod_l+0xee>
 8009d66:	2135      	movs	r1, #53	; 0x35
 8009d68:	a81a      	add	r0, sp, #104	; 0x68
 8009d6a:	f001 febe 	bl	800baea <__copybits>
 8009d6e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009d70:	4620      	mov	r0, r4
 8009d72:	f001 fa7d 	bl	800b270 <_Bfree>
 8009d76:	3f01      	subs	r7, #1
 8009d78:	2f04      	cmp	r7, #4
 8009d7a:	d806      	bhi.n	8009d8a <_strtod_l+0x102>
 8009d7c:	e8df f007 	tbb	[pc, r7]
 8009d80:	1714030a 	.word	0x1714030a
 8009d84:	0a          	.byte	0x0a
 8009d85:	00          	.byte	0x00
 8009d86:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8009d8a:	0728      	lsls	r0, r5, #28
 8009d8c:	d5c0      	bpl.n	8009d10 <_strtod_l+0x88>
 8009d8e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8009d92:	e7bd      	b.n	8009d10 <_strtod_l+0x88>
 8009d94:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8009d98:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009d9a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009d9e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009da2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009da6:	e7f0      	b.n	8009d8a <_strtod_l+0x102>
 8009da8:	f8df b180 	ldr.w	fp, [pc, #384]	; 8009f2c <_strtod_l+0x2a4>
 8009dac:	e7ed      	b.n	8009d8a <_strtod_l+0x102>
 8009dae:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8009db2:	f04f 3aff 	mov.w	sl, #4294967295
 8009db6:	e7e8      	b.n	8009d8a <_strtod_l+0x102>
 8009db8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009dba:	1c5a      	adds	r2, r3, #1
 8009dbc:	9217      	str	r2, [sp, #92]	; 0x5c
 8009dbe:	785b      	ldrb	r3, [r3, #1]
 8009dc0:	2b30      	cmp	r3, #48	; 0x30
 8009dc2:	d0f9      	beq.n	8009db8 <_strtod_l+0x130>
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d0a3      	beq.n	8009d10 <_strtod_l+0x88>
 8009dc8:	2301      	movs	r3, #1
 8009dca:	f04f 0900 	mov.w	r9, #0
 8009dce:	9304      	str	r3, [sp, #16]
 8009dd0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009dd2:	9308      	str	r3, [sp, #32]
 8009dd4:	f8cd 901c 	str.w	r9, [sp, #28]
 8009dd8:	464f      	mov	r7, r9
 8009dda:	220a      	movs	r2, #10
 8009ddc:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8009dde:	7806      	ldrb	r6, [r0, #0]
 8009de0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8009de4:	b2d9      	uxtb	r1, r3
 8009de6:	2909      	cmp	r1, #9
 8009de8:	d92a      	bls.n	8009e40 <_strtod_l+0x1b8>
 8009dea:	9905      	ldr	r1, [sp, #20]
 8009dec:	462a      	mov	r2, r5
 8009dee:	f002 f9d5 	bl	800c19c <strncmp>
 8009df2:	b398      	cbz	r0, 8009e5c <_strtod_l+0x1d4>
 8009df4:	2000      	movs	r0, #0
 8009df6:	4632      	mov	r2, r6
 8009df8:	463d      	mov	r5, r7
 8009dfa:	9005      	str	r0, [sp, #20]
 8009dfc:	4603      	mov	r3, r0
 8009dfe:	2a65      	cmp	r2, #101	; 0x65
 8009e00:	d001      	beq.n	8009e06 <_strtod_l+0x17e>
 8009e02:	2a45      	cmp	r2, #69	; 0x45
 8009e04:	d118      	bne.n	8009e38 <_strtod_l+0x1b0>
 8009e06:	b91d      	cbnz	r5, 8009e10 <_strtod_l+0x188>
 8009e08:	9a04      	ldr	r2, [sp, #16]
 8009e0a:	4302      	orrs	r2, r0
 8009e0c:	d09e      	beq.n	8009d4c <_strtod_l+0xc4>
 8009e0e:	2500      	movs	r5, #0
 8009e10:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8009e14:	f108 0201 	add.w	r2, r8, #1
 8009e18:	9217      	str	r2, [sp, #92]	; 0x5c
 8009e1a:	f898 2001 	ldrb.w	r2, [r8, #1]
 8009e1e:	2a2b      	cmp	r2, #43	; 0x2b
 8009e20:	d075      	beq.n	8009f0e <_strtod_l+0x286>
 8009e22:	2a2d      	cmp	r2, #45	; 0x2d
 8009e24:	d07b      	beq.n	8009f1e <_strtod_l+0x296>
 8009e26:	f04f 0c00 	mov.w	ip, #0
 8009e2a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8009e2e:	2909      	cmp	r1, #9
 8009e30:	f240 8082 	bls.w	8009f38 <_strtod_l+0x2b0>
 8009e34:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8009e38:	2600      	movs	r6, #0
 8009e3a:	e09d      	b.n	8009f78 <_strtod_l+0x2f0>
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	e7c4      	b.n	8009dca <_strtod_l+0x142>
 8009e40:	2f08      	cmp	r7, #8
 8009e42:	bfd8      	it	le
 8009e44:	9907      	ldrle	r1, [sp, #28]
 8009e46:	f100 0001 	add.w	r0, r0, #1
 8009e4a:	bfda      	itte	le
 8009e4c:	fb02 3301 	mlale	r3, r2, r1, r3
 8009e50:	9307      	strle	r3, [sp, #28]
 8009e52:	fb02 3909 	mlagt	r9, r2, r9, r3
 8009e56:	3701      	adds	r7, #1
 8009e58:	9017      	str	r0, [sp, #92]	; 0x5c
 8009e5a:	e7bf      	b.n	8009ddc <_strtod_l+0x154>
 8009e5c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009e5e:	195a      	adds	r2, r3, r5
 8009e60:	9217      	str	r2, [sp, #92]	; 0x5c
 8009e62:	5d5a      	ldrb	r2, [r3, r5]
 8009e64:	2f00      	cmp	r7, #0
 8009e66:	d037      	beq.n	8009ed8 <_strtod_l+0x250>
 8009e68:	9005      	str	r0, [sp, #20]
 8009e6a:	463d      	mov	r5, r7
 8009e6c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8009e70:	2b09      	cmp	r3, #9
 8009e72:	d912      	bls.n	8009e9a <_strtod_l+0x212>
 8009e74:	2301      	movs	r3, #1
 8009e76:	e7c2      	b.n	8009dfe <_strtod_l+0x176>
 8009e78:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009e7a:	1c5a      	adds	r2, r3, #1
 8009e7c:	9217      	str	r2, [sp, #92]	; 0x5c
 8009e7e:	785a      	ldrb	r2, [r3, #1]
 8009e80:	3001      	adds	r0, #1
 8009e82:	2a30      	cmp	r2, #48	; 0x30
 8009e84:	d0f8      	beq.n	8009e78 <_strtod_l+0x1f0>
 8009e86:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8009e8a:	2b08      	cmp	r3, #8
 8009e8c:	f200 84d9 	bhi.w	800a842 <_strtod_l+0xbba>
 8009e90:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009e92:	9005      	str	r0, [sp, #20]
 8009e94:	2000      	movs	r0, #0
 8009e96:	9308      	str	r3, [sp, #32]
 8009e98:	4605      	mov	r5, r0
 8009e9a:	3a30      	subs	r2, #48	; 0x30
 8009e9c:	f100 0301 	add.w	r3, r0, #1
 8009ea0:	d014      	beq.n	8009ecc <_strtod_l+0x244>
 8009ea2:	9905      	ldr	r1, [sp, #20]
 8009ea4:	4419      	add	r1, r3
 8009ea6:	9105      	str	r1, [sp, #20]
 8009ea8:	462b      	mov	r3, r5
 8009eaa:	eb00 0e05 	add.w	lr, r0, r5
 8009eae:	210a      	movs	r1, #10
 8009eb0:	4573      	cmp	r3, lr
 8009eb2:	d113      	bne.n	8009edc <_strtod_l+0x254>
 8009eb4:	182b      	adds	r3, r5, r0
 8009eb6:	2b08      	cmp	r3, #8
 8009eb8:	f105 0501 	add.w	r5, r5, #1
 8009ebc:	4405      	add	r5, r0
 8009ebe:	dc1c      	bgt.n	8009efa <_strtod_l+0x272>
 8009ec0:	9907      	ldr	r1, [sp, #28]
 8009ec2:	230a      	movs	r3, #10
 8009ec4:	fb03 2301 	mla	r3, r3, r1, r2
 8009ec8:	9307      	str	r3, [sp, #28]
 8009eca:	2300      	movs	r3, #0
 8009ecc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009ece:	1c51      	adds	r1, r2, #1
 8009ed0:	9117      	str	r1, [sp, #92]	; 0x5c
 8009ed2:	7852      	ldrb	r2, [r2, #1]
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	e7c9      	b.n	8009e6c <_strtod_l+0x1e4>
 8009ed8:	4638      	mov	r0, r7
 8009eda:	e7d2      	b.n	8009e82 <_strtod_l+0x1fa>
 8009edc:	2b08      	cmp	r3, #8
 8009ede:	dc04      	bgt.n	8009eea <_strtod_l+0x262>
 8009ee0:	9e07      	ldr	r6, [sp, #28]
 8009ee2:	434e      	muls	r6, r1
 8009ee4:	9607      	str	r6, [sp, #28]
 8009ee6:	3301      	adds	r3, #1
 8009ee8:	e7e2      	b.n	8009eb0 <_strtod_l+0x228>
 8009eea:	f103 0c01 	add.w	ip, r3, #1
 8009eee:	f1bc 0f10 	cmp.w	ip, #16
 8009ef2:	bfd8      	it	le
 8009ef4:	fb01 f909 	mulle.w	r9, r1, r9
 8009ef8:	e7f5      	b.n	8009ee6 <_strtod_l+0x25e>
 8009efa:	2d10      	cmp	r5, #16
 8009efc:	bfdc      	itt	le
 8009efe:	230a      	movle	r3, #10
 8009f00:	fb03 2909 	mlale	r9, r3, r9, r2
 8009f04:	e7e1      	b.n	8009eca <_strtod_l+0x242>
 8009f06:	2300      	movs	r3, #0
 8009f08:	9305      	str	r3, [sp, #20]
 8009f0a:	2301      	movs	r3, #1
 8009f0c:	e77c      	b.n	8009e08 <_strtod_l+0x180>
 8009f0e:	f04f 0c00 	mov.w	ip, #0
 8009f12:	f108 0202 	add.w	r2, r8, #2
 8009f16:	9217      	str	r2, [sp, #92]	; 0x5c
 8009f18:	f898 2002 	ldrb.w	r2, [r8, #2]
 8009f1c:	e785      	b.n	8009e2a <_strtod_l+0x1a2>
 8009f1e:	f04f 0c01 	mov.w	ip, #1
 8009f22:	e7f6      	b.n	8009f12 <_strtod_l+0x28a>
 8009f24:	0800d140 	.word	0x0800d140
 8009f28:	0800cf78 	.word	0x0800cf78
 8009f2c:	7ff00000 	.word	0x7ff00000
 8009f30:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009f32:	1c51      	adds	r1, r2, #1
 8009f34:	9117      	str	r1, [sp, #92]	; 0x5c
 8009f36:	7852      	ldrb	r2, [r2, #1]
 8009f38:	2a30      	cmp	r2, #48	; 0x30
 8009f3a:	d0f9      	beq.n	8009f30 <_strtod_l+0x2a8>
 8009f3c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8009f40:	2908      	cmp	r1, #8
 8009f42:	f63f af79 	bhi.w	8009e38 <_strtod_l+0x1b0>
 8009f46:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8009f4a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009f4c:	9206      	str	r2, [sp, #24]
 8009f4e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009f50:	1c51      	adds	r1, r2, #1
 8009f52:	9117      	str	r1, [sp, #92]	; 0x5c
 8009f54:	7852      	ldrb	r2, [r2, #1]
 8009f56:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8009f5a:	2e09      	cmp	r6, #9
 8009f5c:	d937      	bls.n	8009fce <_strtod_l+0x346>
 8009f5e:	9e06      	ldr	r6, [sp, #24]
 8009f60:	1b89      	subs	r1, r1, r6
 8009f62:	2908      	cmp	r1, #8
 8009f64:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8009f68:	dc02      	bgt.n	8009f70 <_strtod_l+0x2e8>
 8009f6a:	4576      	cmp	r6, lr
 8009f6c:	bfa8      	it	ge
 8009f6e:	4676      	movge	r6, lr
 8009f70:	f1bc 0f00 	cmp.w	ip, #0
 8009f74:	d000      	beq.n	8009f78 <_strtod_l+0x2f0>
 8009f76:	4276      	negs	r6, r6
 8009f78:	2d00      	cmp	r5, #0
 8009f7a:	d14d      	bne.n	800a018 <_strtod_l+0x390>
 8009f7c:	9904      	ldr	r1, [sp, #16]
 8009f7e:	4301      	orrs	r1, r0
 8009f80:	f47f aec6 	bne.w	8009d10 <_strtod_l+0x88>
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	f47f aee1 	bne.w	8009d4c <_strtod_l+0xc4>
 8009f8a:	2a69      	cmp	r2, #105	; 0x69
 8009f8c:	d027      	beq.n	8009fde <_strtod_l+0x356>
 8009f8e:	dc24      	bgt.n	8009fda <_strtod_l+0x352>
 8009f90:	2a49      	cmp	r2, #73	; 0x49
 8009f92:	d024      	beq.n	8009fde <_strtod_l+0x356>
 8009f94:	2a4e      	cmp	r2, #78	; 0x4e
 8009f96:	f47f aed9 	bne.w	8009d4c <_strtod_l+0xc4>
 8009f9a:	499f      	ldr	r1, [pc, #636]	; (800a218 <_strtod_l+0x590>)
 8009f9c:	a817      	add	r0, sp, #92	; 0x5c
 8009f9e:	f001 f84b 	bl	800b038 <__match>
 8009fa2:	2800      	cmp	r0, #0
 8009fa4:	f43f aed2 	beq.w	8009d4c <_strtod_l+0xc4>
 8009fa8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009faa:	781b      	ldrb	r3, [r3, #0]
 8009fac:	2b28      	cmp	r3, #40	; 0x28
 8009fae:	d12d      	bne.n	800a00c <_strtod_l+0x384>
 8009fb0:	499a      	ldr	r1, [pc, #616]	; (800a21c <_strtod_l+0x594>)
 8009fb2:	aa1a      	add	r2, sp, #104	; 0x68
 8009fb4:	a817      	add	r0, sp, #92	; 0x5c
 8009fb6:	f001 f853 	bl	800b060 <__hexnan>
 8009fba:	2805      	cmp	r0, #5
 8009fbc:	d126      	bne.n	800a00c <_strtod_l+0x384>
 8009fbe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009fc0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8009fc4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8009fc8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8009fcc:	e6a0      	b.n	8009d10 <_strtod_l+0x88>
 8009fce:	210a      	movs	r1, #10
 8009fd0:	fb01 2e0e 	mla	lr, r1, lr, r2
 8009fd4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8009fd8:	e7b9      	b.n	8009f4e <_strtod_l+0x2c6>
 8009fda:	2a6e      	cmp	r2, #110	; 0x6e
 8009fdc:	e7db      	b.n	8009f96 <_strtod_l+0x30e>
 8009fde:	4990      	ldr	r1, [pc, #576]	; (800a220 <_strtod_l+0x598>)
 8009fe0:	a817      	add	r0, sp, #92	; 0x5c
 8009fe2:	f001 f829 	bl	800b038 <__match>
 8009fe6:	2800      	cmp	r0, #0
 8009fe8:	f43f aeb0 	beq.w	8009d4c <_strtod_l+0xc4>
 8009fec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009fee:	498d      	ldr	r1, [pc, #564]	; (800a224 <_strtod_l+0x59c>)
 8009ff0:	3b01      	subs	r3, #1
 8009ff2:	a817      	add	r0, sp, #92	; 0x5c
 8009ff4:	9317      	str	r3, [sp, #92]	; 0x5c
 8009ff6:	f001 f81f 	bl	800b038 <__match>
 8009ffa:	b910      	cbnz	r0, 800a002 <_strtod_l+0x37a>
 8009ffc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009ffe:	3301      	adds	r3, #1
 800a000:	9317      	str	r3, [sp, #92]	; 0x5c
 800a002:	f8df b230 	ldr.w	fp, [pc, #560]	; 800a234 <_strtod_l+0x5ac>
 800a006:	f04f 0a00 	mov.w	sl, #0
 800a00a:	e681      	b.n	8009d10 <_strtod_l+0x88>
 800a00c:	4886      	ldr	r0, [pc, #536]	; (800a228 <_strtod_l+0x5a0>)
 800a00e:	f002 f8b7 	bl	800c180 <nan>
 800a012:	ec5b ab10 	vmov	sl, fp, d0
 800a016:	e67b      	b.n	8009d10 <_strtod_l+0x88>
 800a018:	9b05      	ldr	r3, [sp, #20]
 800a01a:	9807      	ldr	r0, [sp, #28]
 800a01c:	1af3      	subs	r3, r6, r3
 800a01e:	2f00      	cmp	r7, #0
 800a020:	bf08      	it	eq
 800a022:	462f      	moveq	r7, r5
 800a024:	2d10      	cmp	r5, #16
 800a026:	9306      	str	r3, [sp, #24]
 800a028:	46a8      	mov	r8, r5
 800a02a:	bfa8      	it	ge
 800a02c:	f04f 0810 	movge.w	r8, #16
 800a030:	f7f6 fa98 	bl	8000564 <__aeabi_ui2d>
 800a034:	2d09      	cmp	r5, #9
 800a036:	4682      	mov	sl, r0
 800a038:	468b      	mov	fp, r1
 800a03a:	dd13      	ble.n	800a064 <_strtod_l+0x3dc>
 800a03c:	4b7b      	ldr	r3, [pc, #492]	; (800a22c <_strtod_l+0x5a4>)
 800a03e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800a042:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800a046:	f7f6 fb07 	bl	8000658 <__aeabi_dmul>
 800a04a:	4682      	mov	sl, r0
 800a04c:	4648      	mov	r0, r9
 800a04e:	468b      	mov	fp, r1
 800a050:	f7f6 fa88 	bl	8000564 <__aeabi_ui2d>
 800a054:	4602      	mov	r2, r0
 800a056:	460b      	mov	r3, r1
 800a058:	4650      	mov	r0, sl
 800a05a:	4659      	mov	r1, fp
 800a05c:	f7f6 f946 	bl	80002ec <__adddf3>
 800a060:	4682      	mov	sl, r0
 800a062:	468b      	mov	fp, r1
 800a064:	2d0f      	cmp	r5, #15
 800a066:	dc38      	bgt.n	800a0da <_strtod_l+0x452>
 800a068:	9b06      	ldr	r3, [sp, #24]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	f43f ae50 	beq.w	8009d10 <_strtod_l+0x88>
 800a070:	dd24      	ble.n	800a0bc <_strtod_l+0x434>
 800a072:	2b16      	cmp	r3, #22
 800a074:	dc0b      	bgt.n	800a08e <_strtod_l+0x406>
 800a076:	496d      	ldr	r1, [pc, #436]	; (800a22c <_strtod_l+0x5a4>)
 800a078:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a07c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a080:	4652      	mov	r2, sl
 800a082:	465b      	mov	r3, fp
 800a084:	f7f6 fae8 	bl	8000658 <__aeabi_dmul>
 800a088:	4682      	mov	sl, r0
 800a08a:	468b      	mov	fp, r1
 800a08c:	e640      	b.n	8009d10 <_strtod_l+0x88>
 800a08e:	9a06      	ldr	r2, [sp, #24]
 800a090:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800a094:	4293      	cmp	r3, r2
 800a096:	db20      	blt.n	800a0da <_strtod_l+0x452>
 800a098:	4c64      	ldr	r4, [pc, #400]	; (800a22c <_strtod_l+0x5a4>)
 800a09a:	f1c5 050f 	rsb	r5, r5, #15
 800a09e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800a0a2:	4652      	mov	r2, sl
 800a0a4:	465b      	mov	r3, fp
 800a0a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a0aa:	f7f6 fad5 	bl	8000658 <__aeabi_dmul>
 800a0ae:	9b06      	ldr	r3, [sp, #24]
 800a0b0:	1b5d      	subs	r5, r3, r5
 800a0b2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800a0b6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a0ba:	e7e3      	b.n	800a084 <_strtod_l+0x3fc>
 800a0bc:	9b06      	ldr	r3, [sp, #24]
 800a0be:	3316      	adds	r3, #22
 800a0c0:	db0b      	blt.n	800a0da <_strtod_l+0x452>
 800a0c2:	9b05      	ldr	r3, [sp, #20]
 800a0c4:	1b9e      	subs	r6, r3, r6
 800a0c6:	4b59      	ldr	r3, [pc, #356]	; (800a22c <_strtod_l+0x5a4>)
 800a0c8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800a0cc:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a0d0:	4650      	mov	r0, sl
 800a0d2:	4659      	mov	r1, fp
 800a0d4:	f7f6 fbea 	bl	80008ac <__aeabi_ddiv>
 800a0d8:	e7d6      	b.n	800a088 <_strtod_l+0x400>
 800a0da:	9b06      	ldr	r3, [sp, #24]
 800a0dc:	eba5 0808 	sub.w	r8, r5, r8
 800a0e0:	4498      	add	r8, r3
 800a0e2:	f1b8 0f00 	cmp.w	r8, #0
 800a0e6:	dd74      	ble.n	800a1d2 <_strtod_l+0x54a>
 800a0e8:	f018 030f 	ands.w	r3, r8, #15
 800a0ec:	d00a      	beq.n	800a104 <_strtod_l+0x47c>
 800a0ee:	494f      	ldr	r1, [pc, #316]	; (800a22c <_strtod_l+0x5a4>)
 800a0f0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a0f4:	4652      	mov	r2, sl
 800a0f6:	465b      	mov	r3, fp
 800a0f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a0fc:	f7f6 faac 	bl	8000658 <__aeabi_dmul>
 800a100:	4682      	mov	sl, r0
 800a102:	468b      	mov	fp, r1
 800a104:	f038 080f 	bics.w	r8, r8, #15
 800a108:	d04f      	beq.n	800a1aa <_strtod_l+0x522>
 800a10a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800a10e:	dd22      	ble.n	800a156 <_strtod_l+0x4ce>
 800a110:	2500      	movs	r5, #0
 800a112:	462e      	mov	r6, r5
 800a114:	9507      	str	r5, [sp, #28]
 800a116:	9505      	str	r5, [sp, #20]
 800a118:	2322      	movs	r3, #34	; 0x22
 800a11a:	f8df b118 	ldr.w	fp, [pc, #280]	; 800a234 <_strtod_l+0x5ac>
 800a11e:	6023      	str	r3, [r4, #0]
 800a120:	f04f 0a00 	mov.w	sl, #0
 800a124:	9b07      	ldr	r3, [sp, #28]
 800a126:	2b00      	cmp	r3, #0
 800a128:	f43f adf2 	beq.w	8009d10 <_strtod_l+0x88>
 800a12c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a12e:	4620      	mov	r0, r4
 800a130:	f001 f89e 	bl	800b270 <_Bfree>
 800a134:	9905      	ldr	r1, [sp, #20]
 800a136:	4620      	mov	r0, r4
 800a138:	f001 f89a 	bl	800b270 <_Bfree>
 800a13c:	4631      	mov	r1, r6
 800a13e:	4620      	mov	r0, r4
 800a140:	f001 f896 	bl	800b270 <_Bfree>
 800a144:	9907      	ldr	r1, [sp, #28]
 800a146:	4620      	mov	r0, r4
 800a148:	f001 f892 	bl	800b270 <_Bfree>
 800a14c:	4629      	mov	r1, r5
 800a14e:	4620      	mov	r0, r4
 800a150:	f001 f88e 	bl	800b270 <_Bfree>
 800a154:	e5dc      	b.n	8009d10 <_strtod_l+0x88>
 800a156:	4b36      	ldr	r3, [pc, #216]	; (800a230 <_strtod_l+0x5a8>)
 800a158:	9304      	str	r3, [sp, #16]
 800a15a:	2300      	movs	r3, #0
 800a15c:	ea4f 1828 	mov.w	r8, r8, asr #4
 800a160:	4650      	mov	r0, sl
 800a162:	4659      	mov	r1, fp
 800a164:	4699      	mov	r9, r3
 800a166:	f1b8 0f01 	cmp.w	r8, #1
 800a16a:	dc21      	bgt.n	800a1b0 <_strtod_l+0x528>
 800a16c:	b10b      	cbz	r3, 800a172 <_strtod_l+0x4ea>
 800a16e:	4682      	mov	sl, r0
 800a170:	468b      	mov	fp, r1
 800a172:	4b2f      	ldr	r3, [pc, #188]	; (800a230 <_strtod_l+0x5a8>)
 800a174:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800a178:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800a17c:	4652      	mov	r2, sl
 800a17e:	465b      	mov	r3, fp
 800a180:	e9d9 0100 	ldrd	r0, r1, [r9]
 800a184:	f7f6 fa68 	bl	8000658 <__aeabi_dmul>
 800a188:	4b2a      	ldr	r3, [pc, #168]	; (800a234 <_strtod_l+0x5ac>)
 800a18a:	460a      	mov	r2, r1
 800a18c:	400b      	ands	r3, r1
 800a18e:	492a      	ldr	r1, [pc, #168]	; (800a238 <_strtod_l+0x5b0>)
 800a190:	428b      	cmp	r3, r1
 800a192:	4682      	mov	sl, r0
 800a194:	d8bc      	bhi.n	800a110 <_strtod_l+0x488>
 800a196:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800a19a:	428b      	cmp	r3, r1
 800a19c:	bf86      	itte	hi
 800a19e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800a23c <_strtod_l+0x5b4>
 800a1a2:	f04f 3aff 	movhi.w	sl, #4294967295
 800a1a6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	9304      	str	r3, [sp, #16]
 800a1ae:	e084      	b.n	800a2ba <_strtod_l+0x632>
 800a1b0:	f018 0f01 	tst.w	r8, #1
 800a1b4:	d005      	beq.n	800a1c2 <_strtod_l+0x53a>
 800a1b6:	9b04      	ldr	r3, [sp, #16]
 800a1b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1bc:	f7f6 fa4c 	bl	8000658 <__aeabi_dmul>
 800a1c0:	2301      	movs	r3, #1
 800a1c2:	9a04      	ldr	r2, [sp, #16]
 800a1c4:	3208      	adds	r2, #8
 800a1c6:	f109 0901 	add.w	r9, r9, #1
 800a1ca:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a1ce:	9204      	str	r2, [sp, #16]
 800a1d0:	e7c9      	b.n	800a166 <_strtod_l+0x4de>
 800a1d2:	d0ea      	beq.n	800a1aa <_strtod_l+0x522>
 800a1d4:	f1c8 0800 	rsb	r8, r8, #0
 800a1d8:	f018 020f 	ands.w	r2, r8, #15
 800a1dc:	d00a      	beq.n	800a1f4 <_strtod_l+0x56c>
 800a1de:	4b13      	ldr	r3, [pc, #76]	; (800a22c <_strtod_l+0x5a4>)
 800a1e0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a1e4:	4650      	mov	r0, sl
 800a1e6:	4659      	mov	r1, fp
 800a1e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1ec:	f7f6 fb5e 	bl	80008ac <__aeabi_ddiv>
 800a1f0:	4682      	mov	sl, r0
 800a1f2:	468b      	mov	fp, r1
 800a1f4:	ea5f 1828 	movs.w	r8, r8, asr #4
 800a1f8:	d0d7      	beq.n	800a1aa <_strtod_l+0x522>
 800a1fa:	f1b8 0f1f 	cmp.w	r8, #31
 800a1fe:	dd1f      	ble.n	800a240 <_strtod_l+0x5b8>
 800a200:	2500      	movs	r5, #0
 800a202:	462e      	mov	r6, r5
 800a204:	9507      	str	r5, [sp, #28]
 800a206:	9505      	str	r5, [sp, #20]
 800a208:	2322      	movs	r3, #34	; 0x22
 800a20a:	f04f 0a00 	mov.w	sl, #0
 800a20e:	f04f 0b00 	mov.w	fp, #0
 800a212:	6023      	str	r3, [r4, #0]
 800a214:	e786      	b.n	800a124 <_strtod_l+0x49c>
 800a216:	bf00      	nop
 800a218:	0800cf75 	.word	0x0800cf75
 800a21c:	0800cf8c 	.word	0x0800cf8c
 800a220:	0800cf6c 	.word	0x0800cf6c
 800a224:	0800cf6f 	.word	0x0800cf6f
 800a228:	0800d332 	.word	0x0800d332
 800a22c:	0800d1f0 	.word	0x0800d1f0
 800a230:	0800d1c8 	.word	0x0800d1c8
 800a234:	7ff00000 	.word	0x7ff00000
 800a238:	7ca00000 	.word	0x7ca00000
 800a23c:	7fefffff 	.word	0x7fefffff
 800a240:	f018 0310 	ands.w	r3, r8, #16
 800a244:	bf18      	it	ne
 800a246:	236a      	movne	r3, #106	; 0x6a
 800a248:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800a5f8 <_strtod_l+0x970>
 800a24c:	9304      	str	r3, [sp, #16]
 800a24e:	4650      	mov	r0, sl
 800a250:	4659      	mov	r1, fp
 800a252:	2300      	movs	r3, #0
 800a254:	f018 0f01 	tst.w	r8, #1
 800a258:	d004      	beq.n	800a264 <_strtod_l+0x5dc>
 800a25a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800a25e:	f7f6 f9fb 	bl	8000658 <__aeabi_dmul>
 800a262:	2301      	movs	r3, #1
 800a264:	ea5f 0868 	movs.w	r8, r8, asr #1
 800a268:	f109 0908 	add.w	r9, r9, #8
 800a26c:	d1f2      	bne.n	800a254 <_strtod_l+0x5cc>
 800a26e:	b10b      	cbz	r3, 800a274 <_strtod_l+0x5ec>
 800a270:	4682      	mov	sl, r0
 800a272:	468b      	mov	fp, r1
 800a274:	9b04      	ldr	r3, [sp, #16]
 800a276:	b1c3      	cbz	r3, 800a2aa <_strtod_l+0x622>
 800a278:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800a27c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800a280:	2b00      	cmp	r3, #0
 800a282:	4659      	mov	r1, fp
 800a284:	dd11      	ble.n	800a2aa <_strtod_l+0x622>
 800a286:	2b1f      	cmp	r3, #31
 800a288:	f340 8124 	ble.w	800a4d4 <_strtod_l+0x84c>
 800a28c:	2b34      	cmp	r3, #52	; 0x34
 800a28e:	bfde      	ittt	le
 800a290:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800a294:	f04f 33ff 	movle.w	r3, #4294967295
 800a298:	fa03 f202 	lslle.w	r2, r3, r2
 800a29c:	f04f 0a00 	mov.w	sl, #0
 800a2a0:	bfcc      	ite	gt
 800a2a2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800a2a6:	ea02 0b01 	andle.w	fp, r2, r1
 800a2aa:	2200      	movs	r2, #0
 800a2ac:	2300      	movs	r3, #0
 800a2ae:	4650      	mov	r0, sl
 800a2b0:	4659      	mov	r1, fp
 800a2b2:	f7f6 fc39 	bl	8000b28 <__aeabi_dcmpeq>
 800a2b6:	2800      	cmp	r0, #0
 800a2b8:	d1a2      	bne.n	800a200 <_strtod_l+0x578>
 800a2ba:	9b07      	ldr	r3, [sp, #28]
 800a2bc:	9300      	str	r3, [sp, #0]
 800a2be:	9908      	ldr	r1, [sp, #32]
 800a2c0:	462b      	mov	r3, r5
 800a2c2:	463a      	mov	r2, r7
 800a2c4:	4620      	mov	r0, r4
 800a2c6:	f001 f83b 	bl	800b340 <__s2b>
 800a2ca:	9007      	str	r0, [sp, #28]
 800a2cc:	2800      	cmp	r0, #0
 800a2ce:	f43f af1f 	beq.w	800a110 <_strtod_l+0x488>
 800a2d2:	9b05      	ldr	r3, [sp, #20]
 800a2d4:	1b9e      	subs	r6, r3, r6
 800a2d6:	9b06      	ldr	r3, [sp, #24]
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	bfb4      	ite	lt
 800a2dc:	4633      	movlt	r3, r6
 800a2de:	2300      	movge	r3, #0
 800a2e0:	930c      	str	r3, [sp, #48]	; 0x30
 800a2e2:	9b06      	ldr	r3, [sp, #24]
 800a2e4:	2500      	movs	r5, #0
 800a2e6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800a2ea:	9312      	str	r3, [sp, #72]	; 0x48
 800a2ec:	462e      	mov	r6, r5
 800a2ee:	9b07      	ldr	r3, [sp, #28]
 800a2f0:	4620      	mov	r0, r4
 800a2f2:	6859      	ldr	r1, [r3, #4]
 800a2f4:	f000 ff7c 	bl	800b1f0 <_Balloc>
 800a2f8:	9005      	str	r0, [sp, #20]
 800a2fa:	2800      	cmp	r0, #0
 800a2fc:	f43f af0c 	beq.w	800a118 <_strtod_l+0x490>
 800a300:	9b07      	ldr	r3, [sp, #28]
 800a302:	691a      	ldr	r2, [r3, #16]
 800a304:	3202      	adds	r2, #2
 800a306:	f103 010c 	add.w	r1, r3, #12
 800a30a:	0092      	lsls	r2, r2, #2
 800a30c:	300c      	adds	r0, #12
 800a30e:	f000 ff55 	bl	800b1bc <memcpy>
 800a312:	ec4b ab10 	vmov	d0, sl, fp
 800a316:	aa1a      	add	r2, sp, #104	; 0x68
 800a318:	a919      	add	r1, sp, #100	; 0x64
 800a31a:	4620      	mov	r0, r4
 800a31c:	f001 fb56 	bl	800b9cc <__d2b>
 800a320:	ec4b ab18 	vmov	d8, sl, fp
 800a324:	9018      	str	r0, [sp, #96]	; 0x60
 800a326:	2800      	cmp	r0, #0
 800a328:	f43f aef6 	beq.w	800a118 <_strtod_l+0x490>
 800a32c:	2101      	movs	r1, #1
 800a32e:	4620      	mov	r0, r4
 800a330:	f001 f8a0 	bl	800b474 <__i2b>
 800a334:	4606      	mov	r6, r0
 800a336:	2800      	cmp	r0, #0
 800a338:	f43f aeee 	beq.w	800a118 <_strtod_l+0x490>
 800a33c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a33e:	9904      	ldr	r1, [sp, #16]
 800a340:	2b00      	cmp	r3, #0
 800a342:	bfab      	itete	ge
 800a344:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800a346:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800a348:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800a34a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800a34e:	bfac      	ite	ge
 800a350:	eb03 0902 	addge.w	r9, r3, r2
 800a354:	1ad7      	sublt	r7, r2, r3
 800a356:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a358:	eba3 0801 	sub.w	r8, r3, r1
 800a35c:	4490      	add	r8, r2
 800a35e:	4ba1      	ldr	r3, [pc, #644]	; (800a5e4 <_strtod_l+0x95c>)
 800a360:	f108 38ff 	add.w	r8, r8, #4294967295
 800a364:	4598      	cmp	r8, r3
 800a366:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a36a:	f280 80c7 	bge.w	800a4fc <_strtod_l+0x874>
 800a36e:	eba3 0308 	sub.w	r3, r3, r8
 800a372:	2b1f      	cmp	r3, #31
 800a374:	eba2 0203 	sub.w	r2, r2, r3
 800a378:	f04f 0101 	mov.w	r1, #1
 800a37c:	f300 80b1 	bgt.w	800a4e2 <_strtod_l+0x85a>
 800a380:	fa01 f303 	lsl.w	r3, r1, r3
 800a384:	930d      	str	r3, [sp, #52]	; 0x34
 800a386:	2300      	movs	r3, #0
 800a388:	9308      	str	r3, [sp, #32]
 800a38a:	eb09 0802 	add.w	r8, r9, r2
 800a38e:	9b04      	ldr	r3, [sp, #16]
 800a390:	45c1      	cmp	r9, r8
 800a392:	4417      	add	r7, r2
 800a394:	441f      	add	r7, r3
 800a396:	464b      	mov	r3, r9
 800a398:	bfa8      	it	ge
 800a39a:	4643      	movge	r3, r8
 800a39c:	42bb      	cmp	r3, r7
 800a39e:	bfa8      	it	ge
 800a3a0:	463b      	movge	r3, r7
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	bfc2      	ittt	gt
 800a3a6:	eba8 0803 	subgt.w	r8, r8, r3
 800a3aa:	1aff      	subgt	r7, r7, r3
 800a3ac:	eba9 0903 	subgt.w	r9, r9, r3
 800a3b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	dd17      	ble.n	800a3e6 <_strtod_l+0x75e>
 800a3b6:	4631      	mov	r1, r6
 800a3b8:	461a      	mov	r2, r3
 800a3ba:	4620      	mov	r0, r4
 800a3bc:	f001 f91a 	bl	800b5f4 <__pow5mult>
 800a3c0:	4606      	mov	r6, r0
 800a3c2:	2800      	cmp	r0, #0
 800a3c4:	f43f aea8 	beq.w	800a118 <_strtod_l+0x490>
 800a3c8:	4601      	mov	r1, r0
 800a3ca:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a3cc:	4620      	mov	r0, r4
 800a3ce:	f001 f867 	bl	800b4a0 <__multiply>
 800a3d2:	900b      	str	r0, [sp, #44]	; 0x2c
 800a3d4:	2800      	cmp	r0, #0
 800a3d6:	f43f ae9f 	beq.w	800a118 <_strtod_l+0x490>
 800a3da:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a3dc:	4620      	mov	r0, r4
 800a3de:	f000 ff47 	bl	800b270 <_Bfree>
 800a3e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a3e4:	9318      	str	r3, [sp, #96]	; 0x60
 800a3e6:	f1b8 0f00 	cmp.w	r8, #0
 800a3ea:	f300 808c 	bgt.w	800a506 <_strtod_l+0x87e>
 800a3ee:	9b06      	ldr	r3, [sp, #24]
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	dd08      	ble.n	800a406 <_strtod_l+0x77e>
 800a3f4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a3f6:	9905      	ldr	r1, [sp, #20]
 800a3f8:	4620      	mov	r0, r4
 800a3fa:	f001 f8fb 	bl	800b5f4 <__pow5mult>
 800a3fe:	9005      	str	r0, [sp, #20]
 800a400:	2800      	cmp	r0, #0
 800a402:	f43f ae89 	beq.w	800a118 <_strtod_l+0x490>
 800a406:	2f00      	cmp	r7, #0
 800a408:	dd08      	ble.n	800a41c <_strtod_l+0x794>
 800a40a:	9905      	ldr	r1, [sp, #20]
 800a40c:	463a      	mov	r2, r7
 800a40e:	4620      	mov	r0, r4
 800a410:	f001 f94a 	bl	800b6a8 <__lshift>
 800a414:	9005      	str	r0, [sp, #20]
 800a416:	2800      	cmp	r0, #0
 800a418:	f43f ae7e 	beq.w	800a118 <_strtod_l+0x490>
 800a41c:	f1b9 0f00 	cmp.w	r9, #0
 800a420:	dd08      	ble.n	800a434 <_strtod_l+0x7ac>
 800a422:	4631      	mov	r1, r6
 800a424:	464a      	mov	r2, r9
 800a426:	4620      	mov	r0, r4
 800a428:	f001 f93e 	bl	800b6a8 <__lshift>
 800a42c:	4606      	mov	r6, r0
 800a42e:	2800      	cmp	r0, #0
 800a430:	f43f ae72 	beq.w	800a118 <_strtod_l+0x490>
 800a434:	9a05      	ldr	r2, [sp, #20]
 800a436:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a438:	4620      	mov	r0, r4
 800a43a:	f001 f9c1 	bl	800b7c0 <__mdiff>
 800a43e:	4605      	mov	r5, r0
 800a440:	2800      	cmp	r0, #0
 800a442:	f43f ae69 	beq.w	800a118 <_strtod_l+0x490>
 800a446:	68c3      	ldr	r3, [r0, #12]
 800a448:	930b      	str	r3, [sp, #44]	; 0x2c
 800a44a:	2300      	movs	r3, #0
 800a44c:	60c3      	str	r3, [r0, #12]
 800a44e:	4631      	mov	r1, r6
 800a450:	f001 f99a 	bl	800b788 <__mcmp>
 800a454:	2800      	cmp	r0, #0
 800a456:	da60      	bge.n	800a51a <_strtod_l+0x892>
 800a458:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a45a:	ea53 030a 	orrs.w	r3, r3, sl
 800a45e:	f040 8082 	bne.w	800a566 <_strtod_l+0x8de>
 800a462:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a466:	2b00      	cmp	r3, #0
 800a468:	d17d      	bne.n	800a566 <_strtod_l+0x8de>
 800a46a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a46e:	0d1b      	lsrs	r3, r3, #20
 800a470:	051b      	lsls	r3, r3, #20
 800a472:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800a476:	d976      	bls.n	800a566 <_strtod_l+0x8de>
 800a478:	696b      	ldr	r3, [r5, #20]
 800a47a:	b913      	cbnz	r3, 800a482 <_strtod_l+0x7fa>
 800a47c:	692b      	ldr	r3, [r5, #16]
 800a47e:	2b01      	cmp	r3, #1
 800a480:	dd71      	ble.n	800a566 <_strtod_l+0x8de>
 800a482:	4629      	mov	r1, r5
 800a484:	2201      	movs	r2, #1
 800a486:	4620      	mov	r0, r4
 800a488:	f001 f90e 	bl	800b6a8 <__lshift>
 800a48c:	4631      	mov	r1, r6
 800a48e:	4605      	mov	r5, r0
 800a490:	f001 f97a 	bl	800b788 <__mcmp>
 800a494:	2800      	cmp	r0, #0
 800a496:	dd66      	ble.n	800a566 <_strtod_l+0x8de>
 800a498:	9904      	ldr	r1, [sp, #16]
 800a49a:	4a53      	ldr	r2, [pc, #332]	; (800a5e8 <_strtod_l+0x960>)
 800a49c:	465b      	mov	r3, fp
 800a49e:	2900      	cmp	r1, #0
 800a4a0:	f000 8081 	beq.w	800a5a6 <_strtod_l+0x91e>
 800a4a4:	ea02 010b 	and.w	r1, r2, fp
 800a4a8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800a4ac:	dc7b      	bgt.n	800a5a6 <_strtod_l+0x91e>
 800a4ae:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800a4b2:	f77f aea9 	ble.w	800a208 <_strtod_l+0x580>
 800a4b6:	4b4d      	ldr	r3, [pc, #308]	; (800a5ec <_strtod_l+0x964>)
 800a4b8:	4650      	mov	r0, sl
 800a4ba:	4659      	mov	r1, fp
 800a4bc:	2200      	movs	r2, #0
 800a4be:	f7f6 f8cb 	bl	8000658 <__aeabi_dmul>
 800a4c2:	460b      	mov	r3, r1
 800a4c4:	4303      	orrs	r3, r0
 800a4c6:	bf08      	it	eq
 800a4c8:	2322      	moveq	r3, #34	; 0x22
 800a4ca:	4682      	mov	sl, r0
 800a4cc:	468b      	mov	fp, r1
 800a4ce:	bf08      	it	eq
 800a4d0:	6023      	streq	r3, [r4, #0]
 800a4d2:	e62b      	b.n	800a12c <_strtod_l+0x4a4>
 800a4d4:	f04f 32ff 	mov.w	r2, #4294967295
 800a4d8:	fa02 f303 	lsl.w	r3, r2, r3
 800a4dc:	ea03 0a0a 	and.w	sl, r3, sl
 800a4e0:	e6e3      	b.n	800a2aa <_strtod_l+0x622>
 800a4e2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800a4e6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800a4ea:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800a4ee:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800a4f2:	fa01 f308 	lsl.w	r3, r1, r8
 800a4f6:	9308      	str	r3, [sp, #32]
 800a4f8:	910d      	str	r1, [sp, #52]	; 0x34
 800a4fa:	e746      	b.n	800a38a <_strtod_l+0x702>
 800a4fc:	2300      	movs	r3, #0
 800a4fe:	9308      	str	r3, [sp, #32]
 800a500:	2301      	movs	r3, #1
 800a502:	930d      	str	r3, [sp, #52]	; 0x34
 800a504:	e741      	b.n	800a38a <_strtod_l+0x702>
 800a506:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a508:	4642      	mov	r2, r8
 800a50a:	4620      	mov	r0, r4
 800a50c:	f001 f8cc 	bl	800b6a8 <__lshift>
 800a510:	9018      	str	r0, [sp, #96]	; 0x60
 800a512:	2800      	cmp	r0, #0
 800a514:	f47f af6b 	bne.w	800a3ee <_strtod_l+0x766>
 800a518:	e5fe      	b.n	800a118 <_strtod_l+0x490>
 800a51a:	465f      	mov	r7, fp
 800a51c:	d16e      	bne.n	800a5fc <_strtod_l+0x974>
 800a51e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a520:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a524:	b342      	cbz	r2, 800a578 <_strtod_l+0x8f0>
 800a526:	4a32      	ldr	r2, [pc, #200]	; (800a5f0 <_strtod_l+0x968>)
 800a528:	4293      	cmp	r3, r2
 800a52a:	d128      	bne.n	800a57e <_strtod_l+0x8f6>
 800a52c:	9b04      	ldr	r3, [sp, #16]
 800a52e:	4651      	mov	r1, sl
 800a530:	b1eb      	cbz	r3, 800a56e <_strtod_l+0x8e6>
 800a532:	4b2d      	ldr	r3, [pc, #180]	; (800a5e8 <_strtod_l+0x960>)
 800a534:	403b      	ands	r3, r7
 800a536:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a53a:	f04f 32ff 	mov.w	r2, #4294967295
 800a53e:	d819      	bhi.n	800a574 <_strtod_l+0x8ec>
 800a540:	0d1b      	lsrs	r3, r3, #20
 800a542:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a546:	fa02 f303 	lsl.w	r3, r2, r3
 800a54a:	4299      	cmp	r1, r3
 800a54c:	d117      	bne.n	800a57e <_strtod_l+0x8f6>
 800a54e:	4b29      	ldr	r3, [pc, #164]	; (800a5f4 <_strtod_l+0x96c>)
 800a550:	429f      	cmp	r7, r3
 800a552:	d102      	bne.n	800a55a <_strtod_l+0x8d2>
 800a554:	3101      	adds	r1, #1
 800a556:	f43f addf 	beq.w	800a118 <_strtod_l+0x490>
 800a55a:	4b23      	ldr	r3, [pc, #140]	; (800a5e8 <_strtod_l+0x960>)
 800a55c:	403b      	ands	r3, r7
 800a55e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800a562:	f04f 0a00 	mov.w	sl, #0
 800a566:	9b04      	ldr	r3, [sp, #16]
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d1a4      	bne.n	800a4b6 <_strtod_l+0x82e>
 800a56c:	e5de      	b.n	800a12c <_strtod_l+0x4a4>
 800a56e:	f04f 33ff 	mov.w	r3, #4294967295
 800a572:	e7ea      	b.n	800a54a <_strtod_l+0x8c2>
 800a574:	4613      	mov	r3, r2
 800a576:	e7e8      	b.n	800a54a <_strtod_l+0x8c2>
 800a578:	ea53 030a 	orrs.w	r3, r3, sl
 800a57c:	d08c      	beq.n	800a498 <_strtod_l+0x810>
 800a57e:	9b08      	ldr	r3, [sp, #32]
 800a580:	b1db      	cbz	r3, 800a5ba <_strtod_l+0x932>
 800a582:	423b      	tst	r3, r7
 800a584:	d0ef      	beq.n	800a566 <_strtod_l+0x8de>
 800a586:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a588:	9a04      	ldr	r2, [sp, #16]
 800a58a:	4650      	mov	r0, sl
 800a58c:	4659      	mov	r1, fp
 800a58e:	b1c3      	cbz	r3, 800a5c2 <_strtod_l+0x93a>
 800a590:	f7ff fb5e 	bl	8009c50 <sulp>
 800a594:	4602      	mov	r2, r0
 800a596:	460b      	mov	r3, r1
 800a598:	ec51 0b18 	vmov	r0, r1, d8
 800a59c:	f7f5 fea6 	bl	80002ec <__adddf3>
 800a5a0:	4682      	mov	sl, r0
 800a5a2:	468b      	mov	fp, r1
 800a5a4:	e7df      	b.n	800a566 <_strtod_l+0x8de>
 800a5a6:	4013      	ands	r3, r2
 800a5a8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a5ac:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a5b0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a5b4:	f04f 3aff 	mov.w	sl, #4294967295
 800a5b8:	e7d5      	b.n	800a566 <_strtod_l+0x8de>
 800a5ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a5bc:	ea13 0f0a 	tst.w	r3, sl
 800a5c0:	e7e0      	b.n	800a584 <_strtod_l+0x8fc>
 800a5c2:	f7ff fb45 	bl	8009c50 <sulp>
 800a5c6:	4602      	mov	r2, r0
 800a5c8:	460b      	mov	r3, r1
 800a5ca:	ec51 0b18 	vmov	r0, r1, d8
 800a5ce:	f7f5 fe8b 	bl	80002e8 <__aeabi_dsub>
 800a5d2:	2200      	movs	r2, #0
 800a5d4:	2300      	movs	r3, #0
 800a5d6:	4682      	mov	sl, r0
 800a5d8:	468b      	mov	fp, r1
 800a5da:	f7f6 faa5 	bl	8000b28 <__aeabi_dcmpeq>
 800a5de:	2800      	cmp	r0, #0
 800a5e0:	d0c1      	beq.n	800a566 <_strtod_l+0x8de>
 800a5e2:	e611      	b.n	800a208 <_strtod_l+0x580>
 800a5e4:	fffffc02 	.word	0xfffffc02
 800a5e8:	7ff00000 	.word	0x7ff00000
 800a5ec:	39500000 	.word	0x39500000
 800a5f0:	000fffff 	.word	0x000fffff
 800a5f4:	7fefffff 	.word	0x7fefffff
 800a5f8:	0800cfa0 	.word	0x0800cfa0
 800a5fc:	4631      	mov	r1, r6
 800a5fe:	4628      	mov	r0, r5
 800a600:	f001 fa40 	bl	800ba84 <__ratio>
 800a604:	ec59 8b10 	vmov	r8, r9, d0
 800a608:	ee10 0a10 	vmov	r0, s0
 800a60c:	2200      	movs	r2, #0
 800a60e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a612:	4649      	mov	r1, r9
 800a614:	f7f6 fa9c 	bl	8000b50 <__aeabi_dcmple>
 800a618:	2800      	cmp	r0, #0
 800a61a:	d07a      	beq.n	800a712 <_strtod_l+0xa8a>
 800a61c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d04a      	beq.n	800a6b8 <_strtod_l+0xa30>
 800a622:	4b95      	ldr	r3, [pc, #596]	; (800a878 <_strtod_l+0xbf0>)
 800a624:	2200      	movs	r2, #0
 800a626:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a62a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800a878 <_strtod_l+0xbf0>
 800a62e:	f04f 0800 	mov.w	r8, #0
 800a632:	4b92      	ldr	r3, [pc, #584]	; (800a87c <_strtod_l+0xbf4>)
 800a634:	403b      	ands	r3, r7
 800a636:	930d      	str	r3, [sp, #52]	; 0x34
 800a638:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a63a:	4b91      	ldr	r3, [pc, #580]	; (800a880 <_strtod_l+0xbf8>)
 800a63c:	429a      	cmp	r2, r3
 800a63e:	f040 80b0 	bne.w	800a7a2 <_strtod_l+0xb1a>
 800a642:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a646:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800a64a:	ec4b ab10 	vmov	d0, sl, fp
 800a64e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a652:	f001 f93f 	bl	800b8d4 <__ulp>
 800a656:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a65a:	ec53 2b10 	vmov	r2, r3, d0
 800a65e:	f7f5 fffb 	bl	8000658 <__aeabi_dmul>
 800a662:	4652      	mov	r2, sl
 800a664:	465b      	mov	r3, fp
 800a666:	f7f5 fe41 	bl	80002ec <__adddf3>
 800a66a:	460b      	mov	r3, r1
 800a66c:	4983      	ldr	r1, [pc, #524]	; (800a87c <_strtod_l+0xbf4>)
 800a66e:	4a85      	ldr	r2, [pc, #532]	; (800a884 <_strtod_l+0xbfc>)
 800a670:	4019      	ands	r1, r3
 800a672:	4291      	cmp	r1, r2
 800a674:	4682      	mov	sl, r0
 800a676:	d960      	bls.n	800a73a <_strtod_l+0xab2>
 800a678:	ee18 3a90 	vmov	r3, s17
 800a67c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800a680:	4293      	cmp	r3, r2
 800a682:	d104      	bne.n	800a68e <_strtod_l+0xa06>
 800a684:	ee18 3a10 	vmov	r3, s16
 800a688:	3301      	adds	r3, #1
 800a68a:	f43f ad45 	beq.w	800a118 <_strtod_l+0x490>
 800a68e:	f8df b200 	ldr.w	fp, [pc, #512]	; 800a890 <_strtod_l+0xc08>
 800a692:	f04f 3aff 	mov.w	sl, #4294967295
 800a696:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a698:	4620      	mov	r0, r4
 800a69a:	f000 fde9 	bl	800b270 <_Bfree>
 800a69e:	9905      	ldr	r1, [sp, #20]
 800a6a0:	4620      	mov	r0, r4
 800a6a2:	f000 fde5 	bl	800b270 <_Bfree>
 800a6a6:	4631      	mov	r1, r6
 800a6a8:	4620      	mov	r0, r4
 800a6aa:	f000 fde1 	bl	800b270 <_Bfree>
 800a6ae:	4629      	mov	r1, r5
 800a6b0:	4620      	mov	r0, r4
 800a6b2:	f000 fddd 	bl	800b270 <_Bfree>
 800a6b6:	e61a      	b.n	800a2ee <_strtod_l+0x666>
 800a6b8:	f1ba 0f00 	cmp.w	sl, #0
 800a6bc:	d11b      	bne.n	800a6f6 <_strtod_l+0xa6e>
 800a6be:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a6c2:	b9f3      	cbnz	r3, 800a702 <_strtod_l+0xa7a>
 800a6c4:	4b6c      	ldr	r3, [pc, #432]	; (800a878 <_strtod_l+0xbf0>)
 800a6c6:	2200      	movs	r2, #0
 800a6c8:	4640      	mov	r0, r8
 800a6ca:	4649      	mov	r1, r9
 800a6cc:	f7f6 fa36 	bl	8000b3c <__aeabi_dcmplt>
 800a6d0:	b9d0      	cbnz	r0, 800a708 <_strtod_l+0xa80>
 800a6d2:	4640      	mov	r0, r8
 800a6d4:	4649      	mov	r1, r9
 800a6d6:	4b6c      	ldr	r3, [pc, #432]	; (800a888 <_strtod_l+0xc00>)
 800a6d8:	2200      	movs	r2, #0
 800a6da:	f7f5 ffbd 	bl	8000658 <__aeabi_dmul>
 800a6de:	4680      	mov	r8, r0
 800a6e0:	4689      	mov	r9, r1
 800a6e2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a6e6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800a6ea:	9315      	str	r3, [sp, #84]	; 0x54
 800a6ec:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800a6f0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a6f4:	e79d      	b.n	800a632 <_strtod_l+0x9aa>
 800a6f6:	f1ba 0f01 	cmp.w	sl, #1
 800a6fa:	d102      	bne.n	800a702 <_strtod_l+0xa7a>
 800a6fc:	2f00      	cmp	r7, #0
 800a6fe:	f43f ad83 	beq.w	800a208 <_strtod_l+0x580>
 800a702:	4b62      	ldr	r3, [pc, #392]	; (800a88c <_strtod_l+0xc04>)
 800a704:	2200      	movs	r2, #0
 800a706:	e78e      	b.n	800a626 <_strtod_l+0x99e>
 800a708:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800a888 <_strtod_l+0xc00>
 800a70c:	f04f 0800 	mov.w	r8, #0
 800a710:	e7e7      	b.n	800a6e2 <_strtod_l+0xa5a>
 800a712:	4b5d      	ldr	r3, [pc, #372]	; (800a888 <_strtod_l+0xc00>)
 800a714:	4640      	mov	r0, r8
 800a716:	4649      	mov	r1, r9
 800a718:	2200      	movs	r2, #0
 800a71a:	f7f5 ff9d 	bl	8000658 <__aeabi_dmul>
 800a71e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a720:	4680      	mov	r8, r0
 800a722:	4689      	mov	r9, r1
 800a724:	b933      	cbnz	r3, 800a734 <_strtod_l+0xaac>
 800a726:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a72a:	900e      	str	r0, [sp, #56]	; 0x38
 800a72c:	930f      	str	r3, [sp, #60]	; 0x3c
 800a72e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800a732:	e7dd      	b.n	800a6f0 <_strtod_l+0xa68>
 800a734:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800a738:	e7f9      	b.n	800a72e <_strtod_l+0xaa6>
 800a73a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800a73e:	9b04      	ldr	r3, [sp, #16]
 800a740:	2b00      	cmp	r3, #0
 800a742:	d1a8      	bne.n	800a696 <_strtod_l+0xa0e>
 800a744:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a748:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a74a:	0d1b      	lsrs	r3, r3, #20
 800a74c:	051b      	lsls	r3, r3, #20
 800a74e:	429a      	cmp	r2, r3
 800a750:	d1a1      	bne.n	800a696 <_strtod_l+0xa0e>
 800a752:	4640      	mov	r0, r8
 800a754:	4649      	mov	r1, r9
 800a756:	f7f6 fab7 	bl	8000cc8 <__aeabi_d2lz>
 800a75a:	f7f5 ff4f 	bl	80005fc <__aeabi_l2d>
 800a75e:	4602      	mov	r2, r0
 800a760:	460b      	mov	r3, r1
 800a762:	4640      	mov	r0, r8
 800a764:	4649      	mov	r1, r9
 800a766:	f7f5 fdbf 	bl	80002e8 <__aeabi_dsub>
 800a76a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a76c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a770:	ea43 030a 	orr.w	r3, r3, sl
 800a774:	4313      	orrs	r3, r2
 800a776:	4680      	mov	r8, r0
 800a778:	4689      	mov	r9, r1
 800a77a:	d055      	beq.n	800a828 <_strtod_l+0xba0>
 800a77c:	a336      	add	r3, pc, #216	; (adr r3, 800a858 <_strtod_l+0xbd0>)
 800a77e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a782:	f7f6 f9db 	bl	8000b3c <__aeabi_dcmplt>
 800a786:	2800      	cmp	r0, #0
 800a788:	f47f acd0 	bne.w	800a12c <_strtod_l+0x4a4>
 800a78c:	a334      	add	r3, pc, #208	; (adr r3, 800a860 <_strtod_l+0xbd8>)
 800a78e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a792:	4640      	mov	r0, r8
 800a794:	4649      	mov	r1, r9
 800a796:	f7f6 f9ef 	bl	8000b78 <__aeabi_dcmpgt>
 800a79a:	2800      	cmp	r0, #0
 800a79c:	f43f af7b 	beq.w	800a696 <_strtod_l+0xa0e>
 800a7a0:	e4c4      	b.n	800a12c <_strtod_l+0x4a4>
 800a7a2:	9b04      	ldr	r3, [sp, #16]
 800a7a4:	b333      	cbz	r3, 800a7f4 <_strtod_l+0xb6c>
 800a7a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a7a8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a7ac:	d822      	bhi.n	800a7f4 <_strtod_l+0xb6c>
 800a7ae:	a32e      	add	r3, pc, #184	; (adr r3, 800a868 <_strtod_l+0xbe0>)
 800a7b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7b4:	4640      	mov	r0, r8
 800a7b6:	4649      	mov	r1, r9
 800a7b8:	f7f6 f9ca 	bl	8000b50 <__aeabi_dcmple>
 800a7bc:	b1a0      	cbz	r0, 800a7e8 <_strtod_l+0xb60>
 800a7be:	4649      	mov	r1, r9
 800a7c0:	4640      	mov	r0, r8
 800a7c2:	f7f6 f9f9 	bl	8000bb8 <__aeabi_d2uiz>
 800a7c6:	2801      	cmp	r0, #1
 800a7c8:	bf38      	it	cc
 800a7ca:	2001      	movcc	r0, #1
 800a7cc:	f7f5 feca 	bl	8000564 <__aeabi_ui2d>
 800a7d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a7d2:	4680      	mov	r8, r0
 800a7d4:	4689      	mov	r9, r1
 800a7d6:	bb23      	cbnz	r3, 800a822 <_strtod_l+0xb9a>
 800a7d8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a7dc:	9010      	str	r0, [sp, #64]	; 0x40
 800a7de:	9311      	str	r3, [sp, #68]	; 0x44
 800a7e0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a7e4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a7e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7ea:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a7ec:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800a7f0:	1a9b      	subs	r3, r3, r2
 800a7f2:	9309      	str	r3, [sp, #36]	; 0x24
 800a7f4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a7f8:	eeb0 0a48 	vmov.f32	s0, s16
 800a7fc:	eef0 0a68 	vmov.f32	s1, s17
 800a800:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a804:	f001 f866 	bl	800b8d4 <__ulp>
 800a808:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a80c:	ec53 2b10 	vmov	r2, r3, d0
 800a810:	f7f5 ff22 	bl	8000658 <__aeabi_dmul>
 800a814:	ec53 2b18 	vmov	r2, r3, d8
 800a818:	f7f5 fd68 	bl	80002ec <__adddf3>
 800a81c:	4682      	mov	sl, r0
 800a81e:	468b      	mov	fp, r1
 800a820:	e78d      	b.n	800a73e <_strtod_l+0xab6>
 800a822:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800a826:	e7db      	b.n	800a7e0 <_strtod_l+0xb58>
 800a828:	a311      	add	r3, pc, #68	; (adr r3, 800a870 <_strtod_l+0xbe8>)
 800a82a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a82e:	f7f6 f985 	bl	8000b3c <__aeabi_dcmplt>
 800a832:	e7b2      	b.n	800a79a <_strtod_l+0xb12>
 800a834:	2300      	movs	r3, #0
 800a836:	930a      	str	r3, [sp, #40]	; 0x28
 800a838:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a83a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a83c:	6013      	str	r3, [r2, #0]
 800a83e:	f7ff ba6b 	b.w	8009d18 <_strtod_l+0x90>
 800a842:	2a65      	cmp	r2, #101	; 0x65
 800a844:	f43f ab5f 	beq.w	8009f06 <_strtod_l+0x27e>
 800a848:	2a45      	cmp	r2, #69	; 0x45
 800a84a:	f43f ab5c 	beq.w	8009f06 <_strtod_l+0x27e>
 800a84e:	2301      	movs	r3, #1
 800a850:	f7ff bb94 	b.w	8009f7c <_strtod_l+0x2f4>
 800a854:	f3af 8000 	nop.w
 800a858:	94a03595 	.word	0x94a03595
 800a85c:	3fdfffff 	.word	0x3fdfffff
 800a860:	35afe535 	.word	0x35afe535
 800a864:	3fe00000 	.word	0x3fe00000
 800a868:	ffc00000 	.word	0xffc00000
 800a86c:	41dfffff 	.word	0x41dfffff
 800a870:	94a03595 	.word	0x94a03595
 800a874:	3fcfffff 	.word	0x3fcfffff
 800a878:	3ff00000 	.word	0x3ff00000
 800a87c:	7ff00000 	.word	0x7ff00000
 800a880:	7fe00000 	.word	0x7fe00000
 800a884:	7c9fffff 	.word	0x7c9fffff
 800a888:	3fe00000 	.word	0x3fe00000
 800a88c:	bff00000 	.word	0xbff00000
 800a890:	7fefffff 	.word	0x7fefffff

0800a894 <strtof>:
 800a894:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a898:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 800a948 <strtof+0xb4>
 800a89c:	4b26      	ldr	r3, [pc, #152]	; (800a938 <strtof+0xa4>)
 800a89e:	460a      	mov	r2, r1
 800a8a0:	ed2d 8b02 	vpush	{d8}
 800a8a4:	4601      	mov	r1, r0
 800a8a6:	f8d8 0000 	ldr.w	r0, [r8]
 800a8aa:	f7ff f9ed 	bl	8009c88 <_strtod_l>
 800a8ae:	ec55 4b10 	vmov	r4, r5, d0
 800a8b2:	ee10 2a10 	vmov	r2, s0
 800a8b6:	ee10 0a10 	vmov	r0, s0
 800a8ba:	462b      	mov	r3, r5
 800a8bc:	4629      	mov	r1, r5
 800a8be:	f7f6 f965 	bl	8000b8c <__aeabi_dcmpun>
 800a8c2:	b190      	cbz	r0, 800a8ea <strtof+0x56>
 800a8c4:	2d00      	cmp	r5, #0
 800a8c6:	481d      	ldr	r0, [pc, #116]	; (800a93c <strtof+0xa8>)
 800a8c8:	da09      	bge.n	800a8de <strtof+0x4a>
 800a8ca:	f001 fc61 	bl	800c190 <nanf>
 800a8ce:	eeb1 8a40 	vneg.f32	s16, s0
 800a8d2:	eeb0 0a48 	vmov.f32	s0, s16
 800a8d6:	ecbd 8b02 	vpop	{d8}
 800a8da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8de:	ecbd 8b02 	vpop	{d8}
 800a8e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a8e6:	f001 bc53 	b.w	800c190 <nanf>
 800a8ea:	4620      	mov	r0, r4
 800a8ec:	4629      	mov	r1, r5
 800a8ee:	f7f6 f983 	bl	8000bf8 <__aeabi_d2f>
 800a8f2:	ee08 0a10 	vmov	s16, r0
 800a8f6:	eddf 7a12 	vldr	s15, [pc, #72]	; 800a940 <strtof+0xac>
 800a8fa:	eeb0 7ac8 	vabs.f32	s14, s16
 800a8fe:	eeb4 7a67 	vcmp.f32	s14, s15
 800a902:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a906:	dde4      	ble.n	800a8d2 <strtof+0x3e>
 800a908:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 800a90c:	4b0d      	ldr	r3, [pc, #52]	; (800a944 <strtof+0xb0>)
 800a90e:	f04f 32ff 	mov.w	r2, #4294967295
 800a912:	4620      	mov	r0, r4
 800a914:	4639      	mov	r1, r7
 800a916:	f7f6 f939 	bl	8000b8c <__aeabi_dcmpun>
 800a91a:	b940      	cbnz	r0, 800a92e <strtof+0x9a>
 800a91c:	4b09      	ldr	r3, [pc, #36]	; (800a944 <strtof+0xb0>)
 800a91e:	f04f 32ff 	mov.w	r2, #4294967295
 800a922:	4620      	mov	r0, r4
 800a924:	4639      	mov	r1, r7
 800a926:	f7f6 f913 	bl	8000b50 <__aeabi_dcmple>
 800a92a:	2800      	cmp	r0, #0
 800a92c:	d0d1      	beq.n	800a8d2 <strtof+0x3e>
 800a92e:	f8d8 3000 	ldr.w	r3, [r8]
 800a932:	2222      	movs	r2, #34	; 0x22
 800a934:	601a      	str	r2, [r3, #0]
 800a936:	e7cc      	b.n	800a8d2 <strtof+0x3e>
 800a938:	200001d0 	.word	0x200001d0
 800a93c:	0800d332 	.word	0x0800d332
 800a940:	7f7fffff 	.word	0x7f7fffff
 800a944:	7fefffff 	.word	0x7fefffff
 800a948:	20000168 	.word	0x20000168

0800a94c <_strtoul_l.constprop.0>:
 800a94c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a950:	4f36      	ldr	r7, [pc, #216]	; (800aa2c <_strtoul_l.constprop.0+0xe0>)
 800a952:	4686      	mov	lr, r0
 800a954:	460d      	mov	r5, r1
 800a956:	4628      	mov	r0, r5
 800a958:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a95c:	5de6      	ldrb	r6, [r4, r7]
 800a95e:	f016 0608 	ands.w	r6, r6, #8
 800a962:	d1f8      	bne.n	800a956 <_strtoul_l.constprop.0+0xa>
 800a964:	2c2d      	cmp	r4, #45	; 0x2d
 800a966:	d12f      	bne.n	800a9c8 <_strtoul_l.constprop.0+0x7c>
 800a968:	782c      	ldrb	r4, [r5, #0]
 800a96a:	2601      	movs	r6, #1
 800a96c:	1c85      	adds	r5, r0, #2
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d057      	beq.n	800aa22 <_strtoul_l.constprop.0+0xd6>
 800a972:	2b10      	cmp	r3, #16
 800a974:	d109      	bne.n	800a98a <_strtoul_l.constprop.0+0x3e>
 800a976:	2c30      	cmp	r4, #48	; 0x30
 800a978:	d107      	bne.n	800a98a <_strtoul_l.constprop.0+0x3e>
 800a97a:	7828      	ldrb	r0, [r5, #0]
 800a97c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800a980:	2858      	cmp	r0, #88	; 0x58
 800a982:	d149      	bne.n	800aa18 <_strtoul_l.constprop.0+0xcc>
 800a984:	786c      	ldrb	r4, [r5, #1]
 800a986:	2310      	movs	r3, #16
 800a988:	3502      	adds	r5, #2
 800a98a:	f04f 38ff 	mov.w	r8, #4294967295
 800a98e:	2700      	movs	r7, #0
 800a990:	fbb8 f8f3 	udiv	r8, r8, r3
 800a994:	fb03 f908 	mul.w	r9, r3, r8
 800a998:	ea6f 0909 	mvn.w	r9, r9
 800a99c:	4638      	mov	r0, r7
 800a99e:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800a9a2:	f1bc 0f09 	cmp.w	ip, #9
 800a9a6:	d814      	bhi.n	800a9d2 <_strtoul_l.constprop.0+0x86>
 800a9a8:	4664      	mov	r4, ip
 800a9aa:	42a3      	cmp	r3, r4
 800a9ac:	dd22      	ble.n	800a9f4 <_strtoul_l.constprop.0+0xa8>
 800a9ae:	2f00      	cmp	r7, #0
 800a9b0:	db1d      	blt.n	800a9ee <_strtoul_l.constprop.0+0xa2>
 800a9b2:	4580      	cmp	r8, r0
 800a9b4:	d31b      	bcc.n	800a9ee <_strtoul_l.constprop.0+0xa2>
 800a9b6:	d101      	bne.n	800a9bc <_strtoul_l.constprop.0+0x70>
 800a9b8:	45a1      	cmp	r9, r4
 800a9ba:	db18      	blt.n	800a9ee <_strtoul_l.constprop.0+0xa2>
 800a9bc:	fb00 4003 	mla	r0, r0, r3, r4
 800a9c0:	2701      	movs	r7, #1
 800a9c2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a9c6:	e7ea      	b.n	800a99e <_strtoul_l.constprop.0+0x52>
 800a9c8:	2c2b      	cmp	r4, #43	; 0x2b
 800a9ca:	bf04      	itt	eq
 800a9cc:	782c      	ldrbeq	r4, [r5, #0]
 800a9ce:	1c85      	addeq	r5, r0, #2
 800a9d0:	e7cd      	b.n	800a96e <_strtoul_l.constprop.0+0x22>
 800a9d2:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800a9d6:	f1bc 0f19 	cmp.w	ip, #25
 800a9da:	d801      	bhi.n	800a9e0 <_strtoul_l.constprop.0+0x94>
 800a9dc:	3c37      	subs	r4, #55	; 0x37
 800a9de:	e7e4      	b.n	800a9aa <_strtoul_l.constprop.0+0x5e>
 800a9e0:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800a9e4:	f1bc 0f19 	cmp.w	ip, #25
 800a9e8:	d804      	bhi.n	800a9f4 <_strtoul_l.constprop.0+0xa8>
 800a9ea:	3c57      	subs	r4, #87	; 0x57
 800a9ec:	e7dd      	b.n	800a9aa <_strtoul_l.constprop.0+0x5e>
 800a9ee:	f04f 37ff 	mov.w	r7, #4294967295
 800a9f2:	e7e6      	b.n	800a9c2 <_strtoul_l.constprop.0+0x76>
 800a9f4:	2f00      	cmp	r7, #0
 800a9f6:	da07      	bge.n	800aa08 <_strtoul_l.constprop.0+0xbc>
 800a9f8:	2322      	movs	r3, #34	; 0x22
 800a9fa:	f8ce 3000 	str.w	r3, [lr]
 800a9fe:	f04f 30ff 	mov.w	r0, #4294967295
 800aa02:	b932      	cbnz	r2, 800aa12 <_strtoul_l.constprop.0+0xc6>
 800aa04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aa08:	b106      	cbz	r6, 800aa0c <_strtoul_l.constprop.0+0xc0>
 800aa0a:	4240      	negs	r0, r0
 800aa0c:	2a00      	cmp	r2, #0
 800aa0e:	d0f9      	beq.n	800aa04 <_strtoul_l.constprop.0+0xb8>
 800aa10:	b107      	cbz	r7, 800aa14 <_strtoul_l.constprop.0+0xc8>
 800aa12:	1e69      	subs	r1, r5, #1
 800aa14:	6011      	str	r1, [r2, #0]
 800aa16:	e7f5      	b.n	800aa04 <_strtoul_l.constprop.0+0xb8>
 800aa18:	2430      	movs	r4, #48	; 0x30
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d1b5      	bne.n	800a98a <_strtoul_l.constprop.0+0x3e>
 800aa1e:	2308      	movs	r3, #8
 800aa20:	e7b3      	b.n	800a98a <_strtoul_l.constprop.0+0x3e>
 800aa22:	2c30      	cmp	r4, #48	; 0x30
 800aa24:	d0a9      	beq.n	800a97a <_strtoul_l.constprop.0+0x2e>
 800aa26:	230a      	movs	r3, #10
 800aa28:	e7af      	b.n	800a98a <_strtoul_l.constprop.0+0x3e>
 800aa2a:	bf00      	nop
 800aa2c:	0800cfc9 	.word	0x0800cfc9

0800aa30 <strtoul>:
 800aa30:	4613      	mov	r3, r2
 800aa32:	460a      	mov	r2, r1
 800aa34:	4601      	mov	r1, r0
 800aa36:	4802      	ldr	r0, [pc, #8]	; (800aa40 <strtoul+0x10>)
 800aa38:	6800      	ldr	r0, [r0, #0]
 800aa3a:	f7ff bf87 	b.w	800a94c <_strtoul_l.constprop.0>
 800aa3e:	bf00      	nop
 800aa40:	20000168 	.word	0x20000168

0800aa44 <_vsniprintf_r>:
 800aa44:	b530      	push	{r4, r5, lr}
 800aa46:	4614      	mov	r4, r2
 800aa48:	2c00      	cmp	r4, #0
 800aa4a:	b09b      	sub	sp, #108	; 0x6c
 800aa4c:	4605      	mov	r5, r0
 800aa4e:	461a      	mov	r2, r3
 800aa50:	da05      	bge.n	800aa5e <_vsniprintf_r+0x1a>
 800aa52:	238b      	movs	r3, #139	; 0x8b
 800aa54:	6003      	str	r3, [r0, #0]
 800aa56:	f04f 30ff 	mov.w	r0, #4294967295
 800aa5a:	b01b      	add	sp, #108	; 0x6c
 800aa5c:	bd30      	pop	{r4, r5, pc}
 800aa5e:	f44f 7302 	mov.w	r3, #520	; 0x208
 800aa62:	f8ad 300c 	strh.w	r3, [sp, #12]
 800aa66:	bf14      	ite	ne
 800aa68:	f104 33ff 	addne.w	r3, r4, #4294967295
 800aa6c:	4623      	moveq	r3, r4
 800aa6e:	9302      	str	r3, [sp, #8]
 800aa70:	9305      	str	r3, [sp, #20]
 800aa72:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800aa76:	9100      	str	r1, [sp, #0]
 800aa78:	9104      	str	r1, [sp, #16]
 800aa7a:	f8ad 300e 	strh.w	r3, [sp, #14]
 800aa7e:	4669      	mov	r1, sp
 800aa80:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800aa82:	f001 f8e7 	bl	800bc54 <_svfiprintf_r>
 800aa86:	1c43      	adds	r3, r0, #1
 800aa88:	bfbc      	itt	lt
 800aa8a:	238b      	movlt	r3, #139	; 0x8b
 800aa8c:	602b      	strlt	r3, [r5, #0]
 800aa8e:	2c00      	cmp	r4, #0
 800aa90:	d0e3      	beq.n	800aa5a <_vsniprintf_r+0x16>
 800aa92:	9b00      	ldr	r3, [sp, #0]
 800aa94:	2200      	movs	r2, #0
 800aa96:	701a      	strb	r2, [r3, #0]
 800aa98:	e7df      	b.n	800aa5a <_vsniprintf_r+0x16>
	...

0800aa9c <vsniprintf>:
 800aa9c:	b507      	push	{r0, r1, r2, lr}
 800aa9e:	9300      	str	r3, [sp, #0]
 800aaa0:	4613      	mov	r3, r2
 800aaa2:	460a      	mov	r2, r1
 800aaa4:	4601      	mov	r1, r0
 800aaa6:	4803      	ldr	r0, [pc, #12]	; (800aab4 <vsniprintf+0x18>)
 800aaa8:	6800      	ldr	r0, [r0, #0]
 800aaaa:	f7ff ffcb 	bl	800aa44 <_vsniprintf_r>
 800aaae:	b003      	add	sp, #12
 800aab0:	f85d fb04 	ldr.w	pc, [sp], #4
 800aab4:	20000168 	.word	0x20000168

0800aab8 <rshift>:
 800aab8:	6903      	ldr	r3, [r0, #16]
 800aaba:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800aabe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800aac2:	ea4f 1261 	mov.w	r2, r1, asr #5
 800aac6:	f100 0414 	add.w	r4, r0, #20
 800aaca:	dd45      	ble.n	800ab58 <rshift+0xa0>
 800aacc:	f011 011f 	ands.w	r1, r1, #31
 800aad0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800aad4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800aad8:	d10c      	bne.n	800aaf4 <rshift+0x3c>
 800aada:	f100 0710 	add.w	r7, r0, #16
 800aade:	4629      	mov	r1, r5
 800aae0:	42b1      	cmp	r1, r6
 800aae2:	d334      	bcc.n	800ab4e <rshift+0x96>
 800aae4:	1a9b      	subs	r3, r3, r2
 800aae6:	009b      	lsls	r3, r3, #2
 800aae8:	1eea      	subs	r2, r5, #3
 800aaea:	4296      	cmp	r6, r2
 800aaec:	bf38      	it	cc
 800aaee:	2300      	movcc	r3, #0
 800aaf0:	4423      	add	r3, r4
 800aaf2:	e015      	b.n	800ab20 <rshift+0x68>
 800aaf4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800aaf8:	f1c1 0820 	rsb	r8, r1, #32
 800aafc:	40cf      	lsrs	r7, r1
 800aafe:	f105 0e04 	add.w	lr, r5, #4
 800ab02:	46a1      	mov	r9, r4
 800ab04:	4576      	cmp	r6, lr
 800ab06:	46f4      	mov	ip, lr
 800ab08:	d815      	bhi.n	800ab36 <rshift+0x7e>
 800ab0a:	1a9a      	subs	r2, r3, r2
 800ab0c:	0092      	lsls	r2, r2, #2
 800ab0e:	3a04      	subs	r2, #4
 800ab10:	3501      	adds	r5, #1
 800ab12:	42ae      	cmp	r6, r5
 800ab14:	bf38      	it	cc
 800ab16:	2200      	movcc	r2, #0
 800ab18:	18a3      	adds	r3, r4, r2
 800ab1a:	50a7      	str	r7, [r4, r2]
 800ab1c:	b107      	cbz	r7, 800ab20 <rshift+0x68>
 800ab1e:	3304      	adds	r3, #4
 800ab20:	1b1a      	subs	r2, r3, r4
 800ab22:	42a3      	cmp	r3, r4
 800ab24:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ab28:	bf08      	it	eq
 800ab2a:	2300      	moveq	r3, #0
 800ab2c:	6102      	str	r2, [r0, #16]
 800ab2e:	bf08      	it	eq
 800ab30:	6143      	streq	r3, [r0, #20]
 800ab32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ab36:	f8dc c000 	ldr.w	ip, [ip]
 800ab3a:	fa0c fc08 	lsl.w	ip, ip, r8
 800ab3e:	ea4c 0707 	orr.w	r7, ip, r7
 800ab42:	f849 7b04 	str.w	r7, [r9], #4
 800ab46:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ab4a:	40cf      	lsrs	r7, r1
 800ab4c:	e7da      	b.n	800ab04 <rshift+0x4c>
 800ab4e:	f851 cb04 	ldr.w	ip, [r1], #4
 800ab52:	f847 cf04 	str.w	ip, [r7, #4]!
 800ab56:	e7c3      	b.n	800aae0 <rshift+0x28>
 800ab58:	4623      	mov	r3, r4
 800ab5a:	e7e1      	b.n	800ab20 <rshift+0x68>

0800ab5c <__hexdig_fun>:
 800ab5c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800ab60:	2b09      	cmp	r3, #9
 800ab62:	d802      	bhi.n	800ab6a <__hexdig_fun+0xe>
 800ab64:	3820      	subs	r0, #32
 800ab66:	b2c0      	uxtb	r0, r0
 800ab68:	4770      	bx	lr
 800ab6a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800ab6e:	2b05      	cmp	r3, #5
 800ab70:	d801      	bhi.n	800ab76 <__hexdig_fun+0x1a>
 800ab72:	3847      	subs	r0, #71	; 0x47
 800ab74:	e7f7      	b.n	800ab66 <__hexdig_fun+0xa>
 800ab76:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800ab7a:	2b05      	cmp	r3, #5
 800ab7c:	d801      	bhi.n	800ab82 <__hexdig_fun+0x26>
 800ab7e:	3827      	subs	r0, #39	; 0x27
 800ab80:	e7f1      	b.n	800ab66 <__hexdig_fun+0xa>
 800ab82:	2000      	movs	r0, #0
 800ab84:	4770      	bx	lr
	...

0800ab88 <__gethex>:
 800ab88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab8c:	ed2d 8b02 	vpush	{d8}
 800ab90:	b089      	sub	sp, #36	; 0x24
 800ab92:	ee08 0a10 	vmov	s16, r0
 800ab96:	9304      	str	r3, [sp, #16]
 800ab98:	4bb4      	ldr	r3, [pc, #720]	; (800ae6c <__gethex+0x2e4>)
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	9301      	str	r3, [sp, #4]
 800ab9e:	4618      	mov	r0, r3
 800aba0:	468b      	mov	fp, r1
 800aba2:	4690      	mov	r8, r2
 800aba4:	f7f5 fb3e 	bl	8000224 <strlen>
 800aba8:	9b01      	ldr	r3, [sp, #4]
 800abaa:	f8db 2000 	ldr.w	r2, [fp]
 800abae:	4403      	add	r3, r0
 800abb0:	4682      	mov	sl, r0
 800abb2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800abb6:	9305      	str	r3, [sp, #20]
 800abb8:	1c93      	adds	r3, r2, #2
 800abba:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800abbe:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800abc2:	32fe      	adds	r2, #254	; 0xfe
 800abc4:	18d1      	adds	r1, r2, r3
 800abc6:	461f      	mov	r7, r3
 800abc8:	f813 0b01 	ldrb.w	r0, [r3], #1
 800abcc:	9100      	str	r1, [sp, #0]
 800abce:	2830      	cmp	r0, #48	; 0x30
 800abd0:	d0f8      	beq.n	800abc4 <__gethex+0x3c>
 800abd2:	f7ff ffc3 	bl	800ab5c <__hexdig_fun>
 800abd6:	4604      	mov	r4, r0
 800abd8:	2800      	cmp	r0, #0
 800abda:	d13a      	bne.n	800ac52 <__gethex+0xca>
 800abdc:	9901      	ldr	r1, [sp, #4]
 800abde:	4652      	mov	r2, sl
 800abe0:	4638      	mov	r0, r7
 800abe2:	f001 fadb 	bl	800c19c <strncmp>
 800abe6:	4605      	mov	r5, r0
 800abe8:	2800      	cmp	r0, #0
 800abea:	d168      	bne.n	800acbe <__gethex+0x136>
 800abec:	f817 000a 	ldrb.w	r0, [r7, sl]
 800abf0:	eb07 060a 	add.w	r6, r7, sl
 800abf4:	f7ff ffb2 	bl	800ab5c <__hexdig_fun>
 800abf8:	2800      	cmp	r0, #0
 800abfa:	d062      	beq.n	800acc2 <__gethex+0x13a>
 800abfc:	4633      	mov	r3, r6
 800abfe:	7818      	ldrb	r0, [r3, #0]
 800ac00:	2830      	cmp	r0, #48	; 0x30
 800ac02:	461f      	mov	r7, r3
 800ac04:	f103 0301 	add.w	r3, r3, #1
 800ac08:	d0f9      	beq.n	800abfe <__gethex+0x76>
 800ac0a:	f7ff ffa7 	bl	800ab5c <__hexdig_fun>
 800ac0e:	2301      	movs	r3, #1
 800ac10:	fab0 f480 	clz	r4, r0
 800ac14:	0964      	lsrs	r4, r4, #5
 800ac16:	4635      	mov	r5, r6
 800ac18:	9300      	str	r3, [sp, #0]
 800ac1a:	463a      	mov	r2, r7
 800ac1c:	4616      	mov	r6, r2
 800ac1e:	3201      	adds	r2, #1
 800ac20:	7830      	ldrb	r0, [r6, #0]
 800ac22:	f7ff ff9b 	bl	800ab5c <__hexdig_fun>
 800ac26:	2800      	cmp	r0, #0
 800ac28:	d1f8      	bne.n	800ac1c <__gethex+0x94>
 800ac2a:	9901      	ldr	r1, [sp, #4]
 800ac2c:	4652      	mov	r2, sl
 800ac2e:	4630      	mov	r0, r6
 800ac30:	f001 fab4 	bl	800c19c <strncmp>
 800ac34:	b980      	cbnz	r0, 800ac58 <__gethex+0xd0>
 800ac36:	b94d      	cbnz	r5, 800ac4c <__gethex+0xc4>
 800ac38:	eb06 050a 	add.w	r5, r6, sl
 800ac3c:	462a      	mov	r2, r5
 800ac3e:	4616      	mov	r6, r2
 800ac40:	3201      	adds	r2, #1
 800ac42:	7830      	ldrb	r0, [r6, #0]
 800ac44:	f7ff ff8a 	bl	800ab5c <__hexdig_fun>
 800ac48:	2800      	cmp	r0, #0
 800ac4a:	d1f8      	bne.n	800ac3e <__gethex+0xb6>
 800ac4c:	1bad      	subs	r5, r5, r6
 800ac4e:	00ad      	lsls	r5, r5, #2
 800ac50:	e004      	b.n	800ac5c <__gethex+0xd4>
 800ac52:	2400      	movs	r4, #0
 800ac54:	4625      	mov	r5, r4
 800ac56:	e7e0      	b.n	800ac1a <__gethex+0x92>
 800ac58:	2d00      	cmp	r5, #0
 800ac5a:	d1f7      	bne.n	800ac4c <__gethex+0xc4>
 800ac5c:	7833      	ldrb	r3, [r6, #0]
 800ac5e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ac62:	2b50      	cmp	r3, #80	; 0x50
 800ac64:	d13b      	bne.n	800acde <__gethex+0x156>
 800ac66:	7873      	ldrb	r3, [r6, #1]
 800ac68:	2b2b      	cmp	r3, #43	; 0x2b
 800ac6a:	d02c      	beq.n	800acc6 <__gethex+0x13e>
 800ac6c:	2b2d      	cmp	r3, #45	; 0x2d
 800ac6e:	d02e      	beq.n	800acce <__gethex+0x146>
 800ac70:	1c71      	adds	r1, r6, #1
 800ac72:	f04f 0900 	mov.w	r9, #0
 800ac76:	7808      	ldrb	r0, [r1, #0]
 800ac78:	f7ff ff70 	bl	800ab5c <__hexdig_fun>
 800ac7c:	1e43      	subs	r3, r0, #1
 800ac7e:	b2db      	uxtb	r3, r3
 800ac80:	2b18      	cmp	r3, #24
 800ac82:	d82c      	bhi.n	800acde <__gethex+0x156>
 800ac84:	f1a0 0210 	sub.w	r2, r0, #16
 800ac88:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ac8c:	f7ff ff66 	bl	800ab5c <__hexdig_fun>
 800ac90:	1e43      	subs	r3, r0, #1
 800ac92:	b2db      	uxtb	r3, r3
 800ac94:	2b18      	cmp	r3, #24
 800ac96:	d91d      	bls.n	800acd4 <__gethex+0x14c>
 800ac98:	f1b9 0f00 	cmp.w	r9, #0
 800ac9c:	d000      	beq.n	800aca0 <__gethex+0x118>
 800ac9e:	4252      	negs	r2, r2
 800aca0:	4415      	add	r5, r2
 800aca2:	f8cb 1000 	str.w	r1, [fp]
 800aca6:	b1e4      	cbz	r4, 800ace2 <__gethex+0x15a>
 800aca8:	9b00      	ldr	r3, [sp, #0]
 800acaa:	2b00      	cmp	r3, #0
 800acac:	bf14      	ite	ne
 800acae:	2700      	movne	r7, #0
 800acb0:	2706      	moveq	r7, #6
 800acb2:	4638      	mov	r0, r7
 800acb4:	b009      	add	sp, #36	; 0x24
 800acb6:	ecbd 8b02 	vpop	{d8}
 800acba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acbe:	463e      	mov	r6, r7
 800acc0:	4625      	mov	r5, r4
 800acc2:	2401      	movs	r4, #1
 800acc4:	e7ca      	b.n	800ac5c <__gethex+0xd4>
 800acc6:	f04f 0900 	mov.w	r9, #0
 800acca:	1cb1      	adds	r1, r6, #2
 800accc:	e7d3      	b.n	800ac76 <__gethex+0xee>
 800acce:	f04f 0901 	mov.w	r9, #1
 800acd2:	e7fa      	b.n	800acca <__gethex+0x142>
 800acd4:	230a      	movs	r3, #10
 800acd6:	fb03 0202 	mla	r2, r3, r2, r0
 800acda:	3a10      	subs	r2, #16
 800acdc:	e7d4      	b.n	800ac88 <__gethex+0x100>
 800acde:	4631      	mov	r1, r6
 800ace0:	e7df      	b.n	800aca2 <__gethex+0x11a>
 800ace2:	1bf3      	subs	r3, r6, r7
 800ace4:	3b01      	subs	r3, #1
 800ace6:	4621      	mov	r1, r4
 800ace8:	2b07      	cmp	r3, #7
 800acea:	dc0b      	bgt.n	800ad04 <__gethex+0x17c>
 800acec:	ee18 0a10 	vmov	r0, s16
 800acf0:	f000 fa7e 	bl	800b1f0 <_Balloc>
 800acf4:	4604      	mov	r4, r0
 800acf6:	b940      	cbnz	r0, 800ad0a <__gethex+0x182>
 800acf8:	4b5d      	ldr	r3, [pc, #372]	; (800ae70 <__gethex+0x2e8>)
 800acfa:	4602      	mov	r2, r0
 800acfc:	21de      	movs	r1, #222	; 0xde
 800acfe:	485d      	ldr	r0, [pc, #372]	; (800ae74 <__gethex+0x2ec>)
 800ad00:	f001 fa6e 	bl	800c1e0 <__assert_func>
 800ad04:	3101      	adds	r1, #1
 800ad06:	105b      	asrs	r3, r3, #1
 800ad08:	e7ee      	b.n	800ace8 <__gethex+0x160>
 800ad0a:	f100 0914 	add.w	r9, r0, #20
 800ad0e:	f04f 0b00 	mov.w	fp, #0
 800ad12:	f1ca 0301 	rsb	r3, sl, #1
 800ad16:	f8cd 9008 	str.w	r9, [sp, #8]
 800ad1a:	f8cd b000 	str.w	fp, [sp]
 800ad1e:	9306      	str	r3, [sp, #24]
 800ad20:	42b7      	cmp	r7, r6
 800ad22:	d340      	bcc.n	800ada6 <__gethex+0x21e>
 800ad24:	9802      	ldr	r0, [sp, #8]
 800ad26:	9b00      	ldr	r3, [sp, #0]
 800ad28:	f840 3b04 	str.w	r3, [r0], #4
 800ad2c:	eba0 0009 	sub.w	r0, r0, r9
 800ad30:	1080      	asrs	r0, r0, #2
 800ad32:	0146      	lsls	r6, r0, #5
 800ad34:	6120      	str	r0, [r4, #16]
 800ad36:	4618      	mov	r0, r3
 800ad38:	f000 fb4c 	bl	800b3d4 <__hi0bits>
 800ad3c:	1a30      	subs	r0, r6, r0
 800ad3e:	f8d8 6000 	ldr.w	r6, [r8]
 800ad42:	42b0      	cmp	r0, r6
 800ad44:	dd63      	ble.n	800ae0e <__gethex+0x286>
 800ad46:	1b87      	subs	r7, r0, r6
 800ad48:	4639      	mov	r1, r7
 800ad4a:	4620      	mov	r0, r4
 800ad4c:	f000 fef0 	bl	800bb30 <__any_on>
 800ad50:	4682      	mov	sl, r0
 800ad52:	b1a8      	cbz	r0, 800ad80 <__gethex+0x1f8>
 800ad54:	1e7b      	subs	r3, r7, #1
 800ad56:	1159      	asrs	r1, r3, #5
 800ad58:	f003 021f 	and.w	r2, r3, #31
 800ad5c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800ad60:	f04f 0a01 	mov.w	sl, #1
 800ad64:	fa0a f202 	lsl.w	r2, sl, r2
 800ad68:	420a      	tst	r2, r1
 800ad6a:	d009      	beq.n	800ad80 <__gethex+0x1f8>
 800ad6c:	4553      	cmp	r3, sl
 800ad6e:	dd05      	ble.n	800ad7c <__gethex+0x1f4>
 800ad70:	1eb9      	subs	r1, r7, #2
 800ad72:	4620      	mov	r0, r4
 800ad74:	f000 fedc 	bl	800bb30 <__any_on>
 800ad78:	2800      	cmp	r0, #0
 800ad7a:	d145      	bne.n	800ae08 <__gethex+0x280>
 800ad7c:	f04f 0a02 	mov.w	sl, #2
 800ad80:	4639      	mov	r1, r7
 800ad82:	4620      	mov	r0, r4
 800ad84:	f7ff fe98 	bl	800aab8 <rshift>
 800ad88:	443d      	add	r5, r7
 800ad8a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ad8e:	42ab      	cmp	r3, r5
 800ad90:	da4c      	bge.n	800ae2c <__gethex+0x2a4>
 800ad92:	ee18 0a10 	vmov	r0, s16
 800ad96:	4621      	mov	r1, r4
 800ad98:	f000 fa6a 	bl	800b270 <_Bfree>
 800ad9c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ad9e:	2300      	movs	r3, #0
 800ada0:	6013      	str	r3, [r2, #0]
 800ada2:	27a3      	movs	r7, #163	; 0xa3
 800ada4:	e785      	b.n	800acb2 <__gethex+0x12a>
 800ada6:	1e73      	subs	r3, r6, #1
 800ada8:	9a05      	ldr	r2, [sp, #20]
 800adaa:	9303      	str	r3, [sp, #12]
 800adac:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800adb0:	4293      	cmp	r3, r2
 800adb2:	d019      	beq.n	800ade8 <__gethex+0x260>
 800adb4:	f1bb 0f20 	cmp.w	fp, #32
 800adb8:	d107      	bne.n	800adca <__gethex+0x242>
 800adba:	9b02      	ldr	r3, [sp, #8]
 800adbc:	9a00      	ldr	r2, [sp, #0]
 800adbe:	f843 2b04 	str.w	r2, [r3], #4
 800adc2:	9302      	str	r3, [sp, #8]
 800adc4:	2300      	movs	r3, #0
 800adc6:	9300      	str	r3, [sp, #0]
 800adc8:	469b      	mov	fp, r3
 800adca:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800adce:	f7ff fec5 	bl	800ab5c <__hexdig_fun>
 800add2:	9b00      	ldr	r3, [sp, #0]
 800add4:	f000 000f 	and.w	r0, r0, #15
 800add8:	fa00 f00b 	lsl.w	r0, r0, fp
 800addc:	4303      	orrs	r3, r0
 800adde:	9300      	str	r3, [sp, #0]
 800ade0:	f10b 0b04 	add.w	fp, fp, #4
 800ade4:	9b03      	ldr	r3, [sp, #12]
 800ade6:	e00d      	b.n	800ae04 <__gethex+0x27c>
 800ade8:	9b03      	ldr	r3, [sp, #12]
 800adea:	9a06      	ldr	r2, [sp, #24]
 800adec:	4413      	add	r3, r2
 800adee:	42bb      	cmp	r3, r7
 800adf0:	d3e0      	bcc.n	800adb4 <__gethex+0x22c>
 800adf2:	4618      	mov	r0, r3
 800adf4:	9901      	ldr	r1, [sp, #4]
 800adf6:	9307      	str	r3, [sp, #28]
 800adf8:	4652      	mov	r2, sl
 800adfa:	f001 f9cf 	bl	800c19c <strncmp>
 800adfe:	9b07      	ldr	r3, [sp, #28]
 800ae00:	2800      	cmp	r0, #0
 800ae02:	d1d7      	bne.n	800adb4 <__gethex+0x22c>
 800ae04:	461e      	mov	r6, r3
 800ae06:	e78b      	b.n	800ad20 <__gethex+0x198>
 800ae08:	f04f 0a03 	mov.w	sl, #3
 800ae0c:	e7b8      	b.n	800ad80 <__gethex+0x1f8>
 800ae0e:	da0a      	bge.n	800ae26 <__gethex+0x29e>
 800ae10:	1a37      	subs	r7, r6, r0
 800ae12:	4621      	mov	r1, r4
 800ae14:	ee18 0a10 	vmov	r0, s16
 800ae18:	463a      	mov	r2, r7
 800ae1a:	f000 fc45 	bl	800b6a8 <__lshift>
 800ae1e:	1bed      	subs	r5, r5, r7
 800ae20:	4604      	mov	r4, r0
 800ae22:	f100 0914 	add.w	r9, r0, #20
 800ae26:	f04f 0a00 	mov.w	sl, #0
 800ae2a:	e7ae      	b.n	800ad8a <__gethex+0x202>
 800ae2c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800ae30:	42a8      	cmp	r0, r5
 800ae32:	dd72      	ble.n	800af1a <__gethex+0x392>
 800ae34:	1b45      	subs	r5, r0, r5
 800ae36:	42ae      	cmp	r6, r5
 800ae38:	dc36      	bgt.n	800aea8 <__gethex+0x320>
 800ae3a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ae3e:	2b02      	cmp	r3, #2
 800ae40:	d02a      	beq.n	800ae98 <__gethex+0x310>
 800ae42:	2b03      	cmp	r3, #3
 800ae44:	d02c      	beq.n	800aea0 <__gethex+0x318>
 800ae46:	2b01      	cmp	r3, #1
 800ae48:	d11c      	bne.n	800ae84 <__gethex+0x2fc>
 800ae4a:	42ae      	cmp	r6, r5
 800ae4c:	d11a      	bne.n	800ae84 <__gethex+0x2fc>
 800ae4e:	2e01      	cmp	r6, #1
 800ae50:	d112      	bne.n	800ae78 <__gethex+0x2f0>
 800ae52:	9a04      	ldr	r2, [sp, #16]
 800ae54:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ae58:	6013      	str	r3, [r2, #0]
 800ae5a:	2301      	movs	r3, #1
 800ae5c:	6123      	str	r3, [r4, #16]
 800ae5e:	f8c9 3000 	str.w	r3, [r9]
 800ae62:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ae64:	2762      	movs	r7, #98	; 0x62
 800ae66:	601c      	str	r4, [r3, #0]
 800ae68:	e723      	b.n	800acb2 <__gethex+0x12a>
 800ae6a:	bf00      	nop
 800ae6c:	0800d140 	.word	0x0800d140
 800ae70:	0800d0c9 	.word	0x0800d0c9
 800ae74:	0800d0da 	.word	0x0800d0da
 800ae78:	1e71      	subs	r1, r6, #1
 800ae7a:	4620      	mov	r0, r4
 800ae7c:	f000 fe58 	bl	800bb30 <__any_on>
 800ae80:	2800      	cmp	r0, #0
 800ae82:	d1e6      	bne.n	800ae52 <__gethex+0x2ca>
 800ae84:	ee18 0a10 	vmov	r0, s16
 800ae88:	4621      	mov	r1, r4
 800ae8a:	f000 f9f1 	bl	800b270 <_Bfree>
 800ae8e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ae90:	2300      	movs	r3, #0
 800ae92:	6013      	str	r3, [r2, #0]
 800ae94:	2750      	movs	r7, #80	; 0x50
 800ae96:	e70c      	b.n	800acb2 <__gethex+0x12a>
 800ae98:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d1f2      	bne.n	800ae84 <__gethex+0x2fc>
 800ae9e:	e7d8      	b.n	800ae52 <__gethex+0x2ca>
 800aea0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d1d5      	bne.n	800ae52 <__gethex+0x2ca>
 800aea6:	e7ed      	b.n	800ae84 <__gethex+0x2fc>
 800aea8:	1e6f      	subs	r7, r5, #1
 800aeaa:	f1ba 0f00 	cmp.w	sl, #0
 800aeae:	d131      	bne.n	800af14 <__gethex+0x38c>
 800aeb0:	b127      	cbz	r7, 800aebc <__gethex+0x334>
 800aeb2:	4639      	mov	r1, r7
 800aeb4:	4620      	mov	r0, r4
 800aeb6:	f000 fe3b 	bl	800bb30 <__any_on>
 800aeba:	4682      	mov	sl, r0
 800aebc:	117b      	asrs	r3, r7, #5
 800aebe:	2101      	movs	r1, #1
 800aec0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800aec4:	f007 071f 	and.w	r7, r7, #31
 800aec8:	fa01 f707 	lsl.w	r7, r1, r7
 800aecc:	421f      	tst	r7, r3
 800aece:	4629      	mov	r1, r5
 800aed0:	4620      	mov	r0, r4
 800aed2:	bf18      	it	ne
 800aed4:	f04a 0a02 	orrne.w	sl, sl, #2
 800aed8:	1b76      	subs	r6, r6, r5
 800aeda:	f7ff fded 	bl	800aab8 <rshift>
 800aede:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800aee2:	2702      	movs	r7, #2
 800aee4:	f1ba 0f00 	cmp.w	sl, #0
 800aee8:	d048      	beq.n	800af7c <__gethex+0x3f4>
 800aeea:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800aeee:	2b02      	cmp	r3, #2
 800aef0:	d015      	beq.n	800af1e <__gethex+0x396>
 800aef2:	2b03      	cmp	r3, #3
 800aef4:	d017      	beq.n	800af26 <__gethex+0x39e>
 800aef6:	2b01      	cmp	r3, #1
 800aef8:	d109      	bne.n	800af0e <__gethex+0x386>
 800aefa:	f01a 0f02 	tst.w	sl, #2
 800aefe:	d006      	beq.n	800af0e <__gethex+0x386>
 800af00:	f8d9 0000 	ldr.w	r0, [r9]
 800af04:	ea4a 0a00 	orr.w	sl, sl, r0
 800af08:	f01a 0f01 	tst.w	sl, #1
 800af0c:	d10e      	bne.n	800af2c <__gethex+0x3a4>
 800af0e:	f047 0710 	orr.w	r7, r7, #16
 800af12:	e033      	b.n	800af7c <__gethex+0x3f4>
 800af14:	f04f 0a01 	mov.w	sl, #1
 800af18:	e7d0      	b.n	800aebc <__gethex+0x334>
 800af1a:	2701      	movs	r7, #1
 800af1c:	e7e2      	b.n	800aee4 <__gethex+0x35c>
 800af1e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800af20:	f1c3 0301 	rsb	r3, r3, #1
 800af24:	9315      	str	r3, [sp, #84]	; 0x54
 800af26:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d0f0      	beq.n	800af0e <__gethex+0x386>
 800af2c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800af30:	f104 0314 	add.w	r3, r4, #20
 800af34:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800af38:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800af3c:	f04f 0c00 	mov.w	ip, #0
 800af40:	4618      	mov	r0, r3
 800af42:	f853 2b04 	ldr.w	r2, [r3], #4
 800af46:	f1b2 3fff 	cmp.w	r2, #4294967295
 800af4a:	d01c      	beq.n	800af86 <__gethex+0x3fe>
 800af4c:	3201      	adds	r2, #1
 800af4e:	6002      	str	r2, [r0, #0]
 800af50:	2f02      	cmp	r7, #2
 800af52:	f104 0314 	add.w	r3, r4, #20
 800af56:	d13f      	bne.n	800afd8 <__gethex+0x450>
 800af58:	f8d8 2000 	ldr.w	r2, [r8]
 800af5c:	3a01      	subs	r2, #1
 800af5e:	42b2      	cmp	r2, r6
 800af60:	d10a      	bne.n	800af78 <__gethex+0x3f0>
 800af62:	1171      	asrs	r1, r6, #5
 800af64:	2201      	movs	r2, #1
 800af66:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800af6a:	f006 061f 	and.w	r6, r6, #31
 800af6e:	fa02 f606 	lsl.w	r6, r2, r6
 800af72:	421e      	tst	r6, r3
 800af74:	bf18      	it	ne
 800af76:	4617      	movne	r7, r2
 800af78:	f047 0720 	orr.w	r7, r7, #32
 800af7c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800af7e:	601c      	str	r4, [r3, #0]
 800af80:	9b04      	ldr	r3, [sp, #16]
 800af82:	601d      	str	r5, [r3, #0]
 800af84:	e695      	b.n	800acb2 <__gethex+0x12a>
 800af86:	4299      	cmp	r1, r3
 800af88:	f843 cc04 	str.w	ip, [r3, #-4]
 800af8c:	d8d8      	bhi.n	800af40 <__gethex+0x3b8>
 800af8e:	68a3      	ldr	r3, [r4, #8]
 800af90:	459b      	cmp	fp, r3
 800af92:	db19      	blt.n	800afc8 <__gethex+0x440>
 800af94:	6861      	ldr	r1, [r4, #4]
 800af96:	ee18 0a10 	vmov	r0, s16
 800af9a:	3101      	adds	r1, #1
 800af9c:	f000 f928 	bl	800b1f0 <_Balloc>
 800afa0:	4681      	mov	r9, r0
 800afa2:	b918      	cbnz	r0, 800afac <__gethex+0x424>
 800afa4:	4b1a      	ldr	r3, [pc, #104]	; (800b010 <__gethex+0x488>)
 800afa6:	4602      	mov	r2, r0
 800afa8:	2184      	movs	r1, #132	; 0x84
 800afaa:	e6a8      	b.n	800acfe <__gethex+0x176>
 800afac:	6922      	ldr	r2, [r4, #16]
 800afae:	3202      	adds	r2, #2
 800afb0:	f104 010c 	add.w	r1, r4, #12
 800afb4:	0092      	lsls	r2, r2, #2
 800afb6:	300c      	adds	r0, #12
 800afb8:	f000 f900 	bl	800b1bc <memcpy>
 800afbc:	4621      	mov	r1, r4
 800afbe:	ee18 0a10 	vmov	r0, s16
 800afc2:	f000 f955 	bl	800b270 <_Bfree>
 800afc6:	464c      	mov	r4, r9
 800afc8:	6923      	ldr	r3, [r4, #16]
 800afca:	1c5a      	adds	r2, r3, #1
 800afcc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800afd0:	6122      	str	r2, [r4, #16]
 800afd2:	2201      	movs	r2, #1
 800afd4:	615a      	str	r2, [r3, #20]
 800afd6:	e7bb      	b.n	800af50 <__gethex+0x3c8>
 800afd8:	6922      	ldr	r2, [r4, #16]
 800afda:	455a      	cmp	r2, fp
 800afdc:	dd0b      	ble.n	800aff6 <__gethex+0x46e>
 800afde:	2101      	movs	r1, #1
 800afe0:	4620      	mov	r0, r4
 800afe2:	f7ff fd69 	bl	800aab8 <rshift>
 800afe6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800afea:	3501      	adds	r5, #1
 800afec:	42ab      	cmp	r3, r5
 800afee:	f6ff aed0 	blt.w	800ad92 <__gethex+0x20a>
 800aff2:	2701      	movs	r7, #1
 800aff4:	e7c0      	b.n	800af78 <__gethex+0x3f0>
 800aff6:	f016 061f 	ands.w	r6, r6, #31
 800affa:	d0fa      	beq.n	800aff2 <__gethex+0x46a>
 800affc:	4453      	add	r3, sl
 800affe:	f1c6 0620 	rsb	r6, r6, #32
 800b002:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b006:	f000 f9e5 	bl	800b3d4 <__hi0bits>
 800b00a:	42b0      	cmp	r0, r6
 800b00c:	dbe7      	blt.n	800afde <__gethex+0x456>
 800b00e:	e7f0      	b.n	800aff2 <__gethex+0x46a>
 800b010:	0800d0c9 	.word	0x0800d0c9

0800b014 <L_shift>:
 800b014:	f1c2 0208 	rsb	r2, r2, #8
 800b018:	0092      	lsls	r2, r2, #2
 800b01a:	b570      	push	{r4, r5, r6, lr}
 800b01c:	f1c2 0620 	rsb	r6, r2, #32
 800b020:	6843      	ldr	r3, [r0, #4]
 800b022:	6804      	ldr	r4, [r0, #0]
 800b024:	fa03 f506 	lsl.w	r5, r3, r6
 800b028:	432c      	orrs	r4, r5
 800b02a:	40d3      	lsrs	r3, r2
 800b02c:	6004      	str	r4, [r0, #0]
 800b02e:	f840 3f04 	str.w	r3, [r0, #4]!
 800b032:	4288      	cmp	r0, r1
 800b034:	d3f4      	bcc.n	800b020 <L_shift+0xc>
 800b036:	bd70      	pop	{r4, r5, r6, pc}

0800b038 <__match>:
 800b038:	b530      	push	{r4, r5, lr}
 800b03a:	6803      	ldr	r3, [r0, #0]
 800b03c:	3301      	adds	r3, #1
 800b03e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b042:	b914      	cbnz	r4, 800b04a <__match+0x12>
 800b044:	6003      	str	r3, [r0, #0]
 800b046:	2001      	movs	r0, #1
 800b048:	bd30      	pop	{r4, r5, pc}
 800b04a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b04e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b052:	2d19      	cmp	r5, #25
 800b054:	bf98      	it	ls
 800b056:	3220      	addls	r2, #32
 800b058:	42a2      	cmp	r2, r4
 800b05a:	d0f0      	beq.n	800b03e <__match+0x6>
 800b05c:	2000      	movs	r0, #0
 800b05e:	e7f3      	b.n	800b048 <__match+0x10>

0800b060 <__hexnan>:
 800b060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b064:	680b      	ldr	r3, [r1, #0]
 800b066:	115e      	asrs	r6, r3, #5
 800b068:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b06c:	f013 031f 	ands.w	r3, r3, #31
 800b070:	b087      	sub	sp, #28
 800b072:	bf18      	it	ne
 800b074:	3604      	addne	r6, #4
 800b076:	2500      	movs	r5, #0
 800b078:	1f37      	subs	r7, r6, #4
 800b07a:	4690      	mov	r8, r2
 800b07c:	6802      	ldr	r2, [r0, #0]
 800b07e:	9301      	str	r3, [sp, #4]
 800b080:	4682      	mov	sl, r0
 800b082:	f846 5c04 	str.w	r5, [r6, #-4]
 800b086:	46b9      	mov	r9, r7
 800b088:	463c      	mov	r4, r7
 800b08a:	9502      	str	r5, [sp, #8]
 800b08c:	46ab      	mov	fp, r5
 800b08e:	7851      	ldrb	r1, [r2, #1]
 800b090:	1c53      	adds	r3, r2, #1
 800b092:	9303      	str	r3, [sp, #12]
 800b094:	b341      	cbz	r1, 800b0e8 <__hexnan+0x88>
 800b096:	4608      	mov	r0, r1
 800b098:	9205      	str	r2, [sp, #20]
 800b09a:	9104      	str	r1, [sp, #16]
 800b09c:	f7ff fd5e 	bl	800ab5c <__hexdig_fun>
 800b0a0:	2800      	cmp	r0, #0
 800b0a2:	d14f      	bne.n	800b144 <__hexnan+0xe4>
 800b0a4:	9904      	ldr	r1, [sp, #16]
 800b0a6:	9a05      	ldr	r2, [sp, #20]
 800b0a8:	2920      	cmp	r1, #32
 800b0aa:	d818      	bhi.n	800b0de <__hexnan+0x7e>
 800b0ac:	9b02      	ldr	r3, [sp, #8]
 800b0ae:	459b      	cmp	fp, r3
 800b0b0:	dd13      	ble.n	800b0da <__hexnan+0x7a>
 800b0b2:	454c      	cmp	r4, r9
 800b0b4:	d206      	bcs.n	800b0c4 <__hexnan+0x64>
 800b0b6:	2d07      	cmp	r5, #7
 800b0b8:	dc04      	bgt.n	800b0c4 <__hexnan+0x64>
 800b0ba:	462a      	mov	r2, r5
 800b0bc:	4649      	mov	r1, r9
 800b0be:	4620      	mov	r0, r4
 800b0c0:	f7ff ffa8 	bl	800b014 <L_shift>
 800b0c4:	4544      	cmp	r4, r8
 800b0c6:	d950      	bls.n	800b16a <__hexnan+0x10a>
 800b0c8:	2300      	movs	r3, #0
 800b0ca:	f1a4 0904 	sub.w	r9, r4, #4
 800b0ce:	f844 3c04 	str.w	r3, [r4, #-4]
 800b0d2:	f8cd b008 	str.w	fp, [sp, #8]
 800b0d6:	464c      	mov	r4, r9
 800b0d8:	461d      	mov	r5, r3
 800b0da:	9a03      	ldr	r2, [sp, #12]
 800b0dc:	e7d7      	b.n	800b08e <__hexnan+0x2e>
 800b0de:	2929      	cmp	r1, #41	; 0x29
 800b0e0:	d156      	bne.n	800b190 <__hexnan+0x130>
 800b0e2:	3202      	adds	r2, #2
 800b0e4:	f8ca 2000 	str.w	r2, [sl]
 800b0e8:	f1bb 0f00 	cmp.w	fp, #0
 800b0ec:	d050      	beq.n	800b190 <__hexnan+0x130>
 800b0ee:	454c      	cmp	r4, r9
 800b0f0:	d206      	bcs.n	800b100 <__hexnan+0xa0>
 800b0f2:	2d07      	cmp	r5, #7
 800b0f4:	dc04      	bgt.n	800b100 <__hexnan+0xa0>
 800b0f6:	462a      	mov	r2, r5
 800b0f8:	4649      	mov	r1, r9
 800b0fa:	4620      	mov	r0, r4
 800b0fc:	f7ff ff8a 	bl	800b014 <L_shift>
 800b100:	4544      	cmp	r4, r8
 800b102:	d934      	bls.n	800b16e <__hexnan+0x10e>
 800b104:	f1a8 0204 	sub.w	r2, r8, #4
 800b108:	4623      	mov	r3, r4
 800b10a:	f853 1b04 	ldr.w	r1, [r3], #4
 800b10e:	f842 1f04 	str.w	r1, [r2, #4]!
 800b112:	429f      	cmp	r7, r3
 800b114:	d2f9      	bcs.n	800b10a <__hexnan+0xaa>
 800b116:	1b3b      	subs	r3, r7, r4
 800b118:	f023 0303 	bic.w	r3, r3, #3
 800b11c:	3304      	adds	r3, #4
 800b11e:	3401      	adds	r4, #1
 800b120:	3e03      	subs	r6, #3
 800b122:	42b4      	cmp	r4, r6
 800b124:	bf88      	it	hi
 800b126:	2304      	movhi	r3, #4
 800b128:	4443      	add	r3, r8
 800b12a:	2200      	movs	r2, #0
 800b12c:	f843 2b04 	str.w	r2, [r3], #4
 800b130:	429f      	cmp	r7, r3
 800b132:	d2fb      	bcs.n	800b12c <__hexnan+0xcc>
 800b134:	683b      	ldr	r3, [r7, #0]
 800b136:	b91b      	cbnz	r3, 800b140 <__hexnan+0xe0>
 800b138:	4547      	cmp	r7, r8
 800b13a:	d127      	bne.n	800b18c <__hexnan+0x12c>
 800b13c:	2301      	movs	r3, #1
 800b13e:	603b      	str	r3, [r7, #0]
 800b140:	2005      	movs	r0, #5
 800b142:	e026      	b.n	800b192 <__hexnan+0x132>
 800b144:	3501      	adds	r5, #1
 800b146:	2d08      	cmp	r5, #8
 800b148:	f10b 0b01 	add.w	fp, fp, #1
 800b14c:	dd06      	ble.n	800b15c <__hexnan+0xfc>
 800b14e:	4544      	cmp	r4, r8
 800b150:	d9c3      	bls.n	800b0da <__hexnan+0x7a>
 800b152:	2300      	movs	r3, #0
 800b154:	f844 3c04 	str.w	r3, [r4, #-4]
 800b158:	2501      	movs	r5, #1
 800b15a:	3c04      	subs	r4, #4
 800b15c:	6822      	ldr	r2, [r4, #0]
 800b15e:	f000 000f 	and.w	r0, r0, #15
 800b162:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800b166:	6022      	str	r2, [r4, #0]
 800b168:	e7b7      	b.n	800b0da <__hexnan+0x7a>
 800b16a:	2508      	movs	r5, #8
 800b16c:	e7b5      	b.n	800b0da <__hexnan+0x7a>
 800b16e:	9b01      	ldr	r3, [sp, #4]
 800b170:	2b00      	cmp	r3, #0
 800b172:	d0df      	beq.n	800b134 <__hexnan+0xd4>
 800b174:	f04f 32ff 	mov.w	r2, #4294967295
 800b178:	f1c3 0320 	rsb	r3, r3, #32
 800b17c:	fa22 f303 	lsr.w	r3, r2, r3
 800b180:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b184:	401a      	ands	r2, r3
 800b186:	f846 2c04 	str.w	r2, [r6, #-4]
 800b18a:	e7d3      	b.n	800b134 <__hexnan+0xd4>
 800b18c:	3f04      	subs	r7, #4
 800b18e:	e7d1      	b.n	800b134 <__hexnan+0xd4>
 800b190:	2004      	movs	r0, #4
 800b192:	b007      	add	sp, #28
 800b194:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b198 <__ascii_mbtowc>:
 800b198:	b082      	sub	sp, #8
 800b19a:	b901      	cbnz	r1, 800b19e <__ascii_mbtowc+0x6>
 800b19c:	a901      	add	r1, sp, #4
 800b19e:	b142      	cbz	r2, 800b1b2 <__ascii_mbtowc+0x1a>
 800b1a0:	b14b      	cbz	r3, 800b1b6 <__ascii_mbtowc+0x1e>
 800b1a2:	7813      	ldrb	r3, [r2, #0]
 800b1a4:	600b      	str	r3, [r1, #0]
 800b1a6:	7812      	ldrb	r2, [r2, #0]
 800b1a8:	1e10      	subs	r0, r2, #0
 800b1aa:	bf18      	it	ne
 800b1ac:	2001      	movne	r0, #1
 800b1ae:	b002      	add	sp, #8
 800b1b0:	4770      	bx	lr
 800b1b2:	4610      	mov	r0, r2
 800b1b4:	e7fb      	b.n	800b1ae <__ascii_mbtowc+0x16>
 800b1b6:	f06f 0001 	mvn.w	r0, #1
 800b1ba:	e7f8      	b.n	800b1ae <__ascii_mbtowc+0x16>

0800b1bc <memcpy>:
 800b1bc:	440a      	add	r2, r1
 800b1be:	4291      	cmp	r1, r2
 800b1c0:	f100 33ff 	add.w	r3, r0, #4294967295
 800b1c4:	d100      	bne.n	800b1c8 <memcpy+0xc>
 800b1c6:	4770      	bx	lr
 800b1c8:	b510      	push	{r4, lr}
 800b1ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b1ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b1d2:	4291      	cmp	r1, r2
 800b1d4:	d1f9      	bne.n	800b1ca <memcpy+0xe>
 800b1d6:	bd10      	pop	{r4, pc}

0800b1d8 <__malloc_lock>:
 800b1d8:	4801      	ldr	r0, [pc, #4]	; (800b1e0 <__malloc_lock+0x8>)
 800b1da:	f001 b832 	b.w	800c242 <__retarget_lock_acquire_recursive>
 800b1de:	bf00      	nop
 800b1e0:	20001d20 	.word	0x20001d20

0800b1e4 <__malloc_unlock>:
 800b1e4:	4801      	ldr	r0, [pc, #4]	; (800b1ec <__malloc_unlock+0x8>)
 800b1e6:	f001 b82d 	b.w	800c244 <__retarget_lock_release_recursive>
 800b1ea:	bf00      	nop
 800b1ec:	20001d20 	.word	0x20001d20

0800b1f0 <_Balloc>:
 800b1f0:	b570      	push	{r4, r5, r6, lr}
 800b1f2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b1f4:	4604      	mov	r4, r0
 800b1f6:	460d      	mov	r5, r1
 800b1f8:	b976      	cbnz	r6, 800b218 <_Balloc+0x28>
 800b1fa:	2010      	movs	r0, #16
 800b1fc:	f7fe fc18 	bl	8009a30 <malloc>
 800b200:	4602      	mov	r2, r0
 800b202:	6260      	str	r0, [r4, #36]	; 0x24
 800b204:	b920      	cbnz	r0, 800b210 <_Balloc+0x20>
 800b206:	4b18      	ldr	r3, [pc, #96]	; (800b268 <_Balloc+0x78>)
 800b208:	4818      	ldr	r0, [pc, #96]	; (800b26c <_Balloc+0x7c>)
 800b20a:	2166      	movs	r1, #102	; 0x66
 800b20c:	f000 ffe8 	bl	800c1e0 <__assert_func>
 800b210:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b214:	6006      	str	r6, [r0, #0]
 800b216:	60c6      	str	r6, [r0, #12]
 800b218:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b21a:	68f3      	ldr	r3, [r6, #12]
 800b21c:	b183      	cbz	r3, 800b240 <_Balloc+0x50>
 800b21e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b220:	68db      	ldr	r3, [r3, #12]
 800b222:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b226:	b9b8      	cbnz	r0, 800b258 <_Balloc+0x68>
 800b228:	2101      	movs	r1, #1
 800b22a:	fa01 f605 	lsl.w	r6, r1, r5
 800b22e:	1d72      	adds	r2, r6, #5
 800b230:	0092      	lsls	r2, r2, #2
 800b232:	4620      	mov	r0, r4
 800b234:	f000 fc9d 	bl	800bb72 <_calloc_r>
 800b238:	b160      	cbz	r0, 800b254 <_Balloc+0x64>
 800b23a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b23e:	e00e      	b.n	800b25e <_Balloc+0x6e>
 800b240:	2221      	movs	r2, #33	; 0x21
 800b242:	2104      	movs	r1, #4
 800b244:	4620      	mov	r0, r4
 800b246:	f000 fc94 	bl	800bb72 <_calloc_r>
 800b24a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b24c:	60f0      	str	r0, [r6, #12]
 800b24e:	68db      	ldr	r3, [r3, #12]
 800b250:	2b00      	cmp	r3, #0
 800b252:	d1e4      	bne.n	800b21e <_Balloc+0x2e>
 800b254:	2000      	movs	r0, #0
 800b256:	bd70      	pop	{r4, r5, r6, pc}
 800b258:	6802      	ldr	r2, [r0, #0]
 800b25a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b25e:	2300      	movs	r3, #0
 800b260:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b264:	e7f7      	b.n	800b256 <_Balloc+0x66>
 800b266:	bf00      	nop
 800b268:	0800d154 	.word	0x0800d154
 800b26c:	0800d16b 	.word	0x0800d16b

0800b270 <_Bfree>:
 800b270:	b570      	push	{r4, r5, r6, lr}
 800b272:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b274:	4605      	mov	r5, r0
 800b276:	460c      	mov	r4, r1
 800b278:	b976      	cbnz	r6, 800b298 <_Bfree+0x28>
 800b27a:	2010      	movs	r0, #16
 800b27c:	f7fe fbd8 	bl	8009a30 <malloc>
 800b280:	4602      	mov	r2, r0
 800b282:	6268      	str	r0, [r5, #36]	; 0x24
 800b284:	b920      	cbnz	r0, 800b290 <_Bfree+0x20>
 800b286:	4b09      	ldr	r3, [pc, #36]	; (800b2ac <_Bfree+0x3c>)
 800b288:	4809      	ldr	r0, [pc, #36]	; (800b2b0 <_Bfree+0x40>)
 800b28a:	218a      	movs	r1, #138	; 0x8a
 800b28c:	f000 ffa8 	bl	800c1e0 <__assert_func>
 800b290:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b294:	6006      	str	r6, [r0, #0]
 800b296:	60c6      	str	r6, [r0, #12]
 800b298:	b13c      	cbz	r4, 800b2aa <_Bfree+0x3a>
 800b29a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b29c:	6862      	ldr	r2, [r4, #4]
 800b29e:	68db      	ldr	r3, [r3, #12]
 800b2a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b2a4:	6021      	str	r1, [r4, #0]
 800b2a6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b2aa:	bd70      	pop	{r4, r5, r6, pc}
 800b2ac:	0800d154 	.word	0x0800d154
 800b2b0:	0800d16b 	.word	0x0800d16b

0800b2b4 <__multadd>:
 800b2b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2b8:	690d      	ldr	r5, [r1, #16]
 800b2ba:	4607      	mov	r7, r0
 800b2bc:	460c      	mov	r4, r1
 800b2be:	461e      	mov	r6, r3
 800b2c0:	f101 0c14 	add.w	ip, r1, #20
 800b2c4:	2000      	movs	r0, #0
 800b2c6:	f8dc 3000 	ldr.w	r3, [ip]
 800b2ca:	b299      	uxth	r1, r3
 800b2cc:	fb02 6101 	mla	r1, r2, r1, r6
 800b2d0:	0c1e      	lsrs	r6, r3, #16
 800b2d2:	0c0b      	lsrs	r3, r1, #16
 800b2d4:	fb02 3306 	mla	r3, r2, r6, r3
 800b2d8:	b289      	uxth	r1, r1
 800b2da:	3001      	adds	r0, #1
 800b2dc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b2e0:	4285      	cmp	r5, r0
 800b2e2:	f84c 1b04 	str.w	r1, [ip], #4
 800b2e6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b2ea:	dcec      	bgt.n	800b2c6 <__multadd+0x12>
 800b2ec:	b30e      	cbz	r6, 800b332 <__multadd+0x7e>
 800b2ee:	68a3      	ldr	r3, [r4, #8]
 800b2f0:	42ab      	cmp	r3, r5
 800b2f2:	dc19      	bgt.n	800b328 <__multadd+0x74>
 800b2f4:	6861      	ldr	r1, [r4, #4]
 800b2f6:	4638      	mov	r0, r7
 800b2f8:	3101      	adds	r1, #1
 800b2fa:	f7ff ff79 	bl	800b1f0 <_Balloc>
 800b2fe:	4680      	mov	r8, r0
 800b300:	b928      	cbnz	r0, 800b30e <__multadd+0x5a>
 800b302:	4602      	mov	r2, r0
 800b304:	4b0c      	ldr	r3, [pc, #48]	; (800b338 <__multadd+0x84>)
 800b306:	480d      	ldr	r0, [pc, #52]	; (800b33c <__multadd+0x88>)
 800b308:	21b5      	movs	r1, #181	; 0xb5
 800b30a:	f000 ff69 	bl	800c1e0 <__assert_func>
 800b30e:	6922      	ldr	r2, [r4, #16]
 800b310:	3202      	adds	r2, #2
 800b312:	f104 010c 	add.w	r1, r4, #12
 800b316:	0092      	lsls	r2, r2, #2
 800b318:	300c      	adds	r0, #12
 800b31a:	f7ff ff4f 	bl	800b1bc <memcpy>
 800b31e:	4621      	mov	r1, r4
 800b320:	4638      	mov	r0, r7
 800b322:	f7ff ffa5 	bl	800b270 <_Bfree>
 800b326:	4644      	mov	r4, r8
 800b328:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b32c:	3501      	adds	r5, #1
 800b32e:	615e      	str	r6, [r3, #20]
 800b330:	6125      	str	r5, [r4, #16]
 800b332:	4620      	mov	r0, r4
 800b334:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b338:	0800d0c9 	.word	0x0800d0c9
 800b33c:	0800d16b 	.word	0x0800d16b

0800b340 <__s2b>:
 800b340:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b344:	460c      	mov	r4, r1
 800b346:	4615      	mov	r5, r2
 800b348:	461f      	mov	r7, r3
 800b34a:	2209      	movs	r2, #9
 800b34c:	3308      	adds	r3, #8
 800b34e:	4606      	mov	r6, r0
 800b350:	fb93 f3f2 	sdiv	r3, r3, r2
 800b354:	2100      	movs	r1, #0
 800b356:	2201      	movs	r2, #1
 800b358:	429a      	cmp	r2, r3
 800b35a:	db09      	blt.n	800b370 <__s2b+0x30>
 800b35c:	4630      	mov	r0, r6
 800b35e:	f7ff ff47 	bl	800b1f0 <_Balloc>
 800b362:	b940      	cbnz	r0, 800b376 <__s2b+0x36>
 800b364:	4602      	mov	r2, r0
 800b366:	4b19      	ldr	r3, [pc, #100]	; (800b3cc <__s2b+0x8c>)
 800b368:	4819      	ldr	r0, [pc, #100]	; (800b3d0 <__s2b+0x90>)
 800b36a:	21ce      	movs	r1, #206	; 0xce
 800b36c:	f000 ff38 	bl	800c1e0 <__assert_func>
 800b370:	0052      	lsls	r2, r2, #1
 800b372:	3101      	adds	r1, #1
 800b374:	e7f0      	b.n	800b358 <__s2b+0x18>
 800b376:	9b08      	ldr	r3, [sp, #32]
 800b378:	6143      	str	r3, [r0, #20]
 800b37a:	2d09      	cmp	r5, #9
 800b37c:	f04f 0301 	mov.w	r3, #1
 800b380:	6103      	str	r3, [r0, #16]
 800b382:	dd16      	ble.n	800b3b2 <__s2b+0x72>
 800b384:	f104 0909 	add.w	r9, r4, #9
 800b388:	46c8      	mov	r8, r9
 800b38a:	442c      	add	r4, r5
 800b38c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b390:	4601      	mov	r1, r0
 800b392:	3b30      	subs	r3, #48	; 0x30
 800b394:	220a      	movs	r2, #10
 800b396:	4630      	mov	r0, r6
 800b398:	f7ff ff8c 	bl	800b2b4 <__multadd>
 800b39c:	45a0      	cmp	r8, r4
 800b39e:	d1f5      	bne.n	800b38c <__s2b+0x4c>
 800b3a0:	f1a5 0408 	sub.w	r4, r5, #8
 800b3a4:	444c      	add	r4, r9
 800b3a6:	1b2d      	subs	r5, r5, r4
 800b3a8:	1963      	adds	r3, r4, r5
 800b3aa:	42bb      	cmp	r3, r7
 800b3ac:	db04      	blt.n	800b3b8 <__s2b+0x78>
 800b3ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b3b2:	340a      	adds	r4, #10
 800b3b4:	2509      	movs	r5, #9
 800b3b6:	e7f6      	b.n	800b3a6 <__s2b+0x66>
 800b3b8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b3bc:	4601      	mov	r1, r0
 800b3be:	3b30      	subs	r3, #48	; 0x30
 800b3c0:	220a      	movs	r2, #10
 800b3c2:	4630      	mov	r0, r6
 800b3c4:	f7ff ff76 	bl	800b2b4 <__multadd>
 800b3c8:	e7ee      	b.n	800b3a8 <__s2b+0x68>
 800b3ca:	bf00      	nop
 800b3cc:	0800d0c9 	.word	0x0800d0c9
 800b3d0:	0800d16b 	.word	0x0800d16b

0800b3d4 <__hi0bits>:
 800b3d4:	0c03      	lsrs	r3, r0, #16
 800b3d6:	041b      	lsls	r3, r3, #16
 800b3d8:	b9d3      	cbnz	r3, 800b410 <__hi0bits+0x3c>
 800b3da:	0400      	lsls	r0, r0, #16
 800b3dc:	2310      	movs	r3, #16
 800b3de:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b3e2:	bf04      	itt	eq
 800b3e4:	0200      	lsleq	r0, r0, #8
 800b3e6:	3308      	addeq	r3, #8
 800b3e8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b3ec:	bf04      	itt	eq
 800b3ee:	0100      	lsleq	r0, r0, #4
 800b3f0:	3304      	addeq	r3, #4
 800b3f2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b3f6:	bf04      	itt	eq
 800b3f8:	0080      	lsleq	r0, r0, #2
 800b3fa:	3302      	addeq	r3, #2
 800b3fc:	2800      	cmp	r0, #0
 800b3fe:	db05      	blt.n	800b40c <__hi0bits+0x38>
 800b400:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b404:	f103 0301 	add.w	r3, r3, #1
 800b408:	bf08      	it	eq
 800b40a:	2320      	moveq	r3, #32
 800b40c:	4618      	mov	r0, r3
 800b40e:	4770      	bx	lr
 800b410:	2300      	movs	r3, #0
 800b412:	e7e4      	b.n	800b3de <__hi0bits+0xa>

0800b414 <__lo0bits>:
 800b414:	6803      	ldr	r3, [r0, #0]
 800b416:	f013 0207 	ands.w	r2, r3, #7
 800b41a:	4601      	mov	r1, r0
 800b41c:	d00b      	beq.n	800b436 <__lo0bits+0x22>
 800b41e:	07da      	lsls	r2, r3, #31
 800b420:	d423      	bmi.n	800b46a <__lo0bits+0x56>
 800b422:	0798      	lsls	r0, r3, #30
 800b424:	bf49      	itett	mi
 800b426:	085b      	lsrmi	r3, r3, #1
 800b428:	089b      	lsrpl	r3, r3, #2
 800b42a:	2001      	movmi	r0, #1
 800b42c:	600b      	strmi	r3, [r1, #0]
 800b42e:	bf5c      	itt	pl
 800b430:	600b      	strpl	r3, [r1, #0]
 800b432:	2002      	movpl	r0, #2
 800b434:	4770      	bx	lr
 800b436:	b298      	uxth	r0, r3
 800b438:	b9a8      	cbnz	r0, 800b466 <__lo0bits+0x52>
 800b43a:	0c1b      	lsrs	r3, r3, #16
 800b43c:	2010      	movs	r0, #16
 800b43e:	b2da      	uxtb	r2, r3
 800b440:	b90a      	cbnz	r2, 800b446 <__lo0bits+0x32>
 800b442:	3008      	adds	r0, #8
 800b444:	0a1b      	lsrs	r3, r3, #8
 800b446:	071a      	lsls	r2, r3, #28
 800b448:	bf04      	itt	eq
 800b44a:	091b      	lsreq	r3, r3, #4
 800b44c:	3004      	addeq	r0, #4
 800b44e:	079a      	lsls	r2, r3, #30
 800b450:	bf04      	itt	eq
 800b452:	089b      	lsreq	r3, r3, #2
 800b454:	3002      	addeq	r0, #2
 800b456:	07da      	lsls	r2, r3, #31
 800b458:	d403      	bmi.n	800b462 <__lo0bits+0x4e>
 800b45a:	085b      	lsrs	r3, r3, #1
 800b45c:	f100 0001 	add.w	r0, r0, #1
 800b460:	d005      	beq.n	800b46e <__lo0bits+0x5a>
 800b462:	600b      	str	r3, [r1, #0]
 800b464:	4770      	bx	lr
 800b466:	4610      	mov	r0, r2
 800b468:	e7e9      	b.n	800b43e <__lo0bits+0x2a>
 800b46a:	2000      	movs	r0, #0
 800b46c:	4770      	bx	lr
 800b46e:	2020      	movs	r0, #32
 800b470:	4770      	bx	lr
	...

0800b474 <__i2b>:
 800b474:	b510      	push	{r4, lr}
 800b476:	460c      	mov	r4, r1
 800b478:	2101      	movs	r1, #1
 800b47a:	f7ff feb9 	bl	800b1f0 <_Balloc>
 800b47e:	4602      	mov	r2, r0
 800b480:	b928      	cbnz	r0, 800b48e <__i2b+0x1a>
 800b482:	4b05      	ldr	r3, [pc, #20]	; (800b498 <__i2b+0x24>)
 800b484:	4805      	ldr	r0, [pc, #20]	; (800b49c <__i2b+0x28>)
 800b486:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b48a:	f000 fea9 	bl	800c1e0 <__assert_func>
 800b48e:	2301      	movs	r3, #1
 800b490:	6144      	str	r4, [r0, #20]
 800b492:	6103      	str	r3, [r0, #16]
 800b494:	bd10      	pop	{r4, pc}
 800b496:	bf00      	nop
 800b498:	0800d0c9 	.word	0x0800d0c9
 800b49c:	0800d16b 	.word	0x0800d16b

0800b4a0 <__multiply>:
 800b4a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4a4:	4691      	mov	r9, r2
 800b4a6:	690a      	ldr	r2, [r1, #16]
 800b4a8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b4ac:	429a      	cmp	r2, r3
 800b4ae:	bfb8      	it	lt
 800b4b0:	460b      	movlt	r3, r1
 800b4b2:	460c      	mov	r4, r1
 800b4b4:	bfbc      	itt	lt
 800b4b6:	464c      	movlt	r4, r9
 800b4b8:	4699      	movlt	r9, r3
 800b4ba:	6927      	ldr	r7, [r4, #16]
 800b4bc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b4c0:	68a3      	ldr	r3, [r4, #8]
 800b4c2:	6861      	ldr	r1, [r4, #4]
 800b4c4:	eb07 060a 	add.w	r6, r7, sl
 800b4c8:	42b3      	cmp	r3, r6
 800b4ca:	b085      	sub	sp, #20
 800b4cc:	bfb8      	it	lt
 800b4ce:	3101      	addlt	r1, #1
 800b4d0:	f7ff fe8e 	bl	800b1f0 <_Balloc>
 800b4d4:	b930      	cbnz	r0, 800b4e4 <__multiply+0x44>
 800b4d6:	4602      	mov	r2, r0
 800b4d8:	4b44      	ldr	r3, [pc, #272]	; (800b5ec <__multiply+0x14c>)
 800b4da:	4845      	ldr	r0, [pc, #276]	; (800b5f0 <__multiply+0x150>)
 800b4dc:	f240 115d 	movw	r1, #349	; 0x15d
 800b4e0:	f000 fe7e 	bl	800c1e0 <__assert_func>
 800b4e4:	f100 0514 	add.w	r5, r0, #20
 800b4e8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b4ec:	462b      	mov	r3, r5
 800b4ee:	2200      	movs	r2, #0
 800b4f0:	4543      	cmp	r3, r8
 800b4f2:	d321      	bcc.n	800b538 <__multiply+0x98>
 800b4f4:	f104 0314 	add.w	r3, r4, #20
 800b4f8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b4fc:	f109 0314 	add.w	r3, r9, #20
 800b500:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b504:	9202      	str	r2, [sp, #8]
 800b506:	1b3a      	subs	r2, r7, r4
 800b508:	3a15      	subs	r2, #21
 800b50a:	f022 0203 	bic.w	r2, r2, #3
 800b50e:	3204      	adds	r2, #4
 800b510:	f104 0115 	add.w	r1, r4, #21
 800b514:	428f      	cmp	r7, r1
 800b516:	bf38      	it	cc
 800b518:	2204      	movcc	r2, #4
 800b51a:	9201      	str	r2, [sp, #4]
 800b51c:	9a02      	ldr	r2, [sp, #8]
 800b51e:	9303      	str	r3, [sp, #12]
 800b520:	429a      	cmp	r2, r3
 800b522:	d80c      	bhi.n	800b53e <__multiply+0x9e>
 800b524:	2e00      	cmp	r6, #0
 800b526:	dd03      	ble.n	800b530 <__multiply+0x90>
 800b528:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d05a      	beq.n	800b5e6 <__multiply+0x146>
 800b530:	6106      	str	r6, [r0, #16]
 800b532:	b005      	add	sp, #20
 800b534:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b538:	f843 2b04 	str.w	r2, [r3], #4
 800b53c:	e7d8      	b.n	800b4f0 <__multiply+0x50>
 800b53e:	f8b3 a000 	ldrh.w	sl, [r3]
 800b542:	f1ba 0f00 	cmp.w	sl, #0
 800b546:	d024      	beq.n	800b592 <__multiply+0xf2>
 800b548:	f104 0e14 	add.w	lr, r4, #20
 800b54c:	46a9      	mov	r9, r5
 800b54e:	f04f 0c00 	mov.w	ip, #0
 800b552:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b556:	f8d9 1000 	ldr.w	r1, [r9]
 800b55a:	fa1f fb82 	uxth.w	fp, r2
 800b55e:	b289      	uxth	r1, r1
 800b560:	fb0a 110b 	mla	r1, sl, fp, r1
 800b564:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b568:	f8d9 2000 	ldr.w	r2, [r9]
 800b56c:	4461      	add	r1, ip
 800b56e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b572:	fb0a c20b 	mla	r2, sl, fp, ip
 800b576:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b57a:	b289      	uxth	r1, r1
 800b57c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b580:	4577      	cmp	r7, lr
 800b582:	f849 1b04 	str.w	r1, [r9], #4
 800b586:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b58a:	d8e2      	bhi.n	800b552 <__multiply+0xb2>
 800b58c:	9a01      	ldr	r2, [sp, #4]
 800b58e:	f845 c002 	str.w	ip, [r5, r2]
 800b592:	9a03      	ldr	r2, [sp, #12]
 800b594:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b598:	3304      	adds	r3, #4
 800b59a:	f1b9 0f00 	cmp.w	r9, #0
 800b59e:	d020      	beq.n	800b5e2 <__multiply+0x142>
 800b5a0:	6829      	ldr	r1, [r5, #0]
 800b5a2:	f104 0c14 	add.w	ip, r4, #20
 800b5a6:	46ae      	mov	lr, r5
 800b5a8:	f04f 0a00 	mov.w	sl, #0
 800b5ac:	f8bc b000 	ldrh.w	fp, [ip]
 800b5b0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b5b4:	fb09 220b 	mla	r2, r9, fp, r2
 800b5b8:	4492      	add	sl, r2
 800b5ba:	b289      	uxth	r1, r1
 800b5bc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b5c0:	f84e 1b04 	str.w	r1, [lr], #4
 800b5c4:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b5c8:	f8be 1000 	ldrh.w	r1, [lr]
 800b5cc:	0c12      	lsrs	r2, r2, #16
 800b5ce:	fb09 1102 	mla	r1, r9, r2, r1
 800b5d2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b5d6:	4567      	cmp	r7, ip
 800b5d8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b5dc:	d8e6      	bhi.n	800b5ac <__multiply+0x10c>
 800b5de:	9a01      	ldr	r2, [sp, #4]
 800b5e0:	50a9      	str	r1, [r5, r2]
 800b5e2:	3504      	adds	r5, #4
 800b5e4:	e79a      	b.n	800b51c <__multiply+0x7c>
 800b5e6:	3e01      	subs	r6, #1
 800b5e8:	e79c      	b.n	800b524 <__multiply+0x84>
 800b5ea:	bf00      	nop
 800b5ec:	0800d0c9 	.word	0x0800d0c9
 800b5f0:	0800d16b 	.word	0x0800d16b

0800b5f4 <__pow5mult>:
 800b5f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b5f8:	4615      	mov	r5, r2
 800b5fa:	f012 0203 	ands.w	r2, r2, #3
 800b5fe:	4606      	mov	r6, r0
 800b600:	460f      	mov	r7, r1
 800b602:	d007      	beq.n	800b614 <__pow5mult+0x20>
 800b604:	4c25      	ldr	r4, [pc, #148]	; (800b69c <__pow5mult+0xa8>)
 800b606:	3a01      	subs	r2, #1
 800b608:	2300      	movs	r3, #0
 800b60a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b60e:	f7ff fe51 	bl	800b2b4 <__multadd>
 800b612:	4607      	mov	r7, r0
 800b614:	10ad      	asrs	r5, r5, #2
 800b616:	d03d      	beq.n	800b694 <__pow5mult+0xa0>
 800b618:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b61a:	b97c      	cbnz	r4, 800b63c <__pow5mult+0x48>
 800b61c:	2010      	movs	r0, #16
 800b61e:	f7fe fa07 	bl	8009a30 <malloc>
 800b622:	4602      	mov	r2, r0
 800b624:	6270      	str	r0, [r6, #36]	; 0x24
 800b626:	b928      	cbnz	r0, 800b634 <__pow5mult+0x40>
 800b628:	4b1d      	ldr	r3, [pc, #116]	; (800b6a0 <__pow5mult+0xac>)
 800b62a:	481e      	ldr	r0, [pc, #120]	; (800b6a4 <__pow5mult+0xb0>)
 800b62c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b630:	f000 fdd6 	bl	800c1e0 <__assert_func>
 800b634:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b638:	6004      	str	r4, [r0, #0]
 800b63a:	60c4      	str	r4, [r0, #12]
 800b63c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b640:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b644:	b94c      	cbnz	r4, 800b65a <__pow5mult+0x66>
 800b646:	f240 2171 	movw	r1, #625	; 0x271
 800b64a:	4630      	mov	r0, r6
 800b64c:	f7ff ff12 	bl	800b474 <__i2b>
 800b650:	2300      	movs	r3, #0
 800b652:	f8c8 0008 	str.w	r0, [r8, #8]
 800b656:	4604      	mov	r4, r0
 800b658:	6003      	str	r3, [r0, #0]
 800b65a:	f04f 0900 	mov.w	r9, #0
 800b65e:	07eb      	lsls	r3, r5, #31
 800b660:	d50a      	bpl.n	800b678 <__pow5mult+0x84>
 800b662:	4639      	mov	r1, r7
 800b664:	4622      	mov	r2, r4
 800b666:	4630      	mov	r0, r6
 800b668:	f7ff ff1a 	bl	800b4a0 <__multiply>
 800b66c:	4639      	mov	r1, r7
 800b66e:	4680      	mov	r8, r0
 800b670:	4630      	mov	r0, r6
 800b672:	f7ff fdfd 	bl	800b270 <_Bfree>
 800b676:	4647      	mov	r7, r8
 800b678:	106d      	asrs	r5, r5, #1
 800b67a:	d00b      	beq.n	800b694 <__pow5mult+0xa0>
 800b67c:	6820      	ldr	r0, [r4, #0]
 800b67e:	b938      	cbnz	r0, 800b690 <__pow5mult+0x9c>
 800b680:	4622      	mov	r2, r4
 800b682:	4621      	mov	r1, r4
 800b684:	4630      	mov	r0, r6
 800b686:	f7ff ff0b 	bl	800b4a0 <__multiply>
 800b68a:	6020      	str	r0, [r4, #0]
 800b68c:	f8c0 9000 	str.w	r9, [r0]
 800b690:	4604      	mov	r4, r0
 800b692:	e7e4      	b.n	800b65e <__pow5mult+0x6a>
 800b694:	4638      	mov	r0, r7
 800b696:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b69a:	bf00      	nop
 800b69c:	0800d2b8 	.word	0x0800d2b8
 800b6a0:	0800d154 	.word	0x0800d154
 800b6a4:	0800d16b 	.word	0x0800d16b

0800b6a8 <__lshift>:
 800b6a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b6ac:	460c      	mov	r4, r1
 800b6ae:	6849      	ldr	r1, [r1, #4]
 800b6b0:	6923      	ldr	r3, [r4, #16]
 800b6b2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b6b6:	68a3      	ldr	r3, [r4, #8]
 800b6b8:	4607      	mov	r7, r0
 800b6ba:	4691      	mov	r9, r2
 800b6bc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b6c0:	f108 0601 	add.w	r6, r8, #1
 800b6c4:	42b3      	cmp	r3, r6
 800b6c6:	db0b      	blt.n	800b6e0 <__lshift+0x38>
 800b6c8:	4638      	mov	r0, r7
 800b6ca:	f7ff fd91 	bl	800b1f0 <_Balloc>
 800b6ce:	4605      	mov	r5, r0
 800b6d0:	b948      	cbnz	r0, 800b6e6 <__lshift+0x3e>
 800b6d2:	4602      	mov	r2, r0
 800b6d4:	4b2a      	ldr	r3, [pc, #168]	; (800b780 <__lshift+0xd8>)
 800b6d6:	482b      	ldr	r0, [pc, #172]	; (800b784 <__lshift+0xdc>)
 800b6d8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b6dc:	f000 fd80 	bl	800c1e0 <__assert_func>
 800b6e0:	3101      	adds	r1, #1
 800b6e2:	005b      	lsls	r3, r3, #1
 800b6e4:	e7ee      	b.n	800b6c4 <__lshift+0x1c>
 800b6e6:	2300      	movs	r3, #0
 800b6e8:	f100 0114 	add.w	r1, r0, #20
 800b6ec:	f100 0210 	add.w	r2, r0, #16
 800b6f0:	4618      	mov	r0, r3
 800b6f2:	4553      	cmp	r3, sl
 800b6f4:	db37      	blt.n	800b766 <__lshift+0xbe>
 800b6f6:	6920      	ldr	r0, [r4, #16]
 800b6f8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b6fc:	f104 0314 	add.w	r3, r4, #20
 800b700:	f019 091f 	ands.w	r9, r9, #31
 800b704:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b708:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b70c:	d02f      	beq.n	800b76e <__lshift+0xc6>
 800b70e:	f1c9 0e20 	rsb	lr, r9, #32
 800b712:	468a      	mov	sl, r1
 800b714:	f04f 0c00 	mov.w	ip, #0
 800b718:	681a      	ldr	r2, [r3, #0]
 800b71a:	fa02 f209 	lsl.w	r2, r2, r9
 800b71e:	ea42 020c 	orr.w	r2, r2, ip
 800b722:	f84a 2b04 	str.w	r2, [sl], #4
 800b726:	f853 2b04 	ldr.w	r2, [r3], #4
 800b72a:	4298      	cmp	r0, r3
 800b72c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b730:	d8f2      	bhi.n	800b718 <__lshift+0x70>
 800b732:	1b03      	subs	r3, r0, r4
 800b734:	3b15      	subs	r3, #21
 800b736:	f023 0303 	bic.w	r3, r3, #3
 800b73a:	3304      	adds	r3, #4
 800b73c:	f104 0215 	add.w	r2, r4, #21
 800b740:	4290      	cmp	r0, r2
 800b742:	bf38      	it	cc
 800b744:	2304      	movcc	r3, #4
 800b746:	f841 c003 	str.w	ip, [r1, r3]
 800b74a:	f1bc 0f00 	cmp.w	ip, #0
 800b74e:	d001      	beq.n	800b754 <__lshift+0xac>
 800b750:	f108 0602 	add.w	r6, r8, #2
 800b754:	3e01      	subs	r6, #1
 800b756:	4638      	mov	r0, r7
 800b758:	612e      	str	r6, [r5, #16]
 800b75a:	4621      	mov	r1, r4
 800b75c:	f7ff fd88 	bl	800b270 <_Bfree>
 800b760:	4628      	mov	r0, r5
 800b762:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b766:	f842 0f04 	str.w	r0, [r2, #4]!
 800b76a:	3301      	adds	r3, #1
 800b76c:	e7c1      	b.n	800b6f2 <__lshift+0x4a>
 800b76e:	3904      	subs	r1, #4
 800b770:	f853 2b04 	ldr.w	r2, [r3], #4
 800b774:	f841 2f04 	str.w	r2, [r1, #4]!
 800b778:	4298      	cmp	r0, r3
 800b77a:	d8f9      	bhi.n	800b770 <__lshift+0xc8>
 800b77c:	e7ea      	b.n	800b754 <__lshift+0xac>
 800b77e:	bf00      	nop
 800b780:	0800d0c9 	.word	0x0800d0c9
 800b784:	0800d16b 	.word	0x0800d16b

0800b788 <__mcmp>:
 800b788:	b530      	push	{r4, r5, lr}
 800b78a:	6902      	ldr	r2, [r0, #16]
 800b78c:	690c      	ldr	r4, [r1, #16]
 800b78e:	1b12      	subs	r2, r2, r4
 800b790:	d10e      	bne.n	800b7b0 <__mcmp+0x28>
 800b792:	f100 0314 	add.w	r3, r0, #20
 800b796:	3114      	adds	r1, #20
 800b798:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b79c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b7a0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b7a4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b7a8:	42a5      	cmp	r5, r4
 800b7aa:	d003      	beq.n	800b7b4 <__mcmp+0x2c>
 800b7ac:	d305      	bcc.n	800b7ba <__mcmp+0x32>
 800b7ae:	2201      	movs	r2, #1
 800b7b0:	4610      	mov	r0, r2
 800b7b2:	bd30      	pop	{r4, r5, pc}
 800b7b4:	4283      	cmp	r3, r0
 800b7b6:	d3f3      	bcc.n	800b7a0 <__mcmp+0x18>
 800b7b8:	e7fa      	b.n	800b7b0 <__mcmp+0x28>
 800b7ba:	f04f 32ff 	mov.w	r2, #4294967295
 800b7be:	e7f7      	b.n	800b7b0 <__mcmp+0x28>

0800b7c0 <__mdiff>:
 800b7c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7c4:	460c      	mov	r4, r1
 800b7c6:	4606      	mov	r6, r0
 800b7c8:	4611      	mov	r1, r2
 800b7ca:	4620      	mov	r0, r4
 800b7cc:	4690      	mov	r8, r2
 800b7ce:	f7ff ffdb 	bl	800b788 <__mcmp>
 800b7d2:	1e05      	subs	r5, r0, #0
 800b7d4:	d110      	bne.n	800b7f8 <__mdiff+0x38>
 800b7d6:	4629      	mov	r1, r5
 800b7d8:	4630      	mov	r0, r6
 800b7da:	f7ff fd09 	bl	800b1f0 <_Balloc>
 800b7de:	b930      	cbnz	r0, 800b7ee <__mdiff+0x2e>
 800b7e0:	4b3a      	ldr	r3, [pc, #232]	; (800b8cc <__mdiff+0x10c>)
 800b7e2:	4602      	mov	r2, r0
 800b7e4:	f240 2132 	movw	r1, #562	; 0x232
 800b7e8:	4839      	ldr	r0, [pc, #228]	; (800b8d0 <__mdiff+0x110>)
 800b7ea:	f000 fcf9 	bl	800c1e0 <__assert_func>
 800b7ee:	2301      	movs	r3, #1
 800b7f0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b7f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7f8:	bfa4      	itt	ge
 800b7fa:	4643      	movge	r3, r8
 800b7fc:	46a0      	movge	r8, r4
 800b7fe:	4630      	mov	r0, r6
 800b800:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b804:	bfa6      	itte	ge
 800b806:	461c      	movge	r4, r3
 800b808:	2500      	movge	r5, #0
 800b80a:	2501      	movlt	r5, #1
 800b80c:	f7ff fcf0 	bl	800b1f0 <_Balloc>
 800b810:	b920      	cbnz	r0, 800b81c <__mdiff+0x5c>
 800b812:	4b2e      	ldr	r3, [pc, #184]	; (800b8cc <__mdiff+0x10c>)
 800b814:	4602      	mov	r2, r0
 800b816:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b81a:	e7e5      	b.n	800b7e8 <__mdiff+0x28>
 800b81c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b820:	6926      	ldr	r6, [r4, #16]
 800b822:	60c5      	str	r5, [r0, #12]
 800b824:	f104 0914 	add.w	r9, r4, #20
 800b828:	f108 0514 	add.w	r5, r8, #20
 800b82c:	f100 0e14 	add.w	lr, r0, #20
 800b830:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b834:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b838:	f108 0210 	add.w	r2, r8, #16
 800b83c:	46f2      	mov	sl, lr
 800b83e:	2100      	movs	r1, #0
 800b840:	f859 3b04 	ldr.w	r3, [r9], #4
 800b844:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b848:	fa1f f883 	uxth.w	r8, r3
 800b84c:	fa11 f18b 	uxtah	r1, r1, fp
 800b850:	0c1b      	lsrs	r3, r3, #16
 800b852:	eba1 0808 	sub.w	r8, r1, r8
 800b856:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b85a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b85e:	fa1f f888 	uxth.w	r8, r8
 800b862:	1419      	asrs	r1, r3, #16
 800b864:	454e      	cmp	r6, r9
 800b866:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b86a:	f84a 3b04 	str.w	r3, [sl], #4
 800b86e:	d8e7      	bhi.n	800b840 <__mdiff+0x80>
 800b870:	1b33      	subs	r3, r6, r4
 800b872:	3b15      	subs	r3, #21
 800b874:	f023 0303 	bic.w	r3, r3, #3
 800b878:	3304      	adds	r3, #4
 800b87a:	3415      	adds	r4, #21
 800b87c:	42a6      	cmp	r6, r4
 800b87e:	bf38      	it	cc
 800b880:	2304      	movcc	r3, #4
 800b882:	441d      	add	r5, r3
 800b884:	4473      	add	r3, lr
 800b886:	469e      	mov	lr, r3
 800b888:	462e      	mov	r6, r5
 800b88a:	4566      	cmp	r6, ip
 800b88c:	d30e      	bcc.n	800b8ac <__mdiff+0xec>
 800b88e:	f10c 0203 	add.w	r2, ip, #3
 800b892:	1b52      	subs	r2, r2, r5
 800b894:	f022 0203 	bic.w	r2, r2, #3
 800b898:	3d03      	subs	r5, #3
 800b89a:	45ac      	cmp	ip, r5
 800b89c:	bf38      	it	cc
 800b89e:	2200      	movcc	r2, #0
 800b8a0:	441a      	add	r2, r3
 800b8a2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b8a6:	b17b      	cbz	r3, 800b8c8 <__mdiff+0x108>
 800b8a8:	6107      	str	r7, [r0, #16]
 800b8aa:	e7a3      	b.n	800b7f4 <__mdiff+0x34>
 800b8ac:	f856 8b04 	ldr.w	r8, [r6], #4
 800b8b0:	fa11 f288 	uxtah	r2, r1, r8
 800b8b4:	1414      	asrs	r4, r2, #16
 800b8b6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b8ba:	b292      	uxth	r2, r2
 800b8bc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b8c0:	f84e 2b04 	str.w	r2, [lr], #4
 800b8c4:	1421      	asrs	r1, r4, #16
 800b8c6:	e7e0      	b.n	800b88a <__mdiff+0xca>
 800b8c8:	3f01      	subs	r7, #1
 800b8ca:	e7ea      	b.n	800b8a2 <__mdiff+0xe2>
 800b8cc:	0800d0c9 	.word	0x0800d0c9
 800b8d0:	0800d16b 	.word	0x0800d16b

0800b8d4 <__ulp>:
 800b8d4:	b082      	sub	sp, #8
 800b8d6:	ed8d 0b00 	vstr	d0, [sp]
 800b8da:	9b01      	ldr	r3, [sp, #4]
 800b8dc:	4912      	ldr	r1, [pc, #72]	; (800b928 <__ulp+0x54>)
 800b8de:	4019      	ands	r1, r3
 800b8e0:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800b8e4:	2900      	cmp	r1, #0
 800b8e6:	dd05      	ble.n	800b8f4 <__ulp+0x20>
 800b8e8:	2200      	movs	r2, #0
 800b8ea:	460b      	mov	r3, r1
 800b8ec:	ec43 2b10 	vmov	d0, r2, r3
 800b8f0:	b002      	add	sp, #8
 800b8f2:	4770      	bx	lr
 800b8f4:	4249      	negs	r1, r1
 800b8f6:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800b8fa:	ea4f 5021 	mov.w	r0, r1, asr #20
 800b8fe:	f04f 0200 	mov.w	r2, #0
 800b902:	f04f 0300 	mov.w	r3, #0
 800b906:	da04      	bge.n	800b912 <__ulp+0x3e>
 800b908:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800b90c:	fa41 f300 	asr.w	r3, r1, r0
 800b910:	e7ec      	b.n	800b8ec <__ulp+0x18>
 800b912:	f1a0 0114 	sub.w	r1, r0, #20
 800b916:	291e      	cmp	r1, #30
 800b918:	bfda      	itte	le
 800b91a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800b91e:	fa20 f101 	lsrle.w	r1, r0, r1
 800b922:	2101      	movgt	r1, #1
 800b924:	460a      	mov	r2, r1
 800b926:	e7e1      	b.n	800b8ec <__ulp+0x18>
 800b928:	7ff00000 	.word	0x7ff00000

0800b92c <__b2d>:
 800b92c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b92e:	6905      	ldr	r5, [r0, #16]
 800b930:	f100 0714 	add.w	r7, r0, #20
 800b934:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800b938:	1f2e      	subs	r6, r5, #4
 800b93a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800b93e:	4620      	mov	r0, r4
 800b940:	f7ff fd48 	bl	800b3d4 <__hi0bits>
 800b944:	f1c0 0320 	rsb	r3, r0, #32
 800b948:	280a      	cmp	r0, #10
 800b94a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800b9c8 <__b2d+0x9c>
 800b94e:	600b      	str	r3, [r1, #0]
 800b950:	dc14      	bgt.n	800b97c <__b2d+0x50>
 800b952:	f1c0 0e0b 	rsb	lr, r0, #11
 800b956:	fa24 f10e 	lsr.w	r1, r4, lr
 800b95a:	42b7      	cmp	r7, r6
 800b95c:	ea41 030c 	orr.w	r3, r1, ip
 800b960:	bf34      	ite	cc
 800b962:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b966:	2100      	movcs	r1, #0
 800b968:	3015      	adds	r0, #21
 800b96a:	fa04 f000 	lsl.w	r0, r4, r0
 800b96e:	fa21 f10e 	lsr.w	r1, r1, lr
 800b972:	ea40 0201 	orr.w	r2, r0, r1
 800b976:	ec43 2b10 	vmov	d0, r2, r3
 800b97a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b97c:	42b7      	cmp	r7, r6
 800b97e:	bf3a      	itte	cc
 800b980:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b984:	f1a5 0608 	subcc.w	r6, r5, #8
 800b988:	2100      	movcs	r1, #0
 800b98a:	380b      	subs	r0, #11
 800b98c:	d017      	beq.n	800b9be <__b2d+0x92>
 800b98e:	f1c0 0c20 	rsb	ip, r0, #32
 800b992:	fa04 f500 	lsl.w	r5, r4, r0
 800b996:	42be      	cmp	r6, r7
 800b998:	fa21 f40c 	lsr.w	r4, r1, ip
 800b99c:	ea45 0504 	orr.w	r5, r5, r4
 800b9a0:	bf8c      	ite	hi
 800b9a2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800b9a6:	2400      	movls	r4, #0
 800b9a8:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800b9ac:	fa01 f000 	lsl.w	r0, r1, r0
 800b9b0:	fa24 f40c 	lsr.w	r4, r4, ip
 800b9b4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b9b8:	ea40 0204 	orr.w	r2, r0, r4
 800b9bc:	e7db      	b.n	800b976 <__b2d+0x4a>
 800b9be:	ea44 030c 	orr.w	r3, r4, ip
 800b9c2:	460a      	mov	r2, r1
 800b9c4:	e7d7      	b.n	800b976 <__b2d+0x4a>
 800b9c6:	bf00      	nop
 800b9c8:	3ff00000 	.word	0x3ff00000

0800b9cc <__d2b>:
 800b9cc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b9d0:	4689      	mov	r9, r1
 800b9d2:	2101      	movs	r1, #1
 800b9d4:	ec57 6b10 	vmov	r6, r7, d0
 800b9d8:	4690      	mov	r8, r2
 800b9da:	f7ff fc09 	bl	800b1f0 <_Balloc>
 800b9de:	4604      	mov	r4, r0
 800b9e0:	b930      	cbnz	r0, 800b9f0 <__d2b+0x24>
 800b9e2:	4602      	mov	r2, r0
 800b9e4:	4b25      	ldr	r3, [pc, #148]	; (800ba7c <__d2b+0xb0>)
 800b9e6:	4826      	ldr	r0, [pc, #152]	; (800ba80 <__d2b+0xb4>)
 800b9e8:	f240 310a 	movw	r1, #778	; 0x30a
 800b9ec:	f000 fbf8 	bl	800c1e0 <__assert_func>
 800b9f0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b9f4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b9f8:	bb35      	cbnz	r5, 800ba48 <__d2b+0x7c>
 800b9fa:	2e00      	cmp	r6, #0
 800b9fc:	9301      	str	r3, [sp, #4]
 800b9fe:	d028      	beq.n	800ba52 <__d2b+0x86>
 800ba00:	4668      	mov	r0, sp
 800ba02:	9600      	str	r6, [sp, #0]
 800ba04:	f7ff fd06 	bl	800b414 <__lo0bits>
 800ba08:	9900      	ldr	r1, [sp, #0]
 800ba0a:	b300      	cbz	r0, 800ba4e <__d2b+0x82>
 800ba0c:	9a01      	ldr	r2, [sp, #4]
 800ba0e:	f1c0 0320 	rsb	r3, r0, #32
 800ba12:	fa02 f303 	lsl.w	r3, r2, r3
 800ba16:	430b      	orrs	r3, r1
 800ba18:	40c2      	lsrs	r2, r0
 800ba1a:	6163      	str	r3, [r4, #20]
 800ba1c:	9201      	str	r2, [sp, #4]
 800ba1e:	9b01      	ldr	r3, [sp, #4]
 800ba20:	61a3      	str	r3, [r4, #24]
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	bf14      	ite	ne
 800ba26:	2202      	movne	r2, #2
 800ba28:	2201      	moveq	r2, #1
 800ba2a:	6122      	str	r2, [r4, #16]
 800ba2c:	b1d5      	cbz	r5, 800ba64 <__d2b+0x98>
 800ba2e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ba32:	4405      	add	r5, r0
 800ba34:	f8c9 5000 	str.w	r5, [r9]
 800ba38:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ba3c:	f8c8 0000 	str.w	r0, [r8]
 800ba40:	4620      	mov	r0, r4
 800ba42:	b003      	add	sp, #12
 800ba44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ba48:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ba4c:	e7d5      	b.n	800b9fa <__d2b+0x2e>
 800ba4e:	6161      	str	r1, [r4, #20]
 800ba50:	e7e5      	b.n	800ba1e <__d2b+0x52>
 800ba52:	a801      	add	r0, sp, #4
 800ba54:	f7ff fcde 	bl	800b414 <__lo0bits>
 800ba58:	9b01      	ldr	r3, [sp, #4]
 800ba5a:	6163      	str	r3, [r4, #20]
 800ba5c:	2201      	movs	r2, #1
 800ba5e:	6122      	str	r2, [r4, #16]
 800ba60:	3020      	adds	r0, #32
 800ba62:	e7e3      	b.n	800ba2c <__d2b+0x60>
 800ba64:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ba68:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ba6c:	f8c9 0000 	str.w	r0, [r9]
 800ba70:	6918      	ldr	r0, [r3, #16]
 800ba72:	f7ff fcaf 	bl	800b3d4 <__hi0bits>
 800ba76:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ba7a:	e7df      	b.n	800ba3c <__d2b+0x70>
 800ba7c:	0800d0c9 	.word	0x0800d0c9
 800ba80:	0800d16b 	.word	0x0800d16b

0800ba84 <__ratio>:
 800ba84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba88:	4688      	mov	r8, r1
 800ba8a:	4669      	mov	r1, sp
 800ba8c:	4681      	mov	r9, r0
 800ba8e:	f7ff ff4d 	bl	800b92c <__b2d>
 800ba92:	a901      	add	r1, sp, #4
 800ba94:	4640      	mov	r0, r8
 800ba96:	ec55 4b10 	vmov	r4, r5, d0
 800ba9a:	f7ff ff47 	bl	800b92c <__b2d>
 800ba9e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800baa2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800baa6:	eba3 0c02 	sub.w	ip, r3, r2
 800baaa:	e9dd 3200 	ldrd	r3, r2, [sp]
 800baae:	1a9b      	subs	r3, r3, r2
 800bab0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800bab4:	ec51 0b10 	vmov	r0, r1, d0
 800bab8:	2b00      	cmp	r3, #0
 800baba:	bfd6      	itet	le
 800babc:	460a      	movle	r2, r1
 800babe:	462a      	movgt	r2, r5
 800bac0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800bac4:	468b      	mov	fp, r1
 800bac6:	462f      	mov	r7, r5
 800bac8:	bfd4      	ite	le
 800baca:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800bace:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800bad2:	4620      	mov	r0, r4
 800bad4:	ee10 2a10 	vmov	r2, s0
 800bad8:	465b      	mov	r3, fp
 800bada:	4639      	mov	r1, r7
 800badc:	f7f4 fee6 	bl	80008ac <__aeabi_ddiv>
 800bae0:	ec41 0b10 	vmov	d0, r0, r1
 800bae4:	b003      	add	sp, #12
 800bae6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800baea <__copybits>:
 800baea:	3901      	subs	r1, #1
 800baec:	b570      	push	{r4, r5, r6, lr}
 800baee:	1149      	asrs	r1, r1, #5
 800baf0:	6914      	ldr	r4, [r2, #16]
 800baf2:	3101      	adds	r1, #1
 800baf4:	f102 0314 	add.w	r3, r2, #20
 800baf8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800bafc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800bb00:	1f05      	subs	r5, r0, #4
 800bb02:	42a3      	cmp	r3, r4
 800bb04:	d30c      	bcc.n	800bb20 <__copybits+0x36>
 800bb06:	1aa3      	subs	r3, r4, r2
 800bb08:	3b11      	subs	r3, #17
 800bb0a:	f023 0303 	bic.w	r3, r3, #3
 800bb0e:	3211      	adds	r2, #17
 800bb10:	42a2      	cmp	r2, r4
 800bb12:	bf88      	it	hi
 800bb14:	2300      	movhi	r3, #0
 800bb16:	4418      	add	r0, r3
 800bb18:	2300      	movs	r3, #0
 800bb1a:	4288      	cmp	r0, r1
 800bb1c:	d305      	bcc.n	800bb2a <__copybits+0x40>
 800bb1e:	bd70      	pop	{r4, r5, r6, pc}
 800bb20:	f853 6b04 	ldr.w	r6, [r3], #4
 800bb24:	f845 6f04 	str.w	r6, [r5, #4]!
 800bb28:	e7eb      	b.n	800bb02 <__copybits+0x18>
 800bb2a:	f840 3b04 	str.w	r3, [r0], #4
 800bb2e:	e7f4      	b.n	800bb1a <__copybits+0x30>

0800bb30 <__any_on>:
 800bb30:	f100 0214 	add.w	r2, r0, #20
 800bb34:	6900      	ldr	r0, [r0, #16]
 800bb36:	114b      	asrs	r3, r1, #5
 800bb38:	4298      	cmp	r0, r3
 800bb3a:	b510      	push	{r4, lr}
 800bb3c:	db11      	blt.n	800bb62 <__any_on+0x32>
 800bb3e:	dd0a      	ble.n	800bb56 <__any_on+0x26>
 800bb40:	f011 011f 	ands.w	r1, r1, #31
 800bb44:	d007      	beq.n	800bb56 <__any_on+0x26>
 800bb46:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800bb4a:	fa24 f001 	lsr.w	r0, r4, r1
 800bb4e:	fa00 f101 	lsl.w	r1, r0, r1
 800bb52:	428c      	cmp	r4, r1
 800bb54:	d10b      	bne.n	800bb6e <__any_on+0x3e>
 800bb56:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bb5a:	4293      	cmp	r3, r2
 800bb5c:	d803      	bhi.n	800bb66 <__any_on+0x36>
 800bb5e:	2000      	movs	r0, #0
 800bb60:	bd10      	pop	{r4, pc}
 800bb62:	4603      	mov	r3, r0
 800bb64:	e7f7      	b.n	800bb56 <__any_on+0x26>
 800bb66:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bb6a:	2900      	cmp	r1, #0
 800bb6c:	d0f5      	beq.n	800bb5a <__any_on+0x2a>
 800bb6e:	2001      	movs	r0, #1
 800bb70:	e7f6      	b.n	800bb60 <__any_on+0x30>

0800bb72 <_calloc_r>:
 800bb72:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bb74:	fba1 2402 	umull	r2, r4, r1, r2
 800bb78:	b94c      	cbnz	r4, 800bb8e <_calloc_r+0x1c>
 800bb7a:	4611      	mov	r1, r2
 800bb7c:	9201      	str	r2, [sp, #4]
 800bb7e:	f7fd ffdb 	bl	8009b38 <_malloc_r>
 800bb82:	9a01      	ldr	r2, [sp, #4]
 800bb84:	4605      	mov	r5, r0
 800bb86:	b930      	cbnz	r0, 800bb96 <_calloc_r+0x24>
 800bb88:	4628      	mov	r0, r5
 800bb8a:	b003      	add	sp, #12
 800bb8c:	bd30      	pop	{r4, r5, pc}
 800bb8e:	220c      	movs	r2, #12
 800bb90:	6002      	str	r2, [r0, #0]
 800bb92:	2500      	movs	r5, #0
 800bb94:	e7f8      	b.n	800bb88 <_calloc_r+0x16>
 800bb96:	4621      	mov	r1, r4
 800bb98:	f7fd ff5a 	bl	8009a50 <memset>
 800bb9c:	e7f4      	b.n	800bb88 <_calloc_r+0x16>

0800bb9e <__ssputs_r>:
 800bb9e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bba2:	688e      	ldr	r6, [r1, #8]
 800bba4:	429e      	cmp	r6, r3
 800bba6:	4682      	mov	sl, r0
 800bba8:	460c      	mov	r4, r1
 800bbaa:	4690      	mov	r8, r2
 800bbac:	461f      	mov	r7, r3
 800bbae:	d838      	bhi.n	800bc22 <__ssputs_r+0x84>
 800bbb0:	898a      	ldrh	r2, [r1, #12]
 800bbb2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bbb6:	d032      	beq.n	800bc1e <__ssputs_r+0x80>
 800bbb8:	6825      	ldr	r5, [r4, #0]
 800bbba:	6909      	ldr	r1, [r1, #16]
 800bbbc:	eba5 0901 	sub.w	r9, r5, r1
 800bbc0:	6965      	ldr	r5, [r4, #20]
 800bbc2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bbc6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bbca:	3301      	adds	r3, #1
 800bbcc:	444b      	add	r3, r9
 800bbce:	106d      	asrs	r5, r5, #1
 800bbd0:	429d      	cmp	r5, r3
 800bbd2:	bf38      	it	cc
 800bbd4:	461d      	movcc	r5, r3
 800bbd6:	0553      	lsls	r3, r2, #21
 800bbd8:	d531      	bpl.n	800bc3e <__ssputs_r+0xa0>
 800bbda:	4629      	mov	r1, r5
 800bbdc:	f7fd ffac 	bl	8009b38 <_malloc_r>
 800bbe0:	4606      	mov	r6, r0
 800bbe2:	b950      	cbnz	r0, 800bbfa <__ssputs_r+0x5c>
 800bbe4:	230c      	movs	r3, #12
 800bbe6:	f8ca 3000 	str.w	r3, [sl]
 800bbea:	89a3      	ldrh	r3, [r4, #12]
 800bbec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bbf0:	81a3      	strh	r3, [r4, #12]
 800bbf2:	f04f 30ff 	mov.w	r0, #4294967295
 800bbf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bbfa:	6921      	ldr	r1, [r4, #16]
 800bbfc:	464a      	mov	r2, r9
 800bbfe:	f7ff fadd 	bl	800b1bc <memcpy>
 800bc02:	89a3      	ldrh	r3, [r4, #12]
 800bc04:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bc08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bc0c:	81a3      	strh	r3, [r4, #12]
 800bc0e:	6126      	str	r6, [r4, #16]
 800bc10:	6165      	str	r5, [r4, #20]
 800bc12:	444e      	add	r6, r9
 800bc14:	eba5 0509 	sub.w	r5, r5, r9
 800bc18:	6026      	str	r6, [r4, #0]
 800bc1a:	60a5      	str	r5, [r4, #8]
 800bc1c:	463e      	mov	r6, r7
 800bc1e:	42be      	cmp	r6, r7
 800bc20:	d900      	bls.n	800bc24 <__ssputs_r+0x86>
 800bc22:	463e      	mov	r6, r7
 800bc24:	6820      	ldr	r0, [r4, #0]
 800bc26:	4632      	mov	r2, r6
 800bc28:	4641      	mov	r1, r8
 800bc2a:	f000 fb0c 	bl	800c246 <memmove>
 800bc2e:	68a3      	ldr	r3, [r4, #8]
 800bc30:	1b9b      	subs	r3, r3, r6
 800bc32:	60a3      	str	r3, [r4, #8]
 800bc34:	6823      	ldr	r3, [r4, #0]
 800bc36:	4433      	add	r3, r6
 800bc38:	6023      	str	r3, [r4, #0]
 800bc3a:	2000      	movs	r0, #0
 800bc3c:	e7db      	b.n	800bbf6 <__ssputs_r+0x58>
 800bc3e:	462a      	mov	r2, r5
 800bc40:	f000 fb1b 	bl	800c27a <_realloc_r>
 800bc44:	4606      	mov	r6, r0
 800bc46:	2800      	cmp	r0, #0
 800bc48:	d1e1      	bne.n	800bc0e <__ssputs_r+0x70>
 800bc4a:	6921      	ldr	r1, [r4, #16]
 800bc4c:	4650      	mov	r0, sl
 800bc4e:	f7fd ff07 	bl	8009a60 <_free_r>
 800bc52:	e7c7      	b.n	800bbe4 <__ssputs_r+0x46>

0800bc54 <_svfiprintf_r>:
 800bc54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc58:	4698      	mov	r8, r3
 800bc5a:	898b      	ldrh	r3, [r1, #12]
 800bc5c:	061b      	lsls	r3, r3, #24
 800bc5e:	b09d      	sub	sp, #116	; 0x74
 800bc60:	4607      	mov	r7, r0
 800bc62:	460d      	mov	r5, r1
 800bc64:	4614      	mov	r4, r2
 800bc66:	d50e      	bpl.n	800bc86 <_svfiprintf_r+0x32>
 800bc68:	690b      	ldr	r3, [r1, #16]
 800bc6a:	b963      	cbnz	r3, 800bc86 <_svfiprintf_r+0x32>
 800bc6c:	2140      	movs	r1, #64	; 0x40
 800bc6e:	f7fd ff63 	bl	8009b38 <_malloc_r>
 800bc72:	6028      	str	r0, [r5, #0]
 800bc74:	6128      	str	r0, [r5, #16]
 800bc76:	b920      	cbnz	r0, 800bc82 <_svfiprintf_r+0x2e>
 800bc78:	230c      	movs	r3, #12
 800bc7a:	603b      	str	r3, [r7, #0]
 800bc7c:	f04f 30ff 	mov.w	r0, #4294967295
 800bc80:	e0d1      	b.n	800be26 <_svfiprintf_r+0x1d2>
 800bc82:	2340      	movs	r3, #64	; 0x40
 800bc84:	616b      	str	r3, [r5, #20]
 800bc86:	2300      	movs	r3, #0
 800bc88:	9309      	str	r3, [sp, #36]	; 0x24
 800bc8a:	2320      	movs	r3, #32
 800bc8c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bc90:	f8cd 800c 	str.w	r8, [sp, #12]
 800bc94:	2330      	movs	r3, #48	; 0x30
 800bc96:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800be40 <_svfiprintf_r+0x1ec>
 800bc9a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bc9e:	f04f 0901 	mov.w	r9, #1
 800bca2:	4623      	mov	r3, r4
 800bca4:	469a      	mov	sl, r3
 800bca6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bcaa:	b10a      	cbz	r2, 800bcb0 <_svfiprintf_r+0x5c>
 800bcac:	2a25      	cmp	r2, #37	; 0x25
 800bcae:	d1f9      	bne.n	800bca4 <_svfiprintf_r+0x50>
 800bcb0:	ebba 0b04 	subs.w	fp, sl, r4
 800bcb4:	d00b      	beq.n	800bcce <_svfiprintf_r+0x7a>
 800bcb6:	465b      	mov	r3, fp
 800bcb8:	4622      	mov	r2, r4
 800bcba:	4629      	mov	r1, r5
 800bcbc:	4638      	mov	r0, r7
 800bcbe:	f7ff ff6e 	bl	800bb9e <__ssputs_r>
 800bcc2:	3001      	adds	r0, #1
 800bcc4:	f000 80aa 	beq.w	800be1c <_svfiprintf_r+0x1c8>
 800bcc8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bcca:	445a      	add	r2, fp
 800bccc:	9209      	str	r2, [sp, #36]	; 0x24
 800bcce:	f89a 3000 	ldrb.w	r3, [sl]
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	f000 80a2 	beq.w	800be1c <_svfiprintf_r+0x1c8>
 800bcd8:	2300      	movs	r3, #0
 800bcda:	f04f 32ff 	mov.w	r2, #4294967295
 800bcde:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bce2:	f10a 0a01 	add.w	sl, sl, #1
 800bce6:	9304      	str	r3, [sp, #16]
 800bce8:	9307      	str	r3, [sp, #28]
 800bcea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bcee:	931a      	str	r3, [sp, #104]	; 0x68
 800bcf0:	4654      	mov	r4, sl
 800bcf2:	2205      	movs	r2, #5
 800bcf4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bcf8:	4851      	ldr	r0, [pc, #324]	; (800be40 <_svfiprintf_r+0x1ec>)
 800bcfa:	f7f4 faa1 	bl	8000240 <memchr>
 800bcfe:	9a04      	ldr	r2, [sp, #16]
 800bd00:	b9d8      	cbnz	r0, 800bd3a <_svfiprintf_r+0xe6>
 800bd02:	06d0      	lsls	r0, r2, #27
 800bd04:	bf44      	itt	mi
 800bd06:	2320      	movmi	r3, #32
 800bd08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bd0c:	0711      	lsls	r1, r2, #28
 800bd0e:	bf44      	itt	mi
 800bd10:	232b      	movmi	r3, #43	; 0x2b
 800bd12:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bd16:	f89a 3000 	ldrb.w	r3, [sl]
 800bd1a:	2b2a      	cmp	r3, #42	; 0x2a
 800bd1c:	d015      	beq.n	800bd4a <_svfiprintf_r+0xf6>
 800bd1e:	9a07      	ldr	r2, [sp, #28]
 800bd20:	4654      	mov	r4, sl
 800bd22:	2000      	movs	r0, #0
 800bd24:	f04f 0c0a 	mov.w	ip, #10
 800bd28:	4621      	mov	r1, r4
 800bd2a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bd2e:	3b30      	subs	r3, #48	; 0x30
 800bd30:	2b09      	cmp	r3, #9
 800bd32:	d94e      	bls.n	800bdd2 <_svfiprintf_r+0x17e>
 800bd34:	b1b0      	cbz	r0, 800bd64 <_svfiprintf_r+0x110>
 800bd36:	9207      	str	r2, [sp, #28]
 800bd38:	e014      	b.n	800bd64 <_svfiprintf_r+0x110>
 800bd3a:	eba0 0308 	sub.w	r3, r0, r8
 800bd3e:	fa09 f303 	lsl.w	r3, r9, r3
 800bd42:	4313      	orrs	r3, r2
 800bd44:	9304      	str	r3, [sp, #16]
 800bd46:	46a2      	mov	sl, r4
 800bd48:	e7d2      	b.n	800bcf0 <_svfiprintf_r+0x9c>
 800bd4a:	9b03      	ldr	r3, [sp, #12]
 800bd4c:	1d19      	adds	r1, r3, #4
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	9103      	str	r1, [sp, #12]
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	bfbb      	ittet	lt
 800bd56:	425b      	neglt	r3, r3
 800bd58:	f042 0202 	orrlt.w	r2, r2, #2
 800bd5c:	9307      	strge	r3, [sp, #28]
 800bd5e:	9307      	strlt	r3, [sp, #28]
 800bd60:	bfb8      	it	lt
 800bd62:	9204      	strlt	r2, [sp, #16]
 800bd64:	7823      	ldrb	r3, [r4, #0]
 800bd66:	2b2e      	cmp	r3, #46	; 0x2e
 800bd68:	d10c      	bne.n	800bd84 <_svfiprintf_r+0x130>
 800bd6a:	7863      	ldrb	r3, [r4, #1]
 800bd6c:	2b2a      	cmp	r3, #42	; 0x2a
 800bd6e:	d135      	bne.n	800bddc <_svfiprintf_r+0x188>
 800bd70:	9b03      	ldr	r3, [sp, #12]
 800bd72:	1d1a      	adds	r2, r3, #4
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	9203      	str	r2, [sp, #12]
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	bfb8      	it	lt
 800bd7c:	f04f 33ff 	movlt.w	r3, #4294967295
 800bd80:	3402      	adds	r4, #2
 800bd82:	9305      	str	r3, [sp, #20]
 800bd84:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800be50 <_svfiprintf_r+0x1fc>
 800bd88:	7821      	ldrb	r1, [r4, #0]
 800bd8a:	2203      	movs	r2, #3
 800bd8c:	4650      	mov	r0, sl
 800bd8e:	f7f4 fa57 	bl	8000240 <memchr>
 800bd92:	b140      	cbz	r0, 800bda6 <_svfiprintf_r+0x152>
 800bd94:	2340      	movs	r3, #64	; 0x40
 800bd96:	eba0 000a 	sub.w	r0, r0, sl
 800bd9a:	fa03 f000 	lsl.w	r0, r3, r0
 800bd9e:	9b04      	ldr	r3, [sp, #16]
 800bda0:	4303      	orrs	r3, r0
 800bda2:	3401      	adds	r4, #1
 800bda4:	9304      	str	r3, [sp, #16]
 800bda6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bdaa:	4826      	ldr	r0, [pc, #152]	; (800be44 <_svfiprintf_r+0x1f0>)
 800bdac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bdb0:	2206      	movs	r2, #6
 800bdb2:	f7f4 fa45 	bl	8000240 <memchr>
 800bdb6:	2800      	cmp	r0, #0
 800bdb8:	d038      	beq.n	800be2c <_svfiprintf_r+0x1d8>
 800bdba:	4b23      	ldr	r3, [pc, #140]	; (800be48 <_svfiprintf_r+0x1f4>)
 800bdbc:	bb1b      	cbnz	r3, 800be06 <_svfiprintf_r+0x1b2>
 800bdbe:	9b03      	ldr	r3, [sp, #12]
 800bdc0:	3307      	adds	r3, #7
 800bdc2:	f023 0307 	bic.w	r3, r3, #7
 800bdc6:	3308      	adds	r3, #8
 800bdc8:	9303      	str	r3, [sp, #12]
 800bdca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bdcc:	4433      	add	r3, r6
 800bdce:	9309      	str	r3, [sp, #36]	; 0x24
 800bdd0:	e767      	b.n	800bca2 <_svfiprintf_r+0x4e>
 800bdd2:	fb0c 3202 	mla	r2, ip, r2, r3
 800bdd6:	460c      	mov	r4, r1
 800bdd8:	2001      	movs	r0, #1
 800bdda:	e7a5      	b.n	800bd28 <_svfiprintf_r+0xd4>
 800bddc:	2300      	movs	r3, #0
 800bdde:	3401      	adds	r4, #1
 800bde0:	9305      	str	r3, [sp, #20]
 800bde2:	4619      	mov	r1, r3
 800bde4:	f04f 0c0a 	mov.w	ip, #10
 800bde8:	4620      	mov	r0, r4
 800bdea:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bdee:	3a30      	subs	r2, #48	; 0x30
 800bdf0:	2a09      	cmp	r2, #9
 800bdf2:	d903      	bls.n	800bdfc <_svfiprintf_r+0x1a8>
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d0c5      	beq.n	800bd84 <_svfiprintf_r+0x130>
 800bdf8:	9105      	str	r1, [sp, #20]
 800bdfa:	e7c3      	b.n	800bd84 <_svfiprintf_r+0x130>
 800bdfc:	fb0c 2101 	mla	r1, ip, r1, r2
 800be00:	4604      	mov	r4, r0
 800be02:	2301      	movs	r3, #1
 800be04:	e7f0      	b.n	800bde8 <_svfiprintf_r+0x194>
 800be06:	ab03      	add	r3, sp, #12
 800be08:	9300      	str	r3, [sp, #0]
 800be0a:	462a      	mov	r2, r5
 800be0c:	4b0f      	ldr	r3, [pc, #60]	; (800be4c <_svfiprintf_r+0x1f8>)
 800be0e:	a904      	add	r1, sp, #16
 800be10:	4638      	mov	r0, r7
 800be12:	f3af 8000 	nop.w
 800be16:	1c42      	adds	r2, r0, #1
 800be18:	4606      	mov	r6, r0
 800be1a:	d1d6      	bne.n	800bdca <_svfiprintf_r+0x176>
 800be1c:	89ab      	ldrh	r3, [r5, #12]
 800be1e:	065b      	lsls	r3, r3, #25
 800be20:	f53f af2c 	bmi.w	800bc7c <_svfiprintf_r+0x28>
 800be24:	9809      	ldr	r0, [sp, #36]	; 0x24
 800be26:	b01d      	add	sp, #116	; 0x74
 800be28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be2c:	ab03      	add	r3, sp, #12
 800be2e:	9300      	str	r3, [sp, #0]
 800be30:	462a      	mov	r2, r5
 800be32:	4b06      	ldr	r3, [pc, #24]	; (800be4c <_svfiprintf_r+0x1f8>)
 800be34:	a904      	add	r1, sp, #16
 800be36:	4638      	mov	r0, r7
 800be38:	f000 f87a 	bl	800bf30 <_printf_i>
 800be3c:	e7eb      	b.n	800be16 <_svfiprintf_r+0x1c2>
 800be3e:	bf00      	nop
 800be40:	0800d2c4 	.word	0x0800d2c4
 800be44:	0800d2ce 	.word	0x0800d2ce
 800be48:	00000000 	.word	0x00000000
 800be4c:	0800bb9f 	.word	0x0800bb9f
 800be50:	0800d2ca 	.word	0x0800d2ca

0800be54 <_printf_common>:
 800be54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be58:	4616      	mov	r6, r2
 800be5a:	4699      	mov	r9, r3
 800be5c:	688a      	ldr	r2, [r1, #8]
 800be5e:	690b      	ldr	r3, [r1, #16]
 800be60:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800be64:	4293      	cmp	r3, r2
 800be66:	bfb8      	it	lt
 800be68:	4613      	movlt	r3, r2
 800be6a:	6033      	str	r3, [r6, #0]
 800be6c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800be70:	4607      	mov	r7, r0
 800be72:	460c      	mov	r4, r1
 800be74:	b10a      	cbz	r2, 800be7a <_printf_common+0x26>
 800be76:	3301      	adds	r3, #1
 800be78:	6033      	str	r3, [r6, #0]
 800be7a:	6823      	ldr	r3, [r4, #0]
 800be7c:	0699      	lsls	r1, r3, #26
 800be7e:	bf42      	ittt	mi
 800be80:	6833      	ldrmi	r3, [r6, #0]
 800be82:	3302      	addmi	r3, #2
 800be84:	6033      	strmi	r3, [r6, #0]
 800be86:	6825      	ldr	r5, [r4, #0]
 800be88:	f015 0506 	ands.w	r5, r5, #6
 800be8c:	d106      	bne.n	800be9c <_printf_common+0x48>
 800be8e:	f104 0a19 	add.w	sl, r4, #25
 800be92:	68e3      	ldr	r3, [r4, #12]
 800be94:	6832      	ldr	r2, [r6, #0]
 800be96:	1a9b      	subs	r3, r3, r2
 800be98:	42ab      	cmp	r3, r5
 800be9a:	dc26      	bgt.n	800beea <_printf_common+0x96>
 800be9c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bea0:	1e13      	subs	r3, r2, #0
 800bea2:	6822      	ldr	r2, [r4, #0]
 800bea4:	bf18      	it	ne
 800bea6:	2301      	movne	r3, #1
 800bea8:	0692      	lsls	r2, r2, #26
 800beaa:	d42b      	bmi.n	800bf04 <_printf_common+0xb0>
 800beac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800beb0:	4649      	mov	r1, r9
 800beb2:	4638      	mov	r0, r7
 800beb4:	47c0      	blx	r8
 800beb6:	3001      	adds	r0, #1
 800beb8:	d01e      	beq.n	800bef8 <_printf_common+0xa4>
 800beba:	6823      	ldr	r3, [r4, #0]
 800bebc:	68e5      	ldr	r5, [r4, #12]
 800bebe:	6832      	ldr	r2, [r6, #0]
 800bec0:	f003 0306 	and.w	r3, r3, #6
 800bec4:	2b04      	cmp	r3, #4
 800bec6:	bf08      	it	eq
 800bec8:	1aad      	subeq	r5, r5, r2
 800beca:	68a3      	ldr	r3, [r4, #8]
 800becc:	6922      	ldr	r2, [r4, #16]
 800bece:	bf0c      	ite	eq
 800bed0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bed4:	2500      	movne	r5, #0
 800bed6:	4293      	cmp	r3, r2
 800bed8:	bfc4      	itt	gt
 800beda:	1a9b      	subgt	r3, r3, r2
 800bedc:	18ed      	addgt	r5, r5, r3
 800bede:	2600      	movs	r6, #0
 800bee0:	341a      	adds	r4, #26
 800bee2:	42b5      	cmp	r5, r6
 800bee4:	d11a      	bne.n	800bf1c <_printf_common+0xc8>
 800bee6:	2000      	movs	r0, #0
 800bee8:	e008      	b.n	800befc <_printf_common+0xa8>
 800beea:	2301      	movs	r3, #1
 800beec:	4652      	mov	r2, sl
 800beee:	4649      	mov	r1, r9
 800bef0:	4638      	mov	r0, r7
 800bef2:	47c0      	blx	r8
 800bef4:	3001      	adds	r0, #1
 800bef6:	d103      	bne.n	800bf00 <_printf_common+0xac>
 800bef8:	f04f 30ff 	mov.w	r0, #4294967295
 800befc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf00:	3501      	adds	r5, #1
 800bf02:	e7c6      	b.n	800be92 <_printf_common+0x3e>
 800bf04:	18e1      	adds	r1, r4, r3
 800bf06:	1c5a      	adds	r2, r3, #1
 800bf08:	2030      	movs	r0, #48	; 0x30
 800bf0a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bf0e:	4422      	add	r2, r4
 800bf10:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bf14:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bf18:	3302      	adds	r3, #2
 800bf1a:	e7c7      	b.n	800beac <_printf_common+0x58>
 800bf1c:	2301      	movs	r3, #1
 800bf1e:	4622      	mov	r2, r4
 800bf20:	4649      	mov	r1, r9
 800bf22:	4638      	mov	r0, r7
 800bf24:	47c0      	blx	r8
 800bf26:	3001      	adds	r0, #1
 800bf28:	d0e6      	beq.n	800bef8 <_printf_common+0xa4>
 800bf2a:	3601      	adds	r6, #1
 800bf2c:	e7d9      	b.n	800bee2 <_printf_common+0x8e>
	...

0800bf30 <_printf_i>:
 800bf30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bf34:	7e0f      	ldrb	r7, [r1, #24]
 800bf36:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bf38:	2f78      	cmp	r7, #120	; 0x78
 800bf3a:	4691      	mov	r9, r2
 800bf3c:	4680      	mov	r8, r0
 800bf3e:	460c      	mov	r4, r1
 800bf40:	469a      	mov	sl, r3
 800bf42:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800bf46:	d807      	bhi.n	800bf58 <_printf_i+0x28>
 800bf48:	2f62      	cmp	r7, #98	; 0x62
 800bf4a:	d80a      	bhi.n	800bf62 <_printf_i+0x32>
 800bf4c:	2f00      	cmp	r7, #0
 800bf4e:	f000 80d8 	beq.w	800c102 <_printf_i+0x1d2>
 800bf52:	2f58      	cmp	r7, #88	; 0x58
 800bf54:	f000 80a3 	beq.w	800c09e <_printf_i+0x16e>
 800bf58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bf5c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bf60:	e03a      	b.n	800bfd8 <_printf_i+0xa8>
 800bf62:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bf66:	2b15      	cmp	r3, #21
 800bf68:	d8f6      	bhi.n	800bf58 <_printf_i+0x28>
 800bf6a:	a101      	add	r1, pc, #4	; (adr r1, 800bf70 <_printf_i+0x40>)
 800bf6c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bf70:	0800bfc9 	.word	0x0800bfc9
 800bf74:	0800bfdd 	.word	0x0800bfdd
 800bf78:	0800bf59 	.word	0x0800bf59
 800bf7c:	0800bf59 	.word	0x0800bf59
 800bf80:	0800bf59 	.word	0x0800bf59
 800bf84:	0800bf59 	.word	0x0800bf59
 800bf88:	0800bfdd 	.word	0x0800bfdd
 800bf8c:	0800bf59 	.word	0x0800bf59
 800bf90:	0800bf59 	.word	0x0800bf59
 800bf94:	0800bf59 	.word	0x0800bf59
 800bf98:	0800bf59 	.word	0x0800bf59
 800bf9c:	0800c0e9 	.word	0x0800c0e9
 800bfa0:	0800c00d 	.word	0x0800c00d
 800bfa4:	0800c0cb 	.word	0x0800c0cb
 800bfa8:	0800bf59 	.word	0x0800bf59
 800bfac:	0800bf59 	.word	0x0800bf59
 800bfb0:	0800c10b 	.word	0x0800c10b
 800bfb4:	0800bf59 	.word	0x0800bf59
 800bfb8:	0800c00d 	.word	0x0800c00d
 800bfbc:	0800bf59 	.word	0x0800bf59
 800bfc0:	0800bf59 	.word	0x0800bf59
 800bfc4:	0800c0d3 	.word	0x0800c0d3
 800bfc8:	682b      	ldr	r3, [r5, #0]
 800bfca:	1d1a      	adds	r2, r3, #4
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	602a      	str	r2, [r5, #0]
 800bfd0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bfd4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bfd8:	2301      	movs	r3, #1
 800bfda:	e0a3      	b.n	800c124 <_printf_i+0x1f4>
 800bfdc:	6820      	ldr	r0, [r4, #0]
 800bfde:	6829      	ldr	r1, [r5, #0]
 800bfe0:	0606      	lsls	r6, r0, #24
 800bfe2:	f101 0304 	add.w	r3, r1, #4
 800bfe6:	d50a      	bpl.n	800bffe <_printf_i+0xce>
 800bfe8:	680e      	ldr	r6, [r1, #0]
 800bfea:	602b      	str	r3, [r5, #0]
 800bfec:	2e00      	cmp	r6, #0
 800bfee:	da03      	bge.n	800bff8 <_printf_i+0xc8>
 800bff0:	232d      	movs	r3, #45	; 0x2d
 800bff2:	4276      	negs	r6, r6
 800bff4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bff8:	485e      	ldr	r0, [pc, #376]	; (800c174 <_printf_i+0x244>)
 800bffa:	230a      	movs	r3, #10
 800bffc:	e019      	b.n	800c032 <_printf_i+0x102>
 800bffe:	680e      	ldr	r6, [r1, #0]
 800c000:	602b      	str	r3, [r5, #0]
 800c002:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c006:	bf18      	it	ne
 800c008:	b236      	sxthne	r6, r6
 800c00a:	e7ef      	b.n	800bfec <_printf_i+0xbc>
 800c00c:	682b      	ldr	r3, [r5, #0]
 800c00e:	6820      	ldr	r0, [r4, #0]
 800c010:	1d19      	adds	r1, r3, #4
 800c012:	6029      	str	r1, [r5, #0]
 800c014:	0601      	lsls	r1, r0, #24
 800c016:	d501      	bpl.n	800c01c <_printf_i+0xec>
 800c018:	681e      	ldr	r6, [r3, #0]
 800c01a:	e002      	b.n	800c022 <_printf_i+0xf2>
 800c01c:	0646      	lsls	r6, r0, #25
 800c01e:	d5fb      	bpl.n	800c018 <_printf_i+0xe8>
 800c020:	881e      	ldrh	r6, [r3, #0]
 800c022:	4854      	ldr	r0, [pc, #336]	; (800c174 <_printf_i+0x244>)
 800c024:	2f6f      	cmp	r7, #111	; 0x6f
 800c026:	bf0c      	ite	eq
 800c028:	2308      	moveq	r3, #8
 800c02a:	230a      	movne	r3, #10
 800c02c:	2100      	movs	r1, #0
 800c02e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c032:	6865      	ldr	r5, [r4, #4]
 800c034:	60a5      	str	r5, [r4, #8]
 800c036:	2d00      	cmp	r5, #0
 800c038:	bfa2      	ittt	ge
 800c03a:	6821      	ldrge	r1, [r4, #0]
 800c03c:	f021 0104 	bicge.w	r1, r1, #4
 800c040:	6021      	strge	r1, [r4, #0]
 800c042:	b90e      	cbnz	r6, 800c048 <_printf_i+0x118>
 800c044:	2d00      	cmp	r5, #0
 800c046:	d04d      	beq.n	800c0e4 <_printf_i+0x1b4>
 800c048:	4615      	mov	r5, r2
 800c04a:	fbb6 f1f3 	udiv	r1, r6, r3
 800c04e:	fb03 6711 	mls	r7, r3, r1, r6
 800c052:	5dc7      	ldrb	r7, [r0, r7]
 800c054:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c058:	4637      	mov	r7, r6
 800c05a:	42bb      	cmp	r3, r7
 800c05c:	460e      	mov	r6, r1
 800c05e:	d9f4      	bls.n	800c04a <_printf_i+0x11a>
 800c060:	2b08      	cmp	r3, #8
 800c062:	d10b      	bne.n	800c07c <_printf_i+0x14c>
 800c064:	6823      	ldr	r3, [r4, #0]
 800c066:	07de      	lsls	r6, r3, #31
 800c068:	d508      	bpl.n	800c07c <_printf_i+0x14c>
 800c06a:	6923      	ldr	r3, [r4, #16]
 800c06c:	6861      	ldr	r1, [r4, #4]
 800c06e:	4299      	cmp	r1, r3
 800c070:	bfde      	ittt	le
 800c072:	2330      	movle	r3, #48	; 0x30
 800c074:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c078:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c07c:	1b52      	subs	r2, r2, r5
 800c07e:	6122      	str	r2, [r4, #16]
 800c080:	f8cd a000 	str.w	sl, [sp]
 800c084:	464b      	mov	r3, r9
 800c086:	aa03      	add	r2, sp, #12
 800c088:	4621      	mov	r1, r4
 800c08a:	4640      	mov	r0, r8
 800c08c:	f7ff fee2 	bl	800be54 <_printf_common>
 800c090:	3001      	adds	r0, #1
 800c092:	d14c      	bne.n	800c12e <_printf_i+0x1fe>
 800c094:	f04f 30ff 	mov.w	r0, #4294967295
 800c098:	b004      	add	sp, #16
 800c09a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c09e:	4835      	ldr	r0, [pc, #212]	; (800c174 <_printf_i+0x244>)
 800c0a0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c0a4:	6829      	ldr	r1, [r5, #0]
 800c0a6:	6823      	ldr	r3, [r4, #0]
 800c0a8:	f851 6b04 	ldr.w	r6, [r1], #4
 800c0ac:	6029      	str	r1, [r5, #0]
 800c0ae:	061d      	lsls	r5, r3, #24
 800c0b0:	d514      	bpl.n	800c0dc <_printf_i+0x1ac>
 800c0b2:	07df      	lsls	r7, r3, #31
 800c0b4:	bf44      	itt	mi
 800c0b6:	f043 0320 	orrmi.w	r3, r3, #32
 800c0ba:	6023      	strmi	r3, [r4, #0]
 800c0bc:	b91e      	cbnz	r6, 800c0c6 <_printf_i+0x196>
 800c0be:	6823      	ldr	r3, [r4, #0]
 800c0c0:	f023 0320 	bic.w	r3, r3, #32
 800c0c4:	6023      	str	r3, [r4, #0]
 800c0c6:	2310      	movs	r3, #16
 800c0c8:	e7b0      	b.n	800c02c <_printf_i+0xfc>
 800c0ca:	6823      	ldr	r3, [r4, #0]
 800c0cc:	f043 0320 	orr.w	r3, r3, #32
 800c0d0:	6023      	str	r3, [r4, #0]
 800c0d2:	2378      	movs	r3, #120	; 0x78
 800c0d4:	4828      	ldr	r0, [pc, #160]	; (800c178 <_printf_i+0x248>)
 800c0d6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c0da:	e7e3      	b.n	800c0a4 <_printf_i+0x174>
 800c0dc:	0659      	lsls	r1, r3, #25
 800c0de:	bf48      	it	mi
 800c0e0:	b2b6      	uxthmi	r6, r6
 800c0e2:	e7e6      	b.n	800c0b2 <_printf_i+0x182>
 800c0e4:	4615      	mov	r5, r2
 800c0e6:	e7bb      	b.n	800c060 <_printf_i+0x130>
 800c0e8:	682b      	ldr	r3, [r5, #0]
 800c0ea:	6826      	ldr	r6, [r4, #0]
 800c0ec:	6961      	ldr	r1, [r4, #20]
 800c0ee:	1d18      	adds	r0, r3, #4
 800c0f0:	6028      	str	r0, [r5, #0]
 800c0f2:	0635      	lsls	r5, r6, #24
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	d501      	bpl.n	800c0fc <_printf_i+0x1cc>
 800c0f8:	6019      	str	r1, [r3, #0]
 800c0fa:	e002      	b.n	800c102 <_printf_i+0x1d2>
 800c0fc:	0670      	lsls	r0, r6, #25
 800c0fe:	d5fb      	bpl.n	800c0f8 <_printf_i+0x1c8>
 800c100:	8019      	strh	r1, [r3, #0]
 800c102:	2300      	movs	r3, #0
 800c104:	6123      	str	r3, [r4, #16]
 800c106:	4615      	mov	r5, r2
 800c108:	e7ba      	b.n	800c080 <_printf_i+0x150>
 800c10a:	682b      	ldr	r3, [r5, #0]
 800c10c:	1d1a      	adds	r2, r3, #4
 800c10e:	602a      	str	r2, [r5, #0]
 800c110:	681d      	ldr	r5, [r3, #0]
 800c112:	6862      	ldr	r2, [r4, #4]
 800c114:	2100      	movs	r1, #0
 800c116:	4628      	mov	r0, r5
 800c118:	f7f4 f892 	bl	8000240 <memchr>
 800c11c:	b108      	cbz	r0, 800c122 <_printf_i+0x1f2>
 800c11e:	1b40      	subs	r0, r0, r5
 800c120:	6060      	str	r0, [r4, #4]
 800c122:	6863      	ldr	r3, [r4, #4]
 800c124:	6123      	str	r3, [r4, #16]
 800c126:	2300      	movs	r3, #0
 800c128:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c12c:	e7a8      	b.n	800c080 <_printf_i+0x150>
 800c12e:	6923      	ldr	r3, [r4, #16]
 800c130:	462a      	mov	r2, r5
 800c132:	4649      	mov	r1, r9
 800c134:	4640      	mov	r0, r8
 800c136:	47d0      	blx	sl
 800c138:	3001      	adds	r0, #1
 800c13a:	d0ab      	beq.n	800c094 <_printf_i+0x164>
 800c13c:	6823      	ldr	r3, [r4, #0]
 800c13e:	079b      	lsls	r3, r3, #30
 800c140:	d413      	bmi.n	800c16a <_printf_i+0x23a>
 800c142:	68e0      	ldr	r0, [r4, #12]
 800c144:	9b03      	ldr	r3, [sp, #12]
 800c146:	4298      	cmp	r0, r3
 800c148:	bfb8      	it	lt
 800c14a:	4618      	movlt	r0, r3
 800c14c:	e7a4      	b.n	800c098 <_printf_i+0x168>
 800c14e:	2301      	movs	r3, #1
 800c150:	4632      	mov	r2, r6
 800c152:	4649      	mov	r1, r9
 800c154:	4640      	mov	r0, r8
 800c156:	47d0      	blx	sl
 800c158:	3001      	adds	r0, #1
 800c15a:	d09b      	beq.n	800c094 <_printf_i+0x164>
 800c15c:	3501      	adds	r5, #1
 800c15e:	68e3      	ldr	r3, [r4, #12]
 800c160:	9903      	ldr	r1, [sp, #12]
 800c162:	1a5b      	subs	r3, r3, r1
 800c164:	42ab      	cmp	r3, r5
 800c166:	dcf2      	bgt.n	800c14e <_printf_i+0x21e>
 800c168:	e7eb      	b.n	800c142 <_printf_i+0x212>
 800c16a:	2500      	movs	r5, #0
 800c16c:	f104 0619 	add.w	r6, r4, #25
 800c170:	e7f5      	b.n	800c15e <_printf_i+0x22e>
 800c172:	bf00      	nop
 800c174:	0800d2d5 	.word	0x0800d2d5
 800c178:	0800d2e6 	.word	0x0800d2e6
 800c17c:	00000000 	.word	0x00000000

0800c180 <nan>:
 800c180:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c188 <nan+0x8>
 800c184:	4770      	bx	lr
 800c186:	bf00      	nop
 800c188:	00000000 	.word	0x00000000
 800c18c:	7ff80000 	.word	0x7ff80000

0800c190 <nanf>:
 800c190:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800c198 <nanf+0x8>
 800c194:	4770      	bx	lr
 800c196:	bf00      	nop
 800c198:	7fc00000 	.word	0x7fc00000

0800c19c <strncmp>:
 800c19c:	b510      	push	{r4, lr}
 800c19e:	b17a      	cbz	r2, 800c1c0 <strncmp+0x24>
 800c1a0:	4603      	mov	r3, r0
 800c1a2:	3901      	subs	r1, #1
 800c1a4:	1884      	adds	r4, r0, r2
 800c1a6:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c1aa:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c1ae:	4290      	cmp	r0, r2
 800c1b0:	d101      	bne.n	800c1b6 <strncmp+0x1a>
 800c1b2:	42a3      	cmp	r3, r4
 800c1b4:	d101      	bne.n	800c1ba <strncmp+0x1e>
 800c1b6:	1a80      	subs	r0, r0, r2
 800c1b8:	bd10      	pop	{r4, pc}
 800c1ba:	2800      	cmp	r0, #0
 800c1bc:	d1f3      	bne.n	800c1a6 <strncmp+0xa>
 800c1be:	e7fa      	b.n	800c1b6 <strncmp+0x1a>
 800c1c0:	4610      	mov	r0, r2
 800c1c2:	e7f9      	b.n	800c1b8 <strncmp+0x1c>

0800c1c4 <__ascii_wctomb>:
 800c1c4:	b149      	cbz	r1, 800c1da <__ascii_wctomb+0x16>
 800c1c6:	2aff      	cmp	r2, #255	; 0xff
 800c1c8:	bf85      	ittet	hi
 800c1ca:	238a      	movhi	r3, #138	; 0x8a
 800c1cc:	6003      	strhi	r3, [r0, #0]
 800c1ce:	700a      	strbls	r2, [r1, #0]
 800c1d0:	f04f 30ff 	movhi.w	r0, #4294967295
 800c1d4:	bf98      	it	ls
 800c1d6:	2001      	movls	r0, #1
 800c1d8:	4770      	bx	lr
 800c1da:	4608      	mov	r0, r1
 800c1dc:	4770      	bx	lr
	...

0800c1e0 <__assert_func>:
 800c1e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c1e2:	4614      	mov	r4, r2
 800c1e4:	461a      	mov	r2, r3
 800c1e6:	4b09      	ldr	r3, [pc, #36]	; (800c20c <__assert_func+0x2c>)
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	4605      	mov	r5, r0
 800c1ec:	68d8      	ldr	r0, [r3, #12]
 800c1ee:	b14c      	cbz	r4, 800c204 <__assert_func+0x24>
 800c1f0:	4b07      	ldr	r3, [pc, #28]	; (800c210 <__assert_func+0x30>)
 800c1f2:	9100      	str	r1, [sp, #0]
 800c1f4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c1f8:	4906      	ldr	r1, [pc, #24]	; (800c214 <__assert_func+0x34>)
 800c1fa:	462b      	mov	r3, r5
 800c1fc:	f000 f80e 	bl	800c21c <fiprintf>
 800c200:	f000 fa84 	bl	800c70c <abort>
 800c204:	4b04      	ldr	r3, [pc, #16]	; (800c218 <__assert_func+0x38>)
 800c206:	461c      	mov	r4, r3
 800c208:	e7f3      	b.n	800c1f2 <__assert_func+0x12>
 800c20a:	bf00      	nop
 800c20c:	20000168 	.word	0x20000168
 800c210:	0800d2f7 	.word	0x0800d2f7
 800c214:	0800d304 	.word	0x0800d304
 800c218:	0800d332 	.word	0x0800d332

0800c21c <fiprintf>:
 800c21c:	b40e      	push	{r1, r2, r3}
 800c21e:	b503      	push	{r0, r1, lr}
 800c220:	4601      	mov	r1, r0
 800c222:	ab03      	add	r3, sp, #12
 800c224:	4805      	ldr	r0, [pc, #20]	; (800c23c <fiprintf+0x20>)
 800c226:	f853 2b04 	ldr.w	r2, [r3], #4
 800c22a:	6800      	ldr	r0, [r0, #0]
 800c22c:	9301      	str	r3, [sp, #4]
 800c22e:	f000 f87d 	bl	800c32c <_vfiprintf_r>
 800c232:	b002      	add	sp, #8
 800c234:	f85d eb04 	ldr.w	lr, [sp], #4
 800c238:	b003      	add	sp, #12
 800c23a:	4770      	bx	lr
 800c23c:	20000168 	.word	0x20000168

0800c240 <__retarget_lock_init_recursive>:
 800c240:	4770      	bx	lr

0800c242 <__retarget_lock_acquire_recursive>:
 800c242:	4770      	bx	lr

0800c244 <__retarget_lock_release_recursive>:
 800c244:	4770      	bx	lr

0800c246 <memmove>:
 800c246:	4288      	cmp	r0, r1
 800c248:	b510      	push	{r4, lr}
 800c24a:	eb01 0402 	add.w	r4, r1, r2
 800c24e:	d902      	bls.n	800c256 <memmove+0x10>
 800c250:	4284      	cmp	r4, r0
 800c252:	4623      	mov	r3, r4
 800c254:	d807      	bhi.n	800c266 <memmove+0x20>
 800c256:	1e43      	subs	r3, r0, #1
 800c258:	42a1      	cmp	r1, r4
 800c25a:	d008      	beq.n	800c26e <memmove+0x28>
 800c25c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c260:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c264:	e7f8      	b.n	800c258 <memmove+0x12>
 800c266:	4402      	add	r2, r0
 800c268:	4601      	mov	r1, r0
 800c26a:	428a      	cmp	r2, r1
 800c26c:	d100      	bne.n	800c270 <memmove+0x2a>
 800c26e:	bd10      	pop	{r4, pc}
 800c270:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c274:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c278:	e7f7      	b.n	800c26a <memmove+0x24>

0800c27a <_realloc_r>:
 800c27a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c27e:	4680      	mov	r8, r0
 800c280:	4614      	mov	r4, r2
 800c282:	460e      	mov	r6, r1
 800c284:	b921      	cbnz	r1, 800c290 <_realloc_r+0x16>
 800c286:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c28a:	4611      	mov	r1, r2
 800c28c:	f7fd bc54 	b.w	8009b38 <_malloc_r>
 800c290:	b92a      	cbnz	r2, 800c29e <_realloc_r+0x24>
 800c292:	f7fd fbe5 	bl	8009a60 <_free_r>
 800c296:	4625      	mov	r5, r4
 800c298:	4628      	mov	r0, r5
 800c29a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c29e:	f000 fc59 	bl	800cb54 <_malloc_usable_size_r>
 800c2a2:	4284      	cmp	r4, r0
 800c2a4:	4607      	mov	r7, r0
 800c2a6:	d802      	bhi.n	800c2ae <_realloc_r+0x34>
 800c2a8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c2ac:	d812      	bhi.n	800c2d4 <_realloc_r+0x5a>
 800c2ae:	4621      	mov	r1, r4
 800c2b0:	4640      	mov	r0, r8
 800c2b2:	f7fd fc41 	bl	8009b38 <_malloc_r>
 800c2b6:	4605      	mov	r5, r0
 800c2b8:	2800      	cmp	r0, #0
 800c2ba:	d0ed      	beq.n	800c298 <_realloc_r+0x1e>
 800c2bc:	42bc      	cmp	r4, r7
 800c2be:	4622      	mov	r2, r4
 800c2c0:	4631      	mov	r1, r6
 800c2c2:	bf28      	it	cs
 800c2c4:	463a      	movcs	r2, r7
 800c2c6:	f7fe ff79 	bl	800b1bc <memcpy>
 800c2ca:	4631      	mov	r1, r6
 800c2cc:	4640      	mov	r0, r8
 800c2ce:	f7fd fbc7 	bl	8009a60 <_free_r>
 800c2d2:	e7e1      	b.n	800c298 <_realloc_r+0x1e>
 800c2d4:	4635      	mov	r5, r6
 800c2d6:	e7df      	b.n	800c298 <_realloc_r+0x1e>

0800c2d8 <__sfputc_r>:
 800c2d8:	6893      	ldr	r3, [r2, #8]
 800c2da:	3b01      	subs	r3, #1
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	b410      	push	{r4}
 800c2e0:	6093      	str	r3, [r2, #8]
 800c2e2:	da08      	bge.n	800c2f6 <__sfputc_r+0x1e>
 800c2e4:	6994      	ldr	r4, [r2, #24]
 800c2e6:	42a3      	cmp	r3, r4
 800c2e8:	db01      	blt.n	800c2ee <__sfputc_r+0x16>
 800c2ea:	290a      	cmp	r1, #10
 800c2ec:	d103      	bne.n	800c2f6 <__sfputc_r+0x1e>
 800c2ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c2f2:	f000 b94b 	b.w	800c58c <__swbuf_r>
 800c2f6:	6813      	ldr	r3, [r2, #0]
 800c2f8:	1c58      	adds	r0, r3, #1
 800c2fa:	6010      	str	r0, [r2, #0]
 800c2fc:	7019      	strb	r1, [r3, #0]
 800c2fe:	4608      	mov	r0, r1
 800c300:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c304:	4770      	bx	lr

0800c306 <__sfputs_r>:
 800c306:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c308:	4606      	mov	r6, r0
 800c30a:	460f      	mov	r7, r1
 800c30c:	4614      	mov	r4, r2
 800c30e:	18d5      	adds	r5, r2, r3
 800c310:	42ac      	cmp	r4, r5
 800c312:	d101      	bne.n	800c318 <__sfputs_r+0x12>
 800c314:	2000      	movs	r0, #0
 800c316:	e007      	b.n	800c328 <__sfputs_r+0x22>
 800c318:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c31c:	463a      	mov	r2, r7
 800c31e:	4630      	mov	r0, r6
 800c320:	f7ff ffda 	bl	800c2d8 <__sfputc_r>
 800c324:	1c43      	adds	r3, r0, #1
 800c326:	d1f3      	bne.n	800c310 <__sfputs_r+0xa>
 800c328:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c32c <_vfiprintf_r>:
 800c32c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c330:	460d      	mov	r5, r1
 800c332:	b09d      	sub	sp, #116	; 0x74
 800c334:	4614      	mov	r4, r2
 800c336:	4698      	mov	r8, r3
 800c338:	4606      	mov	r6, r0
 800c33a:	b118      	cbz	r0, 800c344 <_vfiprintf_r+0x18>
 800c33c:	6983      	ldr	r3, [r0, #24]
 800c33e:	b90b      	cbnz	r3, 800c344 <_vfiprintf_r+0x18>
 800c340:	f000 fb06 	bl	800c950 <__sinit>
 800c344:	4b89      	ldr	r3, [pc, #548]	; (800c56c <_vfiprintf_r+0x240>)
 800c346:	429d      	cmp	r5, r3
 800c348:	d11b      	bne.n	800c382 <_vfiprintf_r+0x56>
 800c34a:	6875      	ldr	r5, [r6, #4]
 800c34c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c34e:	07d9      	lsls	r1, r3, #31
 800c350:	d405      	bmi.n	800c35e <_vfiprintf_r+0x32>
 800c352:	89ab      	ldrh	r3, [r5, #12]
 800c354:	059a      	lsls	r2, r3, #22
 800c356:	d402      	bmi.n	800c35e <_vfiprintf_r+0x32>
 800c358:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c35a:	f7ff ff72 	bl	800c242 <__retarget_lock_acquire_recursive>
 800c35e:	89ab      	ldrh	r3, [r5, #12]
 800c360:	071b      	lsls	r3, r3, #28
 800c362:	d501      	bpl.n	800c368 <_vfiprintf_r+0x3c>
 800c364:	692b      	ldr	r3, [r5, #16]
 800c366:	b9eb      	cbnz	r3, 800c3a4 <_vfiprintf_r+0x78>
 800c368:	4629      	mov	r1, r5
 800c36a:	4630      	mov	r0, r6
 800c36c:	f000 f960 	bl	800c630 <__swsetup_r>
 800c370:	b1c0      	cbz	r0, 800c3a4 <_vfiprintf_r+0x78>
 800c372:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c374:	07dc      	lsls	r4, r3, #31
 800c376:	d50e      	bpl.n	800c396 <_vfiprintf_r+0x6a>
 800c378:	f04f 30ff 	mov.w	r0, #4294967295
 800c37c:	b01d      	add	sp, #116	; 0x74
 800c37e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c382:	4b7b      	ldr	r3, [pc, #492]	; (800c570 <_vfiprintf_r+0x244>)
 800c384:	429d      	cmp	r5, r3
 800c386:	d101      	bne.n	800c38c <_vfiprintf_r+0x60>
 800c388:	68b5      	ldr	r5, [r6, #8]
 800c38a:	e7df      	b.n	800c34c <_vfiprintf_r+0x20>
 800c38c:	4b79      	ldr	r3, [pc, #484]	; (800c574 <_vfiprintf_r+0x248>)
 800c38e:	429d      	cmp	r5, r3
 800c390:	bf08      	it	eq
 800c392:	68f5      	ldreq	r5, [r6, #12]
 800c394:	e7da      	b.n	800c34c <_vfiprintf_r+0x20>
 800c396:	89ab      	ldrh	r3, [r5, #12]
 800c398:	0598      	lsls	r0, r3, #22
 800c39a:	d4ed      	bmi.n	800c378 <_vfiprintf_r+0x4c>
 800c39c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c39e:	f7ff ff51 	bl	800c244 <__retarget_lock_release_recursive>
 800c3a2:	e7e9      	b.n	800c378 <_vfiprintf_r+0x4c>
 800c3a4:	2300      	movs	r3, #0
 800c3a6:	9309      	str	r3, [sp, #36]	; 0x24
 800c3a8:	2320      	movs	r3, #32
 800c3aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c3ae:	f8cd 800c 	str.w	r8, [sp, #12]
 800c3b2:	2330      	movs	r3, #48	; 0x30
 800c3b4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c578 <_vfiprintf_r+0x24c>
 800c3b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c3bc:	f04f 0901 	mov.w	r9, #1
 800c3c0:	4623      	mov	r3, r4
 800c3c2:	469a      	mov	sl, r3
 800c3c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c3c8:	b10a      	cbz	r2, 800c3ce <_vfiprintf_r+0xa2>
 800c3ca:	2a25      	cmp	r2, #37	; 0x25
 800c3cc:	d1f9      	bne.n	800c3c2 <_vfiprintf_r+0x96>
 800c3ce:	ebba 0b04 	subs.w	fp, sl, r4
 800c3d2:	d00b      	beq.n	800c3ec <_vfiprintf_r+0xc0>
 800c3d4:	465b      	mov	r3, fp
 800c3d6:	4622      	mov	r2, r4
 800c3d8:	4629      	mov	r1, r5
 800c3da:	4630      	mov	r0, r6
 800c3dc:	f7ff ff93 	bl	800c306 <__sfputs_r>
 800c3e0:	3001      	adds	r0, #1
 800c3e2:	f000 80aa 	beq.w	800c53a <_vfiprintf_r+0x20e>
 800c3e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c3e8:	445a      	add	r2, fp
 800c3ea:	9209      	str	r2, [sp, #36]	; 0x24
 800c3ec:	f89a 3000 	ldrb.w	r3, [sl]
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	f000 80a2 	beq.w	800c53a <_vfiprintf_r+0x20e>
 800c3f6:	2300      	movs	r3, #0
 800c3f8:	f04f 32ff 	mov.w	r2, #4294967295
 800c3fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c400:	f10a 0a01 	add.w	sl, sl, #1
 800c404:	9304      	str	r3, [sp, #16]
 800c406:	9307      	str	r3, [sp, #28]
 800c408:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c40c:	931a      	str	r3, [sp, #104]	; 0x68
 800c40e:	4654      	mov	r4, sl
 800c410:	2205      	movs	r2, #5
 800c412:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c416:	4858      	ldr	r0, [pc, #352]	; (800c578 <_vfiprintf_r+0x24c>)
 800c418:	f7f3 ff12 	bl	8000240 <memchr>
 800c41c:	9a04      	ldr	r2, [sp, #16]
 800c41e:	b9d8      	cbnz	r0, 800c458 <_vfiprintf_r+0x12c>
 800c420:	06d1      	lsls	r1, r2, #27
 800c422:	bf44      	itt	mi
 800c424:	2320      	movmi	r3, #32
 800c426:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c42a:	0713      	lsls	r3, r2, #28
 800c42c:	bf44      	itt	mi
 800c42e:	232b      	movmi	r3, #43	; 0x2b
 800c430:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c434:	f89a 3000 	ldrb.w	r3, [sl]
 800c438:	2b2a      	cmp	r3, #42	; 0x2a
 800c43a:	d015      	beq.n	800c468 <_vfiprintf_r+0x13c>
 800c43c:	9a07      	ldr	r2, [sp, #28]
 800c43e:	4654      	mov	r4, sl
 800c440:	2000      	movs	r0, #0
 800c442:	f04f 0c0a 	mov.w	ip, #10
 800c446:	4621      	mov	r1, r4
 800c448:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c44c:	3b30      	subs	r3, #48	; 0x30
 800c44e:	2b09      	cmp	r3, #9
 800c450:	d94e      	bls.n	800c4f0 <_vfiprintf_r+0x1c4>
 800c452:	b1b0      	cbz	r0, 800c482 <_vfiprintf_r+0x156>
 800c454:	9207      	str	r2, [sp, #28]
 800c456:	e014      	b.n	800c482 <_vfiprintf_r+0x156>
 800c458:	eba0 0308 	sub.w	r3, r0, r8
 800c45c:	fa09 f303 	lsl.w	r3, r9, r3
 800c460:	4313      	orrs	r3, r2
 800c462:	9304      	str	r3, [sp, #16]
 800c464:	46a2      	mov	sl, r4
 800c466:	e7d2      	b.n	800c40e <_vfiprintf_r+0xe2>
 800c468:	9b03      	ldr	r3, [sp, #12]
 800c46a:	1d19      	adds	r1, r3, #4
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	9103      	str	r1, [sp, #12]
 800c470:	2b00      	cmp	r3, #0
 800c472:	bfbb      	ittet	lt
 800c474:	425b      	neglt	r3, r3
 800c476:	f042 0202 	orrlt.w	r2, r2, #2
 800c47a:	9307      	strge	r3, [sp, #28]
 800c47c:	9307      	strlt	r3, [sp, #28]
 800c47e:	bfb8      	it	lt
 800c480:	9204      	strlt	r2, [sp, #16]
 800c482:	7823      	ldrb	r3, [r4, #0]
 800c484:	2b2e      	cmp	r3, #46	; 0x2e
 800c486:	d10c      	bne.n	800c4a2 <_vfiprintf_r+0x176>
 800c488:	7863      	ldrb	r3, [r4, #1]
 800c48a:	2b2a      	cmp	r3, #42	; 0x2a
 800c48c:	d135      	bne.n	800c4fa <_vfiprintf_r+0x1ce>
 800c48e:	9b03      	ldr	r3, [sp, #12]
 800c490:	1d1a      	adds	r2, r3, #4
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	9203      	str	r2, [sp, #12]
 800c496:	2b00      	cmp	r3, #0
 800c498:	bfb8      	it	lt
 800c49a:	f04f 33ff 	movlt.w	r3, #4294967295
 800c49e:	3402      	adds	r4, #2
 800c4a0:	9305      	str	r3, [sp, #20]
 800c4a2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c588 <_vfiprintf_r+0x25c>
 800c4a6:	7821      	ldrb	r1, [r4, #0]
 800c4a8:	2203      	movs	r2, #3
 800c4aa:	4650      	mov	r0, sl
 800c4ac:	f7f3 fec8 	bl	8000240 <memchr>
 800c4b0:	b140      	cbz	r0, 800c4c4 <_vfiprintf_r+0x198>
 800c4b2:	2340      	movs	r3, #64	; 0x40
 800c4b4:	eba0 000a 	sub.w	r0, r0, sl
 800c4b8:	fa03 f000 	lsl.w	r0, r3, r0
 800c4bc:	9b04      	ldr	r3, [sp, #16]
 800c4be:	4303      	orrs	r3, r0
 800c4c0:	3401      	adds	r4, #1
 800c4c2:	9304      	str	r3, [sp, #16]
 800c4c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c4c8:	482c      	ldr	r0, [pc, #176]	; (800c57c <_vfiprintf_r+0x250>)
 800c4ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c4ce:	2206      	movs	r2, #6
 800c4d0:	f7f3 feb6 	bl	8000240 <memchr>
 800c4d4:	2800      	cmp	r0, #0
 800c4d6:	d03f      	beq.n	800c558 <_vfiprintf_r+0x22c>
 800c4d8:	4b29      	ldr	r3, [pc, #164]	; (800c580 <_vfiprintf_r+0x254>)
 800c4da:	bb1b      	cbnz	r3, 800c524 <_vfiprintf_r+0x1f8>
 800c4dc:	9b03      	ldr	r3, [sp, #12]
 800c4de:	3307      	adds	r3, #7
 800c4e0:	f023 0307 	bic.w	r3, r3, #7
 800c4e4:	3308      	adds	r3, #8
 800c4e6:	9303      	str	r3, [sp, #12]
 800c4e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c4ea:	443b      	add	r3, r7
 800c4ec:	9309      	str	r3, [sp, #36]	; 0x24
 800c4ee:	e767      	b.n	800c3c0 <_vfiprintf_r+0x94>
 800c4f0:	fb0c 3202 	mla	r2, ip, r2, r3
 800c4f4:	460c      	mov	r4, r1
 800c4f6:	2001      	movs	r0, #1
 800c4f8:	e7a5      	b.n	800c446 <_vfiprintf_r+0x11a>
 800c4fa:	2300      	movs	r3, #0
 800c4fc:	3401      	adds	r4, #1
 800c4fe:	9305      	str	r3, [sp, #20]
 800c500:	4619      	mov	r1, r3
 800c502:	f04f 0c0a 	mov.w	ip, #10
 800c506:	4620      	mov	r0, r4
 800c508:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c50c:	3a30      	subs	r2, #48	; 0x30
 800c50e:	2a09      	cmp	r2, #9
 800c510:	d903      	bls.n	800c51a <_vfiprintf_r+0x1ee>
 800c512:	2b00      	cmp	r3, #0
 800c514:	d0c5      	beq.n	800c4a2 <_vfiprintf_r+0x176>
 800c516:	9105      	str	r1, [sp, #20]
 800c518:	e7c3      	b.n	800c4a2 <_vfiprintf_r+0x176>
 800c51a:	fb0c 2101 	mla	r1, ip, r1, r2
 800c51e:	4604      	mov	r4, r0
 800c520:	2301      	movs	r3, #1
 800c522:	e7f0      	b.n	800c506 <_vfiprintf_r+0x1da>
 800c524:	ab03      	add	r3, sp, #12
 800c526:	9300      	str	r3, [sp, #0]
 800c528:	462a      	mov	r2, r5
 800c52a:	4b16      	ldr	r3, [pc, #88]	; (800c584 <_vfiprintf_r+0x258>)
 800c52c:	a904      	add	r1, sp, #16
 800c52e:	4630      	mov	r0, r6
 800c530:	f3af 8000 	nop.w
 800c534:	4607      	mov	r7, r0
 800c536:	1c78      	adds	r0, r7, #1
 800c538:	d1d6      	bne.n	800c4e8 <_vfiprintf_r+0x1bc>
 800c53a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c53c:	07d9      	lsls	r1, r3, #31
 800c53e:	d405      	bmi.n	800c54c <_vfiprintf_r+0x220>
 800c540:	89ab      	ldrh	r3, [r5, #12]
 800c542:	059a      	lsls	r2, r3, #22
 800c544:	d402      	bmi.n	800c54c <_vfiprintf_r+0x220>
 800c546:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c548:	f7ff fe7c 	bl	800c244 <__retarget_lock_release_recursive>
 800c54c:	89ab      	ldrh	r3, [r5, #12]
 800c54e:	065b      	lsls	r3, r3, #25
 800c550:	f53f af12 	bmi.w	800c378 <_vfiprintf_r+0x4c>
 800c554:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c556:	e711      	b.n	800c37c <_vfiprintf_r+0x50>
 800c558:	ab03      	add	r3, sp, #12
 800c55a:	9300      	str	r3, [sp, #0]
 800c55c:	462a      	mov	r2, r5
 800c55e:	4b09      	ldr	r3, [pc, #36]	; (800c584 <_vfiprintf_r+0x258>)
 800c560:	a904      	add	r1, sp, #16
 800c562:	4630      	mov	r0, r6
 800c564:	f7ff fce4 	bl	800bf30 <_printf_i>
 800c568:	e7e4      	b.n	800c534 <_vfiprintf_r+0x208>
 800c56a:	bf00      	nop
 800c56c:	0800d354 	.word	0x0800d354
 800c570:	0800d374 	.word	0x0800d374
 800c574:	0800d334 	.word	0x0800d334
 800c578:	0800d2c4 	.word	0x0800d2c4
 800c57c:	0800d2ce 	.word	0x0800d2ce
 800c580:	00000000 	.word	0x00000000
 800c584:	0800c307 	.word	0x0800c307
 800c588:	0800d2ca 	.word	0x0800d2ca

0800c58c <__swbuf_r>:
 800c58c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c58e:	460e      	mov	r6, r1
 800c590:	4614      	mov	r4, r2
 800c592:	4605      	mov	r5, r0
 800c594:	b118      	cbz	r0, 800c59e <__swbuf_r+0x12>
 800c596:	6983      	ldr	r3, [r0, #24]
 800c598:	b90b      	cbnz	r3, 800c59e <__swbuf_r+0x12>
 800c59a:	f000 f9d9 	bl	800c950 <__sinit>
 800c59e:	4b21      	ldr	r3, [pc, #132]	; (800c624 <__swbuf_r+0x98>)
 800c5a0:	429c      	cmp	r4, r3
 800c5a2:	d12b      	bne.n	800c5fc <__swbuf_r+0x70>
 800c5a4:	686c      	ldr	r4, [r5, #4]
 800c5a6:	69a3      	ldr	r3, [r4, #24]
 800c5a8:	60a3      	str	r3, [r4, #8]
 800c5aa:	89a3      	ldrh	r3, [r4, #12]
 800c5ac:	071a      	lsls	r2, r3, #28
 800c5ae:	d52f      	bpl.n	800c610 <__swbuf_r+0x84>
 800c5b0:	6923      	ldr	r3, [r4, #16]
 800c5b2:	b36b      	cbz	r3, 800c610 <__swbuf_r+0x84>
 800c5b4:	6923      	ldr	r3, [r4, #16]
 800c5b6:	6820      	ldr	r0, [r4, #0]
 800c5b8:	1ac0      	subs	r0, r0, r3
 800c5ba:	6963      	ldr	r3, [r4, #20]
 800c5bc:	b2f6      	uxtb	r6, r6
 800c5be:	4283      	cmp	r3, r0
 800c5c0:	4637      	mov	r7, r6
 800c5c2:	dc04      	bgt.n	800c5ce <__swbuf_r+0x42>
 800c5c4:	4621      	mov	r1, r4
 800c5c6:	4628      	mov	r0, r5
 800c5c8:	f000 f92e 	bl	800c828 <_fflush_r>
 800c5cc:	bb30      	cbnz	r0, 800c61c <__swbuf_r+0x90>
 800c5ce:	68a3      	ldr	r3, [r4, #8]
 800c5d0:	3b01      	subs	r3, #1
 800c5d2:	60a3      	str	r3, [r4, #8]
 800c5d4:	6823      	ldr	r3, [r4, #0]
 800c5d6:	1c5a      	adds	r2, r3, #1
 800c5d8:	6022      	str	r2, [r4, #0]
 800c5da:	701e      	strb	r6, [r3, #0]
 800c5dc:	6963      	ldr	r3, [r4, #20]
 800c5de:	3001      	adds	r0, #1
 800c5e0:	4283      	cmp	r3, r0
 800c5e2:	d004      	beq.n	800c5ee <__swbuf_r+0x62>
 800c5e4:	89a3      	ldrh	r3, [r4, #12]
 800c5e6:	07db      	lsls	r3, r3, #31
 800c5e8:	d506      	bpl.n	800c5f8 <__swbuf_r+0x6c>
 800c5ea:	2e0a      	cmp	r6, #10
 800c5ec:	d104      	bne.n	800c5f8 <__swbuf_r+0x6c>
 800c5ee:	4621      	mov	r1, r4
 800c5f0:	4628      	mov	r0, r5
 800c5f2:	f000 f919 	bl	800c828 <_fflush_r>
 800c5f6:	b988      	cbnz	r0, 800c61c <__swbuf_r+0x90>
 800c5f8:	4638      	mov	r0, r7
 800c5fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c5fc:	4b0a      	ldr	r3, [pc, #40]	; (800c628 <__swbuf_r+0x9c>)
 800c5fe:	429c      	cmp	r4, r3
 800c600:	d101      	bne.n	800c606 <__swbuf_r+0x7a>
 800c602:	68ac      	ldr	r4, [r5, #8]
 800c604:	e7cf      	b.n	800c5a6 <__swbuf_r+0x1a>
 800c606:	4b09      	ldr	r3, [pc, #36]	; (800c62c <__swbuf_r+0xa0>)
 800c608:	429c      	cmp	r4, r3
 800c60a:	bf08      	it	eq
 800c60c:	68ec      	ldreq	r4, [r5, #12]
 800c60e:	e7ca      	b.n	800c5a6 <__swbuf_r+0x1a>
 800c610:	4621      	mov	r1, r4
 800c612:	4628      	mov	r0, r5
 800c614:	f000 f80c 	bl	800c630 <__swsetup_r>
 800c618:	2800      	cmp	r0, #0
 800c61a:	d0cb      	beq.n	800c5b4 <__swbuf_r+0x28>
 800c61c:	f04f 37ff 	mov.w	r7, #4294967295
 800c620:	e7ea      	b.n	800c5f8 <__swbuf_r+0x6c>
 800c622:	bf00      	nop
 800c624:	0800d354 	.word	0x0800d354
 800c628:	0800d374 	.word	0x0800d374
 800c62c:	0800d334 	.word	0x0800d334

0800c630 <__swsetup_r>:
 800c630:	4b32      	ldr	r3, [pc, #200]	; (800c6fc <__swsetup_r+0xcc>)
 800c632:	b570      	push	{r4, r5, r6, lr}
 800c634:	681d      	ldr	r5, [r3, #0]
 800c636:	4606      	mov	r6, r0
 800c638:	460c      	mov	r4, r1
 800c63a:	b125      	cbz	r5, 800c646 <__swsetup_r+0x16>
 800c63c:	69ab      	ldr	r3, [r5, #24]
 800c63e:	b913      	cbnz	r3, 800c646 <__swsetup_r+0x16>
 800c640:	4628      	mov	r0, r5
 800c642:	f000 f985 	bl	800c950 <__sinit>
 800c646:	4b2e      	ldr	r3, [pc, #184]	; (800c700 <__swsetup_r+0xd0>)
 800c648:	429c      	cmp	r4, r3
 800c64a:	d10f      	bne.n	800c66c <__swsetup_r+0x3c>
 800c64c:	686c      	ldr	r4, [r5, #4]
 800c64e:	89a3      	ldrh	r3, [r4, #12]
 800c650:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c654:	0719      	lsls	r1, r3, #28
 800c656:	d42c      	bmi.n	800c6b2 <__swsetup_r+0x82>
 800c658:	06dd      	lsls	r5, r3, #27
 800c65a:	d411      	bmi.n	800c680 <__swsetup_r+0x50>
 800c65c:	2309      	movs	r3, #9
 800c65e:	6033      	str	r3, [r6, #0]
 800c660:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c664:	81a3      	strh	r3, [r4, #12]
 800c666:	f04f 30ff 	mov.w	r0, #4294967295
 800c66a:	e03e      	b.n	800c6ea <__swsetup_r+0xba>
 800c66c:	4b25      	ldr	r3, [pc, #148]	; (800c704 <__swsetup_r+0xd4>)
 800c66e:	429c      	cmp	r4, r3
 800c670:	d101      	bne.n	800c676 <__swsetup_r+0x46>
 800c672:	68ac      	ldr	r4, [r5, #8]
 800c674:	e7eb      	b.n	800c64e <__swsetup_r+0x1e>
 800c676:	4b24      	ldr	r3, [pc, #144]	; (800c708 <__swsetup_r+0xd8>)
 800c678:	429c      	cmp	r4, r3
 800c67a:	bf08      	it	eq
 800c67c:	68ec      	ldreq	r4, [r5, #12]
 800c67e:	e7e6      	b.n	800c64e <__swsetup_r+0x1e>
 800c680:	0758      	lsls	r0, r3, #29
 800c682:	d512      	bpl.n	800c6aa <__swsetup_r+0x7a>
 800c684:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c686:	b141      	cbz	r1, 800c69a <__swsetup_r+0x6a>
 800c688:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c68c:	4299      	cmp	r1, r3
 800c68e:	d002      	beq.n	800c696 <__swsetup_r+0x66>
 800c690:	4630      	mov	r0, r6
 800c692:	f7fd f9e5 	bl	8009a60 <_free_r>
 800c696:	2300      	movs	r3, #0
 800c698:	6363      	str	r3, [r4, #52]	; 0x34
 800c69a:	89a3      	ldrh	r3, [r4, #12]
 800c69c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c6a0:	81a3      	strh	r3, [r4, #12]
 800c6a2:	2300      	movs	r3, #0
 800c6a4:	6063      	str	r3, [r4, #4]
 800c6a6:	6923      	ldr	r3, [r4, #16]
 800c6a8:	6023      	str	r3, [r4, #0]
 800c6aa:	89a3      	ldrh	r3, [r4, #12]
 800c6ac:	f043 0308 	orr.w	r3, r3, #8
 800c6b0:	81a3      	strh	r3, [r4, #12]
 800c6b2:	6923      	ldr	r3, [r4, #16]
 800c6b4:	b94b      	cbnz	r3, 800c6ca <__swsetup_r+0x9a>
 800c6b6:	89a3      	ldrh	r3, [r4, #12]
 800c6b8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c6bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c6c0:	d003      	beq.n	800c6ca <__swsetup_r+0x9a>
 800c6c2:	4621      	mov	r1, r4
 800c6c4:	4630      	mov	r0, r6
 800c6c6:	f000 fa05 	bl	800cad4 <__smakebuf_r>
 800c6ca:	89a0      	ldrh	r0, [r4, #12]
 800c6cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c6d0:	f010 0301 	ands.w	r3, r0, #1
 800c6d4:	d00a      	beq.n	800c6ec <__swsetup_r+0xbc>
 800c6d6:	2300      	movs	r3, #0
 800c6d8:	60a3      	str	r3, [r4, #8]
 800c6da:	6963      	ldr	r3, [r4, #20]
 800c6dc:	425b      	negs	r3, r3
 800c6de:	61a3      	str	r3, [r4, #24]
 800c6e0:	6923      	ldr	r3, [r4, #16]
 800c6e2:	b943      	cbnz	r3, 800c6f6 <__swsetup_r+0xc6>
 800c6e4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c6e8:	d1ba      	bne.n	800c660 <__swsetup_r+0x30>
 800c6ea:	bd70      	pop	{r4, r5, r6, pc}
 800c6ec:	0781      	lsls	r1, r0, #30
 800c6ee:	bf58      	it	pl
 800c6f0:	6963      	ldrpl	r3, [r4, #20]
 800c6f2:	60a3      	str	r3, [r4, #8]
 800c6f4:	e7f4      	b.n	800c6e0 <__swsetup_r+0xb0>
 800c6f6:	2000      	movs	r0, #0
 800c6f8:	e7f7      	b.n	800c6ea <__swsetup_r+0xba>
 800c6fa:	bf00      	nop
 800c6fc:	20000168 	.word	0x20000168
 800c700:	0800d354 	.word	0x0800d354
 800c704:	0800d374 	.word	0x0800d374
 800c708:	0800d334 	.word	0x0800d334

0800c70c <abort>:
 800c70c:	b508      	push	{r3, lr}
 800c70e:	2006      	movs	r0, #6
 800c710:	f000 fa50 	bl	800cbb4 <raise>
 800c714:	2001      	movs	r0, #1
 800c716:	f7f4 feb5 	bl	8001484 <_exit>
	...

0800c71c <__sflush_r>:
 800c71c:	898a      	ldrh	r2, [r1, #12]
 800c71e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c722:	4605      	mov	r5, r0
 800c724:	0710      	lsls	r0, r2, #28
 800c726:	460c      	mov	r4, r1
 800c728:	d458      	bmi.n	800c7dc <__sflush_r+0xc0>
 800c72a:	684b      	ldr	r3, [r1, #4]
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	dc05      	bgt.n	800c73c <__sflush_r+0x20>
 800c730:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c732:	2b00      	cmp	r3, #0
 800c734:	dc02      	bgt.n	800c73c <__sflush_r+0x20>
 800c736:	2000      	movs	r0, #0
 800c738:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c73c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c73e:	2e00      	cmp	r6, #0
 800c740:	d0f9      	beq.n	800c736 <__sflush_r+0x1a>
 800c742:	2300      	movs	r3, #0
 800c744:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c748:	682f      	ldr	r7, [r5, #0]
 800c74a:	602b      	str	r3, [r5, #0]
 800c74c:	d032      	beq.n	800c7b4 <__sflush_r+0x98>
 800c74e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c750:	89a3      	ldrh	r3, [r4, #12]
 800c752:	075a      	lsls	r2, r3, #29
 800c754:	d505      	bpl.n	800c762 <__sflush_r+0x46>
 800c756:	6863      	ldr	r3, [r4, #4]
 800c758:	1ac0      	subs	r0, r0, r3
 800c75a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c75c:	b10b      	cbz	r3, 800c762 <__sflush_r+0x46>
 800c75e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c760:	1ac0      	subs	r0, r0, r3
 800c762:	2300      	movs	r3, #0
 800c764:	4602      	mov	r2, r0
 800c766:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c768:	6a21      	ldr	r1, [r4, #32]
 800c76a:	4628      	mov	r0, r5
 800c76c:	47b0      	blx	r6
 800c76e:	1c43      	adds	r3, r0, #1
 800c770:	89a3      	ldrh	r3, [r4, #12]
 800c772:	d106      	bne.n	800c782 <__sflush_r+0x66>
 800c774:	6829      	ldr	r1, [r5, #0]
 800c776:	291d      	cmp	r1, #29
 800c778:	d82c      	bhi.n	800c7d4 <__sflush_r+0xb8>
 800c77a:	4a2a      	ldr	r2, [pc, #168]	; (800c824 <__sflush_r+0x108>)
 800c77c:	40ca      	lsrs	r2, r1
 800c77e:	07d6      	lsls	r6, r2, #31
 800c780:	d528      	bpl.n	800c7d4 <__sflush_r+0xb8>
 800c782:	2200      	movs	r2, #0
 800c784:	6062      	str	r2, [r4, #4]
 800c786:	04d9      	lsls	r1, r3, #19
 800c788:	6922      	ldr	r2, [r4, #16]
 800c78a:	6022      	str	r2, [r4, #0]
 800c78c:	d504      	bpl.n	800c798 <__sflush_r+0x7c>
 800c78e:	1c42      	adds	r2, r0, #1
 800c790:	d101      	bne.n	800c796 <__sflush_r+0x7a>
 800c792:	682b      	ldr	r3, [r5, #0]
 800c794:	b903      	cbnz	r3, 800c798 <__sflush_r+0x7c>
 800c796:	6560      	str	r0, [r4, #84]	; 0x54
 800c798:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c79a:	602f      	str	r7, [r5, #0]
 800c79c:	2900      	cmp	r1, #0
 800c79e:	d0ca      	beq.n	800c736 <__sflush_r+0x1a>
 800c7a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c7a4:	4299      	cmp	r1, r3
 800c7a6:	d002      	beq.n	800c7ae <__sflush_r+0x92>
 800c7a8:	4628      	mov	r0, r5
 800c7aa:	f7fd f959 	bl	8009a60 <_free_r>
 800c7ae:	2000      	movs	r0, #0
 800c7b0:	6360      	str	r0, [r4, #52]	; 0x34
 800c7b2:	e7c1      	b.n	800c738 <__sflush_r+0x1c>
 800c7b4:	6a21      	ldr	r1, [r4, #32]
 800c7b6:	2301      	movs	r3, #1
 800c7b8:	4628      	mov	r0, r5
 800c7ba:	47b0      	blx	r6
 800c7bc:	1c41      	adds	r1, r0, #1
 800c7be:	d1c7      	bne.n	800c750 <__sflush_r+0x34>
 800c7c0:	682b      	ldr	r3, [r5, #0]
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d0c4      	beq.n	800c750 <__sflush_r+0x34>
 800c7c6:	2b1d      	cmp	r3, #29
 800c7c8:	d001      	beq.n	800c7ce <__sflush_r+0xb2>
 800c7ca:	2b16      	cmp	r3, #22
 800c7cc:	d101      	bne.n	800c7d2 <__sflush_r+0xb6>
 800c7ce:	602f      	str	r7, [r5, #0]
 800c7d0:	e7b1      	b.n	800c736 <__sflush_r+0x1a>
 800c7d2:	89a3      	ldrh	r3, [r4, #12]
 800c7d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c7d8:	81a3      	strh	r3, [r4, #12]
 800c7da:	e7ad      	b.n	800c738 <__sflush_r+0x1c>
 800c7dc:	690f      	ldr	r7, [r1, #16]
 800c7de:	2f00      	cmp	r7, #0
 800c7e0:	d0a9      	beq.n	800c736 <__sflush_r+0x1a>
 800c7e2:	0793      	lsls	r3, r2, #30
 800c7e4:	680e      	ldr	r6, [r1, #0]
 800c7e6:	bf08      	it	eq
 800c7e8:	694b      	ldreq	r3, [r1, #20]
 800c7ea:	600f      	str	r7, [r1, #0]
 800c7ec:	bf18      	it	ne
 800c7ee:	2300      	movne	r3, #0
 800c7f0:	eba6 0807 	sub.w	r8, r6, r7
 800c7f4:	608b      	str	r3, [r1, #8]
 800c7f6:	f1b8 0f00 	cmp.w	r8, #0
 800c7fa:	dd9c      	ble.n	800c736 <__sflush_r+0x1a>
 800c7fc:	6a21      	ldr	r1, [r4, #32]
 800c7fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c800:	4643      	mov	r3, r8
 800c802:	463a      	mov	r2, r7
 800c804:	4628      	mov	r0, r5
 800c806:	47b0      	blx	r6
 800c808:	2800      	cmp	r0, #0
 800c80a:	dc06      	bgt.n	800c81a <__sflush_r+0xfe>
 800c80c:	89a3      	ldrh	r3, [r4, #12]
 800c80e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c812:	81a3      	strh	r3, [r4, #12]
 800c814:	f04f 30ff 	mov.w	r0, #4294967295
 800c818:	e78e      	b.n	800c738 <__sflush_r+0x1c>
 800c81a:	4407      	add	r7, r0
 800c81c:	eba8 0800 	sub.w	r8, r8, r0
 800c820:	e7e9      	b.n	800c7f6 <__sflush_r+0xda>
 800c822:	bf00      	nop
 800c824:	20400001 	.word	0x20400001

0800c828 <_fflush_r>:
 800c828:	b538      	push	{r3, r4, r5, lr}
 800c82a:	690b      	ldr	r3, [r1, #16]
 800c82c:	4605      	mov	r5, r0
 800c82e:	460c      	mov	r4, r1
 800c830:	b913      	cbnz	r3, 800c838 <_fflush_r+0x10>
 800c832:	2500      	movs	r5, #0
 800c834:	4628      	mov	r0, r5
 800c836:	bd38      	pop	{r3, r4, r5, pc}
 800c838:	b118      	cbz	r0, 800c842 <_fflush_r+0x1a>
 800c83a:	6983      	ldr	r3, [r0, #24]
 800c83c:	b90b      	cbnz	r3, 800c842 <_fflush_r+0x1a>
 800c83e:	f000 f887 	bl	800c950 <__sinit>
 800c842:	4b14      	ldr	r3, [pc, #80]	; (800c894 <_fflush_r+0x6c>)
 800c844:	429c      	cmp	r4, r3
 800c846:	d11b      	bne.n	800c880 <_fflush_r+0x58>
 800c848:	686c      	ldr	r4, [r5, #4]
 800c84a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d0ef      	beq.n	800c832 <_fflush_r+0xa>
 800c852:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c854:	07d0      	lsls	r0, r2, #31
 800c856:	d404      	bmi.n	800c862 <_fflush_r+0x3a>
 800c858:	0599      	lsls	r1, r3, #22
 800c85a:	d402      	bmi.n	800c862 <_fflush_r+0x3a>
 800c85c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c85e:	f7ff fcf0 	bl	800c242 <__retarget_lock_acquire_recursive>
 800c862:	4628      	mov	r0, r5
 800c864:	4621      	mov	r1, r4
 800c866:	f7ff ff59 	bl	800c71c <__sflush_r>
 800c86a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c86c:	07da      	lsls	r2, r3, #31
 800c86e:	4605      	mov	r5, r0
 800c870:	d4e0      	bmi.n	800c834 <_fflush_r+0xc>
 800c872:	89a3      	ldrh	r3, [r4, #12]
 800c874:	059b      	lsls	r3, r3, #22
 800c876:	d4dd      	bmi.n	800c834 <_fflush_r+0xc>
 800c878:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c87a:	f7ff fce3 	bl	800c244 <__retarget_lock_release_recursive>
 800c87e:	e7d9      	b.n	800c834 <_fflush_r+0xc>
 800c880:	4b05      	ldr	r3, [pc, #20]	; (800c898 <_fflush_r+0x70>)
 800c882:	429c      	cmp	r4, r3
 800c884:	d101      	bne.n	800c88a <_fflush_r+0x62>
 800c886:	68ac      	ldr	r4, [r5, #8]
 800c888:	e7df      	b.n	800c84a <_fflush_r+0x22>
 800c88a:	4b04      	ldr	r3, [pc, #16]	; (800c89c <_fflush_r+0x74>)
 800c88c:	429c      	cmp	r4, r3
 800c88e:	bf08      	it	eq
 800c890:	68ec      	ldreq	r4, [r5, #12]
 800c892:	e7da      	b.n	800c84a <_fflush_r+0x22>
 800c894:	0800d354 	.word	0x0800d354
 800c898:	0800d374 	.word	0x0800d374
 800c89c:	0800d334 	.word	0x0800d334

0800c8a0 <std>:
 800c8a0:	2300      	movs	r3, #0
 800c8a2:	b510      	push	{r4, lr}
 800c8a4:	4604      	mov	r4, r0
 800c8a6:	e9c0 3300 	strd	r3, r3, [r0]
 800c8aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c8ae:	6083      	str	r3, [r0, #8]
 800c8b0:	8181      	strh	r1, [r0, #12]
 800c8b2:	6643      	str	r3, [r0, #100]	; 0x64
 800c8b4:	81c2      	strh	r2, [r0, #14]
 800c8b6:	6183      	str	r3, [r0, #24]
 800c8b8:	4619      	mov	r1, r3
 800c8ba:	2208      	movs	r2, #8
 800c8bc:	305c      	adds	r0, #92	; 0x5c
 800c8be:	f7fd f8c7 	bl	8009a50 <memset>
 800c8c2:	4b05      	ldr	r3, [pc, #20]	; (800c8d8 <std+0x38>)
 800c8c4:	6263      	str	r3, [r4, #36]	; 0x24
 800c8c6:	4b05      	ldr	r3, [pc, #20]	; (800c8dc <std+0x3c>)
 800c8c8:	62a3      	str	r3, [r4, #40]	; 0x28
 800c8ca:	4b05      	ldr	r3, [pc, #20]	; (800c8e0 <std+0x40>)
 800c8cc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c8ce:	4b05      	ldr	r3, [pc, #20]	; (800c8e4 <std+0x44>)
 800c8d0:	6224      	str	r4, [r4, #32]
 800c8d2:	6323      	str	r3, [r4, #48]	; 0x30
 800c8d4:	bd10      	pop	{r4, pc}
 800c8d6:	bf00      	nop
 800c8d8:	0800cbed 	.word	0x0800cbed
 800c8dc:	0800cc0f 	.word	0x0800cc0f
 800c8e0:	0800cc47 	.word	0x0800cc47
 800c8e4:	0800cc6b 	.word	0x0800cc6b

0800c8e8 <_cleanup_r>:
 800c8e8:	4901      	ldr	r1, [pc, #4]	; (800c8f0 <_cleanup_r+0x8>)
 800c8ea:	f000 b8af 	b.w	800ca4c <_fwalk_reent>
 800c8ee:	bf00      	nop
 800c8f0:	0800c829 	.word	0x0800c829

0800c8f4 <__sfmoreglue>:
 800c8f4:	b570      	push	{r4, r5, r6, lr}
 800c8f6:	2268      	movs	r2, #104	; 0x68
 800c8f8:	1e4d      	subs	r5, r1, #1
 800c8fa:	4355      	muls	r5, r2
 800c8fc:	460e      	mov	r6, r1
 800c8fe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c902:	f7fd f919 	bl	8009b38 <_malloc_r>
 800c906:	4604      	mov	r4, r0
 800c908:	b140      	cbz	r0, 800c91c <__sfmoreglue+0x28>
 800c90a:	2100      	movs	r1, #0
 800c90c:	e9c0 1600 	strd	r1, r6, [r0]
 800c910:	300c      	adds	r0, #12
 800c912:	60a0      	str	r0, [r4, #8]
 800c914:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c918:	f7fd f89a 	bl	8009a50 <memset>
 800c91c:	4620      	mov	r0, r4
 800c91e:	bd70      	pop	{r4, r5, r6, pc}

0800c920 <__sfp_lock_acquire>:
 800c920:	4801      	ldr	r0, [pc, #4]	; (800c928 <__sfp_lock_acquire+0x8>)
 800c922:	f7ff bc8e 	b.w	800c242 <__retarget_lock_acquire_recursive>
 800c926:	bf00      	nop
 800c928:	20001d21 	.word	0x20001d21

0800c92c <__sfp_lock_release>:
 800c92c:	4801      	ldr	r0, [pc, #4]	; (800c934 <__sfp_lock_release+0x8>)
 800c92e:	f7ff bc89 	b.w	800c244 <__retarget_lock_release_recursive>
 800c932:	bf00      	nop
 800c934:	20001d21 	.word	0x20001d21

0800c938 <__sinit_lock_acquire>:
 800c938:	4801      	ldr	r0, [pc, #4]	; (800c940 <__sinit_lock_acquire+0x8>)
 800c93a:	f7ff bc82 	b.w	800c242 <__retarget_lock_acquire_recursive>
 800c93e:	bf00      	nop
 800c940:	20001d22 	.word	0x20001d22

0800c944 <__sinit_lock_release>:
 800c944:	4801      	ldr	r0, [pc, #4]	; (800c94c <__sinit_lock_release+0x8>)
 800c946:	f7ff bc7d 	b.w	800c244 <__retarget_lock_release_recursive>
 800c94a:	bf00      	nop
 800c94c:	20001d22 	.word	0x20001d22

0800c950 <__sinit>:
 800c950:	b510      	push	{r4, lr}
 800c952:	4604      	mov	r4, r0
 800c954:	f7ff fff0 	bl	800c938 <__sinit_lock_acquire>
 800c958:	69a3      	ldr	r3, [r4, #24]
 800c95a:	b11b      	cbz	r3, 800c964 <__sinit+0x14>
 800c95c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c960:	f7ff bff0 	b.w	800c944 <__sinit_lock_release>
 800c964:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c968:	6523      	str	r3, [r4, #80]	; 0x50
 800c96a:	4b13      	ldr	r3, [pc, #76]	; (800c9b8 <__sinit+0x68>)
 800c96c:	4a13      	ldr	r2, [pc, #76]	; (800c9bc <__sinit+0x6c>)
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	62a2      	str	r2, [r4, #40]	; 0x28
 800c972:	42a3      	cmp	r3, r4
 800c974:	bf04      	itt	eq
 800c976:	2301      	moveq	r3, #1
 800c978:	61a3      	streq	r3, [r4, #24]
 800c97a:	4620      	mov	r0, r4
 800c97c:	f000 f820 	bl	800c9c0 <__sfp>
 800c980:	6060      	str	r0, [r4, #4]
 800c982:	4620      	mov	r0, r4
 800c984:	f000 f81c 	bl	800c9c0 <__sfp>
 800c988:	60a0      	str	r0, [r4, #8]
 800c98a:	4620      	mov	r0, r4
 800c98c:	f000 f818 	bl	800c9c0 <__sfp>
 800c990:	2200      	movs	r2, #0
 800c992:	60e0      	str	r0, [r4, #12]
 800c994:	2104      	movs	r1, #4
 800c996:	6860      	ldr	r0, [r4, #4]
 800c998:	f7ff ff82 	bl	800c8a0 <std>
 800c99c:	68a0      	ldr	r0, [r4, #8]
 800c99e:	2201      	movs	r2, #1
 800c9a0:	2109      	movs	r1, #9
 800c9a2:	f7ff ff7d 	bl	800c8a0 <std>
 800c9a6:	68e0      	ldr	r0, [r4, #12]
 800c9a8:	2202      	movs	r2, #2
 800c9aa:	2112      	movs	r1, #18
 800c9ac:	f7ff ff78 	bl	800c8a0 <std>
 800c9b0:	2301      	movs	r3, #1
 800c9b2:	61a3      	str	r3, [r4, #24]
 800c9b4:	e7d2      	b.n	800c95c <__sinit+0xc>
 800c9b6:	bf00      	nop
 800c9b8:	0800cf68 	.word	0x0800cf68
 800c9bc:	0800c8e9 	.word	0x0800c8e9

0800c9c0 <__sfp>:
 800c9c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9c2:	4607      	mov	r7, r0
 800c9c4:	f7ff ffac 	bl	800c920 <__sfp_lock_acquire>
 800c9c8:	4b1e      	ldr	r3, [pc, #120]	; (800ca44 <__sfp+0x84>)
 800c9ca:	681e      	ldr	r6, [r3, #0]
 800c9cc:	69b3      	ldr	r3, [r6, #24]
 800c9ce:	b913      	cbnz	r3, 800c9d6 <__sfp+0x16>
 800c9d0:	4630      	mov	r0, r6
 800c9d2:	f7ff ffbd 	bl	800c950 <__sinit>
 800c9d6:	3648      	adds	r6, #72	; 0x48
 800c9d8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c9dc:	3b01      	subs	r3, #1
 800c9de:	d503      	bpl.n	800c9e8 <__sfp+0x28>
 800c9e0:	6833      	ldr	r3, [r6, #0]
 800c9e2:	b30b      	cbz	r3, 800ca28 <__sfp+0x68>
 800c9e4:	6836      	ldr	r6, [r6, #0]
 800c9e6:	e7f7      	b.n	800c9d8 <__sfp+0x18>
 800c9e8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c9ec:	b9d5      	cbnz	r5, 800ca24 <__sfp+0x64>
 800c9ee:	4b16      	ldr	r3, [pc, #88]	; (800ca48 <__sfp+0x88>)
 800c9f0:	60e3      	str	r3, [r4, #12]
 800c9f2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c9f6:	6665      	str	r5, [r4, #100]	; 0x64
 800c9f8:	f7ff fc22 	bl	800c240 <__retarget_lock_init_recursive>
 800c9fc:	f7ff ff96 	bl	800c92c <__sfp_lock_release>
 800ca00:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ca04:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ca08:	6025      	str	r5, [r4, #0]
 800ca0a:	61a5      	str	r5, [r4, #24]
 800ca0c:	2208      	movs	r2, #8
 800ca0e:	4629      	mov	r1, r5
 800ca10:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ca14:	f7fd f81c 	bl	8009a50 <memset>
 800ca18:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ca1c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ca20:	4620      	mov	r0, r4
 800ca22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ca24:	3468      	adds	r4, #104	; 0x68
 800ca26:	e7d9      	b.n	800c9dc <__sfp+0x1c>
 800ca28:	2104      	movs	r1, #4
 800ca2a:	4638      	mov	r0, r7
 800ca2c:	f7ff ff62 	bl	800c8f4 <__sfmoreglue>
 800ca30:	4604      	mov	r4, r0
 800ca32:	6030      	str	r0, [r6, #0]
 800ca34:	2800      	cmp	r0, #0
 800ca36:	d1d5      	bne.n	800c9e4 <__sfp+0x24>
 800ca38:	f7ff ff78 	bl	800c92c <__sfp_lock_release>
 800ca3c:	230c      	movs	r3, #12
 800ca3e:	603b      	str	r3, [r7, #0]
 800ca40:	e7ee      	b.n	800ca20 <__sfp+0x60>
 800ca42:	bf00      	nop
 800ca44:	0800cf68 	.word	0x0800cf68
 800ca48:	ffff0001 	.word	0xffff0001

0800ca4c <_fwalk_reent>:
 800ca4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ca50:	4606      	mov	r6, r0
 800ca52:	4688      	mov	r8, r1
 800ca54:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ca58:	2700      	movs	r7, #0
 800ca5a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ca5e:	f1b9 0901 	subs.w	r9, r9, #1
 800ca62:	d505      	bpl.n	800ca70 <_fwalk_reent+0x24>
 800ca64:	6824      	ldr	r4, [r4, #0]
 800ca66:	2c00      	cmp	r4, #0
 800ca68:	d1f7      	bne.n	800ca5a <_fwalk_reent+0xe>
 800ca6a:	4638      	mov	r0, r7
 800ca6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ca70:	89ab      	ldrh	r3, [r5, #12]
 800ca72:	2b01      	cmp	r3, #1
 800ca74:	d907      	bls.n	800ca86 <_fwalk_reent+0x3a>
 800ca76:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ca7a:	3301      	adds	r3, #1
 800ca7c:	d003      	beq.n	800ca86 <_fwalk_reent+0x3a>
 800ca7e:	4629      	mov	r1, r5
 800ca80:	4630      	mov	r0, r6
 800ca82:	47c0      	blx	r8
 800ca84:	4307      	orrs	r7, r0
 800ca86:	3568      	adds	r5, #104	; 0x68
 800ca88:	e7e9      	b.n	800ca5e <_fwalk_reent+0x12>

0800ca8a <__swhatbuf_r>:
 800ca8a:	b570      	push	{r4, r5, r6, lr}
 800ca8c:	460e      	mov	r6, r1
 800ca8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ca92:	2900      	cmp	r1, #0
 800ca94:	b096      	sub	sp, #88	; 0x58
 800ca96:	4614      	mov	r4, r2
 800ca98:	461d      	mov	r5, r3
 800ca9a:	da08      	bge.n	800caae <__swhatbuf_r+0x24>
 800ca9c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800caa0:	2200      	movs	r2, #0
 800caa2:	602a      	str	r2, [r5, #0]
 800caa4:	061a      	lsls	r2, r3, #24
 800caa6:	d410      	bmi.n	800caca <__swhatbuf_r+0x40>
 800caa8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800caac:	e00e      	b.n	800cacc <__swhatbuf_r+0x42>
 800caae:	466a      	mov	r2, sp
 800cab0:	f000 f902 	bl	800ccb8 <_fstat_r>
 800cab4:	2800      	cmp	r0, #0
 800cab6:	dbf1      	blt.n	800ca9c <__swhatbuf_r+0x12>
 800cab8:	9a01      	ldr	r2, [sp, #4]
 800caba:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800cabe:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800cac2:	425a      	negs	r2, r3
 800cac4:	415a      	adcs	r2, r3
 800cac6:	602a      	str	r2, [r5, #0]
 800cac8:	e7ee      	b.n	800caa8 <__swhatbuf_r+0x1e>
 800caca:	2340      	movs	r3, #64	; 0x40
 800cacc:	2000      	movs	r0, #0
 800cace:	6023      	str	r3, [r4, #0]
 800cad0:	b016      	add	sp, #88	; 0x58
 800cad2:	bd70      	pop	{r4, r5, r6, pc}

0800cad4 <__smakebuf_r>:
 800cad4:	898b      	ldrh	r3, [r1, #12]
 800cad6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cad8:	079d      	lsls	r5, r3, #30
 800cada:	4606      	mov	r6, r0
 800cadc:	460c      	mov	r4, r1
 800cade:	d507      	bpl.n	800caf0 <__smakebuf_r+0x1c>
 800cae0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cae4:	6023      	str	r3, [r4, #0]
 800cae6:	6123      	str	r3, [r4, #16]
 800cae8:	2301      	movs	r3, #1
 800caea:	6163      	str	r3, [r4, #20]
 800caec:	b002      	add	sp, #8
 800caee:	bd70      	pop	{r4, r5, r6, pc}
 800caf0:	ab01      	add	r3, sp, #4
 800caf2:	466a      	mov	r2, sp
 800caf4:	f7ff ffc9 	bl	800ca8a <__swhatbuf_r>
 800caf8:	9900      	ldr	r1, [sp, #0]
 800cafa:	4605      	mov	r5, r0
 800cafc:	4630      	mov	r0, r6
 800cafe:	f7fd f81b 	bl	8009b38 <_malloc_r>
 800cb02:	b948      	cbnz	r0, 800cb18 <__smakebuf_r+0x44>
 800cb04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cb08:	059a      	lsls	r2, r3, #22
 800cb0a:	d4ef      	bmi.n	800caec <__smakebuf_r+0x18>
 800cb0c:	f023 0303 	bic.w	r3, r3, #3
 800cb10:	f043 0302 	orr.w	r3, r3, #2
 800cb14:	81a3      	strh	r3, [r4, #12]
 800cb16:	e7e3      	b.n	800cae0 <__smakebuf_r+0xc>
 800cb18:	4b0d      	ldr	r3, [pc, #52]	; (800cb50 <__smakebuf_r+0x7c>)
 800cb1a:	62b3      	str	r3, [r6, #40]	; 0x28
 800cb1c:	89a3      	ldrh	r3, [r4, #12]
 800cb1e:	6020      	str	r0, [r4, #0]
 800cb20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cb24:	81a3      	strh	r3, [r4, #12]
 800cb26:	9b00      	ldr	r3, [sp, #0]
 800cb28:	6163      	str	r3, [r4, #20]
 800cb2a:	9b01      	ldr	r3, [sp, #4]
 800cb2c:	6120      	str	r0, [r4, #16]
 800cb2e:	b15b      	cbz	r3, 800cb48 <__smakebuf_r+0x74>
 800cb30:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cb34:	4630      	mov	r0, r6
 800cb36:	f000 f8d1 	bl	800ccdc <_isatty_r>
 800cb3a:	b128      	cbz	r0, 800cb48 <__smakebuf_r+0x74>
 800cb3c:	89a3      	ldrh	r3, [r4, #12]
 800cb3e:	f023 0303 	bic.w	r3, r3, #3
 800cb42:	f043 0301 	orr.w	r3, r3, #1
 800cb46:	81a3      	strh	r3, [r4, #12]
 800cb48:	89a0      	ldrh	r0, [r4, #12]
 800cb4a:	4305      	orrs	r5, r0
 800cb4c:	81a5      	strh	r5, [r4, #12]
 800cb4e:	e7cd      	b.n	800caec <__smakebuf_r+0x18>
 800cb50:	0800c8e9 	.word	0x0800c8e9

0800cb54 <_malloc_usable_size_r>:
 800cb54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cb58:	1f18      	subs	r0, r3, #4
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	bfbc      	itt	lt
 800cb5e:	580b      	ldrlt	r3, [r1, r0]
 800cb60:	18c0      	addlt	r0, r0, r3
 800cb62:	4770      	bx	lr

0800cb64 <_raise_r>:
 800cb64:	291f      	cmp	r1, #31
 800cb66:	b538      	push	{r3, r4, r5, lr}
 800cb68:	4604      	mov	r4, r0
 800cb6a:	460d      	mov	r5, r1
 800cb6c:	d904      	bls.n	800cb78 <_raise_r+0x14>
 800cb6e:	2316      	movs	r3, #22
 800cb70:	6003      	str	r3, [r0, #0]
 800cb72:	f04f 30ff 	mov.w	r0, #4294967295
 800cb76:	bd38      	pop	{r3, r4, r5, pc}
 800cb78:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800cb7a:	b112      	cbz	r2, 800cb82 <_raise_r+0x1e>
 800cb7c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cb80:	b94b      	cbnz	r3, 800cb96 <_raise_r+0x32>
 800cb82:	4620      	mov	r0, r4
 800cb84:	f000 f830 	bl	800cbe8 <_getpid_r>
 800cb88:	462a      	mov	r2, r5
 800cb8a:	4601      	mov	r1, r0
 800cb8c:	4620      	mov	r0, r4
 800cb8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cb92:	f000 b817 	b.w	800cbc4 <_kill_r>
 800cb96:	2b01      	cmp	r3, #1
 800cb98:	d00a      	beq.n	800cbb0 <_raise_r+0x4c>
 800cb9a:	1c59      	adds	r1, r3, #1
 800cb9c:	d103      	bne.n	800cba6 <_raise_r+0x42>
 800cb9e:	2316      	movs	r3, #22
 800cba0:	6003      	str	r3, [r0, #0]
 800cba2:	2001      	movs	r0, #1
 800cba4:	e7e7      	b.n	800cb76 <_raise_r+0x12>
 800cba6:	2400      	movs	r4, #0
 800cba8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800cbac:	4628      	mov	r0, r5
 800cbae:	4798      	blx	r3
 800cbb0:	2000      	movs	r0, #0
 800cbb2:	e7e0      	b.n	800cb76 <_raise_r+0x12>

0800cbb4 <raise>:
 800cbb4:	4b02      	ldr	r3, [pc, #8]	; (800cbc0 <raise+0xc>)
 800cbb6:	4601      	mov	r1, r0
 800cbb8:	6818      	ldr	r0, [r3, #0]
 800cbba:	f7ff bfd3 	b.w	800cb64 <_raise_r>
 800cbbe:	bf00      	nop
 800cbc0:	20000168 	.word	0x20000168

0800cbc4 <_kill_r>:
 800cbc4:	b538      	push	{r3, r4, r5, lr}
 800cbc6:	4d07      	ldr	r5, [pc, #28]	; (800cbe4 <_kill_r+0x20>)
 800cbc8:	2300      	movs	r3, #0
 800cbca:	4604      	mov	r4, r0
 800cbcc:	4608      	mov	r0, r1
 800cbce:	4611      	mov	r1, r2
 800cbd0:	602b      	str	r3, [r5, #0]
 800cbd2:	f7f4 fc47 	bl	8001464 <_kill>
 800cbd6:	1c43      	adds	r3, r0, #1
 800cbd8:	d102      	bne.n	800cbe0 <_kill_r+0x1c>
 800cbda:	682b      	ldr	r3, [r5, #0]
 800cbdc:	b103      	cbz	r3, 800cbe0 <_kill_r+0x1c>
 800cbde:	6023      	str	r3, [r4, #0]
 800cbe0:	bd38      	pop	{r3, r4, r5, pc}
 800cbe2:	bf00      	nop
 800cbe4:	20001d1c 	.word	0x20001d1c

0800cbe8 <_getpid_r>:
 800cbe8:	f7f4 bc34 	b.w	8001454 <_getpid>

0800cbec <__sread>:
 800cbec:	b510      	push	{r4, lr}
 800cbee:	460c      	mov	r4, r1
 800cbf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cbf4:	f000 f894 	bl	800cd20 <_read_r>
 800cbf8:	2800      	cmp	r0, #0
 800cbfa:	bfab      	itete	ge
 800cbfc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800cbfe:	89a3      	ldrhlt	r3, [r4, #12]
 800cc00:	181b      	addge	r3, r3, r0
 800cc02:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800cc06:	bfac      	ite	ge
 800cc08:	6563      	strge	r3, [r4, #84]	; 0x54
 800cc0a:	81a3      	strhlt	r3, [r4, #12]
 800cc0c:	bd10      	pop	{r4, pc}

0800cc0e <__swrite>:
 800cc0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc12:	461f      	mov	r7, r3
 800cc14:	898b      	ldrh	r3, [r1, #12]
 800cc16:	05db      	lsls	r3, r3, #23
 800cc18:	4605      	mov	r5, r0
 800cc1a:	460c      	mov	r4, r1
 800cc1c:	4616      	mov	r6, r2
 800cc1e:	d505      	bpl.n	800cc2c <__swrite+0x1e>
 800cc20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc24:	2302      	movs	r3, #2
 800cc26:	2200      	movs	r2, #0
 800cc28:	f000 f868 	bl	800ccfc <_lseek_r>
 800cc2c:	89a3      	ldrh	r3, [r4, #12]
 800cc2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cc32:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cc36:	81a3      	strh	r3, [r4, #12]
 800cc38:	4632      	mov	r2, r6
 800cc3a:	463b      	mov	r3, r7
 800cc3c:	4628      	mov	r0, r5
 800cc3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cc42:	f000 b817 	b.w	800cc74 <_write_r>

0800cc46 <__sseek>:
 800cc46:	b510      	push	{r4, lr}
 800cc48:	460c      	mov	r4, r1
 800cc4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc4e:	f000 f855 	bl	800ccfc <_lseek_r>
 800cc52:	1c43      	adds	r3, r0, #1
 800cc54:	89a3      	ldrh	r3, [r4, #12]
 800cc56:	bf15      	itete	ne
 800cc58:	6560      	strne	r0, [r4, #84]	; 0x54
 800cc5a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800cc5e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800cc62:	81a3      	strheq	r3, [r4, #12]
 800cc64:	bf18      	it	ne
 800cc66:	81a3      	strhne	r3, [r4, #12]
 800cc68:	bd10      	pop	{r4, pc}

0800cc6a <__sclose>:
 800cc6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc6e:	f000 b813 	b.w	800cc98 <_close_r>
	...

0800cc74 <_write_r>:
 800cc74:	b538      	push	{r3, r4, r5, lr}
 800cc76:	4d07      	ldr	r5, [pc, #28]	; (800cc94 <_write_r+0x20>)
 800cc78:	4604      	mov	r4, r0
 800cc7a:	4608      	mov	r0, r1
 800cc7c:	4611      	mov	r1, r2
 800cc7e:	2200      	movs	r2, #0
 800cc80:	602a      	str	r2, [r5, #0]
 800cc82:	461a      	mov	r2, r3
 800cc84:	f7f4 fc25 	bl	80014d2 <_write>
 800cc88:	1c43      	adds	r3, r0, #1
 800cc8a:	d102      	bne.n	800cc92 <_write_r+0x1e>
 800cc8c:	682b      	ldr	r3, [r5, #0]
 800cc8e:	b103      	cbz	r3, 800cc92 <_write_r+0x1e>
 800cc90:	6023      	str	r3, [r4, #0]
 800cc92:	bd38      	pop	{r3, r4, r5, pc}
 800cc94:	20001d1c 	.word	0x20001d1c

0800cc98 <_close_r>:
 800cc98:	b538      	push	{r3, r4, r5, lr}
 800cc9a:	4d06      	ldr	r5, [pc, #24]	; (800ccb4 <_close_r+0x1c>)
 800cc9c:	2300      	movs	r3, #0
 800cc9e:	4604      	mov	r4, r0
 800cca0:	4608      	mov	r0, r1
 800cca2:	602b      	str	r3, [r5, #0]
 800cca4:	f7f4 fc31 	bl	800150a <_close>
 800cca8:	1c43      	adds	r3, r0, #1
 800ccaa:	d102      	bne.n	800ccb2 <_close_r+0x1a>
 800ccac:	682b      	ldr	r3, [r5, #0]
 800ccae:	b103      	cbz	r3, 800ccb2 <_close_r+0x1a>
 800ccb0:	6023      	str	r3, [r4, #0]
 800ccb2:	bd38      	pop	{r3, r4, r5, pc}
 800ccb4:	20001d1c 	.word	0x20001d1c

0800ccb8 <_fstat_r>:
 800ccb8:	b538      	push	{r3, r4, r5, lr}
 800ccba:	4d07      	ldr	r5, [pc, #28]	; (800ccd8 <_fstat_r+0x20>)
 800ccbc:	2300      	movs	r3, #0
 800ccbe:	4604      	mov	r4, r0
 800ccc0:	4608      	mov	r0, r1
 800ccc2:	4611      	mov	r1, r2
 800ccc4:	602b      	str	r3, [r5, #0]
 800ccc6:	f7f4 fc2c 	bl	8001522 <_fstat>
 800ccca:	1c43      	adds	r3, r0, #1
 800cccc:	d102      	bne.n	800ccd4 <_fstat_r+0x1c>
 800ccce:	682b      	ldr	r3, [r5, #0]
 800ccd0:	b103      	cbz	r3, 800ccd4 <_fstat_r+0x1c>
 800ccd2:	6023      	str	r3, [r4, #0]
 800ccd4:	bd38      	pop	{r3, r4, r5, pc}
 800ccd6:	bf00      	nop
 800ccd8:	20001d1c 	.word	0x20001d1c

0800ccdc <_isatty_r>:
 800ccdc:	b538      	push	{r3, r4, r5, lr}
 800ccde:	4d06      	ldr	r5, [pc, #24]	; (800ccf8 <_isatty_r+0x1c>)
 800cce0:	2300      	movs	r3, #0
 800cce2:	4604      	mov	r4, r0
 800cce4:	4608      	mov	r0, r1
 800cce6:	602b      	str	r3, [r5, #0]
 800cce8:	f7f4 fc2b 	bl	8001542 <_isatty>
 800ccec:	1c43      	adds	r3, r0, #1
 800ccee:	d102      	bne.n	800ccf6 <_isatty_r+0x1a>
 800ccf0:	682b      	ldr	r3, [r5, #0]
 800ccf2:	b103      	cbz	r3, 800ccf6 <_isatty_r+0x1a>
 800ccf4:	6023      	str	r3, [r4, #0]
 800ccf6:	bd38      	pop	{r3, r4, r5, pc}
 800ccf8:	20001d1c 	.word	0x20001d1c

0800ccfc <_lseek_r>:
 800ccfc:	b538      	push	{r3, r4, r5, lr}
 800ccfe:	4d07      	ldr	r5, [pc, #28]	; (800cd1c <_lseek_r+0x20>)
 800cd00:	4604      	mov	r4, r0
 800cd02:	4608      	mov	r0, r1
 800cd04:	4611      	mov	r1, r2
 800cd06:	2200      	movs	r2, #0
 800cd08:	602a      	str	r2, [r5, #0]
 800cd0a:	461a      	mov	r2, r3
 800cd0c:	f7f4 fc24 	bl	8001558 <_lseek>
 800cd10:	1c43      	adds	r3, r0, #1
 800cd12:	d102      	bne.n	800cd1a <_lseek_r+0x1e>
 800cd14:	682b      	ldr	r3, [r5, #0]
 800cd16:	b103      	cbz	r3, 800cd1a <_lseek_r+0x1e>
 800cd18:	6023      	str	r3, [r4, #0]
 800cd1a:	bd38      	pop	{r3, r4, r5, pc}
 800cd1c:	20001d1c 	.word	0x20001d1c

0800cd20 <_read_r>:
 800cd20:	b538      	push	{r3, r4, r5, lr}
 800cd22:	4d07      	ldr	r5, [pc, #28]	; (800cd40 <_read_r+0x20>)
 800cd24:	4604      	mov	r4, r0
 800cd26:	4608      	mov	r0, r1
 800cd28:	4611      	mov	r1, r2
 800cd2a:	2200      	movs	r2, #0
 800cd2c:	602a      	str	r2, [r5, #0]
 800cd2e:	461a      	mov	r2, r3
 800cd30:	f7f4 fbb2 	bl	8001498 <_read>
 800cd34:	1c43      	adds	r3, r0, #1
 800cd36:	d102      	bne.n	800cd3e <_read_r+0x1e>
 800cd38:	682b      	ldr	r3, [r5, #0]
 800cd3a:	b103      	cbz	r3, 800cd3e <_read_r+0x1e>
 800cd3c:	6023      	str	r3, [r4, #0]
 800cd3e:	bd38      	pop	{r3, r4, r5, pc}
 800cd40:	20001d1c 	.word	0x20001d1c

0800cd44 <_init>:
 800cd44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd46:	bf00      	nop
 800cd48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd4a:	bc08      	pop	{r3}
 800cd4c:	469e      	mov	lr, r3
 800cd4e:	4770      	bx	lr

0800cd50 <_fini>:
 800cd50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd52:	bf00      	nop
 800cd54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd56:	bc08      	pop	{r3}
 800cd58:	469e      	mov	lr, r3
 800cd5a:	4770      	bx	lr
