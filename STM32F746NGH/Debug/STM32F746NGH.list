
STM32F746NGH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f2e4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007dc  0800f4b8  0800f4b8  0001f4b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fc94  0800fc94  00020314  2**0
                  CONTENTS
  4 .ARM          00000008  0800fc94  0800fc94  0001fc94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fc9c  0800fc9c  00020314  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fc9c  0800fc9c  0001fc9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fca0  0800fca0  0001fca0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000314  20000000  0800fca4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a2c  20000314  0800ffb8  00020314  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001d40  0800ffb8  00021d40  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020314  2**0
                  CONTENTS, READONLY
 12 .debug_info   000185ac  00000000  00000000  00020344  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004523  00000000  00000000  000388f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001460  00000000  00000000  0003ce18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001228  00000000  00000000  0003e278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b7a3  00000000  00000000  0003f4a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000214c7  00000000  00000000  0006ac43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ea070  00000000  00000000  0008c10a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0017617a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006558  00000000  00000000  001761cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000314 	.word	0x20000314
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800f49c 	.word	0x0800f49c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000318 	.word	0x20000318
 800020c:	0800f49c 	.word	0x0800f49c

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9aa 	b.w	8001004 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff33 	bl	8000b3c <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fca9 	bl	8000658 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc2a 	bl	8000564 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fca0 	bl	8000658 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff fae2 	bl	80002e8 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	468e      	mov	lr, r1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d14d      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d42:	428a      	cmp	r2, r1
 8000d44:	4694      	mov	ip, r2
 8000d46:	d969      	bls.n	8000e1c <__udivmoddi4+0xe8>
 8000d48:	fab2 f282 	clz	r2, r2
 8000d4c:	b152      	cbz	r2, 8000d64 <__udivmoddi4+0x30>
 8000d4e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d52:	f1c2 0120 	rsb	r1, r2, #32
 8000d56:	fa20 f101 	lsr.w	r1, r0, r1
 8000d5a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d62:	4094      	lsls	r4, r2
 8000d64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d68:	0c21      	lsrs	r1, r4, #16
 8000d6a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d6e:	fa1f f78c 	uxth.w	r7, ip
 8000d72:	fb08 e316 	mls	r3, r8, r6, lr
 8000d76:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d7a:	fb06 f107 	mul.w	r1, r6, r7
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d8a:	f080 811f 	bcs.w	8000fcc <__udivmoddi4+0x298>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 811c 	bls.w	8000fcc <__udivmoddi4+0x298>
 8000d94:	3e02      	subs	r6, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a5b      	subs	r3, r3, r1
 8000d9a:	b2a4      	uxth	r4, r4
 8000d9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da0:	fb08 3310 	mls	r3, r8, r0, r3
 8000da4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da8:	fb00 f707 	mul.w	r7, r0, r7
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	d90a      	bls.n	8000dc6 <__udivmoddi4+0x92>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db8:	f080 810a 	bcs.w	8000fd0 <__udivmoddi4+0x29c>
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	f240 8107 	bls.w	8000fd0 <__udivmoddi4+0x29c>
 8000dc2:	4464      	add	r4, ip
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dca:	1be4      	subs	r4, r4, r7
 8000dcc:	2600      	movs	r6, #0
 8000dce:	b11d      	cbz	r5, 8000dd8 <__udivmoddi4+0xa4>
 8000dd0:	40d4      	lsrs	r4, r2
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dd8:	4631      	mov	r1, r6
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d909      	bls.n	8000df6 <__udivmoddi4+0xc2>
 8000de2:	2d00      	cmp	r5, #0
 8000de4:	f000 80ef 	beq.w	8000fc6 <__udivmoddi4+0x292>
 8000de8:	2600      	movs	r6, #0
 8000dea:	e9c5 0100 	strd	r0, r1, [r5]
 8000dee:	4630      	mov	r0, r6
 8000df0:	4631      	mov	r1, r6
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	fab3 f683 	clz	r6, r3
 8000dfa:	2e00      	cmp	r6, #0
 8000dfc:	d14a      	bne.n	8000e94 <__udivmoddi4+0x160>
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d302      	bcc.n	8000e08 <__udivmoddi4+0xd4>
 8000e02:	4282      	cmp	r2, r0
 8000e04:	f200 80f9 	bhi.w	8000ffa <__udivmoddi4+0x2c6>
 8000e08:	1a84      	subs	r4, r0, r2
 8000e0a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e0e:	2001      	movs	r0, #1
 8000e10:	469e      	mov	lr, r3
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	d0e0      	beq.n	8000dd8 <__udivmoddi4+0xa4>
 8000e16:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e1a:	e7dd      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000e1c:	b902      	cbnz	r2, 8000e20 <__udivmoddi4+0xec>
 8000e1e:	deff      	udf	#255	; 0xff
 8000e20:	fab2 f282 	clz	r2, r2
 8000e24:	2a00      	cmp	r2, #0
 8000e26:	f040 8092 	bne.w	8000f4e <__udivmoddi4+0x21a>
 8000e2a:	eba1 010c 	sub.w	r1, r1, ip
 8000e2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e32:	fa1f fe8c 	uxth.w	lr, ip
 8000e36:	2601      	movs	r6, #1
 8000e38:	0c20      	lsrs	r0, r4, #16
 8000e3a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e3e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e42:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e46:	fb0e f003 	mul.w	r0, lr, r3
 8000e4a:	4288      	cmp	r0, r1
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x12c>
 8000e4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e52:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x12a>
 8000e58:	4288      	cmp	r0, r1
 8000e5a:	f200 80cb 	bhi.w	8000ff4 <__udivmoddi4+0x2c0>
 8000e5e:	4643      	mov	r3, r8
 8000e60:	1a09      	subs	r1, r1, r0
 8000e62:	b2a4      	uxth	r4, r4
 8000e64:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e68:	fb07 1110 	mls	r1, r7, r0, r1
 8000e6c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e70:	fb0e fe00 	mul.w	lr, lr, r0
 8000e74:	45a6      	cmp	lr, r4
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x156>
 8000e78:	eb1c 0404 	adds.w	r4, ip, r4
 8000e7c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e80:	d202      	bcs.n	8000e88 <__udivmoddi4+0x154>
 8000e82:	45a6      	cmp	lr, r4
 8000e84:	f200 80bb 	bhi.w	8000ffe <__udivmoddi4+0x2ca>
 8000e88:	4608      	mov	r0, r1
 8000e8a:	eba4 040e 	sub.w	r4, r4, lr
 8000e8e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e92:	e79c      	b.n	8000dce <__udivmoddi4+0x9a>
 8000e94:	f1c6 0720 	rsb	r7, r6, #32
 8000e98:	40b3      	lsls	r3, r6
 8000e9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ea2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ea6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eaa:	431c      	orrs	r4, r3
 8000eac:	40f9      	lsrs	r1, r7
 8000eae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eb2:	fa00 f306 	lsl.w	r3, r0, r6
 8000eb6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eba:	0c20      	lsrs	r0, r4, #16
 8000ebc:	fa1f fe8c 	uxth.w	lr, ip
 8000ec0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ec4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ec8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ecc:	4288      	cmp	r0, r1
 8000ece:	fa02 f206 	lsl.w	r2, r2, r6
 8000ed2:	d90b      	bls.n	8000eec <__udivmoddi4+0x1b8>
 8000ed4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000edc:	f080 8088 	bcs.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee0:	4288      	cmp	r0, r1
 8000ee2:	f240 8085 	bls.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	1a09      	subs	r1, r1, r0
 8000eee:	b2a4      	uxth	r4, r4
 8000ef0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ef4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ef8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000efc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f00:	458e      	cmp	lr, r1
 8000f02:	d908      	bls.n	8000f16 <__udivmoddi4+0x1e2>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f0c:	d26c      	bcs.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f0e:	458e      	cmp	lr, r1
 8000f10:	d96a      	bls.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f12:	3802      	subs	r0, #2
 8000f14:	4461      	add	r1, ip
 8000f16:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f1a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f1e:	eba1 010e 	sub.w	r1, r1, lr
 8000f22:	42a1      	cmp	r1, r4
 8000f24:	46c8      	mov	r8, r9
 8000f26:	46a6      	mov	lr, r4
 8000f28:	d356      	bcc.n	8000fd8 <__udivmoddi4+0x2a4>
 8000f2a:	d053      	beq.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f2c:	b15d      	cbz	r5, 8000f46 <__udivmoddi4+0x212>
 8000f2e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f32:	eb61 010e 	sbc.w	r1, r1, lr
 8000f36:	fa01 f707 	lsl.w	r7, r1, r7
 8000f3a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f3e:	40f1      	lsrs	r1, r6
 8000f40:	431f      	orrs	r7, r3
 8000f42:	e9c5 7100 	strd	r7, r1, [r5]
 8000f46:	2600      	movs	r6, #0
 8000f48:	4631      	mov	r1, r6
 8000f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f4e:	f1c2 0320 	rsb	r3, r2, #32
 8000f52:	40d8      	lsrs	r0, r3
 8000f54:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f58:	fa21 f303 	lsr.w	r3, r1, r3
 8000f5c:	4091      	lsls	r1, r2
 8000f5e:	4301      	orrs	r1, r0
 8000f60:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f64:	fa1f fe8c 	uxth.w	lr, ip
 8000f68:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f6c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f70:	0c0b      	lsrs	r3, r1, #16
 8000f72:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f76:	fb00 f60e 	mul.w	r6, r0, lr
 8000f7a:	429e      	cmp	r6, r3
 8000f7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f80:	d908      	bls.n	8000f94 <__udivmoddi4+0x260>
 8000f82:	eb1c 0303 	adds.w	r3, ip, r3
 8000f86:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f8a:	d22f      	bcs.n	8000fec <__udivmoddi4+0x2b8>
 8000f8c:	429e      	cmp	r6, r3
 8000f8e:	d92d      	bls.n	8000fec <__udivmoddi4+0x2b8>
 8000f90:	3802      	subs	r0, #2
 8000f92:	4463      	add	r3, ip
 8000f94:	1b9b      	subs	r3, r3, r6
 8000f96:	b289      	uxth	r1, r1
 8000f98:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f9c:	fb07 3316 	mls	r3, r7, r6, r3
 8000fa0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fa4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fa8:	428b      	cmp	r3, r1
 8000faa:	d908      	bls.n	8000fbe <__udivmoddi4+0x28a>
 8000fac:	eb1c 0101 	adds.w	r1, ip, r1
 8000fb0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fb4:	d216      	bcs.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fb6:	428b      	cmp	r3, r1
 8000fb8:	d914      	bls.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fba:	3e02      	subs	r6, #2
 8000fbc:	4461      	add	r1, ip
 8000fbe:	1ac9      	subs	r1, r1, r3
 8000fc0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fc4:	e738      	b.n	8000e38 <__udivmoddi4+0x104>
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e705      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e3      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6f8      	b.n	8000dc6 <__udivmoddi4+0x92>
 8000fd4:	454b      	cmp	r3, r9
 8000fd6:	d2a9      	bcs.n	8000f2c <__udivmoddi4+0x1f8>
 8000fd8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fdc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7a3      	b.n	8000f2c <__udivmoddi4+0x1f8>
 8000fe4:	4646      	mov	r6, r8
 8000fe6:	e7ea      	b.n	8000fbe <__udivmoddi4+0x28a>
 8000fe8:	4620      	mov	r0, r4
 8000fea:	e794      	b.n	8000f16 <__udivmoddi4+0x1e2>
 8000fec:	4640      	mov	r0, r8
 8000fee:	e7d1      	b.n	8000f94 <__udivmoddi4+0x260>
 8000ff0:	46d0      	mov	r8, sl
 8000ff2:	e77b      	b.n	8000eec <__udivmoddi4+0x1b8>
 8000ff4:	3b02      	subs	r3, #2
 8000ff6:	4461      	add	r1, ip
 8000ff8:	e732      	b.n	8000e60 <__udivmoddi4+0x12c>
 8000ffa:	4630      	mov	r0, r6
 8000ffc:	e709      	b.n	8000e12 <__udivmoddi4+0xde>
 8000ffe:	4464      	add	r4, ip
 8001000:	3802      	subs	r0, #2
 8001002:	e742      	b.n	8000e8a <__udivmoddi4+0x156>

08001004 <__aeabi_idiv0>:
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop

08001008 <apInit>:
#include "ap.h"



void apInit(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
  cliOpen(_DEF_UART1, 9600);    //USB
 800100c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8001010:	2000      	movs	r0, #0
 8001012:	f000 faed 	bl	80015f0 <cliOpen>
  i2cOpen(_DEF_I2C1, I2C_FREQ_100KHz);
 8001016:	2100      	movs	r1, #0
 8001018:	2000      	movs	r0, #0
 800101a:	f001 f999 	bl	8002350 <i2cOpen>
}
 800101e:	bf00      	nop
 8001020:	bd80      	pop	{r7, pc}

08001022 <apMain>:

void apMain(void)
{
 8001022:	b580      	push	{r7, lr}
 8001024:	b082      	sub	sp, #8
 8001026:	af00      	add	r7, sp, #0
  uint32_t pre_time;

  pre_time = millis();
 8001028:	f000 f89b 	bl	8001162 <millis>
 800102c:	6078      	str	r0, [r7, #4]
  while(1)
  {
    if(millis() - pre_time >= 1000)
 800102e:	f000 f898 	bl	8001162 <millis>
 8001032:	4602      	mov	r2, r0
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	1ad3      	subs	r3, r2, r3
 8001038:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800103c:	d305      	bcc.n	800104a <apMain+0x28>
    {
      pre_time = millis();
 800103e:	f000 f890 	bl	8001162 <millis>
 8001042:	6078      	str	r0, [r7, #4]
      ledToggle(_DEF_LED1);
 8001044:	2000      	movs	r0, #0
 8001046:	f001 ff8b 	bl	8002f60 <ledToggle>
//      ledToggle(_DEF_BACKLIGHT);
    }

    cliMain();
 800104a:	f000 fb89 	bl	8001760 <cliMain>
    if(millis() - pre_time >= 1000)
 800104e:	e7ee      	b.n	800102e <apMain+0xc>

08001050 <bspInit>:




void bspInit(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b08a      	sub	sp, #40	; 0x28
 8001054:	af00      	add	r7, sp, #0
  MPU_Config();
 8001056:	f000 f8fb 	bl	8001250 <MPU_Config>
  HAL_Init();
 800105a:	f002 f8a5 	bl	80031a8 <HAL_Init>
//  CPU_CACHE_Enable();
  SystemClock_Config();
 800105e:	f000 f887 	bl	8001170 <SystemClock_Config>

  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001062:	4b38      	ldr	r3, [pc, #224]	; (8001144 <bspInit+0xf4>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001066:	4a37      	ldr	r2, [pc, #220]	; (8001144 <bspInit+0xf4>)
 8001068:	f043 0301 	orr.w	r3, r3, #1
 800106c:	6313      	str	r3, [r2, #48]	; 0x30
 800106e:	4b35      	ldr	r3, [pc, #212]	; (8001144 <bspInit+0xf4>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001072:	f003 0301 	and.w	r3, r3, #1
 8001076:	613b      	str	r3, [r7, #16]
 8001078:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 800107a:	4b32      	ldr	r3, [pc, #200]	; (8001144 <bspInit+0xf4>)
 800107c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107e:	4a31      	ldr	r2, [pc, #196]	; (8001144 <bspInit+0xf4>)
 8001080:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001084:	6313      	str	r3, [r2, #48]	; 0x30
 8001086:	4b2f      	ldr	r3, [pc, #188]	; (8001144 <bspInit+0xf4>)
 8001088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800108e:	60fb      	str	r3, [r7, #12]
 8001090:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001092:	4b2c      	ldr	r3, [pc, #176]	; (8001144 <bspInit+0xf4>)
 8001094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001096:	4a2b      	ldr	r2, [pc, #172]	; (8001144 <bspInit+0xf4>)
 8001098:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800109c:	6313      	str	r3, [r2, #48]	; 0x30
 800109e:	4b29      	ldr	r3, [pc, #164]	; (8001144 <bspInit+0xf4>)
 80010a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010a6:	60bb      	str	r3, [r7, #8]
 80010a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010aa:	4b26      	ldr	r3, [pc, #152]	; (8001144 <bspInit+0xf4>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ae:	4a25      	ldr	r2, [pc, #148]	; (8001144 <bspInit+0xf4>)
 80010b0:	f043 0304 	orr.w	r3, r3, #4
 80010b4:	6313      	str	r3, [r2, #48]	; 0x30
 80010b6:	4b23      	ldr	r3, [pc, #140]	; (8001144 <bspInit+0xf4>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ba:	f003 0304 	and.w	r3, r3, #4
 80010be:	607b      	str	r3, [r7, #4]
 80010c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010c2:	4b20      	ldr	r3, [pc, #128]	; (8001144 <bspInit+0xf4>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c6:	4a1f      	ldr	r2, [pc, #124]	; (8001144 <bspInit+0xf4>)
 80010c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010cc:	6313      	str	r3, [r2, #48]	; 0x30
 80010ce:	4b1d      	ldr	r3, [pc, #116]	; (8001144 <bspInit+0xf4>)
 80010d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010d6:	603b      	str	r3, [r7, #0]
 80010d8:	683b      	ldr	r3, [r7, #0]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010da:	f107 0314 	add.w	r3, r7, #20
 80010de:	2200      	movs	r2, #0
 80010e0:	601a      	str	r2, [r3, #0]
 80010e2:	605a      	str	r2, [r3, #4]
 80010e4:	609a      	str	r2, [r3, #8]
 80010e6:	60da      	str	r2, [r3, #12]
 80010e8:	611a      	str	r2, [r3, #16]

  GPIO_InitStruct.Pin  = GPIO_PIN_12;
 80010ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80010f0:	2311      	movs	r3, #17
 80010f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f4:	2300      	movs	r3, #0
 80010f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f8:	2300      	movs	r3, #0
 80010fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010fc:	f107 0314 	add.w	r3, r7, #20
 8001100:	4619      	mov	r1, r3
 8001102:	4811      	ldr	r0, [pc, #68]	; (8001148 <bspInit+0xf8>)
 8001104:	f002 fa90 	bl	8003628 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8001108:	2200      	movs	r2, #0
 800110a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800110e:	480e      	ldr	r0, [pc, #56]	; (8001148 <bspInit+0xf8>)
 8001110:	f002 fc36 	bl	8003980 <HAL_GPIO_WritePin>
  delay(100);
 8001114:	2064      	movs	r0, #100	; 0x64
 8001116:	f000 f819 	bl	800114c <delay>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_SET);
 800111a:	2201      	movs	r2, #1
 800111c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001120:	4809      	ldr	r0, [pc, #36]	; (8001148 <bspInit+0xf8>)
 8001122:	f002 fc2d 	bl	8003980 <HAL_GPIO_WritePin>

  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001126:	2300      	movs	r3, #0
 8001128:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800112a:	f107 0314 	add.w	r3, r7, #20
 800112e:	4619      	mov	r1, r3
 8001130:	4805      	ldr	r0, [pc, #20]	; (8001148 <bspInit+0xf8>)
 8001132:	f002 fa79 	bl	8003628 <HAL_GPIO_Init>



  MX_USB_DEVICE_Init();
 8001136:	f00a f935 	bl	800b3a4 <MX_USB_DEVICE_Init>
}
 800113a:	bf00      	nop
 800113c:	3728      	adds	r7, #40	; 0x28
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	40023800 	.word	0x40023800
 8001148:	40020000 	.word	0x40020000

0800114c <delay>:

void delay(uint32_t ms)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  HAL_Delay(ms);
 8001154:	6878      	ldr	r0, [r7, #4]
 8001156:	f002 f885 	bl	8003264 <HAL_Delay>
}
 800115a:	bf00      	nop
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}

08001162 <millis>:

uint32_t millis(void)
{
 8001162:	b580      	push	{r7, lr}
 8001164:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8001166:	f002 f871 	bl	800324c <HAL_GetTick>
 800116a:	4603      	mov	r3, r0
}
 800116c:	4618      	mov	r0, r3
 800116e:	bd80      	pop	{r7, pc}

08001170 <SystemClock_Config>:




void SystemClock_Config(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b094      	sub	sp, #80	; 0x50
 8001174:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001176:	f107 0320 	add.w	r3, r7, #32
 800117a:	2230      	movs	r2, #48	; 0x30
 800117c:	2100      	movs	r1, #0
 800117e:	4618      	mov	r0, r3
 8001180:	f00a ffe6 	bl	800c150 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001184:	f107 030c 	add.w	r3, r7, #12
 8001188:	2200      	movs	r2, #0
 800118a:	601a      	str	r2, [r3, #0]
 800118c:	605a      	str	r2, [r3, #4]
 800118e:	609a      	str	r2, [r3, #8]
 8001190:	60da      	str	r2, [r3, #12]
 8001192:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001194:	f005 fc1c 	bl	80069d0 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001198:	4b2b      	ldr	r3, [pc, #172]	; (8001248 <SystemClock_Config+0xd8>)
 800119a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119c:	4a2a      	ldr	r2, [pc, #168]	; (8001248 <SystemClock_Config+0xd8>)
 800119e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011a2:	6413      	str	r3, [r2, #64]	; 0x40
 80011a4:	4b28      	ldr	r3, [pc, #160]	; (8001248 <SystemClock_Config+0xd8>)
 80011a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ac:	60bb      	str	r3, [r7, #8]
 80011ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011b0:	4b26      	ldr	r3, [pc, #152]	; (800124c <SystemClock_Config+0xdc>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a25      	ldr	r2, [pc, #148]	; (800124c <SystemClock_Config+0xdc>)
 80011b6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80011ba:	6013      	str	r3, [r2, #0]
 80011bc:	4b23      	ldr	r3, [pc, #140]	; (800124c <SystemClock_Config+0xdc>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80011c4:	607b      	str	r3, [r7, #4]
 80011c6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011c8:	2301      	movs	r3, #1
 80011ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011d0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011d2:	2302      	movs	r3, #2
 80011d4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011d6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80011da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80011dc:	2319      	movs	r3, #25
 80011de:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
 80011e0:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 80011e4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011e6:	2302      	movs	r3, #2
 80011e8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80011ea:	2309      	movs	r3, #9
 80011ec:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011ee:	f107 0320 	add.w	r3, r7, #32
 80011f2:	4618      	mov	r0, r3
 80011f4:	f005 fc4c 	bl	8006a90 <HAL_RCC_OscConfig>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80011fe:	f000 f853 	bl	80012a8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001202:	f005 fbf5 	bl	80069f0 <HAL_PWREx_EnableOverDrive>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 800120c:	f000 f84c 	bl	80012a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001210:	230f      	movs	r3, #15
 8001212:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001214:	2302      	movs	r3, #2
 8001216:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001218:	2300      	movs	r3, #0
 800121a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800121c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001220:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001222:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001226:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001228:	f107 030c 	add.w	r3, r7, #12
 800122c:	2107      	movs	r1, #7
 800122e:	4618      	mov	r0, r3
 8001230:	f005 fed2 	bl	8006fd8 <HAL_RCC_ClockConfig>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <SystemClock_Config+0xce>
  {
    Error_Handler();
 800123a:	f000 f835 	bl	80012a8 <Error_Handler>
  }
}
 800123e:	bf00      	nop
 8001240:	3750      	adds	r7, #80	; 0x50
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	40023800 	.word	0x40023800
 800124c:	40007000 	.word	0x40007000

08001250 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001256:	463b      	mov	r3, r7
 8001258:	2200      	movs	r2, #0
 800125a:	601a      	str	r2, [r3, #0]
 800125c:	605a      	str	r2, [r3, #4]
 800125e:	609a      	str	r2, [r3, #8]
 8001260:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001262:	f002 f935 	bl	80034d0 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001266:	2301      	movs	r3, #1
 8001268:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800126a:	2300      	movs	r3, #0
 800126c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800126e:	2300      	movs	r3, #0
 8001270:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8001272:	231f      	movs	r3, #31
 8001274:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8001276:	2387      	movs	r3, #135	; 0x87
 8001278:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800127a:	2300      	movs	r3, #0
 800127c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800127e:	2300      	movs	r3, #0
 8001280:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8001282:	2301      	movs	r3, #1
 8001284:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001286:	2301      	movs	r3, #1
 8001288:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800128a:	2300      	movs	r3, #0
 800128c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800128e:	2300      	movs	r3, #0
 8001290:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001292:	463b      	mov	r3, r7
 8001294:	4618      	mov	r0, r3
 8001296:	f002 f953 	bl	8003540 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800129a:	2004      	movs	r0, #4
 800129c:	f002 f930 	bl	8003500 <HAL_MPU_Enable>

}
 80012a0:	bf00      	nop
 80012a2:	3710      	adds	r7, #16
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}

080012a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012ac:	b672      	cpsid	i
}
 80012ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012b0:	e7fe      	b.n	80012b0 <Error_Handler+0x8>
	...

080012b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80012ba:	4b0f      	ldr	r3, [pc, #60]	; (80012f8 <HAL_MspInit+0x44>)
 80012bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012be:	4a0e      	ldr	r2, [pc, #56]	; (80012f8 <HAL_MspInit+0x44>)
 80012c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012c4:	6413      	str	r3, [r2, #64]	; 0x40
 80012c6:	4b0c      	ldr	r3, [pc, #48]	; (80012f8 <HAL_MspInit+0x44>)
 80012c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ce:	607b      	str	r3, [r7, #4]
 80012d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012d2:	4b09      	ldr	r3, [pc, #36]	; (80012f8 <HAL_MspInit+0x44>)
 80012d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d6:	4a08      	ldr	r2, [pc, #32]	; (80012f8 <HAL_MspInit+0x44>)
 80012d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012dc:	6453      	str	r3, [r2, #68]	; 0x44
 80012de:	4b06      	ldr	r3, [pc, #24]	; (80012f8 <HAL_MspInit+0x44>)
 80012e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012e6:	603b      	str	r3, [r7, #0]
 80012e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012ea:	bf00      	nop
 80012ec:	370c      	adds	r7, #12
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	40023800 	.word	0x40023800

080012fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001300:	e7fe      	b.n	8001300 <NMI_Handler+0x4>

08001302 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001302:	b480      	push	{r7}
 8001304:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001306:	e7fe      	b.n	8001306 <HardFault_Handler+0x4>

08001308 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800130c:	e7fe      	b.n	800130c <MemManage_Handler+0x4>

0800130e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800130e:	b480      	push	{r7}
 8001310:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001312:	e7fe      	b.n	8001312 <BusFault_Handler+0x4>

08001314 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001318:	e7fe      	b.n	8001318 <UsageFault_Handler+0x4>

0800131a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800131a:	b480      	push	{r7}
 800131c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800131e:	bf00      	nop
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr

08001328 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800132c:	bf00      	nop
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr

08001336 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001336:	b480      	push	{r7}
 8001338:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800133a:	bf00      	nop
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr

08001344 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001348:	f001 ff6c 	bl	8003224 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800134c:	bf00      	nop
 800134e:	bd80      	pop	{r7, pc}

08001350 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001354:	4802      	ldr	r0, [pc, #8]	; (8001360 <OTG_FS_IRQHandler+0x10>)
 8001356:	f004 f9c8 	bl	80056ea <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800135a:	bf00      	nop
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	20001828 	.word	0x20001828

08001364 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  return 1;
 8001368:	2301      	movs	r3, #1
}
 800136a:	4618      	mov	r0, r3
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr

08001374 <_kill>:

int _kill(int pid, int sig)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
 800137c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800137e:	f00a fead 	bl	800c0dc <__errno>
 8001382:	4603      	mov	r3, r0
 8001384:	2216      	movs	r2, #22
 8001386:	601a      	str	r2, [r3, #0]
  return -1;
 8001388:	f04f 33ff 	mov.w	r3, #4294967295
}
 800138c:	4618      	mov	r0, r3
 800138e:	3708      	adds	r7, #8
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}

08001394 <_exit>:

void _exit (int status)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800139c:	f04f 31ff 	mov.w	r1, #4294967295
 80013a0:	6878      	ldr	r0, [r7, #4]
 80013a2:	f7ff ffe7 	bl	8001374 <_kill>
  while (1) {}    /* Make sure we hang here */
 80013a6:	e7fe      	b.n	80013a6 <_exit+0x12>

080013a8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b086      	sub	sp, #24
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	60f8      	str	r0, [r7, #12]
 80013b0:	60b9      	str	r1, [r7, #8]
 80013b2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013b4:	2300      	movs	r3, #0
 80013b6:	617b      	str	r3, [r7, #20]
 80013b8:	e00a      	b.n	80013d0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80013ba:	f3af 8000 	nop.w
 80013be:	4601      	mov	r1, r0
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	1c5a      	adds	r2, r3, #1
 80013c4:	60ba      	str	r2, [r7, #8]
 80013c6:	b2ca      	uxtb	r2, r1
 80013c8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	3301      	adds	r3, #1
 80013ce:	617b      	str	r3, [r7, #20]
 80013d0:	697a      	ldr	r2, [r7, #20]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	429a      	cmp	r2, r3
 80013d6:	dbf0      	blt.n	80013ba <_read+0x12>
  }

  return len;
 80013d8:	687b      	ldr	r3, [r7, #4]
}
 80013da:	4618      	mov	r0, r3
 80013dc:	3718      	adds	r7, #24
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}

080013e2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80013e2:	b580      	push	{r7, lr}
 80013e4:	b086      	sub	sp, #24
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	60f8      	str	r0, [r7, #12]
 80013ea:	60b9      	str	r1, [r7, #8]
 80013ec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013ee:	2300      	movs	r3, #0
 80013f0:	617b      	str	r3, [r7, #20]
 80013f2:	e009      	b.n	8001408 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	1c5a      	adds	r2, r3, #1
 80013f8:	60ba      	str	r2, [r7, #8]
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	4618      	mov	r0, r3
 80013fe:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	3301      	adds	r3, #1
 8001406:	617b      	str	r3, [r7, #20]
 8001408:	697a      	ldr	r2, [r7, #20]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	429a      	cmp	r2, r3
 800140e:	dbf1      	blt.n	80013f4 <_write+0x12>
  }
  return len;
 8001410:	687b      	ldr	r3, [r7, #4]
}
 8001412:	4618      	mov	r0, r3
 8001414:	3718      	adds	r7, #24
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}

0800141a <_close>:

int _close(int file)
{
 800141a:	b480      	push	{r7}
 800141c:	b083      	sub	sp, #12
 800141e:	af00      	add	r7, sp, #0
 8001420:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001422:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001426:	4618      	mov	r0, r3
 8001428:	370c      	adds	r7, #12
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr

08001432 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001432:	b480      	push	{r7}
 8001434:	b083      	sub	sp, #12
 8001436:	af00      	add	r7, sp, #0
 8001438:	6078      	str	r0, [r7, #4]
 800143a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001442:	605a      	str	r2, [r3, #4]
  return 0;
 8001444:	2300      	movs	r3, #0
}
 8001446:	4618      	mov	r0, r3
 8001448:	370c      	adds	r7, #12
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr

08001452 <_isatty>:

int _isatty(int file)
{
 8001452:	b480      	push	{r7}
 8001454:	b083      	sub	sp, #12
 8001456:	af00      	add	r7, sp, #0
 8001458:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800145a:	2301      	movs	r3, #1
}
 800145c:	4618      	mov	r0, r3
 800145e:	370c      	adds	r7, #12
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr

08001468 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001468:	b480      	push	{r7}
 800146a:	b085      	sub	sp, #20
 800146c:	af00      	add	r7, sp, #0
 800146e:	60f8      	str	r0, [r7, #12]
 8001470:	60b9      	str	r1, [r7, #8]
 8001472:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001474:	2300      	movs	r3, #0
}
 8001476:	4618      	mov	r0, r3
 8001478:	3714      	adds	r7, #20
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr
	...

08001484 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b086      	sub	sp, #24
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800148c:	4a14      	ldr	r2, [pc, #80]	; (80014e0 <_sbrk+0x5c>)
 800148e:	4b15      	ldr	r3, [pc, #84]	; (80014e4 <_sbrk+0x60>)
 8001490:	1ad3      	subs	r3, r2, r3
 8001492:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001498:	4b13      	ldr	r3, [pc, #76]	; (80014e8 <_sbrk+0x64>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d102      	bne.n	80014a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014a0:	4b11      	ldr	r3, [pc, #68]	; (80014e8 <_sbrk+0x64>)
 80014a2:	4a12      	ldr	r2, [pc, #72]	; (80014ec <_sbrk+0x68>)
 80014a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014a6:	4b10      	ldr	r3, [pc, #64]	; (80014e8 <_sbrk+0x64>)
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4413      	add	r3, r2
 80014ae:	693a      	ldr	r2, [r7, #16]
 80014b0:	429a      	cmp	r2, r3
 80014b2:	d207      	bcs.n	80014c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014b4:	f00a fe12 	bl	800c0dc <__errno>
 80014b8:	4603      	mov	r3, r0
 80014ba:	220c      	movs	r2, #12
 80014bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014be:	f04f 33ff 	mov.w	r3, #4294967295
 80014c2:	e009      	b.n	80014d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014c4:	4b08      	ldr	r3, [pc, #32]	; (80014e8 <_sbrk+0x64>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014ca:	4b07      	ldr	r3, [pc, #28]	; (80014e8 <_sbrk+0x64>)
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	4413      	add	r3, r2
 80014d2:	4a05      	ldr	r2, [pc, #20]	; (80014e8 <_sbrk+0x64>)
 80014d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014d6:	68fb      	ldr	r3, [r7, #12]
}
 80014d8:	4618      	mov	r0, r3
 80014da:	3718      	adds	r7, #24
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	20050000 	.word	0x20050000
 80014e4:	00000400 	.word	0x00000400
 80014e8:	20000330 	.word	0x20000330
 80014ec:	20001d40 	.word	0x20001d40

080014f0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014f4:	4b06      	ldr	r3, [pc, #24]	; (8001510 <SystemInit+0x20>)
 80014f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014fa:	4a05      	ldr	r2, [pc, #20]	; (8001510 <SystemInit+0x20>)
 80014fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001500:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001504:	bf00      	nop
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	e000ed00 	.word	0xe000ed00

08001514 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001514:	480d      	ldr	r0, [pc, #52]	; (800154c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001516:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001518:	f7ff ffea 	bl	80014f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800151c:	480c      	ldr	r0, [pc, #48]	; (8001550 <LoopForever+0x6>)
  ldr r1, =_edata
 800151e:	490d      	ldr	r1, [pc, #52]	; (8001554 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001520:	4a0d      	ldr	r2, [pc, #52]	; (8001558 <LoopForever+0xe>)
  movs r3, #0
 8001522:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001524:	e002      	b.n	800152c <LoopCopyDataInit>

08001526 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001526:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001528:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800152a:	3304      	adds	r3, #4

0800152c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800152c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800152e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001530:	d3f9      	bcc.n	8001526 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001532:	4a0a      	ldr	r2, [pc, #40]	; (800155c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001534:	4c0a      	ldr	r4, [pc, #40]	; (8001560 <LoopForever+0x16>)
  movs r3, #0
 8001536:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001538:	e001      	b.n	800153e <LoopFillZerobss>

0800153a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800153a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800153c:	3204      	adds	r2, #4

0800153e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800153e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001540:	d3fb      	bcc.n	800153a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001542:	f00a fdd1 	bl	800c0e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001546:	f00a fdbd 	bl	800c0c4 <main>

0800154a <LoopForever>:

LoopForever:
  b LoopForever
 800154a:	e7fe      	b.n	800154a <LoopForever>
  ldr   r0, =_estack
 800154c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001550:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001554:	20000314 	.word	0x20000314
  ldr r2, =_sidata
 8001558:	0800fca4 	.word	0x0800fca4
  ldr r2, =_sbss
 800155c:	20000314 	.word	0x20000314
  ldr r4, =_ebss
 8001560:	20001d40 	.word	0x20001d40

08001564 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001564:	e7fe      	b.n	8001564 <ADC_IRQHandler>
	...

08001568 <cliInit>:

void cliShowList(cli_args_t *args);


bool cliInit(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
  cli_node.is_open = false;
 800156c:	4b19      	ldr	r3, [pc, #100]	; (80015d4 <cliInit+0x6c>)
 800156e:	2200      	movs	r2, #0
 8001570:	721a      	strb	r2, [r3, #8]
  cli_node.is_log  = false;
 8001572:	4b18      	ldr	r3, [pc, #96]	; (80015d4 <cliInit+0x6c>)
 8001574:	2200      	movs	r2, #0
 8001576:	725a      	strb	r2, [r3, #9]
  cli_node.state   = CLI_RX_IDLE;
 8001578:	4b16      	ldr	r3, [pc, #88]	; (80015d4 <cliInit+0x6c>)
 800157a:	2200      	movs	r2, #0
 800157c:	741a      	strb	r2, [r3, #16]

  cli_node.hist_line_i     = 0;
 800157e:	4b15      	ldr	r3, [pc, #84]	; (80015d4 <cliInit+0x6c>)
 8001580:	2200      	movs	r2, #0
 8001582:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
  cli_node.hist_line_last  = 0;
 8001586:	4b13      	ldr	r3, [pc, #76]	; (80015d4 <cliInit+0x6c>)
 8001588:	2200      	movs	r2, #0
 800158a:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
  cli_node.hist_line_count = 0;
 800158e:	4b11      	ldr	r3, [pc, #68]	; (80015d4 <cliInit+0x6c>)
 8001590:	2200      	movs	r2, #0
 8001592:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
  cli_node.hist_line_new   = false;
 8001596:	4b0f      	ldr	r3, [pc, #60]	; (80015d4 <cliInit+0x6c>)
 8001598:	2200      	movs	r2, #0
 800159a:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

  cli_node.cmd_args.getData  = cliArgsGetData;
 800159e:	4b0d      	ldr	r3, [pc, #52]	; (80015d4 <cliInit+0x6c>)
 80015a0:	4a0d      	ldr	r2, [pc, #52]	; (80015d8 <cliInit+0x70>)
 80015a2:	f8c3 2394 	str.w	r2, [r3, #916]	; 0x394
  cli_node.cmd_args.getFloat = cliArgsGetFloat;
 80015a6:	4b0b      	ldr	r3, [pc, #44]	; (80015d4 <cliInit+0x6c>)
 80015a8:	4a0c      	ldr	r2, [pc, #48]	; (80015dc <cliInit+0x74>)
 80015aa:	f8c3 2398 	str.w	r2, [r3, #920]	; 0x398
  cli_node.cmd_args.getStr   = cliArgsGetStr;
 80015ae:	4b09      	ldr	r3, [pc, #36]	; (80015d4 <cliInit+0x6c>)
 80015b0:	4a0b      	ldr	r2, [pc, #44]	; (80015e0 <cliInit+0x78>)
 80015b2:	f8c3 239c 	str.w	r2, [r3, #924]	; 0x39c
  cli_node.cmd_args.isStr    = cliArgsIsStr;
 80015b6:	4b07      	ldr	r3, [pc, #28]	; (80015d4 <cliInit+0x6c>)
 80015b8:	4a0a      	ldr	r2, [pc, #40]	; (80015e4 <cliInit+0x7c>)
 80015ba:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0

  cliLineClean(&cli_node);
 80015be:	4805      	ldr	r0, [pc, #20]	; (80015d4 <cliInit+0x6c>)
 80015c0:	f000 fb56 	bl	8001c70 <cliLineClean>

  cliAdd("help", cliShowList);
 80015c4:	4908      	ldr	r1, [pc, #32]	; (80015e8 <cliInit+0x80>)
 80015c6:	4809      	ldr	r0, [pc, #36]	; (80015ec <cliInit+0x84>)
 80015c8:	f000 fe0c 	bl	80021e4 <cliAdd>

  return true;
 80015cc:	2301      	movs	r3, #1
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	20000334 	.word	0x20000334
 80015d8:	08002075 	.word	0x08002075
 80015dc:	080020c5 	.word	0x080020c5
 80015e0:	0800211d 	.word	0x0800211d
 80015e4:	08002165 	.word	0x08002165
 80015e8:	08002279 	.word	0x08002279
 80015ec:	0800f4b8 	.word	0x0800f4b8

080015f0 <cliOpen>:

bool cliOpen(uint8_t ch, uint32_t baud)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	4603      	mov	r3, r0
 80015f8:	6039      	str	r1, [r7, #0]
 80015fa:	71fb      	strb	r3, [r7, #7]
  cli_node.ch = ch;
 80015fc:	4a0a      	ldr	r2, [pc, #40]	; (8001628 <cliOpen+0x38>)
 80015fe:	79fb      	ldrb	r3, [r7, #7]
 8001600:	7013      	strb	r3, [r2, #0]
  cli_node.baud = baud;
 8001602:	4a09      	ldr	r2, [pc, #36]	; (8001628 <cliOpen+0x38>)
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	6053      	str	r3, [r2, #4]

  cli_node.is_open = uartOpen(ch, baud);
 8001608:	79fb      	ldrb	r3, [r7, #7]
 800160a:	6839      	ldr	r1, [r7, #0]
 800160c:	4618      	mov	r0, r3
 800160e:	f001 fd2d 	bl	800306c <uartOpen>
 8001612:	4603      	mov	r3, r0
 8001614:	461a      	mov	r2, r3
 8001616:	4b04      	ldr	r3, [pc, #16]	; (8001628 <cliOpen+0x38>)
 8001618:	721a      	strb	r2, [r3, #8]

  return cli_node.is_open;
 800161a:	4b03      	ldr	r3, [pc, #12]	; (8001628 <cliOpen+0x38>)
 800161c:	7a1b      	ldrb	r3, [r3, #8]
}
 800161e:	4618      	mov	r0, r3
 8001620:	3708      	adds	r7, #8
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	20000334 	.word	0x20000334

0800162c <cliShowLog>:
  cli_node.is_log = false;
  return true;
}

void cliShowLog(cli_t *p_cli)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b084      	sub	sp, #16
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  if (cli_node.is_log == true)
 8001634:	4b34      	ldr	r3, [pc, #208]	; (8001708 <cliShowLog+0xdc>)
 8001636:	7a5b      	ldrb	r3, [r3, #9]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d061      	beq.n	8001700 <cliShowLog+0xd4>
  {
    uartPrintf(p_cli->log_ch, "Cursor  : %d\n", p_cli->line.cursor);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	7a98      	ldrb	r0, [r3, #10]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	f893 3245 	ldrb.w	r3, [r3, #581]	; 0x245
 8001646:	461a      	mov	r2, r3
 8001648:	4930      	ldr	r1, [pc, #192]	; (800170c <cliShowLog+0xe0>)
 800164a:	f001 fd65 	bl	8003118 <uartPrintf>
    uartPrintf(p_cli->log_ch, "Count   : %d\n", p_cli->line.count);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	7a98      	ldrb	r0, [r3, #10]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	f893 3246 	ldrb.w	r3, [r3, #582]	; 0x246
 8001658:	461a      	mov	r2, r3
 800165a:	492d      	ldr	r1, [pc, #180]	; (8001710 <cliShowLog+0xe4>)
 800165c:	f001 fd5c 	bl	8003118 <uartPrintf>
    uartPrintf(p_cli->log_ch, "buf_len : %d\n", p_cli->line.buf_len);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	7a98      	ldrb	r0, [r3, #10]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	f893 3244 	ldrb.w	r3, [r3, #580]	; 0x244
 800166a:	461a      	mov	r2, r3
 800166c:	4929      	ldr	r1, [pc, #164]	; (8001714 <cliShowLog+0xe8>)
 800166e:	f001 fd53 	bl	8003118 <uartPrintf>
    uartPrintf(p_cli->log_ch, "buf     : %s\n", p_cli->line.buf);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	7a98      	ldrb	r0, [r3, #10]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	f503 7309 	add.w	r3, r3, #548	; 0x224
 800167c:	461a      	mov	r2, r3
 800167e:	4926      	ldr	r1, [pc, #152]	; (8001718 <cliShowLog+0xec>)
 8001680:	f001 fd4a 	bl	8003118 <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_i  : %d\n", p_cli->hist_line_i);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	7a98      	ldrb	r0, [r3, #10]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 800168e:	461a      	mov	r2, r3
 8001690:	4922      	ldr	r1, [pc, #136]	; (800171c <cliShowLog+0xf0>)
 8001692:	f001 fd41 	bl	8003118 <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_lt : %d\n", p_cli->hist_line_last);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	7a98      	ldrb	r0, [r3, #10]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 80016a0:	461a      	mov	r2, r3
 80016a2:	491f      	ldr	r1, [pc, #124]	; (8001720 <cliShowLog+0xf4>)
 80016a4:	f001 fd38 	bl	8003118 <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_c  : %d\n", p_cli->hist_line_count);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	7a98      	ldrb	r0, [r3, #10]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 80016b2:	461a      	mov	r2, r3
 80016b4:	491b      	ldr	r1, [pc, #108]	; (8001724 <cliShowLog+0xf8>)
 80016b6:	f001 fd2f 	bl	8003118 <uartPrintf>

    for (int i=0; i<p_cli->hist_line_count; i++)
 80016ba:	2300      	movs	r3, #0
 80016bc:	60fb      	str	r3, [r7, #12]
 80016be:	e012      	b.n	80016e6 <cliShowLog+0xba>
    {
      uartPrintf(p_cli->log_ch, "buf %d   : %s\n", i, p_cli->line_buf[i].buf);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	7a98      	ldrb	r0, [r3, #10]
 80016c4:	68fa      	ldr	r2, [r7, #12]
 80016c6:	4613      	mov	r3, r2
 80016c8:	009b      	lsls	r3, r3, #2
 80016ca:	4413      	add	r3, r2
 80016cc:	00da      	lsls	r2, r3, #3
 80016ce:	1ad2      	subs	r2, r2, r3
 80016d0:	f502 73cc 	add.w	r3, r2, #408	; 0x198
 80016d4:	687a      	ldr	r2, [r7, #4]
 80016d6:	4413      	add	r3, r2
 80016d8:	68fa      	ldr	r2, [r7, #12]
 80016da:	4913      	ldr	r1, [pc, #76]	; (8001728 <cliShowLog+0xfc>)
 80016dc:	f001 fd1c 	bl	8003118 <uartPrintf>
    for (int i=0; i<p_cli->hist_line_count; i++)
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	3301      	adds	r3, #1
 80016e4:	60fb      	str	r3, [r7, #12]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 80016ec:	461a      	mov	r2, r3
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	4293      	cmp	r3, r2
 80016f2:	dbe5      	blt.n	80016c0 <cliShowLog+0x94>
    }
    uartPrintf(p_cli->log_ch, "\n");
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	7a9b      	ldrb	r3, [r3, #10]
 80016f8:	490c      	ldr	r1, [pc, #48]	; (800172c <cliShowLog+0x100>)
 80016fa:	4618      	mov	r0, r3
 80016fc:	f001 fd0c 	bl	8003118 <uartPrintf>
  }
}
 8001700:	bf00      	nop
 8001702:	3710      	adds	r7, #16
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	20000334 	.word	0x20000334
 800170c:	0800f4c0 	.word	0x0800f4c0
 8001710:	0800f4d0 	.word	0x0800f4d0
 8001714:	0800f4e0 	.word	0x0800f4e0
 8001718:	0800f4f0 	.word	0x0800f4f0
 800171c:	0800f500 	.word	0x0800f500
 8001720:	0800f510 	.word	0x0800f510
 8001724:	0800f520 	.word	0x0800f520
 8001728:	0800f530 	.word	0x0800f530
 800172c:	0800f540 	.word	0x0800f540

08001730 <cliShowPrompt>:

void cliShowPrompt(cli_t *p_cli)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  uartPrintf(p_cli->ch, "\n\r");
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	4906      	ldr	r1, [pc, #24]	; (8001758 <cliShowPrompt+0x28>)
 800173e:	4618      	mov	r0, r3
 8001740:	f001 fcea 	bl	8003118 <uartPrintf>
  uartPrintf(p_cli->ch, CLI_PROMPT_STR);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	4904      	ldr	r1, [pc, #16]	; (800175c <cliShowPrompt+0x2c>)
 800174a:	4618      	mov	r0, r3
 800174c:	f001 fce4 	bl	8003118 <uartPrintf>
}
 8001750:	bf00      	nop
 8001752:	3708      	adds	r7, #8
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	0800f544 	.word	0x0800f544
 800175c:	0800f548 	.word	0x0800f548

08001760 <cliMain>:

bool cliMain(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
  if (cli_node.is_open != true)
 8001764:	4b0e      	ldr	r3, [pc, #56]	; (80017a0 <cliMain+0x40>)
 8001766:	7a1b      	ldrb	r3, [r3, #8]
 8001768:	f083 0301 	eor.w	r3, r3, #1
 800176c:	b2db      	uxtb	r3, r3
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <cliMain+0x16>
  {
    return false;
 8001772:	2300      	movs	r3, #0
 8001774:	e012      	b.n	800179c <cliMain+0x3c>
  }

  if (uartAvailable(cli_node.ch) > 0)
 8001776:	4b0a      	ldr	r3, [pc, #40]	; (80017a0 <cliMain+0x40>)
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	4618      	mov	r0, r3
 800177c:	f001 fc92 	bl	80030a4 <uartAvailable>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d009      	beq.n	800179a <cliMain+0x3a>
  {
    cliUpdate(&cli_node, uartRead(cli_node.ch));
 8001786:	4b06      	ldr	r3, [pc, #24]	; (80017a0 <cliMain+0x40>)
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	4618      	mov	r0, r3
 800178c:	f001 fc9d 	bl	80030ca <uartRead>
 8001790:	4603      	mov	r3, r0
 8001792:	4619      	mov	r1, r3
 8001794:	4802      	ldr	r0, [pc, #8]	; (80017a0 <cliMain+0x40>)
 8001796:	f000 f805 	bl	80017a4 <cliUpdate>
  }

  return true;
 800179a:	2301      	movs	r3, #1
}
 800179c:	4618      	mov	r0, r3
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	20000334 	.word	0x20000334

080017a4 <cliUpdate>:
{
  return uartWrite(cli_node.ch, p_data, length);
}

bool cliUpdate(cli_t *p_cli, uint8_t rx_data)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b08c      	sub	sp, #48	; 0x30
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
 80017ac:	460b      	mov	r3, r1
 80017ae:	70fb      	strb	r3, [r7, #3]
  bool ret = false;
 80017b0:	2300      	movs	r3, #0
 80017b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t tx_buf[8];
  cli_line_t *line;

  line = &p_cli->line;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	f503 7309 	add.w	r3, r3, #548	; 0x224
 80017bc:	61fb      	str	r3, [r7, #28]


  if (p_cli->state == CLI_RX_IDLE)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	7c1b      	ldrb	r3, [r3, #16]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	f040 8168 	bne.w	8001a98 <cliUpdate+0x2f4>
  {
    switch(rx_data)
 80017c8:	78fb      	ldrb	r3, [r7, #3]
 80017ca:	2b7f      	cmp	r3, #127	; 0x7f
 80017cc:	d02a      	beq.n	8001824 <cliUpdate+0x80>
 80017ce:	2b7f      	cmp	r3, #127	; 0x7f
 80017d0:	f300 80da 	bgt.w	8001988 <cliUpdate+0x1e4>
 80017d4:	2b1b      	cmp	r3, #27
 80017d6:	d021      	beq.n	800181c <cliUpdate+0x78>
 80017d8:	2b1b      	cmp	r3, #27
 80017da:	f300 80d5 	bgt.w	8001988 <cliUpdate+0x1e4>
 80017de:	2b08      	cmp	r3, #8
 80017e0:	d062      	beq.n	80018a8 <cliUpdate+0x104>
 80017e2:	2b0d      	cmp	r3, #13
 80017e4:	f040 80d0 	bne.w	8001988 <cliUpdate+0x1e4>
    {
      // 엔터
      //
      case CLI_KEY_ENTER:
        if (line->count > 0)
 80017e8:	69fb      	ldr	r3, [r7, #28]
 80017ea:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d005      	beq.n	80017fe <cliUpdate+0x5a>
        {
          cliLineAdd(p_cli);
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f000 fa56 	bl	8001ca4 <cliLineAdd>
          cliRunCmd(p_cli);
 80017f8:	6878      	ldr	r0, [r7, #4]
 80017fa:	f000 fb41 	bl	8001e80 <cliRunCmd>
        }

        line->count = 0;
 80017fe:	69fb      	ldr	r3, [r7, #28]
 8001800:	2200      	movs	r2, #0
 8001802:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
        line->cursor = 0;
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	2200      	movs	r2, #0
 800180a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        line->buf[0] = 0;
 800180e:	69fb      	ldr	r3, [r7, #28]
 8001810:	2200      	movs	r2, #0
 8001812:	701a      	strb	r2, [r3, #0]
        cliShowPrompt(p_cli);
 8001814:	6878      	ldr	r0, [r7, #4]
 8001816:	f7ff ff8b 	bl	8001730 <cliShowPrompt>
        break;
 800181a:	e144      	b.n	8001aa6 <cliUpdate+0x302>


      case CLI_KEY_ESC:
        p_cli->state = CLI_RX_SP1;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2201      	movs	r2, #1
 8001820:	741a      	strb	r2, [r3, #16]
        break;
 8001822:	e140      	b.n	8001aa6 <cliUpdate+0x302>


      // DEL
      //
      case CLI_KEY_DEL:
        if (line->cursor < line->count)
 8001824:	69fb      	ldr	r3, [r7, #28]
 8001826:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001830:	429a      	cmp	r2, r3
 8001832:	f080 8133 	bcs.w	8001a9c <cliUpdate+0x2f8>
        {
          uint8_t mov_len;

          mov_len = line->count - line->cursor;
 8001836:	69fb      	ldr	r3, [r7, #28]
 8001838:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800183c:	69fb      	ldr	r3, [r7, #28]
 800183e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001842:	1ad3      	subs	r3, r2, r3
 8001844:	76fb      	strb	r3, [r7, #27]
          for (int i=1; i<mov_len; i++)
 8001846:	2301      	movs	r3, #1
 8001848:	62fb      	str	r3, [r7, #44]	; 0x2c
 800184a:	e013      	b.n	8001874 <cliUpdate+0xd0>
          {
            line->buf[line->cursor + i - 1] = line->buf[line->cursor + i];
 800184c:	69fb      	ldr	r3, [r7, #28]
 800184e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001852:	461a      	mov	r2, r3
 8001854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001856:	441a      	add	r2, r3
 8001858:	69fb      	ldr	r3, [r7, #28]
 800185a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800185e:	4619      	mov	r1, r3
 8001860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001862:	440b      	add	r3, r1
 8001864:	3b01      	subs	r3, #1
 8001866:	69f9      	ldr	r1, [r7, #28]
 8001868:	5c89      	ldrb	r1, [r1, r2]
 800186a:	69fa      	ldr	r2, [r7, #28]
 800186c:	54d1      	strb	r1, [r2, r3]
          for (int i=1; i<mov_len; i++)
 800186e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001870:	3301      	adds	r3, #1
 8001872:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001874:	7efb      	ldrb	r3, [r7, #27]
 8001876:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001878:	429a      	cmp	r2, r3
 800187a:	dbe7      	blt.n	800184c <cliUpdate+0xa8>
          }

          line->count--;
 800187c:	69fb      	ldr	r3, [r7, #28]
 800187e:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001882:	3b01      	subs	r3, #1
 8001884:	b2da      	uxtb	r2, r3
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
          line->buf[line->count] = 0;
 800188c:	69fb      	ldr	r3, [r7, #28]
 800188e:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001892:	461a      	mov	r2, r3
 8001894:	69fb      	ldr	r3, [r7, #28]
 8001896:	2100      	movs	r1, #0
 8001898:	5499      	strb	r1, [r3, r2]

          uartPrintf(p_cli->ch, "\x1B[1P");
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	781b      	ldrb	r3, [r3, #0]
 800189e:	498e      	ldr	r1, [pc, #568]	; (8001ad8 <cliUpdate+0x334>)
 80018a0:	4618      	mov	r0, r3
 80018a2:	f001 fc39 	bl	8003118 <uartPrintf>
        }
        break;
 80018a6:	e0f9      	b.n	8001a9c <cliUpdate+0x2f8>


      // 백스페이스
      //
      case CLI_KEY_BACK:
        if (line->count > 0 && line->cursor > 0)
 80018a8:	69fb      	ldr	r3, [r7, #28]
 80018aa:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d055      	beq.n	800195e <cliUpdate+0x1ba>
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d050      	beq.n	800195e <cliUpdate+0x1ba>
        {
          if (line->cursor == line->count)
 80018bc:	69fb      	ldr	r3, [r7, #28]
 80018be:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 80018c2:	69fb      	ldr	r3, [r7, #28]
 80018c4:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80018c8:	429a      	cmp	r2, r3
 80018ca:	d10e      	bne.n	80018ea <cliUpdate+0x146>
          {
            line->count--;
 80018cc:	69fb      	ldr	r3, [r7, #28]
 80018ce:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80018d2:	3b01      	subs	r3, #1
 80018d4:	b2da      	uxtb	r2, r3
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
            line->buf[line->count] = 0;
 80018dc:	69fb      	ldr	r3, [r7, #28]
 80018de:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80018e2:	461a      	mov	r2, r3
 80018e4:	69fb      	ldr	r3, [r7, #28]
 80018e6:	2100      	movs	r1, #0
 80018e8:	5499      	strb	r1, [r3, r2]
          }

          if (line->cursor < line->count)
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 80018f0:	69fb      	ldr	r3, [r7, #28]
 80018f2:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80018f6:	429a      	cmp	r2, r3
 80018f8:	d231      	bcs.n	800195e <cliUpdate+0x1ba>
          {
            uint8_t mov_len;

            mov_len = line->count - line->cursor;
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8001900:	69fb      	ldr	r3, [r7, #28]
 8001902:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001906:	1ad3      	subs	r3, r2, r3
 8001908:	76bb      	strb	r3, [r7, #26]

            for (int i=0; i<mov_len; i++)
 800190a:	2300      	movs	r3, #0
 800190c:	62bb      	str	r3, [r7, #40]	; 0x28
 800190e:	e013      	b.n	8001938 <cliUpdate+0x194>
            {
              line->buf[line->cursor + i - 1] = line->buf[line->cursor + i];
 8001910:	69fb      	ldr	r3, [r7, #28]
 8001912:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001916:	461a      	mov	r2, r3
 8001918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800191a:	441a      	add	r2, r3
 800191c:	69fb      	ldr	r3, [r7, #28]
 800191e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001922:	4619      	mov	r1, r3
 8001924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001926:	440b      	add	r3, r1
 8001928:	3b01      	subs	r3, #1
 800192a:	69f9      	ldr	r1, [r7, #28]
 800192c:	5c89      	ldrb	r1, [r1, r2]
 800192e:	69fa      	ldr	r2, [r7, #28]
 8001930:	54d1      	strb	r1, [r2, r3]
            for (int i=0; i<mov_len; i++)
 8001932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001934:	3301      	adds	r3, #1
 8001936:	62bb      	str	r3, [r7, #40]	; 0x28
 8001938:	7ebb      	ldrb	r3, [r7, #26]
 800193a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800193c:	429a      	cmp	r2, r3
 800193e:	dbe7      	blt.n	8001910 <cliUpdate+0x16c>
            }

            line->count--;
 8001940:	69fb      	ldr	r3, [r7, #28]
 8001942:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001946:	3b01      	subs	r3, #1
 8001948:	b2da      	uxtb	r2, r3
 800194a:	69fb      	ldr	r3, [r7, #28]
 800194c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
            line->buf[line->count] = 0;
 8001950:	69fb      	ldr	r3, [r7, #28]
 8001952:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001956:	461a      	mov	r2, r3
 8001958:	69fb      	ldr	r3, [r7, #28]
 800195a:	2100      	movs	r1, #0
 800195c:	5499      	strb	r1, [r3, r2]
          }
        }

        if (line->cursor > 0)
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001964:	2b00      	cmp	r3, #0
 8001966:	f000 809b 	beq.w	8001aa0 <cliUpdate+0x2fc>
        {
          line->cursor--;
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001970:	3b01      	subs	r3, #1
 8001972:	b2da      	uxtb	r2, r3
 8001974:	69fb      	ldr	r3, [r7, #28]
 8001976:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
          uartPrintf(p_cli->ch, "\b \b\x1B[1P");
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	781b      	ldrb	r3, [r3, #0]
 800197e:	4957      	ldr	r1, [pc, #348]	; (8001adc <cliUpdate+0x338>)
 8001980:	4618      	mov	r0, r3
 8001982:	f001 fbc9 	bl	8003118 <uartPrintf>
        }
        break;
 8001986:	e08b      	b.n	8001aa0 <cliUpdate+0x2fc>


      default:
        if ((line->count + 1) < line->buf_len)
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 800198e:	3301      	adds	r3, #1
 8001990:	69fa      	ldr	r2, [r7, #28]
 8001992:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001996:	4293      	cmp	r3, r2
 8001998:	f280 8084 	bge.w	8001aa4 <cliUpdate+0x300>
        {
          if (line->cursor == line->count)
 800199c:	69fb      	ldr	r3, [r7, #28]
 800199e:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d124      	bne.n	80019f6 <cliUpdate+0x252>
          {
            uartWrite(p_cli->ch, &rx_data, 1);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	1cf9      	adds	r1, r7, #3
 80019b2:	2201      	movs	r2, #1
 80019b4:	4618      	mov	r0, r3
 80019b6:	f001 fb9a 	bl	80030ee <uartWrite>

            line->buf[line->cursor] = rx_data;
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80019c0:	461a      	mov	r2, r3
 80019c2:	78f9      	ldrb	r1, [r7, #3]
 80019c4:	69fb      	ldr	r3, [r7, #28]
 80019c6:	5499      	strb	r1, [r3, r2]
            line->count++;
 80019c8:	69fb      	ldr	r3, [r7, #28]
 80019ca:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80019ce:	3301      	adds	r3, #1
 80019d0:	b2da      	uxtb	r2, r3
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
            line->cursor++;
 80019d8:	69fb      	ldr	r3, [r7, #28]
 80019da:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80019de:	3301      	adds	r3, #1
 80019e0:	b2da      	uxtb	r2, r3
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            line->buf[line->count] = 0;
 80019e8:	69fb      	ldr	r3, [r7, #28]
 80019ea:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80019ee:	461a      	mov	r2, r3
 80019f0:	69fb      	ldr	r3, [r7, #28]
 80019f2:	2100      	movs	r1, #0
 80019f4:	5499      	strb	r1, [r3, r2]
          }
          if (line->cursor < line->count)
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 80019fc:	69fb      	ldr	r3, [r7, #28]
 80019fe:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001a02:	429a      	cmp	r2, r3
 8001a04:	d24e      	bcs.n	8001aa4 <cliUpdate+0x300>
          {
            uint8_t mov_len;

            mov_len = line->count - line->cursor;
 8001a06:	69fb      	ldr	r3, [r7, #28]
 8001a08:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8001a0c:	69fb      	ldr	r3, [r7, #28]
 8001a0e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001a12:	1ad3      	subs	r3, r2, r3
 8001a14:	767b      	strb	r3, [r7, #25]
            for (int i=0; i<mov_len; i++)
 8001a16:	2300      	movs	r3, #0
 8001a18:	627b      	str	r3, [r7, #36]	; 0x24
 8001a1a:	e013      	b.n	8001a44 <cliUpdate+0x2a0>
            {
              line->buf[line->count - i] = line->buf[line->count - i - 1];
 8001a1c:	69fb      	ldr	r3, [r7, #28]
 8001a1e:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001a22:	461a      	mov	r2, r3
 8001a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a26:	1ad3      	subs	r3, r2, r3
 8001a28:	1e5a      	subs	r2, r3, #1
 8001a2a:	69fb      	ldr	r3, [r7, #28]
 8001a2c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001a30:	4619      	mov	r1, r3
 8001a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a34:	1acb      	subs	r3, r1, r3
 8001a36:	69f9      	ldr	r1, [r7, #28]
 8001a38:	5c89      	ldrb	r1, [r1, r2]
 8001a3a:	69fa      	ldr	r2, [r7, #28]
 8001a3c:	54d1      	strb	r1, [r2, r3]
            for (int i=0; i<mov_len; i++)
 8001a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a40:	3301      	adds	r3, #1
 8001a42:	627b      	str	r3, [r7, #36]	; 0x24
 8001a44:	7e7b      	ldrb	r3, [r7, #25]
 8001a46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	dbe7      	blt.n	8001a1c <cliUpdate+0x278>
            }
            line->buf[line->cursor] = rx_data;
 8001a4c:	69fb      	ldr	r3, [r7, #28]
 8001a4e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001a52:	461a      	mov	r2, r3
 8001a54:	78f9      	ldrb	r1, [r7, #3]
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	5499      	strb	r1, [r3, r2]
            line->count++;
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001a60:	3301      	adds	r3, #1
 8001a62:	b2da      	uxtb	r2, r3
 8001a64:	69fb      	ldr	r3, [r7, #28]
 8001a66:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
            line->cursor++;
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001a70:	3301      	adds	r3, #1
 8001a72:	b2da      	uxtb	r2, r3
 8001a74:	69fb      	ldr	r3, [r7, #28]
 8001a76:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            line->buf[line->count] = 0;
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001a80:	461a      	mov	r2, r3
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	2100      	movs	r1, #0
 8001a86:	5499      	strb	r1, [r3, r2]

            uartPrintf(p_cli->ch, "\x1B[4h%c\x1B[4l", rx_data);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	78fa      	ldrb	r2, [r7, #3]
 8001a8e:	4914      	ldr	r1, [pc, #80]	; (8001ae0 <cliUpdate+0x33c>)
 8001a90:	4618      	mov	r0, r3
 8001a92:	f001 fb41 	bl	8003118 <uartPrintf>
          }
        }
        break;
 8001a96:	e005      	b.n	8001aa4 <cliUpdate+0x300>
    }
  }
 8001a98:	bf00      	nop
 8001a9a:	e004      	b.n	8001aa6 <cliUpdate+0x302>
        break;
 8001a9c:	bf00      	nop
 8001a9e:	e002      	b.n	8001aa6 <cliUpdate+0x302>
        break;
 8001aa0:	bf00      	nop
 8001aa2:	e000      	b.n	8001aa6 <cliUpdate+0x302>
        break;
 8001aa4:	bf00      	nop

  switch(p_cli->state)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	7c1b      	ldrb	r3, [r3, #16]
 8001aaa:	3b01      	subs	r3, #1
 8001aac:	2b03      	cmp	r3, #3
 8001aae:	f200 80d2 	bhi.w	8001c56 <cliUpdate+0x4b2>
 8001ab2:	a201      	add	r2, pc, #4	; (adr r2, 8001ab8 <cliUpdate+0x314>)
 8001ab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ab8:	08001ac9 	.word	0x08001ac9
 8001abc:	08001ad1 	.word	0x08001ad1
 8001ac0:	08001ae5 	.word	0x08001ae5
 8001ac4:	08001c4d 	.word	0x08001c4d
  {
    case CLI_RX_SP1:
      p_cli->state = CLI_RX_SP2;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2202      	movs	r2, #2
 8001acc:	741a      	strb	r2, [r3, #16]
      break;
 8001ace:	e0c2      	b.n	8001c56 <cliUpdate+0x4b2>

    case CLI_RX_SP2:
      p_cli->state = CLI_RX_SP3;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2203      	movs	r2, #3
 8001ad4:	741a      	strb	r2, [r3, #16]
      break;
 8001ad6:	e0be      	b.n	8001c56 <cliUpdate+0x4b2>
 8001ad8:	0800f550 	.word	0x0800f550
 8001adc:	0800f558 	.word	0x0800f558
 8001ae0:	0800f560 	.word	0x0800f560

    case CLI_RX_SP3:
      p_cli->state = CLI_RX_IDLE;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	741a      	strb	r2, [r3, #16]

      if (rx_data == CLI_KEY_LEFT)
 8001aea:	78fb      	ldrb	r3, [r7, #3]
 8001aec:	2b44      	cmp	r3, #68	; 0x44
 8001aee:	d11a      	bne.n	8001b26 <cliUpdate+0x382>
      {
        if (line->cursor > 0)
 8001af0:	69fb      	ldr	r3, [r7, #28]
 8001af2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d015      	beq.n	8001b26 <cliUpdate+0x382>
        {
          line->cursor--;
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001b00:	3b01      	subs	r3, #1
 8001b02:	b2da      	uxtb	r2, r3
 8001b04:	69fb      	ldr	r3, [r7, #28]
 8001b06:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
          tx_buf[0] = 0x1B;
 8001b0a:	231b      	movs	r3, #27
 8001b0c:	733b      	strb	r3, [r7, #12]
          tx_buf[1] = 0x5B;
 8001b0e:	235b      	movs	r3, #91	; 0x5b
 8001b10:	737b      	strb	r3, [r7, #13]
          tx_buf[2] = rx_data;
 8001b12:	78fb      	ldrb	r3, [r7, #3]
 8001b14:	73bb      	strb	r3, [r7, #14]
          uartWrite(p_cli->ch, tx_buf, 3);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	781b      	ldrb	r3, [r3, #0]
 8001b1a:	f107 010c 	add.w	r1, r7, #12
 8001b1e:	2203      	movs	r2, #3
 8001b20:	4618      	mov	r0, r3
 8001b22:	f001 fae4 	bl	80030ee <uartWrite>
        }
      }

      if (rx_data == CLI_KEY_RIGHT)
 8001b26:	78fb      	ldrb	r3, [r7, #3]
 8001b28:	2b43      	cmp	r3, #67	; 0x43
 8001b2a:	d11d      	bne.n	8001b68 <cliUpdate+0x3c4>
      {
        if (line->cursor < line->count)
 8001b2c:	69fb      	ldr	r3, [r7, #28]
 8001b2e:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d215      	bcs.n	8001b68 <cliUpdate+0x3c4>
        {
          line->cursor++;
 8001b3c:	69fb      	ldr	r3, [r7, #28]
 8001b3e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001b42:	3301      	adds	r3, #1
 8001b44:	b2da      	uxtb	r2, r3
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

          tx_buf[0] = 0x1B;
 8001b4c:	231b      	movs	r3, #27
 8001b4e:	733b      	strb	r3, [r7, #12]
          tx_buf[1] = 0x5B;
 8001b50:	235b      	movs	r3, #91	; 0x5b
 8001b52:	737b      	strb	r3, [r7, #13]
          tx_buf[2] = rx_data;
 8001b54:	78fb      	ldrb	r3, [r7, #3]
 8001b56:	73bb      	strb	r3, [r7, #14]
          uartWrite(p_cli->ch, tx_buf, 3);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	f107 010c 	add.w	r1, r7, #12
 8001b60:	2203      	movs	r2, #3
 8001b62:	4618      	mov	r0, r3
 8001b64:	f001 fac3 	bl	80030ee <uartWrite>
        }
      }

      if (rx_data == CLI_KEY_UP)
 8001b68:	78fb      	ldrb	r3, [r7, #3]
 8001b6a:	2b41      	cmp	r3, #65	; 0x41
 8001b6c:	d10c      	bne.n	8001b88 <cliUpdate+0x3e4>
      {
        cliLineChange(p_cli, true);
 8001b6e:	2101      	movs	r1, #1
 8001b70:	6878      	ldr	r0, [r7, #4]
 8001b72:	f000 f8eb 	bl	8001d4c <cliLineChange>
        uartPrintf(p_cli->ch, (char *)p_cli->line.buf);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	781a      	ldrb	r2, [r3, #0]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	f503 7309 	add.w	r3, r3, #548	; 0x224
 8001b80:	4619      	mov	r1, r3
 8001b82:	4610      	mov	r0, r2
 8001b84:	f001 fac8 	bl	8003118 <uartPrintf>
      }

      if (rx_data == CLI_KEY_DOWN)
 8001b88:	78fb      	ldrb	r3, [r7, #3]
 8001b8a:	2b42      	cmp	r3, #66	; 0x42
 8001b8c:	d10c      	bne.n	8001ba8 <cliUpdate+0x404>
      {
        cliLineChange(p_cli, false);
 8001b8e:	2100      	movs	r1, #0
 8001b90:	6878      	ldr	r0, [r7, #4]
 8001b92:	f000 f8db 	bl	8001d4c <cliLineChange>
        uartPrintf(p_cli->ch, (char *)p_cli->line.buf);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	781a      	ldrb	r2, [r3, #0]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	f503 7309 	add.w	r3, r3, #548	; 0x224
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	4610      	mov	r0, r2
 8001ba4:	f001 fab8 	bl	8003118 <uartPrintf>
      }

      if (rx_data == CLI_KEY_HOME)
 8001ba8:	78fb      	ldrb	r3, [r7, #3]
 8001baa:	2b31      	cmp	r3, #49	; 0x31
 8001bac:	d10f      	bne.n	8001bce <cliUpdate+0x42a>
      {
        uartPrintf(p_cli->ch, "\x1B[%dD", line->cursor);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	7818      	ldrb	r0, [r3, #0]
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001bb8:	461a      	mov	r2, r3
 8001bba:	492b      	ldr	r1, [pc, #172]	; (8001c68 <cliUpdate+0x4c4>)
 8001bbc:	f001 faac 	bl	8003118 <uartPrintf>
        line->cursor = 0;
 8001bc0:	69fb      	ldr	r3, [r7, #28]
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        p_cli->state = CLI_RX_SP4;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2204      	movs	r2, #4
 8001bcc:	741a      	strb	r2, [r3, #16]
      }

      if (rx_data == CLI_KEY_END)
 8001bce:	78fb      	ldrb	r3, [r7, #3]
 8001bd0:	2b34      	cmp	r3, #52	; 0x34
 8001bd2:	d13f      	bne.n	8001c54 <cliUpdate+0x4b0>
      {
        uint16_t mov_len;

        if (line->cursor < line->count)
 8001bd4:	69fb      	ldr	r3, [r7, #28]
 8001bd6:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d210      	bcs.n	8001c06 <cliUpdate+0x462>
        {
          mov_len = line->count - line->cursor;
 8001be4:	69fb      	ldr	r3, [r7, #28]
 8001be6:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001bea:	b29a      	uxth	r2, r3
 8001bec:	69fb      	ldr	r3, [r7, #28]
 8001bee:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001bf2:	b29b      	uxth	r3, r3
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	82fb      	strh	r3, [r7, #22]
          uartPrintf(p_cli->ch, "\x1B[%dC", mov_len);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	8afa      	ldrh	r2, [r7, #22]
 8001bfe:	491b      	ldr	r1, [pc, #108]	; (8001c6c <cliUpdate+0x4c8>)
 8001c00:	4618      	mov	r0, r3
 8001c02:	f001 fa89 	bl	8003118 <uartPrintf>
        }
        if (line->cursor > line->count)
 8001c06:	69fb      	ldr	r3, [r7, #28]
 8001c08:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8001c0c:	69fb      	ldr	r3, [r7, #28]
 8001c0e:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001c12:	429a      	cmp	r2, r3
 8001c14:	d910      	bls.n	8001c38 <cliUpdate+0x494>
        {
          mov_len = line->cursor - line->count;
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001c1c:	b29a      	uxth	r2, r3
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001c24:	b29b      	uxth	r3, r3
 8001c26:	1ad3      	subs	r3, r2, r3
 8001c28:	82fb      	strh	r3, [r7, #22]
          uartPrintf(p_cli->ch, "\x1B[%dD", mov_len);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	781b      	ldrb	r3, [r3, #0]
 8001c2e:	8afa      	ldrh	r2, [r7, #22]
 8001c30:	490d      	ldr	r1, [pc, #52]	; (8001c68 <cliUpdate+0x4c4>)
 8001c32:	4618      	mov	r0, r3
 8001c34:	f001 fa70 	bl	8003118 <uartPrintf>
        }
        line->cursor = line->count;
 8001c38:	69fb      	ldr	r3, [r7, #28]
 8001c3a:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        p_cli->state = CLI_RX_SP4;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2204      	movs	r2, #4
 8001c48:	741a      	strb	r2, [r3, #16]
      }
      break;
 8001c4a:	e003      	b.n	8001c54 <cliUpdate+0x4b0>

    case CLI_RX_SP4:
      p_cli->state = CLI_RX_IDLE;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2200      	movs	r2, #0
 8001c50:	741a      	strb	r2, [r3, #16]
      break;
 8001c52:	e000      	b.n	8001c56 <cliUpdate+0x4b2>
      break;
 8001c54:	bf00      	nop
  }



  cliShowLog(p_cli);
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	f7ff fce8 	bl	800162c <cliShowLog>

  return ret;
 8001c5c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3730      	adds	r7, #48	; 0x30
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	0800f56c 	.word	0x0800f56c
 8001c6c:	0800f574 	.word	0x0800f574

08001c70 <cliLineClean>:

void cliLineClean(cli_t *p_cli)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  p_cli->line.count   = 0;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	f883 2246 	strb.w	r2, [r3, #582]	; 0x246
  p_cli->line.cursor  = 0;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2200      	movs	r2, #0
 8001c84:	f883 2245 	strb.w	r2, [r3, #581]	; 0x245
  p_cli->line.buf_len = CLI_LINE_BUF_MAX - 1;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	221f      	movs	r2, #31
 8001c8c:	f883 2244 	strb.w	r2, [r3, #580]	; 0x244
  p_cli->line.buf[0]  = 0;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2200      	movs	r2, #0
 8001c94:	f883 2224 	strb.w	r2, [r3, #548]	; 0x224
}
 8001c98:	bf00      	nop
 8001c9a:	370c      	adds	r7, #12
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr

08001ca4 <cliLineAdd>:

void cliLineAdd(cli_t *p_cli)
{
 8001ca4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]

  p_cli->line_buf[p_cli->hist_line_last] = p_cli->line;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	6879      	ldr	r1, [r7, #4]
 8001cb6:	4613      	mov	r3, r2
 8001cb8:	009b      	lsls	r3, r3, #2
 8001cba:	4413      	add	r3, r2
 8001cbc:	00da      	lsls	r2, r3, #3
 8001cbe:	1ad2      	subs	r2, r2, r3
 8001cc0:	188b      	adds	r3, r1, r2
 8001cc2:	f503 72cc 	add.w	r2, r3, #408	; 0x198
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	f503 7409 	add.w	r4, r3, #548	; 0x224
 8001ccc:	4694      	mov	ip, r2
 8001cce:	f104 0e20 	add.w	lr, r4, #32
 8001cd2:	4665      	mov	r5, ip
 8001cd4:	4626      	mov	r6, r4
 8001cd6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001cd8:	6028      	str	r0, [r5, #0]
 8001cda:	6069      	str	r1, [r5, #4]
 8001cdc:	60aa      	str	r2, [r5, #8]
 8001cde:	60eb      	str	r3, [r5, #12]
 8001ce0:	3410      	adds	r4, #16
 8001ce2:	f10c 0c10 	add.w	ip, ip, #16
 8001ce6:	4574      	cmp	r4, lr
 8001ce8:	d1f3      	bne.n	8001cd2 <cliLineAdd+0x2e>
 8001cea:	4663      	mov	r3, ip
 8001cec:	4622      	mov	r2, r4
 8001cee:	8811      	ldrh	r1, [r2, #0]
 8001cf0:	7892      	ldrb	r2, [r2, #2]
 8001cf2:	8019      	strh	r1, [r3, #0]
 8001cf4:	709a      	strb	r2, [r3, #2]

  if (p_cli->hist_line_count < CLI_LINE_HIS_MAX)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 8001cfc:	2b03      	cmp	r3, #3
 8001cfe:	d807      	bhi.n	8001d10 <cliLineAdd+0x6c>
  {
    p_cli->hist_line_count++;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 8001d06:	3301      	adds	r3, #1
 8001d08:	b2da      	uxtb	r2, r3
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
  }

  p_cli->hist_line_i    = p_cli->hist_line_last;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 8001d16:	b25a      	sxtb	r2, r3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
  p_cli->hist_line_last = (p_cli->hist_line_last + 1) % CLI_LINE_HIS_MAX;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 8001d24:	3301      	adds	r3, #1
 8001d26:	425a      	negs	r2, r3
 8001d28:	f003 0303 	and.w	r3, r3, #3
 8001d2c:	f002 0203 	and.w	r2, r2, #3
 8001d30:	bf58      	it	pl
 8001d32:	4253      	negpl	r3, r2
 8001d34:	b2da      	uxtb	r2, r3
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
  p_cli->hist_line_new  = true;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2201      	movs	r2, #1
 8001d40:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
}
 8001d44:	bf00      	nop
 8001d46:	370c      	adds	r7, #12
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001d4c <cliLineChange>:

void cliLineChange(cli_t *p_cli, int8_t key_up)
{
 8001d4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d4e:	b085      	sub	sp, #20
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
 8001d54:	460b      	mov	r3, r1
 8001d56:	70fb      	strb	r3, [r7, #3]
  uint8_t change_i;


  if (p_cli->hist_line_count == 0)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	f000 8086 	beq.w	8001e70 <cliLineChange+0x124>
  {
    return;
  }


  if (p_cli->line.cursor > 0)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	f893 3245 	ldrb.w	r3, [r3, #581]	; 0x245
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d008      	beq.n	8001d80 <cliLineChange+0x34>
  {
    uartPrintf(p_cli->ch, "\x1B[%dD", p_cli->line.cursor);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	7818      	ldrb	r0, [r3, #0]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	f893 3245 	ldrb.w	r3, [r3, #581]	; 0x245
 8001d78:	461a      	mov	r2, r3
 8001d7a:	493f      	ldr	r1, [pc, #252]	; (8001e78 <cliLineChange+0x12c>)
 8001d7c:	f001 f9cc 	bl	8003118 <uartPrintf>
  }
  if (p_cli->line.count > 0)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	f893 3246 	ldrb.w	r3, [r3, #582]	; 0x246
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d008      	beq.n	8001d9c <cliLineChange+0x50>
  {
    uartPrintf(p_cli->ch, "\x1B[%dP", p_cli->line.count);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	7818      	ldrb	r0, [r3, #0]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	f893 3246 	ldrb.w	r3, [r3, #582]	; 0x246
 8001d94:	461a      	mov	r2, r3
 8001d96:	4939      	ldr	r1, [pc, #228]	; (8001e7c <cliLineChange+0x130>)
 8001d98:	f001 f9be 	bl	8003118 <uartPrintf>
  }


  if (key_up == true)
 8001d9c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d125      	bne.n	8001df0 <cliLineChange+0xa4>
  {
    if (p_cli->hist_line_new == true)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	f893 3194 	ldrb.w	r3, [r3, #404]	; 0x194
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d006      	beq.n	8001dbc <cliLineChange+0x70>
    {
      p_cli->hist_line_i = p_cli->hist_line_last;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 8001db4:	b25a      	sxtb	r2, r3
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
    }
    p_cli->hist_line_i = (p_cli->hist_line_i + p_cli->hist_line_count - 1) % p_cli->hist_line_count;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 8001dc2:	461a      	mov	r2, r3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 8001dca:	4413      	add	r3, r2
 8001dcc:	3b01      	subs	r3, #1
 8001dce:	687a      	ldr	r2, [r7, #4]
 8001dd0:	f892 2197 	ldrb.w	r2, [r2, #407]	; 0x197
 8001dd4:	fb93 f1f2 	sdiv	r1, r3, r2
 8001dd8:	fb01 f202 	mul.w	r2, r1, r2
 8001ddc:	1a9b      	subs	r3, r3, r2
 8001dde:	b25a      	sxtb	r2, r3
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
    change_i = p_cli->hist_line_i;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 8001dec:	73fb      	strb	r3, [r7, #15]
 8001dee:	e013      	b.n	8001e18 <cliLineChange+0xcc>
  }
  else
  {
    p_cli->hist_line_i = (p_cli->hist_line_i + 1) % p_cli->hist_line_count;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 8001df6:	3301      	adds	r3, #1
 8001df8:	687a      	ldr	r2, [r7, #4]
 8001dfa:	f892 2197 	ldrb.w	r2, [r2, #407]	; 0x197
 8001dfe:	fb93 f1f2 	sdiv	r1, r3, r2
 8001e02:	fb01 f202 	mul.w	r2, r1, r2
 8001e06:	1a9b      	subs	r3, r3, r2
 8001e08:	b25a      	sxtb	r2, r3
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
    change_i = p_cli->hist_line_i;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 8001e16:	73fb      	strb	r3, [r7, #15]
  }

  p_cli->line = p_cli->line_buf[change_i];
 8001e18:	7bfa      	ldrb	r2, [r7, #15]
 8001e1a:	6879      	ldr	r1, [r7, #4]
 8001e1c:	6878      	ldr	r0, [r7, #4]
 8001e1e:	4613      	mov	r3, r2
 8001e20:	009b      	lsls	r3, r3, #2
 8001e22:	4413      	add	r3, r2
 8001e24:	00da      	lsls	r2, r3, #3
 8001e26:	1ad2      	subs	r2, r2, r3
 8001e28:	1883      	adds	r3, r0, r2
 8001e2a:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 8001e2e:	461c      	mov	r4, r3
 8001e30:	f501 7609 	add.w	r6, r1, #548	; 0x224
 8001e34:	f104 0c20 	add.w	ip, r4, #32
 8001e38:	4635      	mov	r5, r6
 8001e3a:	4623      	mov	r3, r4
 8001e3c:	6818      	ldr	r0, [r3, #0]
 8001e3e:	6859      	ldr	r1, [r3, #4]
 8001e40:	689a      	ldr	r2, [r3, #8]
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e46:	3410      	adds	r4, #16
 8001e48:	3610      	adds	r6, #16
 8001e4a:	4564      	cmp	r4, ip
 8001e4c:	d1f4      	bne.n	8001e38 <cliLineChange+0xec>
 8001e4e:	4633      	mov	r3, r6
 8001e50:	4622      	mov	r2, r4
 8001e52:	8811      	ldrh	r1, [r2, #0]
 8001e54:	7892      	ldrb	r2, [r2, #2]
 8001e56:	8019      	strh	r1, [r3, #0]
 8001e58:	709a      	strb	r2, [r3, #2]
  p_cli->line.cursor = p_cli->line.count;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	f893 2246 	ldrb.w	r2, [r3, #582]	; 0x246
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	f883 2245 	strb.w	r2, [r3, #581]	; 0x245

  p_cli->hist_line_new = false;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
 8001e6e:	e000      	b.n	8001e72 <cliLineChange+0x126>
    return;
 8001e70:	bf00      	nop
}
 8001e72:	3714      	adds	r7, #20
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e78:	0800f56c 	.word	0x0800f56c
 8001e7c:	0800f57c 	.word	0x0800f57c

08001e80 <cliRunCmd>:

bool cliRunCmd(cli_t *p_cli)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b084      	sub	sp, #16
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	72fb      	strb	r3, [r7, #11]


  if (cliParseArgs(p_cli) == true)
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	f000 f851 	bl	8001f34 <cliParseArgs>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d046      	beq.n	8001f26 <cliRunCmd+0xa6>
  {
    cliPrintf("\r\n");
 8001e98:	4825      	ldr	r0, [pc, #148]	; (8001f30 <cliRunCmd+0xb0>)
 8001e9a:	f000 f893 	bl	8001fc4 <cliPrintf>

    cliToUpper(p_cli->argv[0]);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f000 f8b1 	bl	800200c <cliToUpper>

    for (int i=0; i<p_cli->cmd_count; i++)
 8001eaa:	2300      	movs	r3, #0
 8001eac:	60fb      	str	r3, [r7, #12]
 8001eae:	e033      	b.n	8001f18 <cliRunCmd+0x98>
    {
      if (strcmp(p_cli->argv[0], p_cli->cmd_list[i].cmd_str) == 0)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
 8001eb6:	68fa      	ldr	r2, [r7, #12]
 8001eb8:	4613      	mov	r3, r2
 8001eba:	009b      	lsls	r3, r3, #2
 8001ebc:	4413      	add	r3, r2
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8001ec4:	687a      	ldr	r2, [r7, #4]
 8001ec6:	4413      	add	r3, r2
 8001ec8:	3304      	adds	r3, #4
 8001eca:	4619      	mov	r1, r3
 8001ecc:	f7fe f9a0 	bl	8000210 <strcmp>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d11d      	bne.n	8001f12 <cliRunCmd+0x92>
      {
        p_cli->cmd_args.argc =  p_cli->argc - 1;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	f8b3 3112 	ldrh.w	r3, [r3, #274]	; 0x112
 8001edc:	3b01      	subs	r3, #1
 8001ede:	b29a      	uxth	r2, r3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	f8a3 238c 	strh.w	r2, [r3, #908]	; 0x38c
        p_cli->cmd_args.argv = &p_cli->argv[1];
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	f503 728c 	add.w	r2, r3, #280	; 0x118
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	f8c3 2390 	str.w	r2, [r3, #912]	; 0x390
        p_cli->cmd_list[i].cmd_func(&p_cli->cmd_args);
 8001ef2:	6879      	ldr	r1, [r7, #4]
 8001ef4:	68fa      	ldr	r2, [r7, #12]
 8001ef6:	4613      	mov	r3, r2
 8001ef8:	009b      	lsls	r3, r3, #2
 8001efa:	4413      	add	r3, r2
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	440b      	add	r3, r1
 8001f00:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	687a      	ldr	r2, [r7, #4]
 8001f08:	f502 7263 	add.w	r2, r2, #908	; 0x38c
 8001f0c:	4610      	mov	r0, r2
 8001f0e:	4798      	blx	r3
        break;
 8001f10:	e009      	b.n	8001f26 <cliRunCmd+0xa6>
    for (int i=0; i<p_cli->cmd_count; i++)
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	3301      	adds	r3, #1
 8001f16:	60fb      	str	r3, [r7, #12]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	f8b3 3248 	ldrh.w	r3, [r3, #584]	; 0x248
 8001f1e:	461a      	mov	r2, r3
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	4293      	cmp	r3, r2
 8001f24:	dbc4      	blt.n	8001eb0 <cliRunCmd+0x30>
      }
    }
  }

  return ret;
 8001f26:	7afb      	ldrb	r3, [r7, #11]
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3710      	adds	r7, #16
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	0800f584 	.word	0x0800f584

08001f34 <cliParseArgs>:

bool cliParseArgs(cli_t *p_cli)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b088      	sub	sp, #32
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	77fb      	strb	r3, [r7, #31]
  char *tok;
  char *next_ptr;
  uint16_t argc = 0;
 8001f40:	2300      	movs	r3, #0
 8001f42:	82fb      	strh	r3, [r7, #22]
  static const char *delim = " \f\n\r\t\v";
  char *cmdline;
  char **argv;

  p_cli->argc = 0;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2200      	movs	r2, #0
 8001f48:	f8a3 2112 	strh.w	r2, [r3, #274]	; 0x112

  cmdline = (char *)p_cli->line.buf;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	f503 7309 	add.w	r3, r3, #548	; 0x224
 8001f52:	613b      	str	r3, [r7, #16]
  argv    = p_cli->argv;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	f503 738a 	add.w	r3, r3, #276	; 0x114
 8001f5a:	60fb      	str	r3, [r7, #12]

  argv[argc] = NULL;
 8001f5c:	8afb      	ldrh	r3, [r7, #22]
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	68fa      	ldr	r2, [r7, #12]
 8001f62:	4413      	add	r3, r2
 8001f64:	2200      	movs	r2, #0
 8001f66:	601a      	str	r2, [r3, #0]

  for (tok = strtok_r(cmdline, delim, &next_ptr); tok; tok = strtok_r(NULL, delim, &next_ptr))
 8001f68:	4b15      	ldr	r3, [pc, #84]	; (8001fc0 <cliParseArgs+0x8c>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f107 0208 	add.w	r2, r7, #8
 8001f70:	4619      	mov	r1, r3
 8001f72:	6938      	ldr	r0, [r7, #16]
 8001f74:	f00b f892 	bl	800d09c <strtok_r>
 8001f78:	61b8      	str	r0, [r7, #24]
 8001f7a:	e010      	b.n	8001f9e <cliParseArgs+0x6a>
  {
    argv[argc++] = tok;
 8001f7c:	8afb      	ldrh	r3, [r7, #22]
 8001f7e:	1c5a      	adds	r2, r3, #1
 8001f80:	82fa      	strh	r2, [r7, #22]
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	68fa      	ldr	r2, [r7, #12]
 8001f86:	4413      	add	r3, r2
 8001f88:	69ba      	ldr	r2, [r7, #24]
 8001f8a:	601a      	str	r2, [r3, #0]
  for (tok = strtok_r(cmdline, delim, &next_ptr); tok; tok = strtok_r(NULL, delim, &next_ptr))
 8001f8c:	4b0c      	ldr	r3, [pc, #48]	; (8001fc0 <cliParseArgs+0x8c>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f107 0208 	add.w	r2, r7, #8
 8001f94:	4619      	mov	r1, r3
 8001f96:	2000      	movs	r0, #0
 8001f98:	f00b f880 	bl	800d09c <strtok_r>
 8001f9c:	61b8      	str	r0, [r7, #24]
 8001f9e:	69bb      	ldr	r3, [r7, #24]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d1eb      	bne.n	8001f7c <cliParseArgs+0x48>
  }

  p_cli->argc = argc;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	8afa      	ldrh	r2, [r7, #22]
 8001fa8:	f8a3 2112 	strh.w	r2, [r3, #274]	; 0x112

  if (argc > 0)
 8001fac:	8afb      	ldrh	r3, [r7, #22]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d001      	beq.n	8001fb6 <cliParseArgs+0x82>
  {
    ret = true;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	77fb      	strb	r3, [r7, #31]
  }

  return ret;
 8001fb6:	7ffb      	ldrb	r3, [r7, #31]
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3720      	adds	r7, #32
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	20000004 	.word	0x20000004

08001fc4 <cliPrintf>:

void cliPrintf(const char *fmt, ...)
{
 8001fc4:	b40f      	push	{r0, r1, r2, r3}
 8001fc6:	b580      	push	{r7, lr}
 8001fc8:	b084      	sub	sp, #16
 8001fca:	af00      	add	r7, sp, #0
  va_list arg;
  va_start (arg, fmt);
 8001fcc:	f107 031c 	add.w	r3, r7, #28
 8001fd0:	607b      	str	r3, [r7, #4]
  int32_t len;
  cli_t *p_cli = &cli_node;
 8001fd2:	4b0d      	ldr	r3, [pc, #52]	; (8002008 <cliPrintf+0x44>)
 8001fd4:	60fb      	str	r3, [r7, #12]


  len = vsnprintf(p_cli->print_buffer, 256, fmt, arg);
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	f103 0011 	add.w	r0, r3, #17
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	69ba      	ldr	r2, [r7, #24]
 8001fe0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001fe4:	f00b f906 	bl	800d1f4 <vsniprintf>
 8001fe8:	60b8      	str	r0, [r7, #8]
  va_end (arg);

  uartWrite(p_cli->ch, (uint8_t *)p_cli->print_buffer, len);
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	7818      	ldrb	r0, [r3, #0]
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	3311      	adds	r3, #17
 8001ff2:	68ba      	ldr	r2, [r7, #8]
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	f001 f87a 	bl	80030ee <uartWrite>
}
 8001ffa:	bf00      	nop
 8001ffc:	3710      	adds	r7, #16
 8001ffe:	46bd      	mov	sp, r7
 8002000:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002004:	b004      	add	sp, #16
 8002006:	4770      	bx	lr
 8002008:	20000334 	.word	0x20000334

0800200c <cliToUpper>:

void cliToUpper(char *str)
{
 800200c:	b480      	push	{r7}
 800200e:	b085      	sub	sp, #20
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  uint16_t i;
  uint8_t  str_ch;

  for (i=0; i<CLI_CMD_NAME_MAX; i++)
 8002014:	2300      	movs	r3, #0
 8002016:	81fb      	strh	r3, [r7, #14]
 8002018:	e018      	b.n	800204c <cliToUpper+0x40>
  {
    str_ch = str[i];
 800201a:	89fb      	ldrh	r3, [r7, #14]
 800201c:	687a      	ldr	r2, [r7, #4]
 800201e:	4413      	add	r3, r2
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	737b      	strb	r3, [r7, #13]

    if (str_ch == 0)
 8002024:	7b7b      	ldrb	r3, [r7, #13]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d014      	beq.n	8002054 <cliToUpper+0x48>
    {
      break;
    }

    if ((str_ch >= 'a') && (str_ch <= 'z'))
 800202a:	7b7b      	ldrb	r3, [r7, #13]
 800202c:	2b60      	cmp	r3, #96	; 0x60
 800202e:	d905      	bls.n	800203c <cliToUpper+0x30>
 8002030:	7b7b      	ldrb	r3, [r7, #13]
 8002032:	2b7a      	cmp	r3, #122	; 0x7a
 8002034:	d802      	bhi.n	800203c <cliToUpper+0x30>
    {
      str_ch = str_ch - 'a' + 'A';
 8002036:	7b7b      	ldrb	r3, [r7, #13]
 8002038:	3b20      	subs	r3, #32
 800203a:	737b      	strb	r3, [r7, #13]
    }
    str[i] = str_ch;
 800203c:	89fb      	ldrh	r3, [r7, #14]
 800203e:	687a      	ldr	r2, [r7, #4]
 8002040:	4413      	add	r3, r2
 8002042:	7b7a      	ldrb	r2, [r7, #13]
 8002044:	701a      	strb	r2, [r3, #0]
  for (i=0; i<CLI_CMD_NAME_MAX; i++)
 8002046:	89fb      	ldrh	r3, [r7, #14]
 8002048:	3301      	adds	r3, #1
 800204a:	81fb      	strh	r3, [r7, #14]
 800204c:	89fb      	ldrh	r3, [r7, #14]
 800204e:	2b0f      	cmp	r3, #15
 8002050:	d9e3      	bls.n	800201a <cliToUpper+0xe>
 8002052:	e000      	b.n	8002056 <cliToUpper+0x4a>
      break;
 8002054:	bf00      	nop
  }

  if (i == CLI_CMD_NAME_MAX)
 8002056:	89fb      	ldrh	r3, [r7, #14]
 8002058:	2b10      	cmp	r3, #16
 800205a:	d105      	bne.n	8002068 <cliToUpper+0x5c>
  {
    str[i-1] = 0;
 800205c:	89fb      	ldrh	r3, [r7, #14]
 800205e:	3b01      	subs	r3, #1
 8002060:	687a      	ldr	r2, [r7, #4]
 8002062:	4413      	add	r3, r2
 8002064:	2200      	movs	r2, #0
 8002066:	701a      	strb	r2, [r3, #0]
  }
}
 8002068:	bf00      	nop
 800206a:	3714      	adds	r7, #20
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr

08002074 <cliArgsGetData>:

int32_t cliArgsGetData(uint8_t index)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b084      	sub	sp, #16
 8002078:	af00      	add	r7, sp, #0
 800207a:	4603      	mov	r3, r0
 800207c:	71fb      	strb	r3, [r7, #7]
  int32_t ret = 0;
 800207e:	2300      	movs	r3, #0
 8002080:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 8002082:	4b0f      	ldr	r3, [pc, #60]	; (80020c0 <cliArgsGetData+0x4c>)
 8002084:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 8002086:	79fb      	ldrb	r3, [r7, #7]
 8002088:	b29a      	uxth	r2, r3
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	f8b3 338c 	ldrh.w	r3, [r3, #908]	; 0x38c
 8002090:	429a      	cmp	r2, r3
 8002092:	d301      	bcc.n	8002098 <cliArgsGetData+0x24>
  {
    return 0;
 8002094:	2300      	movs	r3, #0
 8002096:	e00e      	b.n	80020b6 <cliArgsGetData+0x42>
  }

  ret = (int32_t)strtoul((const char * ) p_cli->cmd_args.argv[index], (char **)NULL, (int) 0);
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	f8d3 2390 	ldr.w	r2, [r3, #912]	; 0x390
 800209e:	79fb      	ldrb	r3, [r7, #7]
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	4413      	add	r3, r2
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	2200      	movs	r2, #0
 80020a8:	2100      	movs	r1, #0
 80020aa:	4618      	mov	r0, r3
 80020ac:	f00b f86c 	bl	800d188 <strtoul>
 80020b0:	4603      	mov	r3, r0
 80020b2:	60fb      	str	r3, [r7, #12]

  return ret;
 80020b4:	68fb      	ldr	r3, [r7, #12]
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3710      	adds	r7, #16
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	20000334 	.word	0x20000334

080020c4 <cliArgsGetFloat>:

float cliArgsGetFloat(uint8_t index)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b084      	sub	sp, #16
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	4603      	mov	r3, r0
 80020cc:	71fb      	strb	r3, [r7, #7]
  float ret = 0.0;
 80020ce:	f04f 0300 	mov.w	r3, #0
 80020d2:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 80020d4:	4b10      	ldr	r3, [pc, #64]	; (8002118 <cliArgsGetFloat+0x54>)
 80020d6:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 80020d8:	79fb      	ldrb	r3, [r7, #7]
 80020da:	b29a      	uxth	r2, r3
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	f8b3 338c 	ldrh.w	r3, [r3, #908]	; 0x38c
 80020e2:	429a      	cmp	r2, r3
 80020e4:	d302      	bcc.n	80020ec <cliArgsGetFloat+0x28>
  {
    return 0;
 80020e6:	f04f 0300 	mov.w	r3, #0
 80020ea:	e00d      	b.n	8002108 <cliArgsGetFloat+0x44>
  }

  ret = (float)strtof((const char * ) p_cli->cmd_args.argv[index], (char **)NULL);
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	f8d3 2390 	ldr.w	r2, [r3, #912]	; 0x390
 80020f2:	79fb      	ldrb	r3, [r7, #7]
 80020f4:	009b      	lsls	r3, r3, #2
 80020f6:	4413      	add	r3, r2
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	2100      	movs	r1, #0
 80020fc:	4618      	mov	r0, r3
 80020fe:	f00a ff49 	bl	800cf94 <strtof>
 8002102:	ed87 0a03 	vstr	s0, [r7, #12]

  return ret;
 8002106:	68fb      	ldr	r3, [r7, #12]
}
 8002108:	ee07 3a90 	vmov	s15, r3
 800210c:	eeb0 0a67 	vmov.f32	s0, s15
 8002110:	3710      	adds	r7, #16
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	20000334 	.word	0x20000334

0800211c <cliArgsGetStr>:

char *cliArgsGetStr(uint8_t index)
{
 800211c:	b480      	push	{r7}
 800211e:	b085      	sub	sp, #20
 8002120:	af00      	add	r7, sp, #0
 8002122:	4603      	mov	r3, r0
 8002124:	71fb      	strb	r3, [r7, #7]
  char *ret = NULL;
 8002126:	2300      	movs	r3, #0
 8002128:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 800212a:	4b0d      	ldr	r3, [pc, #52]	; (8002160 <cliArgsGetStr+0x44>)
 800212c:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 800212e:	79fb      	ldrb	r3, [r7, #7]
 8002130:	b29a      	uxth	r2, r3
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	f8b3 338c 	ldrh.w	r3, [r3, #908]	; 0x38c
 8002138:	429a      	cmp	r2, r3
 800213a:	d301      	bcc.n	8002140 <cliArgsGetStr+0x24>
  {
    return 0;
 800213c:	2300      	movs	r3, #0
 800213e:	e008      	b.n	8002152 <cliArgsGetStr+0x36>
  }

  ret = p_cli->cmd_args.argv[index];
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	f8d3 2390 	ldr.w	r2, [r3, #912]	; 0x390
 8002146:	79fb      	ldrb	r3, [r7, #7]
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	4413      	add	r3, r2
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	60fb      	str	r3, [r7, #12]

  return ret;
 8002150:	68fb      	ldr	r3, [r7, #12]
}
 8002152:	4618      	mov	r0, r3
 8002154:	3714      	adds	r7, #20
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr
 800215e:	bf00      	nop
 8002160:	20000334 	.word	0x20000334

08002164 <cliArgsIsStr>:

bool cliArgsIsStr(uint8_t index, char *p_str)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b084      	sub	sp, #16
 8002168:	af00      	add	r7, sp, #0
 800216a:	4603      	mov	r3, r0
 800216c:	6039      	str	r1, [r7, #0]
 800216e:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 8002170:	2300      	movs	r3, #0
 8002172:	73fb      	strb	r3, [r7, #15]
  cli_t *p_cli = &cli_node;
 8002174:	4b0f      	ldr	r3, [pc, #60]	; (80021b4 <cliArgsIsStr+0x50>)
 8002176:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 8002178:	79fb      	ldrb	r3, [r7, #7]
 800217a:	b29a      	uxth	r2, r3
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	f8b3 338c 	ldrh.w	r3, [r3, #908]	; 0x38c
 8002182:	429a      	cmp	r2, r3
 8002184:	d301      	bcc.n	800218a <cliArgsIsStr+0x26>
  {
    return 0;
 8002186:	2300      	movs	r3, #0
 8002188:	e010      	b.n	80021ac <cliArgsIsStr+0x48>
  }

  if(strcmp(p_str, p_cli->cmd_args.argv[index]) == 0)
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	f8d3 2390 	ldr.w	r2, [r3, #912]	; 0x390
 8002190:	79fb      	ldrb	r3, [r7, #7]
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	4413      	add	r3, r2
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4619      	mov	r1, r3
 800219a:	6838      	ldr	r0, [r7, #0]
 800219c:	f7fe f838 	bl	8000210 <strcmp>
 80021a0:	4603      	mov	r3, r0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d101      	bne.n	80021aa <cliArgsIsStr+0x46>
  {
    ret = true;
 80021a6:	2301      	movs	r3, #1
 80021a8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80021aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	3710      	adds	r7, #16
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	20000334 	.word	0x20000334

080021b8 <cliKeepLoop>:

bool cliKeepLoop(void)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b082      	sub	sp, #8
 80021bc:	af00      	add	r7, sp, #0
  cli_t *p_cli = &cli_node;
 80021be:	4b08      	ldr	r3, [pc, #32]	; (80021e0 <cliKeepLoop+0x28>)
 80021c0:	607b      	str	r3, [r7, #4]


  if (uartAvailable(p_cli->ch) == 0)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	781b      	ldrb	r3, [r3, #0]
 80021c6:	4618      	mov	r0, r3
 80021c8:	f000 ff6c 	bl	80030a4 <uartAvailable>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d101      	bne.n	80021d6 <cliKeepLoop+0x1e>
  {
    return true;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e000      	b.n	80021d8 <cliKeepLoop+0x20>
  }
  else
  {
    return false;
 80021d6:	2300      	movs	r3, #0
  }
}
 80021d8:	4618      	mov	r0, r3
 80021da:	3708      	adds	r7, #8
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	20000334 	.word	0x20000334

080021e4 <cliAdd>:

bool cliAdd(const char *cmd_str, void (*p_func)(cli_args_t *))
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b086      	sub	sp, #24
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
 80021ec:	6039      	str	r1, [r7, #0]
  bool ret = true;
 80021ee:	2301      	movs	r3, #1
 80021f0:	75fb      	strb	r3, [r7, #23]
  cli_t *p_cli = &cli_node;
 80021f2:	4b20      	ldr	r3, [pc, #128]	; (8002274 <cliAdd+0x90>)
 80021f4:	613b      	str	r3, [r7, #16]
  uint16_t index;

  if (p_cli->cmd_count >= CLI_CMD_LIST_MAX)
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	f8b3 3248 	ldrh.w	r3, [r3, #584]	; 0x248
 80021fc:	2b0f      	cmp	r3, #15
 80021fe:	d901      	bls.n	8002204 <cliAdd+0x20>
  {
    return false;
 8002200:	2300      	movs	r3, #0
 8002202:	e032      	b.n	800226a <cliAdd+0x86>
  }

  index = p_cli->cmd_count;
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	f8b3 3248 	ldrh.w	r3, [r3, #584]	; 0x248
 800220a:	81fb      	strh	r3, [r7, #14]

  strcpy(p_cli->cmd_list[index].cmd_str, cmd_str);
 800220c:	89fa      	ldrh	r2, [r7, #14]
 800220e:	4613      	mov	r3, r2
 8002210:	009b      	lsls	r3, r3, #2
 8002212:	4413      	add	r3, r2
 8002214:	009b      	lsls	r3, r3, #2
 8002216:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800221a:	693a      	ldr	r2, [r7, #16]
 800221c:	4413      	add	r3, r2
 800221e:	3304      	adds	r3, #4
 8002220:	6879      	ldr	r1, [r7, #4]
 8002222:	4618      	mov	r0, r3
 8002224:	f00a f88c 	bl	800c340 <strcpy>
  p_cli->cmd_list[index].cmd_func = p_func;
 8002228:	89fa      	ldrh	r2, [r7, #14]
 800222a:	6939      	ldr	r1, [r7, #16]
 800222c:	4613      	mov	r3, r2
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	4413      	add	r3, r2
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	440b      	add	r3, r1
 8002236:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 800223a:	683a      	ldr	r2, [r7, #0]
 800223c:	601a      	str	r2, [r3, #0]

  cliToUpper(p_cli->cmd_list[index].cmd_str);
 800223e:	89fa      	ldrh	r2, [r7, #14]
 8002240:	4613      	mov	r3, r2
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	4413      	add	r3, r2
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800224c:	693a      	ldr	r2, [r7, #16]
 800224e:	4413      	add	r3, r2
 8002250:	3304      	adds	r3, #4
 8002252:	4618      	mov	r0, r3
 8002254:	f7ff feda 	bl	800200c <cliToUpper>

  p_cli->cmd_count++;
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	f8b3 3248 	ldrh.w	r3, [r3, #584]	; 0x248
 800225e:	3301      	adds	r3, #1
 8002260:	b29a      	uxth	r2, r3
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	f8a3 2248 	strh.w	r2, [r3, #584]	; 0x248

  return ret;
 8002268:	7dfb      	ldrb	r3, [r7, #23]
}
 800226a:	4618      	mov	r0, r3
 800226c:	3718      	adds	r7, #24
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	20000334 	.word	0x20000334

08002278 <cliShowList>:

void cliShowList(cli_args_t *args)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b084      	sub	sp, #16
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  cli_t *p_cli = &cli_node;
 8002280:	4b15      	ldr	r3, [pc, #84]	; (80022d8 <cliShowList+0x60>)
 8002282:	60bb      	str	r3, [r7, #8]


  cliPrintf("\r\n");
 8002284:	4815      	ldr	r0, [pc, #84]	; (80022dc <cliShowList+0x64>)
 8002286:	f7ff fe9d 	bl	8001fc4 <cliPrintf>
  cliPrintf("---------- cmd list ---------\r\n");
 800228a:	4815      	ldr	r0, [pc, #84]	; (80022e0 <cliShowList+0x68>)
 800228c:	f7ff fe9a 	bl	8001fc4 <cliPrintf>

  for (int i=0; i<p_cli->cmd_count; i++)
 8002290:	2300      	movs	r3, #0
 8002292:	60fb      	str	r3, [r7, #12]
 8002294:	e012      	b.n	80022bc <cliShowList+0x44>
  {
    cliPrintf(p_cli->cmd_list[i].cmd_str);
 8002296:	68fa      	ldr	r2, [r7, #12]
 8002298:	4613      	mov	r3, r2
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	4413      	add	r3, r2
 800229e:	009b      	lsls	r3, r3, #2
 80022a0:	f503 7312 	add.w	r3, r3, #584	; 0x248
 80022a4:	68ba      	ldr	r2, [r7, #8]
 80022a6:	4413      	add	r3, r2
 80022a8:	3304      	adds	r3, #4
 80022aa:	4618      	mov	r0, r3
 80022ac:	f7ff fe8a 	bl	8001fc4 <cliPrintf>
    cliPrintf("\r\n");
 80022b0:	480a      	ldr	r0, [pc, #40]	; (80022dc <cliShowList+0x64>)
 80022b2:	f7ff fe87 	bl	8001fc4 <cliPrintf>
  for (int i=0; i<p_cli->cmd_count; i++)
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	3301      	adds	r3, #1
 80022ba:	60fb      	str	r3, [r7, #12]
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	f8b3 3248 	ldrh.w	r3, [r3, #584]	; 0x248
 80022c2:	461a      	mov	r2, r3
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	4293      	cmp	r3, r2
 80022c8:	dbe5      	blt.n	8002296 <cliShowList+0x1e>
  }

  cliPrintf("-----------------------------\r\n");
 80022ca:	4806      	ldr	r0, [pc, #24]	; (80022e4 <cliShowList+0x6c>)
 80022cc:	f7ff fe7a 	bl	8001fc4 <cliPrintf>
}
 80022d0:	bf00      	nop
 80022d2:	3710      	adds	r7, #16
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	20000334 	.word	0x20000334
 80022dc:	0800f584 	.word	0x0800f584
 80022e0:	0800f588 	.word	0x0800f588
 80022e4:	0800f5a8 	.word	0x0800f5a8

080022e8 <flashInit>:

static uint32_t flashGetSector(uint32_t Address);


bool flashInit(void)
{
 80022e8:	b480      	push	{r7}
 80022ea:	af00      	add	r7, sp, #0
  return true;
 80022ec:	2301      	movs	r3, #1
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr

080022f8 <i2cInit>:

static void delayUs(uint32_t us);


bool i2cInit(void)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b082      	sub	sp, #8
 80022fc:	af00      	add	r7, sp, #0
  uint32_t i;

  for(i=0; i<I2C_MAX_CH; i++)
 80022fe:	2300      	movs	r3, #0
 8002300:	607b      	str	r3, [r7, #4]
 8002302:	e00c      	b.n	800231e <i2cInit+0x26>
  {
    i2c_errcount[i] = 0;
 8002304:	4a0d      	ldr	r2, [pc, #52]	; (800233c <i2cInit+0x44>)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2100      	movs	r1, #0
 800230a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    is_open[i] = false;
 800230e:	4a0c      	ldr	r2, [pc, #48]	; (8002340 <i2cInit+0x48>)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	4413      	add	r3, r2
 8002314:	2200      	movs	r2, #0
 8002316:	701a      	strb	r2, [r3, #0]
  for(i=0; i<I2C_MAX_CH; i++)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	3301      	adds	r3, #1
 800231c:	607b      	str	r3, [r7, #4]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d0ef      	beq.n	8002304 <i2cInit+0xc>
  }

#ifdef _USE_HW_CLI
  cliAdd("i2c", cliI2C);
 8002324:	4907      	ldr	r1, [pc, #28]	; (8002344 <i2cInit+0x4c>)
 8002326:	4808      	ldr	r0, [pc, #32]	; (8002348 <i2cInit+0x50>)
 8002328:	f7ff ff5c 	bl	80021e4 <cliAdd>
#endif


  is_init = true;
 800232c:	4b07      	ldr	r3, [pc, #28]	; (800234c <i2cInit+0x54>)
 800232e:	2201      	movs	r2, #1
 8002330:	701a      	strb	r2, [r3, #0]

  return true;
 8002332:	2301      	movs	r3, #1
}
 8002334:	4618      	mov	r0, r3
 8002336:	3708      	adds	r7, #8
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}
 800233c:	200006d8 	.word	0x200006d8
 8002340:	200006e0 	.word	0x200006e0
 8002344:	08002a11 	.word	0x08002a11
 8002348:	0800f5d0 	.word	0x0800f5d0
 800234c:	200006dd 	.word	0x200006dd

08002350 <i2cOpen>:
{
  return is_init;
}

bool i2cOpen(uint8_t ch, i2c_freq_t freq_khz)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b084      	sub	sp, #16
 8002354:	af00      	add	r7, sp, #0
 8002356:	4603      	mov	r3, r0
 8002358:	460a      	mov	r2, r1
 800235a:	71fb      	strb	r3, [r7, #7]
 800235c:	4613      	mov	r3, r2
 800235e:	71bb      	strb	r3, [r7, #6]
  bool ret = false;
 8002360:	2300      	movs	r3, #0
 8002362:	73fb      	strb	r3, [r7, #15]

  I2C_HandleTypeDef *p_handle = i2c_tbl[ch].p_hi2c;
 8002364:	79fa      	ldrb	r2, [r7, #7]
 8002366:	492a      	ldr	r1, [pc, #168]	; (8002410 <i2cOpen+0xc0>)
 8002368:	4613      	mov	r3, r2
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	4413      	add	r3, r2
 800236e:	009b      	lsls	r3, r3, #2
 8002370:	440b      	add	r3, r1
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	60bb      	str	r3, [r7, #8]

  if(ch >= I2C_MAX_CH)
 8002376:	79fb      	ldrb	r3, [r7, #7]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d001      	beq.n	8002380 <i2cOpen+0x30>
  {
    return false;
 800237c:	2300      	movs	r3, #0
 800237e:	e042      	b.n	8002406 <i2cOpen+0xb6>
  }

  switch(ch)
 8002380:	79fb      	ldrb	r3, [r7, #7]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d13e      	bne.n	8002404 <i2cOpen+0xb4>
  {
    case _DEF_I2C1:
      i2c_freq[ch] = freq_khz;
 8002386:	79fb      	ldrb	r3, [r7, #7]
 8002388:	4922      	ldr	r1, [pc, #136]	; (8002414 <i2cOpen+0xc4>)
 800238a:	79ba      	ldrb	r2, [r7, #6]
 800238c:	54ca      	strb	r2, [r1, r3]
      is_open[ch]  = false;
 800238e:	79fb      	ldrb	r3, [r7, #7]
 8002390:	4a21      	ldr	r2, [pc, #132]	; (8002418 <i2cOpen+0xc8>)
 8002392:	2100      	movs	r1, #0
 8002394:	54d1      	strb	r1, [r2, r3]

      p_handle->Instance              = I2C3;
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	4a20      	ldr	r2, [pc, #128]	; (800241c <i2cOpen+0xcc>)
 800239a:	601a      	str	r2, [r3, #0]
      p_handle->Init.Timing           = i2c_freq_tbl[freq_khz];
 800239c:	79bb      	ldrb	r3, [r7, #6]
 800239e:	4a20      	ldr	r2, [pc, #128]	; (8002420 <i2cOpen+0xd0>)
 80023a0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	605a      	str	r2, [r3, #4]
      p_handle->Init.OwnAddress1      = 0x00;
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	2200      	movs	r2, #0
 80023ac:	609a      	str	r2, [r3, #8]
      p_handle->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	2201      	movs	r2, #1
 80023b2:	60da      	str	r2, [r3, #12]
      p_handle->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	2200      	movs	r2, #0
 80023b8:	611a      	str	r2, [r3, #16]
      p_handle->Init.OwnAddress2      = 0x00;
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	2200      	movs	r2, #0
 80023be:	615a      	str	r2, [r3, #20]
      p_handle->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	2200      	movs	r2, #0
 80023c4:	619a      	str	r2, [r3, #24]
      p_handle->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	2200      	movs	r2, #0
 80023ca:	61da      	str	r2, [r3, #28]
      p_handle->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	2200      	movs	r2, #0
 80023d0:	621a      	str	r2, [r3, #32]

      i2cReset(ch);
 80023d2:	79fb      	ldrb	r3, [r7, #7]
 80023d4:	4618      	mov	r0, r3
 80023d6:	f000 f825 	bl	8002424 <i2cReset>
//      HAL_I2C_DeInit(p_handle);
      if(HAL_I2C_Init(p_handle) == HAL_OK)
 80023da:	68b8      	ldr	r0, [r7, #8]
 80023dc:	f001 fb04 	bl	80039e8 <HAL_I2C_Init>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d10d      	bne.n	8002402 <i2cOpen+0xb2>
      {
        /* Enable the Analog I2C Filter */
        HAL_I2CEx_ConfigAnalogFilter(p_handle,I2C_ANALOGFILTER_ENABLE);
 80023e6:	2100      	movs	r1, #0
 80023e8:	68b8      	ldr	r0, [r7, #8]
 80023ea:	f002 ffa1 	bl	8005330 <HAL_I2CEx_ConfigAnalogFilter>

        /* Configure Digital filter */
        HAL_I2CEx_ConfigDigitalFilter(p_handle, 0);
 80023ee:	2100      	movs	r1, #0
 80023f0:	68b8      	ldr	r0, [r7, #8]
 80023f2:	f002 ffe8 	bl	80053c6 <HAL_I2CEx_ConfigDigitalFilter>

        ret = true;
 80023f6:	2301      	movs	r3, #1
 80023f8:	73fb      	strb	r3, [r7, #15]
        is_open[ch] = true;
 80023fa:	79fb      	ldrb	r3, [r7, #7]
 80023fc:	4a06      	ldr	r2, [pc, #24]	; (8002418 <i2cOpen+0xc8>)
 80023fe:	2101      	movs	r1, #1
 8002400:	54d1      	strb	r1, [r2, r3]
      }

      break;
 8002402:	bf00      	nop
  }

  return ret;
 8002404:	7bfb      	ldrb	r3, [r7, #15]
}
 8002406:	4618      	mov	r0, r3
 8002408:	3710      	adds	r7, #16
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	20000008 	.word	0x20000008
 8002414:	200006dc 	.word	0x200006dc
 8002418:	200006e0 	.word	0x200006e0
 800241c:	40005c00 	.word	0x40005c00
 8002420:	0800f860 	.word	0x0800f860

08002424 <i2cReset>:
{
  return is_open[ch];
}

void i2cReset(uint8_t ch)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b08a      	sub	sp, #40	; 0x28
 8002428:	af00      	add	r7, sp, #0
 800242a:	4603      	mov	r3, r0
 800242c:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  i2c_tbl_t *p_pin = &i2c_tbl[ch];
 800242e:	79fa      	ldrb	r2, [r7, #7]
 8002430:	4613      	mov	r3, r2
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	4413      	add	r3, r2
 8002436:	009b      	lsls	r3, r3, #2
 8002438:	4a44      	ldr	r2, [pc, #272]	; (800254c <i2cReset+0x128>)
 800243a:	4413      	add	r3, r2
 800243c:	623b      	str	r3, [r7, #32]


  GPIO_InitStruct.Pin       = p_pin->scl_pin;
 800243e:	6a3b      	ldr	r3, [r7, #32]
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode      = GPIO_MODE_OUTPUT_OD;
 8002444:	2311      	movs	r3, #17
 8002446:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8002448:	2300      	movs	r3, #0
 800244a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed     = GPIO_SPEED_HIGH;
 800244c:	2303      	movs	r3, #3
 800244e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(p_pin->scl_port, &GPIO_InitStruct);
 8002450:	6a3b      	ldr	r3, [r7, #32]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	f107 020c 	add.w	r2, r7, #12
 8002458:	4611      	mov	r1, r2
 800245a:	4618      	mov	r0, r3
 800245c:	f001 f8e4 	bl	8003628 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin       = p_pin->sda_pin;
 8002460:	6a3b      	ldr	r3, [r7, #32]
 8002462:	691b      	ldr	r3, [r3, #16]
 8002464:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode      = GPIO_MODE_OUTPUT_OD;
 8002466:	2311      	movs	r3, #17
 8002468:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 800246a:	2300      	movs	r3, #0
 800246c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(p_pin->sda_port, &GPIO_InitStruct);
 800246e:	6a3b      	ldr	r3, [r7, #32]
 8002470:	68db      	ldr	r3, [r3, #12]
 8002472:	f107 020c 	add.w	r2, r7, #12
 8002476:	4611      	mov	r1, r2
 8002478:	4618      	mov	r0, r3
 800247a:	f001 f8d5 	bl	8003628 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(p_pin->scl_port, p_pin->scl_pin, GPIO_PIN_SET);
 800247e:	6a3b      	ldr	r3, [r7, #32]
 8002480:	6858      	ldr	r0, [r3, #4]
 8002482:	6a3b      	ldr	r3, [r7, #32]
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	b29b      	uxth	r3, r3
 8002488:	2201      	movs	r2, #1
 800248a:	4619      	mov	r1, r3
 800248c:	f001 fa78 	bl	8003980 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(p_pin->sda_port, p_pin->sda_pin, GPIO_PIN_SET);
 8002490:	6a3b      	ldr	r3, [r7, #32]
 8002492:	68d8      	ldr	r0, [r3, #12]
 8002494:	6a3b      	ldr	r3, [r7, #32]
 8002496:	691b      	ldr	r3, [r3, #16]
 8002498:	b29b      	uxth	r3, r3
 800249a:	2201      	movs	r2, #1
 800249c:	4619      	mov	r1, r3
 800249e:	f001 fa6f 	bl	8003980 <HAL_GPIO_WritePin>
  delayUs(10);
 80024a2:	200a      	movs	r0, #10
 80024a4:	f000 fa0a 	bl	80028bc <delayUs>

  for (int i = 0; i < 9; i++)
 80024a8:	2300      	movs	r3, #0
 80024aa:	627b      	str	r3, [r7, #36]	; 0x24
 80024ac:	e01a      	b.n	80024e4 <i2cReset+0xc0>
  {
    HAL_GPIO_WritePin(p_pin->scl_port, p_pin->scl_pin, GPIO_PIN_RESET);
 80024ae:	6a3b      	ldr	r3, [r7, #32]
 80024b0:	6858      	ldr	r0, [r3, #4]
 80024b2:	6a3b      	ldr	r3, [r7, #32]
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	b29b      	uxth	r3, r3
 80024b8:	2200      	movs	r2, #0
 80024ba:	4619      	mov	r1, r3
 80024bc:	f001 fa60 	bl	8003980 <HAL_GPIO_WritePin>
    delayUs(10);
 80024c0:	200a      	movs	r0, #10
 80024c2:	f000 f9fb 	bl	80028bc <delayUs>
    HAL_GPIO_WritePin(p_pin->scl_port, p_pin->scl_pin, GPIO_PIN_SET);
 80024c6:	6a3b      	ldr	r3, [r7, #32]
 80024c8:	6858      	ldr	r0, [r3, #4]
 80024ca:	6a3b      	ldr	r3, [r7, #32]
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	b29b      	uxth	r3, r3
 80024d0:	2201      	movs	r2, #1
 80024d2:	4619      	mov	r1, r3
 80024d4:	f001 fa54 	bl	8003980 <HAL_GPIO_WritePin>
    delayUs(10);
 80024d8:	200a      	movs	r0, #10
 80024da:	f000 f9ef 	bl	80028bc <delayUs>
  for (int i = 0; i < 9; i++)
 80024de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e0:	3301      	adds	r3, #1
 80024e2:	627b      	str	r3, [r7, #36]	; 0x24
 80024e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e6:	2b08      	cmp	r3, #8
 80024e8:	dde1      	ble.n	80024ae <i2cReset+0x8a>
  }

  HAL_GPIO_WritePin(p_pin->scl_port, p_pin->scl_pin, GPIO_PIN_RESET);
 80024ea:	6a3b      	ldr	r3, [r7, #32]
 80024ec:	6858      	ldr	r0, [r3, #4]
 80024ee:	6a3b      	ldr	r3, [r7, #32]
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	b29b      	uxth	r3, r3
 80024f4:	2200      	movs	r2, #0
 80024f6:	4619      	mov	r1, r3
 80024f8:	f001 fa42 	bl	8003980 <HAL_GPIO_WritePin>
  delayUs(10);
 80024fc:	200a      	movs	r0, #10
 80024fe:	f000 f9dd 	bl	80028bc <delayUs>
  HAL_GPIO_WritePin(p_pin->sda_port, p_pin->sda_pin, GPIO_PIN_RESET);
 8002502:	6a3b      	ldr	r3, [r7, #32]
 8002504:	68d8      	ldr	r0, [r3, #12]
 8002506:	6a3b      	ldr	r3, [r7, #32]
 8002508:	691b      	ldr	r3, [r3, #16]
 800250a:	b29b      	uxth	r3, r3
 800250c:	2200      	movs	r2, #0
 800250e:	4619      	mov	r1, r3
 8002510:	f001 fa36 	bl	8003980 <HAL_GPIO_WritePin>
  delayUs(10);
 8002514:	200a      	movs	r0, #10
 8002516:	f000 f9d1 	bl	80028bc <delayUs>

  HAL_GPIO_WritePin(p_pin->scl_port, p_pin->scl_pin, GPIO_PIN_SET);
 800251a:	6a3b      	ldr	r3, [r7, #32]
 800251c:	6858      	ldr	r0, [r3, #4]
 800251e:	6a3b      	ldr	r3, [r7, #32]
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	b29b      	uxth	r3, r3
 8002524:	2201      	movs	r2, #1
 8002526:	4619      	mov	r1, r3
 8002528:	f001 fa2a 	bl	8003980 <HAL_GPIO_WritePin>
  delayUs(10);
 800252c:	200a      	movs	r0, #10
 800252e:	f000 f9c5 	bl	80028bc <delayUs>
  HAL_GPIO_WritePin(p_pin->sda_port, p_pin->sda_pin, GPIO_PIN_SET);
 8002532:	6a3b      	ldr	r3, [r7, #32]
 8002534:	68d8      	ldr	r0, [r3, #12]
 8002536:	6a3b      	ldr	r3, [r7, #32]
 8002538:	691b      	ldr	r3, [r3, #16]
 800253a:	b29b      	uxth	r3, r3
 800253c:	2201      	movs	r2, #1
 800253e:	4619      	mov	r1, r3
 8002540:	f001 fa1e 	bl	8003980 <HAL_GPIO_WritePin>
}
 8002544:	bf00      	nop
 8002546:	3728      	adds	r7, #40	; 0x28
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}
 800254c:	20000008 	.word	0x20000008

08002550 <i2cIsDeviceReady>:

bool i2cIsDeviceReady(uint8_t ch, uint8_t dev_addr)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b084      	sub	sp, #16
 8002554:	af00      	add	r7, sp, #0
 8002556:	4603      	mov	r3, r0
 8002558:	460a      	mov	r2, r1
 800255a:	71fb      	strb	r3, [r7, #7]
 800255c:	4613      	mov	r3, r2
 800255e:	71bb      	strb	r3, [r7, #6]
  I2C_HandleTypeDef *p_handle = i2c_tbl[ch].p_hi2c;
 8002560:	79fa      	ldrb	r2, [r7, #7]
 8002562:	490d      	ldr	r1, [pc, #52]	; (8002598 <i2cIsDeviceReady+0x48>)
 8002564:	4613      	mov	r3, r2
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	4413      	add	r3, r2
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	440b      	add	r3, r1
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	60fb      	str	r3, [r7, #12]


  LOCK_BEGIN(ch);
  if (HAL_I2C_IsDeviceReady(p_handle, dev_addr << 1, 10, 10) == HAL_OK)
 8002572:	79bb      	ldrb	r3, [r7, #6]
 8002574:	b29b      	uxth	r3, r3
 8002576:	005b      	lsls	r3, r3, #1
 8002578:	b299      	uxth	r1, r3
 800257a:	230a      	movs	r3, #10
 800257c:	220a      	movs	r2, #10
 800257e:	68f8      	ldr	r0, [r7, #12]
 8002580:	f001 fde4 	bl	800414c <HAL_I2C_IsDeviceReady>
 8002584:	4603      	mov	r3, r0
 8002586:	2b00      	cmp	r3, #0
 8002588:	d101      	bne.n	800258e <i2cIsDeviceReady+0x3e>
  {
    return true;
 800258a:	2301      	movs	r3, #1
 800258c:	e000      	b.n	8002590 <i2cIsDeviceReady+0x40>
  }
  LOCK_END(ch);

  return false;
 800258e:	2300      	movs	r3, #0
}
 8002590:	4618      	mov	r0, r3
 8002592:	3710      	adds	r7, #16
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}
 8002598:	20000008 	.word	0x20000008

0800259c <i2cReadByte>:

  return ret;
}

bool i2cReadByte (uint8_t ch, uint16_t dev_addr, uint16_t reg_addr, uint8_t *p_data, uint32_t timeout)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b086      	sub	sp, #24
 80025a0:	af02      	add	r7, sp, #8
 80025a2:	607b      	str	r3, [r7, #4]
 80025a4:	4603      	mov	r3, r0
 80025a6:	73fb      	strb	r3, [r7, #15]
 80025a8:	460b      	mov	r3, r1
 80025aa:	81bb      	strh	r3, [r7, #12]
 80025ac:	4613      	mov	r3, r2
 80025ae:	817b      	strh	r3, [r7, #10]
  return i2cReadBytes(ch, dev_addr, reg_addr, p_data, 1, timeout);
 80025b0:	897a      	ldrh	r2, [r7, #10]
 80025b2:	89b9      	ldrh	r1, [r7, #12]
 80025b4:	7bf8      	ldrb	r0, [r7, #15]
 80025b6:	69bb      	ldr	r3, [r7, #24]
 80025b8:	9301      	str	r3, [sp, #4]
 80025ba:	2301      	movs	r3, #1
 80025bc:	9300      	str	r3, [sp, #0]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	f000 f806 	bl	80025d0 <i2cReadBytes>
 80025c4:	4603      	mov	r3, r0
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3710      	adds	r7, #16
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
	...

080025d0 <i2cReadBytes>:

bool i2cReadBytes(uint8_t ch, uint16_t dev_addr, uint16_t reg_addr, uint8_t *p_data, uint32_t length, uint32_t timeout)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b08c      	sub	sp, #48	; 0x30
 80025d4:	af04      	add	r7, sp, #16
 80025d6:	607b      	str	r3, [r7, #4]
 80025d8:	4603      	mov	r3, r0
 80025da:	73fb      	strb	r3, [r7, #15]
 80025dc:	460b      	mov	r3, r1
 80025de:	81bb      	strh	r3, [r7, #12]
 80025e0:	4613      	mov	r3, r2
 80025e2:	817b      	strh	r3, [r7, #10]
  bool ret;
  HAL_StatusTypeDef i2c_ret;
  I2C_HandleTypeDef *p_handle = i2c_tbl[ch].p_hi2c;
 80025e4:	7bfa      	ldrb	r2, [r7, #15]
 80025e6:	4916      	ldr	r1, [pc, #88]	; (8002640 <i2cReadBytes+0x70>)
 80025e8:	4613      	mov	r3, r2
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	4413      	add	r3, r2
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	440b      	add	r3, r1
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	61bb      	str	r3, [r7, #24]

  if (ch >= I2C_MAX_CH)
 80025f6:	7bfb      	ldrb	r3, [r7, #15]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d001      	beq.n	8002600 <i2cReadBytes+0x30>
  {
    return false;
 80025fc:	2300      	movs	r3, #0
 80025fe:	e01a      	b.n	8002636 <i2cReadBytes+0x66>
  }

  LOCK_BEGIN(ch);
  i2c_ret = HAL_I2C_Mem_Read(p_handle, (uint16_t)(dev_addr << 1), reg_addr, I2C_MEMADD_SIZE_8BIT, p_data, length, timeout);
 8002600:	89bb      	ldrh	r3, [r7, #12]
 8002602:	005b      	lsls	r3, r3, #1
 8002604:	b299      	uxth	r1, r3
 8002606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002608:	b29b      	uxth	r3, r3
 800260a:	8978      	ldrh	r0, [r7, #10]
 800260c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800260e:	9202      	str	r2, [sp, #8]
 8002610:	9301      	str	r3, [sp, #4]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	9300      	str	r3, [sp, #0]
 8002616:	2301      	movs	r3, #1
 8002618:	4602      	mov	r2, r0
 800261a:	69b8      	ldr	r0, [r7, #24]
 800261c:	f001 fc7c 	bl	8003f18 <HAL_I2C_Mem_Read>
 8002620:	4603      	mov	r3, r0
 8002622:	75fb      	strb	r3, [r7, #23]

  if( i2c_ret == HAL_OK )
 8002624:	7dfb      	ldrb	r3, [r7, #23]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d102      	bne.n	8002630 <i2cReadBytes+0x60>
  {
    ret = true;
 800262a:	2301      	movs	r3, #1
 800262c:	77fb      	strb	r3, [r7, #31]
 800262e:	e001      	b.n	8002634 <i2cReadBytes+0x64>
  }
  else
  {
    ret = false;
 8002630:	2300      	movs	r3, #0
 8002632:	77fb      	strb	r3, [r7, #31]
  }
  LOCK_END(ch);

  return ret;
 8002634:	7ffb      	ldrb	r3, [r7, #31]
}
 8002636:	4618      	mov	r0, r3
 8002638:	3720      	adds	r7, #32
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	20000008 	.word	0x20000008

08002644 <i2cRead16Byte>:

bool i2cRead16Byte (uint8_t ch, uint16_t dev_addr, uint16_t reg_addr, uint8_t *p_data, uint32_t timeout)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b086      	sub	sp, #24
 8002648:	af02      	add	r7, sp, #8
 800264a:	607b      	str	r3, [r7, #4]
 800264c:	4603      	mov	r3, r0
 800264e:	73fb      	strb	r3, [r7, #15]
 8002650:	460b      	mov	r3, r1
 8002652:	81bb      	strh	r3, [r7, #12]
 8002654:	4613      	mov	r3, r2
 8002656:	817b      	strh	r3, [r7, #10]
  return i2cRead16Bytes(ch, dev_addr, reg_addr, p_data, 1, timeout);
 8002658:	897a      	ldrh	r2, [r7, #10]
 800265a:	89b9      	ldrh	r1, [r7, #12]
 800265c:	7bf8      	ldrb	r0, [r7, #15]
 800265e:	69bb      	ldr	r3, [r7, #24]
 8002660:	9301      	str	r3, [sp, #4]
 8002662:	2301      	movs	r3, #1
 8002664:	9300      	str	r3, [sp, #0]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	f000 f806 	bl	8002678 <i2cRead16Bytes>
 800266c:	4603      	mov	r3, r0
}
 800266e:	4618      	mov	r0, r3
 8002670:	3710      	adds	r7, #16
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}
	...

08002678 <i2cRead16Bytes>:

bool i2cRead16Bytes(uint8_t ch, uint16_t dev_addr, uint16_t reg_addr, uint8_t *p_data, uint32_t length, uint32_t timeout)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b08c      	sub	sp, #48	; 0x30
 800267c:	af04      	add	r7, sp, #16
 800267e:	607b      	str	r3, [r7, #4]
 8002680:	4603      	mov	r3, r0
 8002682:	73fb      	strb	r3, [r7, #15]
 8002684:	460b      	mov	r3, r1
 8002686:	81bb      	strh	r3, [r7, #12]
 8002688:	4613      	mov	r3, r2
 800268a:	817b      	strh	r3, [r7, #10]
  bool ret;
  HAL_StatusTypeDef i2c_ret;
  I2C_HandleTypeDef *p_handle = i2c_tbl[ch].p_hi2c;
 800268c:	7bfa      	ldrb	r2, [r7, #15]
 800268e:	4916      	ldr	r1, [pc, #88]	; (80026e8 <i2cRead16Bytes+0x70>)
 8002690:	4613      	mov	r3, r2
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	4413      	add	r3, r2
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	440b      	add	r3, r1
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	61bb      	str	r3, [r7, #24]

  if (ch >= I2C_MAX_CH)
 800269e:	7bfb      	ldrb	r3, [r7, #15]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d001      	beq.n	80026a8 <i2cRead16Bytes+0x30>
  {
    return false;
 80026a4:	2300      	movs	r3, #0
 80026a6:	e01a      	b.n	80026de <i2cRead16Bytes+0x66>
  }

  LOCK_BEGIN(ch);
  i2c_ret = HAL_I2C_Mem_Read(p_handle, (uint16_t)(dev_addr << 1), reg_addr, I2C_MEMADD_SIZE_16BIT, p_data, length, timeout);
 80026a8:	89bb      	ldrh	r3, [r7, #12]
 80026aa:	005b      	lsls	r3, r3, #1
 80026ac:	b299      	uxth	r1, r3
 80026ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026b0:	b29b      	uxth	r3, r3
 80026b2:	8978      	ldrh	r0, [r7, #10]
 80026b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026b6:	9202      	str	r2, [sp, #8]
 80026b8:	9301      	str	r3, [sp, #4]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	9300      	str	r3, [sp, #0]
 80026be:	2302      	movs	r3, #2
 80026c0:	4602      	mov	r2, r0
 80026c2:	69b8      	ldr	r0, [r7, #24]
 80026c4:	f001 fc28 	bl	8003f18 <HAL_I2C_Mem_Read>
 80026c8:	4603      	mov	r3, r0
 80026ca:	75fb      	strb	r3, [r7, #23]

  if( i2c_ret == HAL_OK )
 80026cc:	7dfb      	ldrb	r3, [r7, #23]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d102      	bne.n	80026d8 <i2cRead16Bytes+0x60>
  {
    ret = true;
 80026d2:	2301      	movs	r3, #1
 80026d4:	77fb      	strb	r3, [r7, #31]
 80026d6:	e001      	b.n	80026dc <i2cRead16Bytes+0x64>
  }
  else
  {
    ret = false;
 80026d8:	2300      	movs	r3, #0
 80026da:	77fb      	strb	r3, [r7, #31]
  }
  LOCK_END(ch);

  return ret;
 80026dc:	7ffb      	ldrb	r3, [r7, #31]
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3720      	adds	r7, #32
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	20000008 	.word	0x20000008

080026ec <i2cWriteByte>:

  return ret;
}

bool i2cWriteByte (uint8_t ch, uint16_t dev_addr, uint16_t reg_addr, uint8_t data, uint32_t timeout)
{
 80026ec:	b590      	push	{r4, r7, lr}
 80026ee:	b085      	sub	sp, #20
 80026f0:	af02      	add	r7, sp, #8
 80026f2:	4604      	mov	r4, r0
 80026f4:	4608      	mov	r0, r1
 80026f6:	4611      	mov	r1, r2
 80026f8:	461a      	mov	r2, r3
 80026fa:	4623      	mov	r3, r4
 80026fc:	71fb      	strb	r3, [r7, #7]
 80026fe:	4603      	mov	r3, r0
 8002700:	80bb      	strh	r3, [r7, #4]
 8002702:	460b      	mov	r3, r1
 8002704:	807b      	strh	r3, [r7, #2]
 8002706:	4613      	mov	r3, r2
 8002708:	71bb      	strb	r3, [r7, #6]
  return i2cWriteBytes(ch, dev_addr, reg_addr, &data, 1, timeout);
 800270a:	1dbc      	adds	r4, r7, #6
 800270c:	887a      	ldrh	r2, [r7, #2]
 800270e:	88b9      	ldrh	r1, [r7, #4]
 8002710:	79f8      	ldrb	r0, [r7, #7]
 8002712:	69bb      	ldr	r3, [r7, #24]
 8002714:	9301      	str	r3, [sp, #4]
 8002716:	2301      	movs	r3, #1
 8002718:	9300      	str	r3, [sp, #0]
 800271a:	4623      	mov	r3, r4
 800271c:	f000 f806 	bl	800272c <i2cWriteBytes>
 8002720:	4603      	mov	r3, r0
}
 8002722:	4618      	mov	r0, r3
 8002724:	370c      	adds	r7, #12
 8002726:	46bd      	mov	sp, r7
 8002728:	bd90      	pop	{r4, r7, pc}
	...

0800272c <i2cWriteBytes>:

bool i2cWriteBytes(uint8_t ch, uint16_t dev_addr, uint16_t reg_addr, uint8_t *p_data, uint32_t length, uint32_t timeout)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b08c      	sub	sp, #48	; 0x30
 8002730:	af04      	add	r7, sp, #16
 8002732:	607b      	str	r3, [r7, #4]
 8002734:	4603      	mov	r3, r0
 8002736:	73fb      	strb	r3, [r7, #15]
 8002738:	460b      	mov	r3, r1
 800273a:	81bb      	strh	r3, [r7, #12]
 800273c:	4613      	mov	r3, r2
 800273e:	817b      	strh	r3, [r7, #10]
  bool ret;
  HAL_StatusTypeDef i2c_ret;
  I2C_HandleTypeDef *p_handle = i2c_tbl[ch].p_hi2c;
 8002740:	7bfa      	ldrb	r2, [r7, #15]
 8002742:	4916      	ldr	r1, [pc, #88]	; (800279c <i2cWriteBytes+0x70>)
 8002744:	4613      	mov	r3, r2
 8002746:	009b      	lsls	r3, r3, #2
 8002748:	4413      	add	r3, r2
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	440b      	add	r3, r1
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	61bb      	str	r3, [r7, #24]

  if (ch >= I2C_MAX_CH)
 8002752:	7bfb      	ldrb	r3, [r7, #15]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d001      	beq.n	800275c <i2cWriteBytes+0x30>
  {
    return false;
 8002758:	2300      	movs	r3, #0
 800275a:	e01a      	b.n	8002792 <i2cWriteBytes+0x66>
  }

  LOCK_BEGIN(ch);
  i2c_ret = HAL_I2C_Mem_Write(p_handle, (uint16_t)(dev_addr << 1), reg_addr, I2C_MEMADD_SIZE_8BIT, p_data, length, timeout);
 800275c:	89bb      	ldrh	r3, [r7, #12]
 800275e:	005b      	lsls	r3, r3, #1
 8002760:	b299      	uxth	r1, r3
 8002762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002764:	b29b      	uxth	r3, r3
 8002766:	8978      	ldrh	r0, [r7, #10]
 8002768:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800276a:	9202      	str	r2, [sp, #8]
 800276c:	9301      	str	r3, [sp, #4]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	9300      	str	r3, [sp, #0]
 8002772:	2301      	movs	r3, #1
 8002774:	4602      	mov	r2, r0
 8002776:	69b8      	ldr	r0, [r7, #24]
 8002778:	f001 faba 	bl	8003cf0 <HAL_I2C_Mem_Write>
 800277c:	4603      	mov	r3, r0
 800277e:	75fb      	strb	r3, [r7, #23]

  if(i2c_ret == HAL_OK)
 8002780:	7dfb      	ldrb	r3, [r7, #23]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d102      	bne.n	800278c <i2cWriteBytes+0x60>
  {
    ret = true;
 8002786:	2301      	movs	r3, #1
 8002788:	77fb      	strb	r3, [r7, #31]
 800278a:	e001      	b.n	8002790 <i2cWriteBytes+0x64>
  }
  else
  {
    ret = false;
 800278c:	2300      	movs	r3, #0
 800278e:	77fb      	strb	r3, [r7, #31]
  }
  LOCK_END(ch);

  return ret;
 8002790:	7ffb      	ldrb	r3, [r7, #31]
}
 8002792:	4618      	mov	r0, r3
 8002794:	3720      	adds	r7, #32
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	20000008 	.word	0x20000008

080027a0 <i2cWrite16Byte>:

bool i2cWrite16Byte (uint8_t ch, uint16_t dev_addr, uint16_t reg_addr, uint8_t data, uint32_t timeout)
{
 80027a0:	b590      	push	{r4, r7, lr}
 80027a2:	b085      	sub	sp, #20
 80027a4:	af02      	add	r7, sp, #8
 80027a6:	4604      	mov	r4, r0
 80027a8:	4608      	mov	r0, r1
 80027aa:	4611      	mov	r1, r2
 80027ac:	461a      	mov	r2, r3
 80027ae:	4623      	mov	r3, r4
 80027b0:	71fb      	strb	r3, [r7, #7]
 80027b2:	4603      	mov	r3, r0
 80027b4:	80bb      	strh	r3, [r7, #4]
 80027b6:	460b      	mov	r3, r1
 80027b8:	807b      	strh	r3, [r7, #2]
 80027ba:	4613      	mov	r3, r2
 80027bc:	71bb      	strb	r3, [r7, #6]
  return i2cWrite16Bytes(ch, dev_addr, reg_addr, &data, 1, timeout);
 80027be:	1dbc      	adds	r4, r7, #6
 80027c0:	887a      	ldrh	r2, [r7, #2]
 80027c2:	88b9      	ldrh	r1, [r7, #4]
 80027c4:	79f8      	ldrb	r0, [r7, #7]
 80027c6:	69bb      	ldr	r3, [r7, #24]
 80027c8:	9301      	str	r3, [sp, #4]
 80027ca:	2301      	movs	r3, #1
 80027cc:	9300      	str	r3, [sp, #0]
 80027ce:	4623      	mov	r3, r4
 80027d0:	f000 f806 	bl	80027e0 <i2cWrite16Bytes>
 80027d4:	4603      	mov	r3, r0
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	370c      	adds	r7, #12
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd90      	pop	{r4, r7, pc}
	...

080027e0 <i2cWrite16Bytes>:

bool i2cWrite16Bytes(uint8_t ch, uint16_t dev_addr, uint16_t reg_addr, uint8_t *p_data, uint32_t length, uint32_t timeout)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b08c      	sub	sp, #48	; 0x30
 80027e4:	af04      	add	r7, sp, #16
 80027e6:	607b      	str	r3, [r7, #4]
 80027e8:	4603      	mov	r3, r0
 80027ea:	73fb      	strb	r3, [r7, #15]
 80027ec:	460b      	mov	r3, r1
 80027ee:	81bb      	strh	r3, [r7, #12]
 80027f0:	4613      	mov	r3, r2
 80027f2:	817b      	strh	r3, [r7, #10]
  bool ret;
  HAL_StatusTypeDef i2c_ret;
  I2C_HandleTypeDef *p_handle = i2c_tbl[ch].p_hi2c;
 80027f4:	7bfa      	ldrb	r2, [r7, #15]
 80027f6:	4916      	ldr	r1, [pc, #88]	; (8002850 <i2cWrite16Bytes+0x70>)
 80027f8:	4613      	mov	r3, r2
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	4413      	add	r3, r2
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	440b      	add	r3, r1
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	61bb      	str	r3, [r7, #24]

  if (ch >= I2C_MAX_CH)
 8002806:	7bfb      	ldrb	r3, [r7, #15]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d001      	beq.n	8002810 <i2cWrite16Bytes+0x30>
  {
    return false;
 800280c:	2300      	movs	r3, #0
 800280e:	e01a      	b.n	8002846 <i2cWrite16Bytes+0x66>
  }

  LOCK_BEGIN(ch);
  i2c_ret = HAL_I2C_Mem_Write(p_handle, (uint16_t)(dev_addr << 1), reg_addr, I2C_MEMADD_SIZE_16BIT, p_data, length, timeout);
 8002810:	89bb      	ldrh	r3, [r7, #12]
 8002812:	005b      	lsls	r3, r3, #1
 8002814:	b299      	uxth	r1, r3
 8002816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002818:	b29b      	uxth	r3, r3
 800281a:	8978      	ldrh	r0, [r7, #10]
 800281c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800281e:	9202      	str	r2, [sp, #8]
 8002820:	9301      	str	r3, [sp, #4]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	9300      	str	r3, [sp, #0]
 8002826:	2302      	movs	r3, #2
 8002828:	4602      	mov	r2, r0
 800282a:	69b8      	ldr	r0, [r7, #24]
 800282c:	f001 fa60 	bl	8003cf0 <HAL_I2C_Mem_Write>
 8002830:	4603      	mov	r3, r0
 8002832:	75fb      	strb	r3, [r7, #23]

  if(i2c_ret == HAL_OK)
 8002834:	7dfb      	ldrb	r3, [r7, #23]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d102      	bne.n	8002840 <i2cWrite16Bytes+0x60>
  {
    ret = true;
 800283a:	2301      	movs	r3, #1
 800283c:	77fb      	strb	r3, [r7, #31]
 800283e:	e001      	b.n	8002844 <i2cWrite16Bytes+0x64>
  }
  else
  {
    ret = false;
 8002840:	2300      	movs	r3, #0
 8002842:	77fb      	strb	r3, [r7, #31]
  }
  LOCK_END(ch);

  return ret;
 8002844:	7ffb      	ldrb	r3, [r7, #31]
}
 8002846:	4618      	mov	r0, r3
 8002848:	3720      	adds	r7, #32
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	20000008 	.word	0x20000008

08002854 <i2cWriteData>:

bool i2cWriteData(uint8_t ch, uint16_t dev_addr, uint8_t *p_data, uint32_t length, uint32_t timeout)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b08a      	sub	sp, #40	; 0x28
 8002858:	af02      	add	r7, sp, #8
 800285a:	60ba      	str	r2, [r7, #8]
 800285c:	607b      	str	r3, [r7, #4]
 800285e:	4603      	mov	r3, r0
 8002860:	73fb      	strb	r3, [r7, #15]
 8002862:	460b      	mov	r3, r1
 8002864:	81bb      	strh	r3, [r7, #12]
  bool ret;
  HAL_StatusTypeDef i2c_ret;
  I2C_HandleTypeDef *p_handle = i2c_tbl[ch].p_hi2c;
 8002866:	7bfa      	ldrb	r2, [r7, #15]
 8002868:	4913      	ldr	r1, [pc, #76]	; (80028b8 <i2cWriteData+0x64>)
 800286a:	4613      	mov	r3, r2
 800286c:	009b      	lsls	r3, r3, #2
 800286e:	4413      	add	r3, r2
 8002870:	009b      	lsls	r3, r3, #2
 8002872:	440b      	add	r3, r1
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	61bb      	str	r3, [r7, #24]

  if (ch >= I2C_MAX_CH)
 8002878:	7bfb      	ldrb	r3, [r7, #15]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d001      	beq.n	8002882 <i2cWriteData+0x2e>
  {
    return false;
 800287e:	2300      	movs	r3, #0
 8002880:	e016      	b.n	80028b0 <i2cWriteData+0x5c>
  }

  LOCK_BEGIN(ch);
  i2c_ret = HAL_I2C_Master_Transmit(p_handle, (uint16_t)(dev_addr << 1), p_data, length, timeout);
 8002882:	89bb      	ldrh	r3, [r7, #12]
 8002884:	005b      	lsls	r3, r3, #1
 8002886:	b299      	uxth	r1, r3
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	b29a      	uxth	r2, r3
 800288c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800288e:	9300      	str	r3, [sp, #0]
 8002890:	4613      	mov	r3, r2
 8002892:	68ba      	ldr	r2, [r7, #8]
 8002894:	69b8      	ldr	r0, [r7, #24]
 8002896:	f001 f937 	bl	8003b08 <HAL_I2C_Master_Transmit>
 800289a:	4603      	mov	r3, r0
 800289c:	75fb      	strb	r3, [r7, #23]

  if(i2c_ret == HAL_OK)
 800289e:	7dfb      	ldrb	r3, [r7, #23]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d102      	bne.n	80028aa <i2cWriteData+0x56>
  {
    ret = true;
 80028a4:	2301      	movs	r3, #1
 80028a6:	77fb      	strb	r3, [r7, #31]
 80028a8:	e001      	b.n	80028ae <i2cWriteData+0x5a>
  }
  else
  {
    ret = false;
 80028aa:	2300      	movs	r3, #0
 80028ac:	77fb      	strb	r3, [r7, #31]
  }
  LOCK_END(ch);

  return ret;
 80028ae:	7ffb      	ldrb	r3, [r7, #31]
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	3720      	adds	r7, #32
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	20000008 	.word	0x20000008

080028bc <delayUs>:
{
  return i2c_errcount[ch];
}

void delayUs(uint32_t us)
{
 80028bc:	b480      	push	{r7}
 80028be:	b085      	sub	sp, #20
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  volatile uint32_t i;

  for (i=0; i<us*1000; i++)
 80028c4:	2300      	movs	r3, #0
 80028c6:	60fb      	str	r3, [r7, #12]
 80028c8:	e002      	b.n	80028d0 <delayUs+0x14>
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	3301      	adds	r3, #1
 80028ce:	60fb      	str	r3, [r7, #12]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80028d6:	fb03 f202 	mul.w	r2, r3, r2
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	429a      	cmp	r2, r3
 80028de:	d8f4      	bhi.n	80028ca <delayUs+0xe>
  {

  }
}
 80028e0:	bf00      	nop
 80028e2:	bf00      	nop
 80028e4:	3714      	adds	r7, #20
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr
	...

080028f0 <HAL_I2C_ErrorCallback>:

void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b083      	sub	sp, #12
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  if (hi2c->Instance == i2c_tbl[_DEF_I2C1].p_hi2c->Instance)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	4b09      	ldr	r3, [pc, #36]	; (8002924 <HAL_I2C_ErrorCallback+0x34>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	429a      	cmp	r2, r3
 8002904:	d108      	bne.n	8002918 <HAL_I2C_ErrorCallback+0x28>
  {
    if (hi2c->ErrorCode > 0)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800290a:	2b00      	cmp	r3, #0
 800290c:	d004      	beq.n	8002918 <HAL_I2C_ErrorCallback+0x28>
    {
      i2c_errcount[_DEF_I2C1]++;
 800290e:	4b06      	ldr	r3, [pc, #24]	; (8002928 <HAL_I2C_ErrorCallback+0x38>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	3301      	adds	r3, #1
 8002914:	4a04      	ldr	r2, [pc, #16]	; (8002928 <HAL_I2C_ErrorCallback+0x38>)
 8002916:	6013      	str	r3, [r2, #0]
    }
  }
}
 8002918:	bf00      	nop
 800291a:	370c      	adds	r7, #12
 800291c:	46bd      	mov	sp, r7
 800291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002922:	4770      	bx	lr
 8002924:	20000008 	.word	0x20000008
 8002928:	200006d8 	.word	0x200006d8

0800292c <I2C1_ER_IRQHandler>:

void I2C1_ER_IRQHandler(void)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	af00      	add	r7, sp, #0
  HAL_I2C_ER_IRQHandler(&hi2c3);
 8002930:	4802      	ldr	r0, [pc, #8]	; (800293c <I2C1_ER_IRQHandler+0x10>)
 8002932:	f001 fd13 	bl	800435c <HAL_I2C_ER_IRQHandler>
}
 8002936:	bf00      	nop
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	200006e4 	.word	0x200006e4

08002940 <HAL_I2C_MspInit>:



void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b0aa      	sub	sp, #168	; 0xa8
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002948:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800294c:	2200      	movs	r2, #0
 800294e:	601a      	str	r2, [r3, #0]
 8002950:	605a      	str	r2, [r3, #4]
 8002952:	609a      	str	r2, [r3, #8]
 8002954:	60da      	str	r2, [r3, #12]
 8002956:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002958:	f107 0310 	add.w	r3, r7, #16
 800295c:	2284      	movs	r2, #132	; 0x84
 800295e:	2100      	movs	r1, #0
 8002960:	4618      	mov	r0, r3
 8002962:	f009 fbf5 	bl	800c150 <memset>
  if(i2cHandle->Instance==I2C3)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a26      	ldr	r2, [pc, #152]	; (8002a04 <HAL_I2C_MspInit+0xc4>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d144      	bne.n	80029fa <HAL_I2C_MspInit+0xba>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8002970:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002974:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8002976:	2300      	movs	r3, #0
 8002978:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800297a:	f107 0310 	add.w	r3, r7, #16
 800297e:	4618      	mov	r0, r3
 8002980:	f004 fce8 	bl	8007354 <HAL_RCCEx_PeriphCLKConfig>
 8002984:	4603      	mov	r3, r0
 8002986:	2b00      	cmp	r3, #0
 8002988:	d001      	beq.n	800298e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800298a:	f7fe fc8d 	bl	80012a8 <Error_Handler>
    }

    __HAL_RCC_GPIOH_CLK_ENABLE();
 800298e:	4b1e      	ldr	r3, [pc, #120]	; (8002a08 <HAL_I2C_MspInit+0xc8>)
 8002990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002992:	4a1d      	ldr	r2, [pc, #116]	; (8002a08 <HAL_I2C_MspInit+0xc8>)
 8002994:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002998:	6313      	str	r3, [r2, #48]	; 0x30
 800299a:	4b1b      	ldr	r3, [pc, #108]	; (8002a08 <HAL_I2C_MspInit+0xc8>)
 800299c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800299e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029a2:	60fb      	str	r3, [r7, #12]
 80029a4:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PH7     ------> I2C3_SCL
    PH8     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80029a6:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80029aa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80029ae:	2312      	movs	r3, #18
 80029b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029b4:	2300      	movs	r3, #0
 80029b6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029ba:	2303      	movs	r3, #3
 80029bc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80029c0:	2304      	movs	r3, #4
 80029c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80029c6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80029ca:	4619      	mov	r1, r3
 80029cc:	480f      	ldr	r0, [pc, #60]	; (8002a0c <HAL_I2C_MspInit+0xcc>)
 80029ce:	f000 fe2b 	bl	8003628 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80029d2:	4b0d      	ldr	r3, [pc, #52]	; (8002a08 <HAL_I2C_MspInit+0xc8>)
 80029d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d6:	4a0c      	ldr	r2, [pc, #48]	; (8002a08 <HAL_I2C_MspInit+0xc8>)
 80029d8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80029dc:	6413      	str	r3, [r2, #64]	; 0x40
 80029de:	4b0a      	ldr	r3, [pc, #40]	; (8002a08 <HAL_I2C_MspInit+0xc8>)
 80029e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80029e6:	60bb      	str	r3, [r7, #8]
 80029e8:	68bb      	ldr	r3, [r7, #8]

    /* I2C3 interrupt Init */
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 0, 0);
 80029ea:	2200      	movs	r2, #0
 80029ec:	2100      	movs	r1, #0
 80029ee:	2049      	movs	r0, #73	; 0x49
 80029f0:	f000 fd37 	bl	8003462 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 80029f4:	2049      	movs	r0, #73	; 0x49
 80029f6:	f000 fd50 	bl	800349a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80029fa:	bf00      	nop
 80029fc:	37a8      	adds	r7, #168	; 0xa8
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	40005c00 	.word	0x40005c00
 8002a08:	40023800 	.word	0x40023800
 8002a0c:	40021c00 	.word	0x40021c00

08002a10 <cliI2C>:
  }
}

#ifdef _USE_HW_CLI
void cliI2C(cli_args_t *args)
{
 8002a10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a12:	b0af      	sub	sp, #188	; 0xbc
 8002a14:	af02      	add	r7, sp, #8
 8002a16:	6078      	str	r0, [r7, #4]
  bool ret = true;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
  uint32_t i;
  uint8_t i2c_data[128];
  uint32_t pre_time;


  if (args->argc == 2)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	881b      	ldrh	r3, [r3, #0]
 8002a22:	2b02      	cmp	r3, #2
 8002a24:	d16a      	bne.n	8002afc <cliI2C+0xec>
  {
    print_ch = (uint16_t) args->getData(1);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	2001      	movs	r0, #1
 8002a2c:	4798      	blx	r3
 8002a2e:	4603      	mov	r3, r0
 8002a30:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7

    print_ch = constrain(print_ch, 1, I2C_MAX_CH);
 8002a34:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d006      	beq.n	8002a4a <cliI2C+0x3a>
 8002a3c:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	bf28      	it	cs
 8002a44:	2301      	movcs	r3, #1
 8002a46:	b2db      	uxtb	r3, r3
 8002a48:	e000      	b.n	8002a4c <cliI2C+0x3c>
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    print_ch -= 1;
 8002a50:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8002a54:	3b01      	subs	r3, #1
 8002a56:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7

    if(args->isStr(0, "scan") == true)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	695b      	ldr	r3, [r3, #20]
 8002a5e:	49bf      	ldr	r1, [pc, #764]	; (8002d5c <cliI2C+0x34c>)
 8002a60:	2000      	movs	r0, #0
 8002a62:	4798      	blx	r3
 8002a64:	4603      	mov	r3, r0
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d022      	beq.n	8002ab0 <cliI2C+0xa0>
    {
      for (i=0x00; i<=0x7F; i++)
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002a70:	e019      	b.n	8002aa6 <cliI2C+0x96>
      {
        if (i2cIsDeviceReady(print_ch, i) == true)
 8002a72:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002a76:	b2da      	uxtb	r2, r3
 8002a78:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8002a7c:	4611      	mov	r1, r2
 8002a7e:	4618      	mov	r0, r3
 8002a80:	f7ff fd66 	bl	8002550 <i2cIsDeviceReady>
 8002a84:	4603      	mov	r3, r0
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d008      	beq.n	8002a9c <cliI2C+0x8c>
        {
          cliPrintf("I2C CH%d Addr 0x%X : OK\n", print_ch+1, i);
 8002a8a:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8002a8e:	3301      	adds	r3, #1
 8002a90:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002a94:	4619      	mov	r1, r3
 8002a96:	48b2      	ldr	r0, [pc, #712]	; (8002d60 <cliI2C+0x350>)
 8002a98:	f7ff fa94 	bl	8001fc4 <cliPrintf>
      for (i=0x00; i<=0x7F; i++)
 8002a9c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002aa0:	3301      	adds	r3, #1
 8002aa2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002aa6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002aaa:	2b7f      	cmp	r3, #127	; 0x7f
 8002aac:	d9e1      	bls.n	8002a72 <cliI2C+0x62>
 8002aae:	e1c3      	b.n	8002e38 <cliI2C+0x428>
        }
      }
    }
    else if(args->isStr(0, "open") == true)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	695b      	ldr	r3, [r3, #20]
 8002ab4:	49ab      	ldr	r1, [pc, #684]	; (8002d64 <cliI2C+0x354>)
 8002ab6:	2000      	movs	r0, #0
 8002ab8:	4798      	blx	r3
 8002aba:	4603      	mov	r3, r0
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	f000 81bb 	beq.w	8002e38 <cliI2C+0x428>
    {
      i2c_ret = i2cOpen(print_ch, I2C_FREQ_400KHz);
 8002ac2:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8002ac6:	2101      	movs	r1, #1
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f7ff fc41 	bl	8002350 <i2cOpen>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
      if (i2c_ret == true)
 8002ad4:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d007      	beq.n	8002aec <cliI2C+0xdc>
      {
        cliPrintf("I2C CH%d Open OK\n", print_ch + 1);
 8002adc:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8002ae0:	3301      	adds	r3, #1
 8002ae2:	4619      	mov	r1, r3
 8002ae4:	48a0      	ldr	r0, [pc, #640]	; (8002d68 <cliI2C+0x358>)
 8002ae6:	f7ff fa6d 	bl	8001fc4 <cliPrintf>
 8002aea:	e1a5      	b.n	8002e38 <cliI2C+0x428>
      }
      else
      {
        cliPrintf("I2C CH%d Open Fail\n", print_ch + 1);
 8002aec:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8002af0:	3301      	adds	r3, #1
 8002af2:	4619      	mov	r1, r3
 8002af4:	489d      	ldr	r0, [pc, #628]	; (8002d6c <cliI2C+0x35c>)
 8002af6:	f7ff fa65 	bl	8001fc4 <cliPrintf>
 8002afa:	e19d      	b.n	8002e38 <cliI2C+0x428>
      }
    }
  }
  else if (args->argc == 5)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	881b      	ldrh	r3, [r3, #0]
 8002b00:	2b05      	cmp	r3, #5
 8002b02:	f040 8196 	bne.w	8002e32 <cliI2C+0x422>
  {
    print_ch = (uint16_t) args->getData(1);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	2001      	movs	r0, #1
 8002b0c:	4798      	blx	r3
 8002b0e:	4603      	mov	r3, r0
 8002b10:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    print_ch = constrain(print_ch, 1, I2C_MAX_CH);
 8002b14:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d006      	beq.n	8002b2a <cliI2C+0x11a>
 8002b1c:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	bf28      	it	cs
 8002b24:	2301      	movcs	r3, #1
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	e000      	b.n	8002b2c <cliI2C+0x11c>
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7

    dev_addr = (uint16_t) args->getData(2);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	2002      	movs	r0, #2
 8002b36:	4798      	blx	r3
 8002b38:	4603      	mov	r3, r0
 8002b3a:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
    reg_addr = (uint16_t) args->getData(3);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	2003      	movs	r0, #3
 8002b44:	4798      	blx	r3
 8002b46:	4603      	mov	r3, r0
 8002b48:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
    length   = (uint16_t) args->getData(4);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	2004      	movs	r0, #4
 8002b52:	4798      	blx	r3
 8002b54:	4603      	mov	r3, r0
 8002b56:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
    ch       = print_ch - 1;
 8002b5a:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8002b5e:	3b01      	subs	r3, #1
 8002b60:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f

    if(args->isStr(0, "read") == true)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	695b      	ldr	r3, [r3, #20]
 8002b68:	4981      	ldr	r1, [pc, #516]	; (8002d70 <cliI2C+0x360>)
 8002b6a:	2000      	movs	r0, #0
 8002b6c:	4798      	blx	r3
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d03a      	beq.n	8002bea <cliI2C+0x1da>
    {
      for (i=0; i<length; i++)
 8002b74:	2300      	movs	r3, #0
 8002b76:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002b7a:	e02f      	b.n	8002bdc <cliI2C+0x1cc>
      {
        i2c_ret = i2cReadByte(ch, dev_addr, reg_addr+i, i2c_data, 100);
 8002b7c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002b80:	b29a      	uxth	r2, r3
 8002b82:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8002b86:	4413      	add	r3, r2
 8002b88:	b29a      	uxth	r2, r3
 8002b8a:	f107 0314 	add.w	r3, r7, #20
 8002b8e:	f8b7 10a4 	ldrh.w	r1, [r7, #164]	; 0xa4
 8002b92:	f897 009f 	ldrb.w	r0, [r7, #159]	; 0x9f
 8002b96:	2464      	movs	r4, #100	; 0x64
 8002b98:	9400      	str	r4, [sp, #0]
 8002b9a:	f7ff fcff 	bl	800259c <i2cReadByte>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

        if (i2c_ret == true)
 8002ba4:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d00b      	beq.n	8002bc4 <cliI2C+0x1b4>
        {
          cliPrintf("%d I2C - 0x%02X : 0x%02X\n", print_ch, reg_addr+i, i2c_data[0]);
 8002bac:	f897 10a7 	ldrb.w	r1, [r7, #167]	; 0xa7
 8002bb0:	f8b7 20a2 	ldrh.w	r2, [r7, #162]	; 0xa2
 8002bb4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002bb8:	441a      	add	r2, r3
 8002bba:	7d3b      	ldrb	r3, [r7, #20]
 8002bbc:	486d      	ldr	r0, [pc, #436]	; (8002d74 <cliI2C+0x364>)
 8002bbe:	f7ff fa01 	bl	8001fc4 <cliPrintf>
 8002bc2:	e006      	b.n	8002bd2 <cliI2C+0x1c2>
        }
        else
        {
          cliPrintf("%d I2C - Fail \n", print_ch);
 8002bc4:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8002bc8:	4619      	mov	r1, r3
 8002bca:	486b      	ldr	r0, [pc, #428]	; (8002d78 <cliI2C+0x368>)
 8002bcc:	f7ff f9fa 	bl	8001fc4 <cliPrintf>
          break;
 8002bd0:	e132      	b.n	8002e38 <cliI2C+0x428>
      for (i=0; i<length; i++)
 8002bd2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002bd6:	3301      	adds	r3, #1
 8002bd8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002bdc:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 8002be0:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d3c9      	bcc.n	8002b7c <cliI2C+0x16c>
 8002be8:	e126      	b.n	8002e38 <cliI2C+0x428>
        }
      }
    }
    else if(args->isStr(0, "write") == true)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	695b      	ldr	r3, [r3, #20]
 8002bee:	4963      	ldr	r1, [pc, #396]	; (8002d7c <cliI2C+0x36c>)
 8002bf0:	2000      	movs	r0, #0
 8002bf2:	4798      	blx	r3
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d032      	beq.n	8002c60 <cliI2C+0x250>
    {
      pre_time = millis();
 8002bfa:	f7fe fab2 	bl	8001162 <millis>
 8002bfe:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
      i2c_ret = i2cWriteByte(ch, dev_addr, reg_addr, (uint8_t)length, 100);
 8002c02:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	f8b7 20a2 	ldrh.w	r2, [r7, #162]	; 0xa2
 8002c0c:	f8b7 10a4 	ldrh.w	r1, [r7, #164]	; 0xa4
 8002c10:	f897 009f 	ldrb.w	r0, [r7, #159]	; 0x9f
 8002c14:	2464      	movs	r4, #100	; 0x64
 8002c16:	9400      	str	r4, [sp, #0]
 8002c18:	f7ff fd68 	bl	80026ec <i2cWriteByte>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

      if (i2c_ret == true)
 8002c22:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d013      	beq.n	8002c52 <cliI2C+0x242>
      {
        cliPrintf("%d I2C - 0x%02X : 0x%02X, %d ms\n", print_ch, reg_addr, length, millis()-pre_time);
 8002c2a:	f897 40a7 	ldrb.w	r4, [r7, #167]	; 0xa7
 8002c2e:	f8b7 50a2 	ldrh.w	r5, [r7, #162]	; 0xa2
 8002c32:	f8b7 60a0 	ldrh.w	r6, [r7, #160]	; 0xa0
 8002c36:	f7fe fa94 	bl	8001162 <millis>
 8002c3a:	4602      	mov	r2, r0
 8002c3c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002c40:	1ad3      	subs	r3, r2, r3
 8002c42:	9300      	str	r3, [sp, #0]
 8002c44:	4633      	mov	r3, r6
 8002c46:	462a      	mov	r2, r5
 8002c48:	4621      	mov	r1, r4
 8002c4a:	484d      	ldr	r0, [pc, #308]	; (8002d80 <cliI2C+0x370>)
 8002c4c:	f7ff f9ba 	bl	8001fc4 <cliPrintf>
 8002c50:	e0f2      	b.n	8002e38 <cliI2C+0x428>
      }
      else
      {
        cliPrintf("%d I2C - Fail \n", print_ch);
 8002c52:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8002c56:	4619      	mov	r1, r3
 8002c58:	4847      	ldr	r0, [pc, #284]	; (8002d78 <cliI2C+0x368>)
 8002c5a:	f7ff f9b3 	bl	8001fc4 <cliPrintf>
 8002c5e:	e0eb      	b.n	8002e38 <cliI2C+0x428>
      }
    }
    else if(args->isStr(0, "read16") == true)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	695b      	ldr	r3, [r3, #20]
 8002c64:	4947      	ldr	r1, [pc, #284]	; (8002d84 <cliI2C+0x374>)
 8002c66:	2000      	movs	r0, #0
 8002c68:	4798      	blx	r3
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d03a      	beq.n	8002ce6 <cliI2C+0x2d6>
    {
      for (i=0; i<length; i++)
 8002c70:	2300      	movs	r3, #0
 8002c72:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002c76:	e02f      	b.n	8002cd8 <cliI2C+0x2c8>
      {
       i2c_ret = i2cRead16Byte(ch, dev_addr, reg_addr+i, i2c_data, 100);
 8002c78:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002c7c:	b29a      	uxth	r2, r3
 8002c7e:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8002c82:	4413      	add	r3, r2
 8002c84:	b29a      	uxth	r2, r3
 8002c86:	f107 0314 	add.w	r3, r7, #20
 8002c8a:	f8b7 10a4 	ldrh.w	r1, [r7, #164]	; 0xa4
 8002c8e:	f897 009f 	ldrb.w	r0, [r7, #159]	; 0x9f
 8002c92:	2464      	movs	r4, #100	; 0x64
 8002c94:	9400      	str	r4, [sp, #0]
 8002c96:	f7ff fcd5 	bl	8002644 <i2cRead16Byte>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

       if (i2c_ret == true)
 8002ca0:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d00b      	beq.n	8002cc0 <cliI2C+0x2b0>
       {
         cliPrintf("%d I2C - 0x%02X : 0x%02X\n", print_ch, reg_addr+i, i2c_data[0]);
 8002ca8:	f897 10a7 	ldrb.w	r1, [r7, #167]	; 0xa7
 8002cac:	f8b7 20a2 	ldrh.w	r2, [r7, #162]	; 0xa2
 8002cb0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002cb4:	441a      	add	r2, r3
 8002cb6:	7d3b      	ldrb	r3, [r7, #20]
 8002cb8:	482e      	ldr	r0, [pc, #184]	; (8002d74 <cliI2C+0x364>)
 8002cba:	f7ff f983 	bl	8001fc4 <cliPrintf>
 8002cbe:	e006      	b.n	8002cce <cliI2C+0x2be>
       }
       else
       {
         cliPrintf("%d I2C - Fail \n", print_ch);
 8002cc0:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8002cc4:	4619      	mov	r1, r3
 8002cc6:	482c      	ldr	r0, [pc, #176]	; (8002d78 <cliI2C+0x368>)
 8002cc8:	f7ff f97c 	bl	8001fc4 <cliPrintf>
         break;
 8002ccc:	e0b4      	b.n	8002e38 <cliI2C+0x428>
      for (i=0; i<length; i++)
 8002cce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002cd2:	3301      	adds	r3, #1
 8002cd4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002cd8:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 8002cdc:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d3c9      	bcc.n	8002c78 <cliI2C+0x268>
 8002ce4:	e0a8      	b.n	8002e38 <cliI2C+0x428>
       }
      }
    }
    else if(args->isStr(0, "write16") == true)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	695b      	ldr	r3, [r3, #20]
 8002cea:	4927      	ldr	r1, [pc, #156]	; (8002d88 <cliI2C+0x378>)
 8002cec:	2000      	movs	r0, #0
 8002cee:	4798      	blx	r3
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d04c      	beq.n	8002d90 <cliI2C+0x380>
    {
      pre_time = millis();
 8002cf6:	f7fe fa34 	bl	8001162 <millis>
 8002cfa:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
      i2c_ret = i2cWrite16Byte(ch, dev_addr, reg_addr, (uint8_t)length, 100);
 8002cfe:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	f8b7 20a2 	ldrh.w	r2, [r7, #162]	; 0xa2
 8002d08:	f8b7 10a4 	ldrh.w	r1, [r7, #164]	; 0xa4
 8002d0c:	f897 009f 	ldrb.w	r0, [r7, #159]	; 0x9f
 8002d10:	2464      	movs	r4, #100	; 0x64
 8002d12:	9400      	str	r4, [sp, #0]
 8002d14:	f7ff fd44 	bl	80027a0 <i2cWrite16Byte>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

      if (i2c_ret == true)
 8002d1e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d013      	beq.n	8002d4e <cliI2C+0x33e>
      {
        cliPrintf("%d I2C - 0x%02X : 0x%02X, %d us\n", print_ch, reg_addr, length, millis()-pre_time);
 8002d26:	f897 40a7 	ldrb.w	r4, [r7, #167]	; 0xa7
 8002d2a:	f8b7 50a2 	ldrh.w	r5, [r7, #162]	; 0xa2
 8002d2e:	f8b7 60a0 	ldrh.w	r6, [r7, #160]	; 0xa0
 8002d32:	f7fe fa16 	bl	8001162 <millis>
 8002d36:	4602      	mov	r2, r0
 8002d38:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002d3c:	1ad3      	subs	r3, r2, r3
 8002d3e:	9300      	str	r3, [sp, #0]
 8002d40:	4633      	mov	r3, r6
 8002d42:	462a      	mov	r2, r5
 8002d44:	4621      	mov	r1, r4
 8002d46:	4811      	ldr	r0, [pc, #68]	; (8002d8c <cliI2C+0x37c>)
 8002d48:	f7ff f93c 	bl	8001fc4 <cliPrintf>
 8002d4c:	e074      	b.n	8002e38 <cliI2C+0x428>
      }
      else
      {
        cliPrintf("%d I2C - Fail \n", print_ch);
 8002d4e:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8002d52:	4619      	mov	r1, r3
 8002d54:	4808      	ldr	r0, [pc, #32]	; (8002d78 <cliI2C+0x368>)
 8002d56:	f7ff f935 	bl	8001fc4 <cliPrintf>
 8002d5a:	e06d      	b.n	8002e38 <cliI2C+0x428>
 8002d5c:	0800f5d4 	.word	0x0800f5d4
 8002d60:	0800f5dc 	.word	0x0800f5dc
 8002d64:	0800f5f8 	.word	0x0800f5f8
 8002d68:	0800f600 	.word	0x0800f600
 8002d6c:	0800f614 	.word	0x0800f614
 8002d70:	0800f628 	.word	0x0800f628
 8002d74:	0800f630 	.word	0x0800f630
 8002d78:	0800f64c 	.word	0x0800f64c
 8002d7c:	0800f65c 	.word	0x0800f65c
 8002d80:	0800f664 	.word	0x0800f664
 8002d84:	0800f688 	.word	0x0800f688
 8002d88:	0800f690 	.word	0x0800f690
 8002d8c:	0800f698 	.word	0x0800f698
      }
    }
    else if(args->isStr(0, "writeData") == true)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	695b      	ldr	r3, [r3, #20]
 8002d94:	4939      	ldr	r1, [pc, #228]	; (8002e7c <cliI2C+0x46c>)
 8002d96:	2000      	movs	r0, #0
 8002d98:	4798      	blx	r3
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d044      	beq.n	8002e2a <cliI2C+0x41a>
    {
      pre_time = millis();
 8002da0:	f7fe f9df 	bl	8001162 <millis>
 8002da4:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
      uint8_t tx_buf[5];


      tx_buf[0] = reg_addr >> 8;
 8002da8:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8002dac:	0a1b      	lsrs	r3, r3, #8
 8002dae:	b29b      	uxth	r3, r3
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	733b      	strb	r3, [r7, #12]
      tx_buf[1] = reg_addr >> 0;
 8002db4:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	737b      	strb	r3, [r7, #13]
      tx_buf[2] = (uint8_t)length;
 8002dbc:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	73bb      	strb	r3, [r7, #14]
      tx_buf[3] = 0 - ((uint8_t)length);
 8002dc4:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	425b      	negs	r3, r3
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	73fb      	strb	r3, [r7, #15]

      i2c_ret = i2cWriteData(ch, dev_addr, tx_buf, 3, 100);
 8002dd0:	f107 020c 	add.w	r2, r7, #12
 8002dd4:	f8b7 10a4 	ldrh.w	r1, [r7, #164]	; 0xa4
 8002dd8:	f897 009f 	ldrb.w	r0, [r7, #159]	; 0x9f
 8002ddc:	2364      	movs	r3, #100	; 0x64
 8002dde:	9300      	str	r3, [sp, #0]
 8002de0:	2303      	movs	r3, #3
 8002de2:	f7ff fd37 	bl	8002854 <i2cWriteData>
 8002de6:	4603      	mov	r3, r0
 8002de8:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

      if (i2c_ret == true)
 8002dec:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d013      	beq.n	8002e1c <cliI2C+0x40c>
      {
        cliPrintf("%d I2C - 0x%02X : 0x%02X, %d us\n", print_ch, reg_addr, length, millis()-pre_time);
 8002df4:	f897 40a7 	ldrb.w	r4, [r7, #167]	; 0xa7
 8002df8:	f8b7 50a2 	ldrh.w	r5, [r7, #162]	; 0xa2
 8002dfc:	f8b7 60a0 	ldrh.w	r6, [r7, #160]	; 0xa0
 8002e00:	f7fe f9af 	bl	8001162 <millis>
 8002e04:	4602      	mov	r2, r0
 8002e06:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002e0a:	1ad3      	subs	r3, r2, r3
 8002e0c:	9300      	str	r3, [sp, #0]
 8002e0e:	4633      	mov	r3, r6
 8002e10:	462a      	mov	r2, r5
 8002e12:	4621      	mov	r1, r4
 8002e14:	481a      	ldr	r0, [pc, #104]	; (8002e80 <cliI2C+0x470>)
 8002e16:	f7ff f8d5 	bl	8001fc4 <cliPrintf>
 8002e1a:	e00d      	b.n	8002e38 <cliI2C+0x428>
      }
      else
      {
        cliPrintf("%d I2C - Fail \n", print_ch);
 8002e1c:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8002e20:	4619      	mov	r1, r3
 8002e22:	4818      	ldr	r0, [pc, #96]	; (8002e84 <cliI2C+0x474>)
 8002e24:	f7ff f8ce 	bl	8001fc4 <cliPrintf>
 8002e28:	e006      	b.n	8002e38 <cliI2C+0x428>
      }
    }
    else
    {
      ret = false;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
 8002e30:	e002      	b.n	8002e38 <cliI2C+0x428>
    }
  }
  else
  {
    ret = false;
 8002e32:	2300      	movs	r3, #0
 8002e34:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
  }

  if (ret == false)
 8002e38:	f897 30af 	ldrb.w	r3, [r7, #175]	; 0xaf
 8002e3c:	f083 0301 	eor.w	r3, r3, #1
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d016      	beq.n	8002e74 <cliI2C+0x464>
  {
    cliPrintf( "i2c scan channel[1~%d]\n", I2C_MAX_CH);
 8002e46:	2101      	movs	r1, #1
 8002e48:	480f      	ldr	r0, [pc, #60]	; (8002e88 <cliI2C+0x478>)
 8002e4a:	f7ff f8bb 	bl	8001fc4 <cliPrintf>
    cliPrintf( "i2c open channel[1~%d]\n", I2C_MAX_CH);
 8002e4e:	2101      	movs	r1, #1
 8002e50:	480e      	ldr	r0, [pc, #56]	; (8002e8c <cliI2C+0x47c>)
 8002e52:	f7ff f8b7 	bl	8001fc4 <cliPrintf>
    cliPrintf( "i2c read channel dev_addr reg_addr length\n");
 8002e56:	480e      	ldr	r0, [pc, #56]	; (8002e90 <cliI2C+0x480>)
 8002e58:	f7ff f8b4 	bl	8001fc4 <cliPrintf>
    cliPrintf( "i2c write channel dev_addr reg_addr data\n");
 8002e5c:	480d      	ldr	r0, [pc, #52]	; (8002e94 <cliI2C+0x484>)
 8002e5e:	f7ff f8b1 	bl	8001fc4 <cliPrintf>
    cliPrintf( "i2c read16 channel dev_addr reg_addr length\n");
 8002e62:	480d      	ldr	r0, [pc, #52]	; (8002e98 <cliI2C+0x488>)
 8002e64:	f7ff f8ae 	bl	8001fc4 <cliPrintf>
    cliPrintf( "i2c write16 channel dev_addr reg_addr data\n");
 8002e68:	480c      	ldr	r0, [pc, #48]	; (8002e9c <cliI2C+0x48c>)
 8002e6a:	f7ff f8ab 	bl	8001fc4 <cliPrintf>
    cliPrintf( "i2c writeData channel dev_addr reg_addr data\n");
 8002e6e:	480c      	ldr	r0, [pc, #48]	; (8002ea0 <cliI2C+0x490>)
 8002e70:	f7ff f8a8 	bl	8001fc4 <cliPrintf>
  }
}
 8002e74:	bf00      	nop
 8002e76:	37b4      	adds	r7, #180	; 0xb4
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e7c:	0800f6bc 	.word	0x0800f6bc
 8002e80:	0800f698 	.word	0x0800f698
 8002e84:	0800f64c 	.word	0x0800f64c
 8002e88:	0800f6c8 	.word	0x0800f6c8
 8002e8c:	0800f6e0 	.word	0x0800f6e0
 8002e90:	0800f6f8 	.word	0x0800f6f8
 8002e94:	0800f724 	.word	0x0800f724
 8002e98:	0800f750 	.word	0x0800f750
 8002e9c:	0800f780 	.word	0x0800f780
 8002ea0:	0800f7ac 	.word	0x0800f7ac

08002ea4 <ledInit>:
		{GPIOK, GPIO_PIN_3, GPIO_PIN_RESET, GPIO_PIN_SET},
	};


bool ledInit(void)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b088      	sub	sp, #32
 8002ea8:	af00      	add	r7, sp, #0
	bool ret = true;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	76fb      	strb	r3, [r7, #27]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002eae:	1d3b      	adds	r3, r7, #4
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	601a      	str	r2, [r3, #0]
 8002eb4:	605a      	str	r2, [r3, #4]
 8002eb6:	609a      	str	r2, [r3, #8]
 8002eb8:	60da      	str	r2, [r3, #12]
 8002eba:	611a      	str	r2, [r3, #16]

	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	613b      	str	r3, [r7, #16]

	for(int i=0; i<LED_MAX_CH; i++)
 8002ec8:	2300      	movs	r3, #0
 8002eca:	61fb      	str	r3, [r7, #28]
 8002ecc:	e016      	b.n	8002efc <ledInit+0x58>
	{
		GPIO_InitStruct.Pin = led_tbl[i].pin;
 8002ece:	4a11      	ldr	r2, [pc, #68]	; (8002f14 <ledInit+0x70>)
 8002ed0:	69fb      	ldr	r3, [r7, #28]
 8002ed2:	00db      	lsls	r3, r3, #3
 8002ed4:	4413      	add	r3, r2
 8002ed6:	889b      	ldrh	r3, [r3, #4]
 8002ed8:	607b      	str	r3, [r7, #4]
		HAL_GPIO_Init(led_tbl[i].port, &GPIO_InitStruct);
 8002eda:	4a0e      	ldr	r2, [pc, #56]	; (8002f14 <ledInit+0x70>)
 8002edc:	69fb      	ldr	r3, [r7, #28]
 8002ede:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002ee2:	1d3a      	adds	r2, r7, #4
 8002ee4:	4611      	mov	r1, r2
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f000 fb9e 	bl	8003628 <HAL_GPIO_Init>

		ledOff(i);
 8002eec:	69fb      	ldr	r3, [r7, #28]
 8002eee:	b2db      	uxtb	r3, r3
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f000 f815 	bl	8002f20 <ledOff>
	for(int i=0; i<LED_MAX_CH; i++)
 8002ef6:	69fb      	ldr	r3, [r7, #28]
 8002ef8:	3301      	adds	r3, #1
 8002efa:	61fb      	str	r3, [r7, #28]
 8002efc:	69fb      	ldr	r3, [r7, #28]
 8002efe:	2b01      	cmp	r3, #1
 8002f00:	dde5      	ble.n	8002ece <ledInit+0x2a>
	}

#ifdef _USE_HW_CLI
	cliAdd("led", cliLed);
 8002f02:	4905      	ldr	r1, [pc, #20]	; (8002f18 <ledInit+0x74>)
 8002f04:	4805      	ldr	r0, [pc, #20]	; (8002f1c <ledInit+0x78>)
 8002f06:	f7ff f96d 	bl	80021e4 <cliAdd>
#endif


	return ret;
 8002f0a:	7efb      	ldrb	r3, [r7, #27]
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	3720      	adds	r7, #32
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}
 8002f14:	2000001c 	.word	0x2000001c
 8002f18:	08002f99 	.word	0x08002f99
 8002f1c:	0800f7dc 	.word	0x0800f7dc

08002f20 <ledOff>:

	HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].on_state);
}

void ledOff(uint8_t ch)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b082      	sub	sp, #8
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	4603      	mov	r3, r0
 8002f28:	71fb      	strb	r3, [r7, #7]
	if(ch >= LED_MAX_CH)		return;
 8002f2a:	79fb      	ldrb	r3, [r7, #7]
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d811      	bhi.n	8002f54 <ledOff+0x34>

	HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].off_state);
 8002f30:	79fb      	ldrb	r3, [r7, #7]
 8002f32:	4a0a      	ldr	r2, [pc, #40]	; (8002f5c <ledOff+0x3c>)
 8002f34:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8002f38:	79fb      	ldrb	r3, [r7, #7]
 8002f3a:	4a08      	ldr	r2, [pc, #32]	; (8002f5c <ledOff+0x3c>)
 8002f3c:	00db      	lsls	r3, r3, #3
 8002f3e:	4413      	add	r3, r2
 8002f40:	8899      	ldrh	r1, [r3, #4]
 8002f42:	79fb      	ldrb	r3, [r7, #7]
 8002f44:	4a05      	ldr	r2, [pc, #20]	; (8002f5c <ledOff+0x3c>)
 8002f46:	00db      	lsls	r3, r3, #3
 8002f48:	4413      	add	r3, r2
 8002f4a:	79db      	ldrb	r3, [r3, #7]
 8002f4c:	461a      	mov	r2, r3
 8002f4e:	f000 fd17 	bl	8003980 <HAL_GPIO_WritePin>
 8002f52:	e000      	b.n	8002f56 <ledOff+0x36>
	if(ch >= LED_MAX_CH)		return;
 8002f54:	bf00      	nop
}
 8002f56:	3708      	adds	r7, #8
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}
 8002f5c:	2000001c 	.word	0x2000001c

08002f60 <ledToggle>:
	}
}


void ledToggle(uint8_t ch)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b082      	sub	sp, #8
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	4603      	mov	r3, r0
 8002f68:	71fb      	strb	r3, [r7, #7]
	if(ch >= LED_MAX_CH)		return;
 8002f6a:	79fb      	ldrb	r3, [r7, #7]
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d80d      	bhi.n	8002f8c <ledToggle+0x2c>

	HAL_GPIO_TogglePin(led_tbl[ch].port, led_tbl[ch].pin);
 8002f70:	79fb      	ldrb	r3, [r7, #7]
 8002f72:	4a08      	ldr	r2, [pc, #32]	; (8002f94 <ledToggle+0x34>)
 8002f74:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8002f78:	79fb      	ldrb	r3, [r7, #7]
 8002f7a:	4906      	ldr	r1, [pc, #24]	; (8002f94 <ledToggle+0x34>)
 8002f7c:	00db      	lsls	r3, r3, #3
 8002f7e:	440b      	add	r3, r1
 8002f80:	889b      	ldrh	r3, [r3, #4]
 8002f82:	4619      	mov	r1, r3
 8002f84:	4610      	mov	r0, r2
 8002f86:	f000 fd14 	bl	80039b2 <HAL_GPIO_TogglePin>
 8002f8a:	e000      	b.n	8002f8e <ledToggle+0x2e>
	if(ch >= LED_MAX_CH)		return;
 8002f8c:	bf00      	nop
}
 8002f8e:	3708      	adds	r7, #8
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}
 8002f94:	2000001c 	.word	0x2000001c

08002f98 <cliLed>:


#ifdef _USE_HW_CLI

void cliLed(cli_args_t *args)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b086      	sub	sp, #24
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
	bool ret = false;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	75fb      	strb	r3, [r7, #23]

	if(args->argc == 3 && args->isStr(0, "toggle") == true)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	881b      	ldrh	r3, [r3, #0]
 8002fa8:	2b03      	cmp	r3, #3
 8002faa:	d133      	bne.n	8003014 <cliLed+0x7c>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	695b      	ldr	r3, [r3, #20]
 8002fb0:	491f      	ldr	r1, [pc, #124]	; (8003030 <cliLed+0x98>)
 8002fb2:	2000      	movs	r0, #0
 8002fb4:	4798      	blx	r3
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d02b      	beq.n	8003014 <cliLed+0x7c>
	{
		uint8_t  led_ch;
		uint32_t toggle_time;
		uint32_t pre_time;

		led_ch      = (uint8_t)args->getData(1);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	2001      	movs	r0, #1
 8002fc2:	4798      	blx	r3
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	75bb      	strb	r3, [r7, #22]
		toggle_time = (uint32_t)args->getData(2);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	2002      	movs	r0, #2
 8002fce:	4798      	blx	r3
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	60fb      	str	r3, [r7, #12]

		if(led_ch > 0)
 8002fd4:	7dbb      	ldrb	r3, [r7, #22]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d002      	beq.n	8002fe0 <cliLed+0x48>
		{
			led_ch--;
 8002fda:	7dbb      	ldrb	r3, [r7, #22]
 8002fdc:	3b01      	subs	r3, #1
 8002fde:	75bb      	strb	r3, [r7, #22]
		}

		pre_time = millis();
 8002fe0:	f7fe f8bf 	bl	8001162 <millis>
 8002fe4:	6138      	str	r0, [r7, #16]
		while(cliKeepLoop())
 8002fe6:	e00e      	b.n	8003006 <cliLed+0x6e>
		{
			if(millis() - pre_time >= toggle_time)
 8002fe8:	f7fe f8bb 	bl	8001162 <millis>
 8002fec:	4602      	mov	r2, r0
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	68fa      	ldr	r2, [r7, #12]
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d806      	bhi.n	8003006 <cliLed+0x6e>
			{
				pre_time = millis();
 8002ff8:	f7fe f8b3 	bl	8001162 <millis>
 8002ffc:	6138      	str	r0, [r7, #16]

				ledToggle(led_ch);
 8002ffe:	7dbb      	ldrb	r3, [r7, #22]
 8003000:	4618      	mov	r0, r3
 8003002:	f7ff ffad 	bl	8002f60 <ledToggle>
		while(cliKeepLoop())
 8003006:	f7ff f8d7 	bl	80021b8 <cliKeepLoop>
 800300a:	4603      	mov	r3, r0
 800300c:	2b00      	cmp	r3, #0
 800300e:	d1eb      	bne.n	8002fe8 <cliLed+0x50>
			}
		}

		ret = true;
 8003010:	2301      	movs	r3, #1
 8003012:	75fb      	strb	r3, [r7, #23]
	}

	if(ret != true)
 8003014:	7dfb      	ldrb	r3, [r7, #23]
 8003016:	f083 0301 	eor.w	r3, r3, #1
 800301a:	b2db      	uxtb	r3, r3
 800301c:	2b00      	cmp	r3, #0
 800301e:	d003      	beq.n	8003028 <cliLed+0x90>
	{
		cliPrintf("led toggle ch[1~%d] time_ms\n", LED_MAX_CH);
 8003020:	2102      	movs	r1, #2
 8003022:	4804      	ldr	r0, [pc, #16]	; (8003034 <cliLed+0x9c>)
 8003024:	f7fe ffce 	bl	8001fc4 <cliPrintf>
	}
}
 8003028:	bf00      	nop
 800302a:	3718      	adds	r7, #24
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}
 8003030:	0800f7e0 	.word	0x0800f7e0
 8003034:	0800f7e8 	.word	0x0800f7e8

08003038 <uartInit>:
extern uint32_t cdcWrite(uint8_t *p_data, uint32_t length);
extern uint32_t cdcGetBaud(void);


bool uartInit(void)
{
 8003038:	b480      	push	{r7}
 800303a:	b083      	sub	sp, #12
 800303c:	af00      	add	r7, sp, #0
  for(int i=0; i<UART_MAX_CH; i++)
 800303e:	2300      	movs	r3, #0
 8003040:	607b      	str	r3, [r7, #4]
 8003042:	e007      	b.n	8003054 <uartInit+0x1c>
  {
    is_open[i] = false;
 8003044:	4a08      	ldr	r2, [pc, #32]	; (8003068 <uartInit+0x30>)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	4413      	add	r3, r2
 800304a:	2200      	movs	r2, #0
 800304c:	701a      	strb	r2, [r3, #0]
  for(int i=0; i<UART_MAX_CH; i++)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	3301      	adds	r3, #1
 8003052:	607b      	str	r3, [r7, #4]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2b00      	cmp	r3, #0
 8003058:	ddf4      	ble.n	8003044 <uartInit+0xc>
  }

  return true;
 800305a:	2301      	movs	r3, #1
}
 800305c:	4618      	mov	r0, r3
 800305e:	370c      	adds	r7, #12
 8003060:	46bd      	mov	sp, r7
 8003062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003066:	4770      	bx	lr
 8003068:	20000738 	.word	0x20000738

0800306c <uartOpen>:

bool uartOpen(uint8_t ch, uint32_t baud)
{
 800306c:	b480      	push	{r7}
 800306e:	b085      	sub	sp, #20
 8003070:	af00      	add	r7, sp, #0
 8003072:	4603      	mov	r3, r0
 8003074:	6039      	str	r1, [r7, #0]
 8003076:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 8003078:	2300      	movs	r3, #0
 800307a:	73fb      	strb	r3, [r7, #15]

  switch(ch)
 800307c:	79fb      	ldrb	r3, [r7, #7]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d106      	bne.n	8003090 <uartOpen+0x24>
  {
    case _DEF_UART1:
      is_open[ch] = true;
 8003082:	79fb      	ldrb	r3, [r7, #7]
 8003084:	4a06      	ldr	r2, [pc, #24]	; (80030a0 <uartOpen+0x34>)
 8003086:	2101      	movs	r1, #1
 8003088:	54d1      	strb	r1, [r2, r3]
      ret = true;
 800308a:	2301      	movs	r3, #1
 800308c:	73fb      	strb	r3, [r7, #15]
      break;
 800308e:	bf00      	nop
  }

  return ret;
 8003090:	7bfb      	ldrb	r3, [r7, #15]
}
 8003092:	4618      	mov	r0, r3
 8003094:	3714      	adds	r7, #20
 8003096:	46bd      	mov	sp, r7
 8003098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309c:	4770      	bx	lr
 800309e:	bf00      	nop
 80030a0:	20000738 	.word	0x20000738

080030a4 <uartAvailable>:

uint32_t uartAvailable(uint8_t ch)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b084      	sub	sp, #16
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	4603      	mov	r3, r0
 80030ac:	71fb      	strb	r3, [r7, #7]
  uint32_t ret = 0;
 80030ae:	2300      	movs	r3, #0
 80030b0:	60fb      	str	r3, [r7, #12]

  switch(ch)
 80030b2:	79fb      	ldrb	r3, [r7, #7]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d103      	bne.n	80030c0 <uartAvailable+0x1c>
  {
    case _DEF_UART1:
      ret = cdcAvailable();
 80030b8:	f008 f9a4 	bl	800b404 <cdcAvailable>
 80030bc:	60f8      	str	r0, [r7, #12]
      break;
 80030be:	bf00      	nop
  }

  return ret;
 80030c0:	68fb      	ldr	r3, [r7, #12]
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3710      	adds	r7, #16
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}

080030ca <uartRead>:

uint8_t uartRead(uint8_t ch)
{
 80030ca:	b580      	push	{r7, lr}
 80030cc:	b084      	sub	sp, #16
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	4603      	mov	r3, r0
 80030d2:	71fb      	strb	r3, [r7, #7]
  uint8_t ret;

  switch(ch)
 80030d4:	79fb      	ldrb	r3, [r7, #7]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d104      	bne.n	80030e4 <uartRead+0x1a>
  {
    case _DEF_UART1:
      ret = cdcRead();
 80030da:	f008 f9b1 	bl	800b440 <cdcRead>
 80030de:	4603      	mov	r3, r0
 80030e0:	73fb      	strb	r3, [r7, #15]
      break;
 80030e2:	bf00      	nop
  }

  return ret;
 80030e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3710      	adds	r7, #16
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}

080030ee <uartWrite>:

uint32_t uartWrite(uint8_t ch, uint8_t *p_data, uint32_t length)
{
 80030ee:	b580      	push	{r7, lr}
 80030f0:	b086      	sub	sp, #24
 80030f2:	af00      	add	r7, sp, #0
 80030f4:	4603      	mov	r3, r0
 80030f6:	60b9      	str	r1, [r7, #8]
 80030f8:	607a      	str	r2, [r7, #4]
 80030fa:	73fb      	strb	r3, [r7, #15]
  uint32_t ret;

  switch(ch)
 80030fc:	7bfb      	ldrb	r3, [r7, #15]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d105      	bne.n	800310e <uartWrite+0x20>
  {
    case _DEF_UART1:
      ret = cdcWrite(p_data, length);
 8003102:	6879      	ldr	r1, [r7, #4]
 8003104:	68b8      	ldr	r0, [r7, #8]
 8003106:	f008 f9f1 	bl	800b4ec <cdcWrite>
 800310a:	6178      	str	r0, [r7, #20]
      break;
 800310c:	bf00      	nop
  }

  return ret;
 800310e:	697b      	ldr	r3, [r7, #20]
}
 8003110:	4618      	mov	r0, r3
 8003112:	3718      	adds	r7, #24
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}

08003118 <uartPrintf>:

uint32_t uartPrintf(uint8_t ch, char *fmt, ...)
{
 8003118:	b40e      	push	{r1, r2, r3}
 800311a:	b580      	push	{r7, lr}
 800311c:	b0c7      	sub	sp, #284	; 0x11c
 800311e:	af00      	add	r7, sp, #0
 8003120:	4602      	mov	r2, r0
 8003122:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003126:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 800312a:	701a      	strb	r2, [r3, #0]
  char buf[256];
  va_list args;
  int len;
  uint32_t ret;

  va_start(args, fmt);
 800312c:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8003130:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003134:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003138:	601a      	str	r2, [r3, #0]
  len = vsnprintf(buf, 256, fmt, args);
 800313a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800313e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8003142:	f107 0010 	add.w	r0, r7, #16
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800314c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003150:	f00a f850 	bl	800d1f4 <vsniprintf>
 8003154:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114

  ret = uartWrite(ch, (uint8_t *)buf, len);
 8003158:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800315c:	f107 0110 	add.w	r1, r7, #16
 8003160:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8003164:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8003168:	781b      	ldrb	r3, [r3, #0]
 800316a:	4618      	mov	r0, r3
 800316c:	f7ff ffbf 	bl	80030ee <uartWrite>
 8003170:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
  va_end(args);

  return ret;
 8003174:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
}
 8003178:	4618      	mov	r0, r3
 800317a:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 800317e:	46bd      	mov	sp, r7
 8003180:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003184:	b003      	add	sp, #12
 8003186:	4770      	bx	lr

08003188 <hwInit>:




void hwInit(void)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	af00      	add	r7, sp, #0
  bspInit();
 800318c:	f7fd ff60 	bl	8001050 <bspInit>

  ledInit();
 8003190:	f7ff fe88 	bl	8002ea4 <ledInit>
  cliInit();
 8003194:	f7fe f9e8 	bl	8001568 <cliInit>
  uartInit();
 8003198:	f7ff ff4e 	bl	8003038 <uartInit>
  flashInit();
 800319c:	f7ff f8a4 	bl	80022e8 <flashInit>
  i2cInit();
 80031a0:	f7ff f8aa 	bl	80022f8 <i2cInit>
}
 80031a4:	bf00      	nop
 80031a6:	bd80      	pop	{r7, pc}

080031a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80031ac:	2003      	movs	r0, #3
 80031ae:	f000 f94d 	bl	800344c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80031b2:	200f      	movs	r0, #15
 80031b4:	f000 f806 	bl	80031c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80031b8:	f7fe f87c 	bl	80012b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80031bc:	2300      	movs	r3, #0
}
 80031be:	4618      	mov	r0, r3
 80031c0:	bd80      	pop	{r7, pc}
	...

080031c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b082      	sub	sp, #8
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80031cc:	4b12      	ldr	r3, [pc, #72]	; (8003218 <HAL_InitTick+0x54>)
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	4b12      	ldr	r3, [pc, #72]	; (800321c <HAL_InitTick+0x58>)
 80031d2:	781b      	ldrb	r3, [r3, #0]
 80031d4:	4619      	mov	r1, r3
 80031d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80031da:	fbb3 f3f1 	udiv	r3, r3, r1
 80031de:	fbb2 f3f3 	udiv	r3, r2, r3
 80031e2:	4618      	mov	r0, r3
 80031e4:	f000 f967 	bl	80034b6 <HAL_SYSTICK_Config>
 80031e8:	4603      	mov	r3, r0
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d001      	beq.n	80031f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e00e      	b.n	8003210 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2b0f      	cmp	r3, #15
 80031f6:	d80a      	bhi.n	800320e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80031f8:	2200      	movs	r2, #0
 80031fa:	6879      	ldr	r1, [r7, #4]
 80031fc:	f04f 30ff 	mov.w	r0, #4294967295
 8003200:	f000 f92f 	bl	8003462 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003204:	4a06      	ldr	r2, [pc, #24]	; (8003220 <HAL_InitTick+0x5c>)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800320a:	2300      	movs	r3, #0
 800320c:	e000      	b.n	8003210 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800320e:	2301      	movs	r3, #1
}
 8003210:	4618      	mov	r0, r3
 8003212:	3708      	adds	r7, #8
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}
 8003218:	20000000 	.word	0x20000000
 800321c:	20000030 	.word	0x20000030
 8003220:	2000002c 	.word	0x2000002c

08003224 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003224:	b480      	push	{r7}
 8003226:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003228:	4b06      	ldr	r3, [pc, #24]	; (8003244 <HAL_IncTick+0x20>)
 800322a:	781b      	ldrb	r3, [r3, #0]
 800322c:	461a      	mov	r2, r3
 800322e:	4b06      	ldr	r3, [pc, #24]	; (8003248 <HAL_IncTick+0x24>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4413      	add	r3, r2
 8003234:	4a04      	ldr	r2, [pc, #16]	; (8003248 <HAL_IncTick+0x24>)
 8003236:	6013      	str	r3, [r2, #0]
}
 8003238:	bf00      	nop
 800323a:	46bd      	mov	sp, r7
 800323c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003240:	4770      	bx	lr
 8003242:	bf00      	nop
 8003244:	20000030 	.word	0x20000030
 8003248:	2000073c 	.word	0x2000073c

0800324c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800324c:	b480      	push	{r7}
 800324e:	af00      	add	r7, sp, #0
  return uwTick;
 8003250:	4b03      	ldr	r3, [pc, #12]	; (8003260 <HAL_GetTick+0x14>)
 8003252:	681b      	ldr	r3, [r3, #0]
}
 8003254:	4618      	mov	r0, r3
 8003256:	46bd      	mov	sp, r7
 8003258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325c:	4770      	bx	lr
 800325e:	bf00      	nop
 8003260:	2000073c 	.word	0x2000073c

08003264 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b084      	sub	sp, #16
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800326c:	f7ff ffee 	bl	800324c <HAL_GetTick>
 8003270:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	f1b3 3fff 	cmp.w	r3, #4294967295
 800327c:	d005      	beq.n	800328a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800327e:	4b0a      	ldr	r3, [pc, #40]	; (80032a8 <HAL_Delay+0x44>)
 8003280:	781b      	ldrb	r3, [r3, #0]
 8003282:	461a      	mov	r2, r3
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	4413      	add	r3, r2
 8003288:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800328a:	bf00      	nop
 800328c:	f7ff ffde 	bl	800324c <HAL_GetTick>
 8003290:	4602      	mov	r2, r0
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	68fa      	ldr	r2, [r7, #12]
 8003298:	429a      	cmp	r2, r3
 800329a:	d8f7      	bhi.n	800328c <HAL_Delay+0x28>
  {
  }
}
 800329c:	bf00      	nop
 800329e:	bf00      	nop
 80032a0:	3710      	adds	r7, #16
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	20000030 	.word	0x20000030

080032ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b085      	sub	sp, #20
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	f003 0307 	and.w	r3, r3, #7
 80032ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032bc:	4b0b      	ldr	r3, [pc, #44]	; (80032ec <__NVIC_SetPriorityGrouping+0x40>)
 80032be:	68db      	ldr	r3, [r3, #12]
 80032c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032c2:	68ba      	ldr	r2, [r7, #8]
 80032c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80032c8:	4013      	ands	r3, r2
 80032ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80032d4:	4b06      	ldr	r3, [pc, #24]	; (80032f0 <__NVIC_SetPriorityGrouping+0x44>)
 80032d6:	4313      	orrs	r3, r2
 80032d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80032da:	4a04      	ldr	r2, [pc, #16]	; (80032ec <__NVIC_SetPriorityGrouping+0x40>)
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	60d3      	str	r3, [r2, #12]
}
 80032e0:	bf00      	nop
 80032e2:	3714      	adds	r7, #20
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr
 80032ec:	e000ed00 	.word	0xe000ed00
 80032f0:	05fa0000 	.word	0x05fa0000

080032f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80032f4:	b480      	push	{r7}
 80032f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80032f8:	4b04      	ldr	r3, [pc, #16]	; (800330c <__NVIC_GetPriorityGrouping+0x18>)
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	0a1b      	lsrs	r3, r3, #8
 80032fe:	f003 0307 	and.w	r3, r3, #7
}
 8003302:	4618      	mov	r0, r3
 8003304:	46bd      	mov	sp, r7
 8003306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330a:	4770      	bx	lr
 800330c:	e000ed00 	.word	0xe000ed00

08003310 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003310:	b480      	push	{r7}
 8003312:	b083      	sub	sp, #12
 8003314:	af00      	add	r7, sp, #0
 8003316:	4603      	mov	r3, r0
 8003318:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800331a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800331e:	2b00      	cmp	r3, #0
 8003320:	db0b      	blt.n	800333a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003322:	79fb      	ldrb	r3, [r7, #7]
 8003324:	f003 021f 	and.w	r2, r3, #31
 8003328:	4907      	ldr	r1, [pc, #28]	; (8003348 <__NVIC_EnableIRQ+0x38>)
 800332a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800332e:	095b      	lsrs	r3, r3, #5
 8003330:	2001      	movs	r0, #1
 8003332:	fa00 f202 	lsl.w	r2, r0, r2
 8003336:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800333a:	bf00      	nop
 800333c:	370c      	adds	r7, #12
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr
 8003346:	bf00      	nop
 8003348:	e000e100 	.word	0xe000e100

0800334c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800334c:	b480      	push	{r7}
 800334e:	b083      	sub	sp, #12
 8003350:	af00      	add	r7, sp, #0
 8003352:	4603      	mov	r3, r0
 8003354:	6039      	str	r1, [r7, #0]
 8003356:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003358:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800335c:	2b00      	cmp	r3, #0
 800335e:	db0a      	blt.n	8003376 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	b2da      	uxtb	r2, r3
 8003364:	490c      	ldr	r1, [pc, #48]	; (8003398 <__NVIC_SetPriority+0x4c>)
 8003366:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800336a:	0112      	lsls	r2, r2, #4
 800336c:	b2d2      	uxtb	r2, r2
 800336e:	440b      	add	r3, r1
 8003370:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003374:	e00a      	b.n	800338c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	b2da      	uxtb	r2, r3
 800337a:	4908      	ldr	r1, [pc, #32]	; (800339c <__NVIC_SetPriority+0x50>)
 800337c:	79fb      	ldrb	r3, [r7, #7]
 800337e:	f003 030f 	and.w	r3, r3, #15
 8003382:	3b04      	subs	r3, #4
 8003384:	0112      	lsls	r2, r2, #4
 8003386:	b2d2      	uxtb	r2, r2
 8003388:	440b      	add	r3, r1
 800338a:	761a      	strb	r2, [r3, #24]
}
 800338c:	bf00      	nop
 800338e:	370c      	adds	r7, #12
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr
 8003398:	e000e100 	.word	0xe000e100
 800339c:	e000ed00 	.word	0xe000ed00

080033a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b089      	sub	sp, #36	; 0x24
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	60f8      	str	r0, [r7, #12]
 80033a8:	60b9      	str	r1, [r7, #8]
 80033aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	f003 0307 	and.w	r3, r3, #7
 80033b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033b4:	69fb      	ldr	r3, [r7, #28]
 80033b6:	f1c3 0307 	rsb	r3, r3, #7
 80033ba:	2b04      	cmp	r3, #4
 80033bc:	bf28      	it	cs
 80033be:	2304      	movcs	r3, #4
 80033c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033c2:	69fb      	ldr	r3, [r7, #28]
 80033c4:	3304      	adds	r3, #4
 80033c6:	2b06      	cmp	r3, #6
 80033c8:	d902      	bls.n	80033d0 <NVIC_EncodePriority+0x30>
 80033ca:	69fb      	ldr	r3, [r7, #28]
 80033cc:	3b03      	subs	r3, #3
 80033ce:	e000      	b.n	80033d2 <NVIC_EncodePriority+0x32>
 80033d0:	2300      	movs	r3, #0
 80033d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033d4:	f04f 32ff 	mov.w	r2, #4294967295
 80033d8:	69bb      	ldr	r3, [r7, #24]
 80033da:	fa02 f303 	lsl.w	r3, r2, r3
 80033de:	43da      	mvns	r2, r3
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	401a      	ands	r2, r3
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80033e8:	f04f 31ff 	mov.w	r1, #4294967295
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	fa01 f303 	lsl.w	r3, r1, r3
 80033f2:	43d9      	mvns	r1, r3
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033f8:	4313      	orrs	r3, r2
         );
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3724      	adds	r7, #36	; 0x24
 80033fe:	46bd      	mov	sp, r7
 8003400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003404:	4770      	bx	lr
	...

08003408 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b082      	sub	sp, #8
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	3b01      	subs	r3, #1
 8003414:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003418:	d301      	bcc.n	800341e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800341a:	2301      	movs	r3, #1
 800341c:	e00f      	b.n	800343e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800341e:	4a0a      	ldr	r2, [pc, #40]	; (8003448 <SysTick_Config+0x40>)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	3b01      	subs	r3, #1
 8003424:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003426:	210f      	movs	r1, #15
 8003428:	f04f 30ff 	mov.w	r0, #4294967295
 800342c:	f7ff ff8e 	bl	800334c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003430:	4b05      	ldr	r3, [pc, #20]	; (8003448 <SysTick_Config+0x40>)
 8003432:	2200      	movs	r2, #0
 8003434:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003436:	4b04      	ldr	r3, [pc, #16]	; (8003448 <SysTick_Config+0x40>)
 8003438:	2207      	movs	r2, #7
 800343a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800343c:	2300      	movs	r3, #0
}
 800343e:	4618      	mov	r0, r3
 8003440:	3708      	adds	r7, #8
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}
 8003446:	bf00      	nop
 8003448:	e000e010 	.word	0xe000e010

0800344c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b082      	sub	sp, #8
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	f7ff ff29 	bl	80032ac <__NVIC_SetPriorityGrouping>
}
 800345a:	bf00      	nop
 800345c:	3708      	adds	r7, #8
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}

08003462 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003462:	b580      	push	{r7, lr}
 8003464:	b086      	sub	sp, #24
 8003466:	af00      	add	r7, sp, #0
 8003468:	4603      	mov	r3, r0
 800346a:	60b9      	str	r1, [r7, #8]
 800346c:	607a      	str	r2, [r7, #4]
 800346e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003470:	2300      	movs	r3, #0
 8003472:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003474:	f7ff ff3e 	bl	80032f4 <__NVIC_GetPriorityGrouping>
 8003478:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800347a:	687a      	ldr	r2, [r7, #4]
 800347c:	68b9      	ldr	r1, [r7, #8]
 800347e:	6978      	ldr	r0, [r7, #20]
 8003480:	f7ff ff8e 	bl	80033a0 <NVIC_EncodePriority>
 8003484:	4602      	mov	r2, r0
 8003486:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800348a:	4611      	mov	r1, r2
 800348c:	4618      	mov	r0, r3
 800348e:	f7ff ff5d 	bl	800334c <__NVIC_SetPriority>
}
 8003492:	bf00      	nop
 8003494:	3718      	adds	r7, #24
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}

0800349a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800349a:	b580      	push	{r7, lr}
 800349c:	b082      	sub	sp, #8
 800349e:	af00      	add	r7, sp, #0
 80034a0:	4603      	mov	r3, r0
 80034a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034a8:	4618      	mov	r0, r3
 80034aa:	f7ff ff31 	bl	8003310 <__NVIC_EnableIRQ>
}
 80034ae:	bf00      	nop
 80034b0:	3708      	adds	r7, #8
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}

080034b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80034b6:	b580      	push	{r7, lr}
 80034b8:	b082      	sub	sp, #8
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	f7ff ffa2 	bl	8003408 <SysTick_Config>
 80034c4:	4603      	mov	r3, r0
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3708      	adds	r7, #8
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}
	...

080034d0 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80034d0:	b480      	push	{r7}
 80034d2:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80034d4:	f3bf 8f5f 	dmb	sy
}
 80034d8:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80034da:	4b07      	ldr	r3, [pc, #28]	; (80034f8 <HAL_MPU_Disable+0x28>)
 80034dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034de:	4a06      	ldr	r2, [pc, #24]	; (80034f8 <HAL_MPU_Disable+0x28>)
 80034e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034e4:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80034e6:	4b05      	ldr	r3, [pc, #20]	; (80034fc <HAL_MPU_Disable+0x2c>)
 80034e8:	2200      	movs	r2, #0
 80034ea:	605a      	str	r2, [r3, #4]
}
 80034ec:	bf00      	nop
 80034ee:	46bd      	mov	sp, r7
 80034f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f4:	4770      	bx	lr
 80034f6:	bf00      	nop
 80034f8:	e000ed00 	.word	0xe000ed00
 80034fc:	e000ed90 	.word	0xe000ed90

08003500 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8003500:	b480      	push	{r7}
 8003502:	b083      	sub	sp, #12
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8003508:	4a0b      	ldr	r2, [pc, #44]	; (8003538 <HAL_MPU_Enable+0x38>)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	f043 0301 	orr.w	r3, r3, #1
 8003510:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8003512:	4b0a      	ldr	r3, [pc, #40]	; (800353c <HAL_MPU_Enable+0x3c>)
 8003514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003516:	4a09      	ldr	r2, [pc, #36]	; (800353c <HAL_MPU_Enable+0x3c>)
 8003518:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800351c:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800351e:	f3bf 8f4f 	dsb	sy
}
 8003522:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003524:	f3bf 8f6f 	isb	sy
}
 8003528:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800352a:	bf00      	nop
 800352c:	370c      	adds	r7, #12
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr
 8003536:	bf00      	nop
 8003538:	e000ed90 	.word	0xe000ed90
 800353c:	e000ed00 	.word	0xe000ed00

08003540 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8003540:	b480      	push	{r7}
 8003542:	b083      	sub	sp, #12
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	785a      	ldrb	r2, [r3, #1]
 800354c:	4b1d      	ldr	r3, [pc, #116]	; (80035c4 <HAL_MPU_ConfigRegion+0x84>)
 800354e:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	781b      	ldrb	r3, [r3, #0]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d029      	beq.n	80035ac <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 8003558:	4a1a      	ldr	r2, [pc, #104]	; (80035c4 <HAL_MPU_ConfigRegion+0x84>)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	7b1b      	ldrb	r3, [r3, #12]
 8003564:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	7adb      	ldrb	r3, [r3, #11]
 800356a:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800356c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	7a9b      	ldrb	r3, [r3, #10]
 8003572:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8003574:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	7b5b      	ldrb	r3, [r3, #13]
 800357a:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800357c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	7b9b      	ldrb	r3, [r3, #14]
 8003582:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8003584:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	7bdb      	ldrb	r3, [r3, #15]
 800358a:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800358c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	7a5b      	ldrb	r3, [r3, #9]
 8003592:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8003594:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	7a1b      	ldrb	r3, [r3, #8]
 800359a:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800359c:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800359e:	687a      	ldr	r2, [r7, #4]
 80035a0:	7812      	ldrb	r2, [r2, #0]
 80035a2:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80035a4:	4a07      	ldr	r2, [pc, #28]	; (80035c4 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80035a6:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80035a8:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 80035aa:	e005      	b.n	80035b8 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 80035ac:	4b05      	ldr	r3, [pc, #20]	; (80035c4 <HAL_MPU_ConfigRegion+0x84>)
 80035ae:	2200      	movs	r2, #0
 80035b0:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 80035b2:	4b04      	ldr	r3, [pc, #16]	; (80035c4 <HAL_MPU_ConfigRegion+0x84>)
 80035b4:	2200      	movs	r2, #0
 80035b6:	611a      	str	r2, [r3, #16]
}
 80035b8:	bf00      	nop
 80035ba:	370c      	adds	r7, #12
 80035bc:	46bd      	mov	sp, r7
 80035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c2:	4770      	bx	lr
 80035c4:	e000ed90 	.word	0xe000ed90

080035c8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b083      	sub	sp, #12
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	2b02      	cmp	r3, #2
 80035da:	d004      	beq.n	80035e6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2280      	movs	r2, #128	; 0x80
 80035e0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e00c      	b.n	8003600 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2205      	movs	r2, #5
 80035ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f022 0201 	bic.w	r2, r2, #1
 80035fc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80035fe:	2300      	movs	r3, #0
}
 8003600:	4618      	mov	r0, r3
 8003602:	370c      	adds	r7, #12
 8003604:	46bd      	mov	sp, r7
 8003606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360a:	4770      	bx	lr

0800360c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800360c:	b480      	push	{r7}
 800360e:	b083      	sub	sp, #12
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800361a:	b2db      	uxtb	r3, r3
}
 800361c:	4618      	mov	r0, r3
 800361e:	370c      	adds	r7, #12
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr

08003628 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003628:	b480      	push	{r7}
 800362a:	b089      	sub	sp, #36	; 0x24
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
 8003630:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003632:	2300      	movs	r3, #0
 8003634:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003636:	2300      	movs	r3, #0
 8003638:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800363a:	2300      	movs	r3, #0
 800363c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800363e:	2300      	movs	r3, #0
 8003640:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003642:	2300      	movs	r3, #0
 8003644:	61fb      	str	r3, [r7, #28]
 8003646:	e175      	b.n	8003934 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003648:	2201      	movs	r2, #1
 800364a:	69fb      	ldr	r3, [r7, #28]
 800364c:	fa02 f303 	lsl.w	r3, r2, r3
 8003650:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	697a      	ldr	r2, [r7, #20]
 8003658:	4013      	ands	r3, r2
 800365a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800365c:	693a      	ldr	r2, [r7, #16]
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	429a      	cmp	r2, r3
 8003662:	f040 8164 	bne.w	800392e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	f003 0303 	and.w	r3, r3, #3
 800366e:	2b01      	cmp	r3, #1
 8003670:	d005      	beq.n	800367e <HAL_GPIO_Init+0x56>
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	f003 0303 	and.w	r3, r3, #3
 800367a:	2b02      	cmp	r3, #2
 800367c:	d130      	bne.n	80036e0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003684:	69fb      	ldr	r3, [r7, #28]
 8003686:	005b      	lsls	r3, r3, #1
 8003688:	2203      	movs	r2, #3
 800368a:	fa02 f303 	lsl.w	r3, r2, r3
 800368e:	43db      	mvns	r3, r3
 8003690:	69ba      	ldr	r2, [r7, #24]
 8003692:	4013      	ands	r3, r2
 8003694:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	68da      	ldr	r2, [r3, #12]
 800369a:	69fb      	ldr	r3, [r7, #28]
 800369c:	005b      	lsls	r3, r3, #1
 800369e:	fa02 f303 	lsl.w	r3, r2, r3
 80036a2:	69ba      	ldr	r2, [r7, #24]
 80036a4:	4313      	orrs	r3, r2
 80036a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	69ba      	ldr	r2, [r7, #24]
 80036ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80036b4:	2201      	movs	r2, #1
 80036b6:	69fb      	ldr	r3, [r7, #28]
 80036b8:	fa02 f303 	lsl.w	r3, r2, r3
 80036bc:	43db      	mvns	r3, r3
 80036be:	69ba      	ldr	r2, [r7, #24]
 80036c0:	4013      	ands	r3, r2
 80036c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	091b      	lsrs	r3, r3, #4
 80036ca:	f003 0201 	and.w	r2, r3, #1
 80036ce:	69fb      	ldr	r3, [r7, #28]
 80036d0:	fa02 f303 	lsl.w	r3, r2, r3
 80036d4:	69ba      	ldr	r2, [r7, #24]
 80036d6:	4313      	orrs	r3, r2
 80036d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	69ba      	ldr	r2, [r7, #24]
 80036de:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	f003 0303 	and.w	r3, r3, #3
 80036e8:	2b03      	cmp	r3, #3
 80036ea:	d017      	beq.n	800371c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	68db      	ldr	r3, [r3, #12]
 80036f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80036f2:	69fb      	ldr	r3, [r7, #28]
 80036f4:	005b      	lsls	r3, r3, #1
 80036f6:	2203      	movs	r2, #3
 80036f8:	fa02 f303 	lsl.w	r3, r2, r3
 80036fc:	43db      	mvns	r3, r3
 80036fe:	69ba      	ldr	r2, [r7, #24]
 8003700:	4013      	ands	r3, r2
 8003702:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	689a      	ldr	r2, [r3, #8]
 8003708:	69fb      	ldr	r3, [r7, #28]
 800370a:	005b      	lsls	r3, r3, #1
 800370c:	fa02 f303 	lsl.w	r3, r2, r3
 8003710:	69ba      	ldr	r2, [r7, #24]
 8003712:	4313      	orrs	r3, r2
 8003714:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	69ba      	ldr	r2, [r7, #24]
 800371a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	f003 0303 	and.w	r3, r3, #3
 8003724:	2b02      	cmp	r3, #2
 8003726:	d123      	bne.n	8003770 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003728:	69fb      	ldr	r3, [r7, #28]
 800372a:	08da      	lsrs	r2, r3, #3
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	3208      	adds	r2, #8
 8003730:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003734:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003736:	69fb      	ldr	r3, [r7, #28]
 8003738:	f003 0307 	and.w	r3, r3, #7
 800373c:	009b      	lsls	r3, r3, #2
 800373e:	220f      	movs	r2, #15
 8003740:	fa02 f303 	lsl.w	r3, r2, r3
 8003744:	43db      	mvns	r3, r3
 8003746:	69ba      	ldr	r2, [r7, #24]
 8003748:	4013      	ands	r3, r2
 800374a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	691a      	ldr	r2, [r3, #16]
 8003750:	69fb      	ldr	r3, [r7, #28]
 8003752:	f003 0307 	and.w	r3, r3, #7
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	fa02 f303 	lsl.w	r3, r2, r3
 800375c:	69ba      	ldr	r2, [r7, #24]
 800375e:	4313      	orrs	r3, r2
 8003760:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003762:	69fb      	ldr	r3, [r7, #28]
 8003764:	08da      	lsrs	r2, r3, #3
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	3208      	adds	r2, #8
 800376a:	69b9      	ldr	r1, [r7, #24]
 800376c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003776:	69fb      	ldr	r3, [r7, #28]
 8003778:	005b      	lsls	r3, r3, #1
 800377a:	2203      	movs	r2, #3
 800377c:	fa02 f303 	lsl.w	r3, r2, r3
 8003780:	43db      	mvns	r3, r3
 8003782:	69ba      	ldr	r2, [r7, #24]
 8003784:	4013      	ands	r3, r2
 8003786:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	f003 0203 	and.w	r2, r3, #3
 8003790:	69fb      	ldr	r3, [r7, #28]
 8003792:	005b      	lsls	r3, r3, #1
 8003794:	fa02 f303 	lsl.w	r3, r2, r3
 8003798:	69ba      	ldr	r2, [r7, #24]
 800379a:	4313      	orrs	r3, r2
 800379c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	69ba      	ldr	r2, [r7, #24]
 80037a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	f000 80be 	beq.w	800392e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037b2:	4b66      	ldr	r3, [pc, #408]	; (800394c <HAL_GPIO_Init+0x324>)
 80037b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037b6:	4a65      	ldr	r2, [pc, #404]	; (800394c <HAL_GPIO_Init+0x324>)
 80037b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80037bc:	6453      	str	r3, [r2, #68]	; 0x44
 80037be:	4b63      	ldr	r3, [pc, #396]	; (800394c <HAL_GPIO_Init+0x324>)
 80037c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037c6:	60fb      	str	r3, [r7, #12]
 80037c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80037ca:	4a61      	ldr	r2, [pc, #388]	; (8003950 <HAL_GPIO_Init+0x328>)
 80037cc:	69fb      	ldr	r3, [r7, #28]
 80037ce:	089b      	lsrs	r3, r3, #2
 80037d0:	3302      	adds	r3, #2
 80037d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80037d8:	69fb      	ldr	r3, [r7, #28]
 80037da:	f003 0303 	and.w	r3, r3, #3
 80037de:	009b      	lsls	r3, r3, #2
 80037e0:	220f      	movs	r2, #15
 80037e2:	fa02 f303 	lsl.w	r3, r2, r3
 80037e6:	43db      	mvns	r3, r3
 80037e8:	69ba      	ldr	r2, [r7, #24]
 80037ea:	4013      	ands	r3, r2
 80037ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	4a58      	ldr	r2, [pc, #352]	; (8003954 <HAL_GPIO_Init+0x32c>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d037      	beq.n	8003866 <HAL_GPIO_Init+0x23e>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	4a57      	ldr	r2, [pc, #348]	; (8003958 <HAL_GPIO_Init+0x330>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d031      	beq.n	8003862 <HAL_GPIO_Init+0x23a>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	4a56      	ldr	r2, [pc, #344]	; (800395c <HAL_GPIO_Init+0x334>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d02b      	beq.n	800385e <HAL_GPIO_Init+0x236>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	4a55      	ldr	r2, [pc, #340]	; (8003960 <HAL_GPIO_Init+0x338>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d025      	beq.n	800385a <HAL_GPIO_Init+0x232>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	4a54      	ldr	r2, [pc, #336]	; (8003964 <HAL_GPIO_Init+0x33c>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d01f      	beq.n	8003856 <HAL_GPIO_Init+0x22e>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	4a53      	ldr	r2, [pc, #332]	; (8003968 <HAL_GPIO_Init+0x340>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d019      	beq.n	8003852 <HAL_GPIO_Init+0x22a>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	4a52      	ldr	r2, [pc, #328]	; (800396c <HAL_GPIO_Init+0x344>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d013      	beq.n	800384e <HAL_GPIO_Init+0x226>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	4a51      	ldr	r2, [pc, #324]	; (8003970 <HAL_GPIO_Init+0x348>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d00d      	beq.n	800384a <HAL_GPIO_Init+0x222>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	4a50      	ldr	r2, [pc, #320]	; (8003974 <HAL_GPIO_Init+0x34c>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d007      	beq.n	8003846 <HAL_GPIO_Init+0x21e>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	4a4f      	ldr	r2, [pc, #316]	; (8003978 <HAL_GPIO_Init+0x350>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d101      	bne.n	8003842 <HAL_GPIO_Init+0x21a>
 800383e:	2309      	movs	r3, #9
 8003840:	e012      	b.n	8003868 <HAL_GPIO_Init+0x240>
 8003842:	230a      	movs	r3, #10
 8003844:	e010      	b.n	8003868 <HAL_GPIO_Init+0x240>
 8003846:	2308      	movs	r3, #8
 8003848:	e00e      	b.n	8003868 <HAL_GPIO_Init+0x240>
 800384a:	2307      	movs	r3, #7
 800384c:	e00c      	b.n	8003868 <HAL_GPIO_Init+0x240>
 800384e:	2306      	movs	r3, #6
 8003850:	e00a      	b.n	8003868 <HAL_GPIO_Init+0x240>
 8003852:	2305      	movs	r3, #5
 8003854:	e008      	b.n	8003868 <HAL_GPIO_Init+0x240>
 8003856:	2304      	movs	r3, #4
 8003858:	e006      	b.n	8003868 <HAL_GPIO_Init+0x240>
 800385a:	2303      	movs	r3, #3
 800385c:	e004      	b.n	8003868 <HAL_GPIO_Init+0x240>
 800385e:	2302      	movs	r3, #2
 8003860:	e002      	b.n	8003868 <HAL_GPIO_Init+0x240>
 8003862:	2301      	movs	r3, #1
 8003864:	e000      	b.n	8003868 <HAL_GPIO_Init+0x240>
 8003866:	2300      	movs	r3, #0
 8003868:	69fa      	ldr	r2, [r7, #28]
 800386a:	f002 0203 	and.w	r2, r2, #3
 800386e:	0092      	lsls	r2, r2, #2
 8003870:	4093      	lsls	r3, r2
 8003872:	69ba      	ldr	r2, [r7, #24]
 8003874:	4313      	orrs	r3, r2
 8003876:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003878:	4935      	ldr	r1, [pc, #212]	; (8003950 <HAL_GPIO_Init+0x328>)
 800387a:	69fb      	ldr	r3, [r7, #28]
 800387c:	089b      	lsrs	r3, r3, #2
 800387e:	3302      	adds	r3, #2
 8003880:	69ba      	ldr	r2, [r7, #24]
 8003882:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003886:	4b3d      	ldr	r3, [pc, #244]	; (800397c <HAL_GPIO_Init+0x354>)
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	43db      	mvns	r3, r3
 8003890:	69ba      	ldr	r2, [r7, #24]
 8003892:	4013      	ands	r3, r2
 8003894:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d003      	beq.n	80038aa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80038a2:	69ba      	ldr	r2, [r7, #24]
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	4313      	orrs	r3, r2
 80038a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80038aa:	4a34      	ldr	r2, [pc, #208]	; (800397c <HAL_GPIO_Init+0x354>)
 80038ac:	69bb      	ldr	r3, [r7, #24]
 80038ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80038b0:	4b32      	ldr	r3, [pc, #200]	; (800397c <HAL_GPIO_Init+0x354>)
 80038b2:	68db      	ldr	r3, [r3, #12]
 80038b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	43db      	mvns	r3, r3
 80038ba:	69ba      	ldr	r2, [r7, #24]
 80038bc:	4013      	ands	r3, r2
 80038be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d003      	beq.n	80038d4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80038cc:	69ba      	ldr	r2, [r7, #24]
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	4313      	orrs	r3, r2
 80038d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80038d4:	4a29      	ldr	r2, [pc, #164]	; (800397c <HAL_GPIO_Init+0x354>)
 80038d6:	69bb      	ldr	r3, [r7, #24]
 80038d8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80038da:	4b28      	ldr	r3, [pc, #160]	; (800397c <HAL_GPIO_Init+0x354>)
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	43db      	mvns	r3, r3
 80038e4:	69ba      	ldr	r2, [r7, #24]
 80038e6:	4013      	ands	r3, r2
 80038e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d003      	beq.n	80038fe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80038f6:	69ba      	ldr	r2, [r7, #24]
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	4313      	orrs	r3, r2
 80038fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80038fe:	4a1f      	ldr	r2, [pc, #124]	; (800397c <HAL_GPIO_Init+0x354>)
 8003900:	69bb      	ldr	r3, [r7, #24]
 8003902:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003904:	4b1d      	ldr	r3, [pc, #116]	; (800397c <HAL_GPIO_Init+0x354>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	43db      	mvns	r3, r3
 800390e:	69ba      	ldr	r2, [r7, #24]
 8003910:	4013      	ands	r3, r2
 8003912:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800391c:	2b00      	cmp	r3, #0
 800391e:	d003      	beq.n	8003928 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003920:	69ba      	ldr	r2, [r7, #24]
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	4313      	orrs	r3, r2
 8003926:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003928:	4a14      	ldr	r2, [pc, #80]	; (800397c <HAL_GPIO_Init+0x354>)
 800392a:	69bb      	ldr	r3, [r7, #24]
 800392c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800392e:	69fb      	ldr	r3, [r7, #28]
 8003930:	3301      	adds	r3, #1
 8003932:	61fb      	str	r3, [r7, #28]
 8003934:	69fb      	ldr	r3, [r7, #28]
 8003936:	2b0f      	cmp	r3, #15
 8003938:	f67f ae86 	bls.w	8003648 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800393c:	bf00      	nop
 800393e:	bf00      	nop
 8003940:	3724      	adds	r7, #36	; 0x24
 8003942:	46bd      	mov	sp, r7
 8003944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003948:	4770      	bx	lr
 800394a:	bf00      	nop
 800394c:	40023800 	.word	0x40023800
 8003950:	40013800 	.word	0x40013800
 8003954:	40020000 	.word	0x40020000
 8003958:	40020400 	.word	0x40020400
 800395c:	40020800 	.word	0x40020800
 8003960:	40020c00 	.word	0x40020c00
 8003964:	40021000 	.word	0x40021000
 8003968:	40021400 	.word	0x40021400
 800396c:	40021800 	.word	0x40021800
 8003970:	40021c00 	.word	0x40021c00
 8003974:	40022000 	.word	0x40022000
 8003978:	40022400 	.word	0x40022400
 800397c:	40013c00 	.word	0x40013c00

08003980 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003980:	b480      	push	{r7}
 8003982:	b083      	sub	sp, #12
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
 8003988:	460b      	mov	r3, r1
 800398a:	807b      	strh	r3, [r7, #2]
 800398c:	4613      	mov	r3, r2
 800398e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003990:	787b      	ldrb	r3, [r7, #1]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d003      	beq.n	800399e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003996:	887a      	ldrh	r2, [r7, #2]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800399c:	e003      	b.n	80039a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800399e:	887b      	ldrh	r3, [r7, #2]
 80039a0:	041a      	lsls	r2, r3, #16
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	619a      	str	r2, [r3, #24]
}
 80039a6:	bf00      	nop
 80039a8:	370c      	adds	r7, #12
 80039aa:	46bd      	mov	sp, r7
 80039ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b0:	4770      	bx	lr

080039b2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80039b2:	b480      	push	{r7}
 80039b4:	b085      	sub	sp, #20
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	6078      	str	r0, [r7, #4]
 80039ba:	460b      	mov	r3, r1
 80039bc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	695b      	ldr	r3, [r3, #20]
 80039c2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80039c4:	887a      	ldrh	r2, [r7, #2]
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	4013      	ands	r3, r2
 80039ca:	041a      	lsls	r2, r3, #16
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	43d9      	mvns	r1, r3
 80039d0:	887b      	ldrh	r3, [r7, #2]
 80039d2:	400b      	ands	r3, r1
 80039d4:	431a      	orrs	r2, r3
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	619a      	str	r2, [r3, #24]
}
 80039da:	bf00      	nop
 80039dc:	3714      	adds	r7, #20
 80039de:	46bd      	mov	sp, r7
 80039e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e4:	4770      	bx	lr
	...

080039e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b082      	sub	sp, #8
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d101      	bne.n	80039fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	e07f      	b.n	8003afa <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a00:	b2db      	uxtb	r3, r3
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d106      	bne.n	8003a14 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	f7fe ff96 	bl	8002940 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2224      	movs	r2, #36	; 0x24
 8003a18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f022 0201 	bic.w	r2, r2, #1
 8003a2a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	685a      	ldr	r2, [r3, #4]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003a38:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	689a      	ldr	r2, [r3, #8]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003a48:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	68db      	ldr	r3, [r3, #12]
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d107      	bne.n	8003a62 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	689a      	ldr	r2, [r3, #8]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a5e:	609a      	str	r2, [r3, #8]
 8003a60:	e006      	b.n	8003a70 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	689a      	ldr	r2, [r3, #8]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003a6e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	68db      	ldr	r3, [r3, #12]
 8003a74:	2b02      	cmp	r3, #2
 8003a76:	d104      	bne.n	8003a82 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003a80:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	6859      	ldr	r1, [r3, #4]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	4b1d      	ldr	r3, [pc, #116]	; (8003b04 <HAL_I2C_Init+0x11c>)
 8003a8e:	430b      	orrs	r3, r1
 8003a90:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	68da      	ldr	r2, [r3, #12]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003aa0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	691a      	ldr	r2, [r3, #16]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	695b      	ldr	r3, [r3, #20]
 8003aaa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	699b      	ldr	r3, [r3, #24]
 8003ab2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	430a      	orrs	r2, r1
 8003aba:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	69d9      	ldr	r1, [r3, #28]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6a1a      	ldr	r2, [r3, #32]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	430a      	orrs	r2, r1
 8003aca:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f042 0201 	orr.w	r2, r2, #1
 8003ada:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2220      	movs	r2, #32
 8003ae6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2200      	movs	r2, #0
 8003aee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2200      	movs	r2, #0
 8003af4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003af8:	2300      	movs	r3, #0
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	3708      	adds	r7, #8
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}
 8003b02:	bf00      	nop
 8003b04:	02008000 	.word	0x02008000

08003b08 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b088      	sub	sp, #32
 8003b0c:	af02      	add	r7, sp, #8
 8003b0e:	60f8      	str	r0, [r7, #12]
 8003b10:	607a      	str	r2, [r7, #4]
 8003b12:	461a      	mov	r2, r3
 8003b14:	460b      	mov	r3, r1
 8003b16:	817b      	strh	r3, [r7, #10]
 8003b18:	4613      	mov	r3, r2
 8003b1a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b22:	b2db      	uxtb	r3, r3
 8003b24:	2b20      	cmp	r3, #32
 8003b26:	f040 80da 	bne.w	8003cde <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d101      	bne.n	8003b38 <HAL_I2C_Master_Transmit+0x30>
 8003b34:	2302      	movs	r3, #2
 8003b36:	e0d3      	b.n	8003ce0 <HAL_I2C_Master_Transmit+0x1d8>
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003b40:	f7ff fb84 	bl	800324c <HAL_GetTick>
 8003b44:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	9300      	str	r3, [sp, #0]
 8003b4a:	2319      	movs	r3, #25
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003b52:	68f8      	ldr	r0, [r7, #12]
 8003b54:	f001 f9bf 	bl	8004ed6 <I2C_WaitOnFlagUntilTimeout>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d001      	beq.n	8003b62 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e0be      	b.n	8003ce0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2221      	movs	r2, #33	; 0x21
 8003b66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2210      	movs	r2, #16
 8003b6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2200      	movs	r2, #0
 8003b76:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	687a      	ldr	r2, [r7, #4]
 8003b7c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	893a      	ldrh	r2, [r7, #8]
 8003b82:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2200      	movs	r2, #0
 8003b88:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b8e:	b29b      	uxth	r3, r3
 8003b90:	2bff      	cmp	r3, #255	; 0xff
 8003b92:	d90e      	bls.n	8003bb2 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	22ff      	movs	r2, #255	; 0xff
 8003b98:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b9e:	b2da      	uxtb	r2, r3
 8003ba0:	8979      	ldrh	r1, [r7, #10]
 8003ba2:	4b51      	ldr	r3, [pc, #324]	; (8003ce8 <HAL_I2C_Master_Transmit+0x1e0>)
 8003ba4:	9300      	str	r3, [sp, #0]
 8003ba6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003baa:	68f8      	ldr	r0, [r7, #12]
 8003bac:	f001 fb30 	bl	8005210 <I2C_TransferConfig>
 8003bb0:	e06c      	b.n	8003c8c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bb6:	b29a      	uxth	r2, r3
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bc0:	b2da      	uxtb	r2, r3
 8003bc2:	8979      	ldrh	r1, [r7, #10]
 8003bc4:	4b48      	ldr	r3, [pc, #288]	; (8003ce8 <HAL_I2C_Master_Transmit+0x1e0>)
 8003bc6:	9300      	str	r3, [sp, #0]
 8003bc8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003bcc:	68f8      	ldr	r0, [r7, #12]
 8003bce:	f001 fb1f 	bl	8005210 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003bd2:	e05b      	b.n	8003c8c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bd4:	697a      	ldr	r2, [r7, #20]
 8003bd6:	6a39      	ldr	r1, [r7, #32]
 8003bd8:	68f8      	ldr	r0, [r7, #12]
 8003bda:	f001 f9bc 	bl	8004f56 <I2C_WaitOnTXISFlagUntilTimeout>
 8003bde:	4603      	mov	r3, r0
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d001      	beq.n	8003be8 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8003be4:	2301      	movs	r3, #1
 8003be6:	e07b      	b.n	8003ce0 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bec:	781a      	ldrb	r2, [r3, #0]
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf8:	1c5a      	adds	r2, r3, #1
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c02:	b29b      	uxth	r3, r3
 8003c04:	3b01      	subs	r3, #1
 8003c06:	b29a      	uxth	r2, r3
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c10:	3b01      	subs	r3, #1
 8003c12:	b29a      	uxth	r2, r3
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c1c:	b29b      	uxth	r3, r3
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d034      	beq.n	8003c8c <HAL_I2C_Master_Transmit+0x184>
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d130      	bne.n	8003c8c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	9300      	str	r3, [sp, #0]
 8003c2e:	6a3b      	ldr	r3, [r7, #32]
 8003c30:	2200      	movs	r2, #0
 8003c32:	2180      	movs	r1, #128	; 0x80
 8003c34:	68f8      	ldr	r0, [r7, #12]
 8003c36:	f001 f94e 	bl	8004ed6 <I2C_WaitOnFlagUntilTimeout>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d001      	beq.n	8003c44 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8003c40:	2301      	movs	r3, #1
 8003c42:	e04d      	b.n	8003ce0 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c48:	b29b      	uxth	r3, r3
 8003c4a:	2bff      	cmp	r3, #255	; 0xff
 8003c4c:	d90e      	bls.n	8003c6c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	22ff      	movs	r2, #255	; 0xff
 8003c52:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c58:	b2da      	uxtb	r2, r3
 8003c5a:	8979      	ldrh	r1, [r7, #10]
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	9300      	str	r3, [sp, #0]
 8003c60:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003c64:	68f8      	ldr	r0, [r7, #12]
 8003c66:	f001 fad3 	bl	8005210 <I2C_TransferConfig>
 8003c6a:	e00f      	b.n	8003c8c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c70:	b29a      	uxth	r2, r3
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c7a:	b2da      	uxtb	r2, r3
 8003c7c:	8979      	ldrh	r1, [r7, #10]
 8003c7e:	2300      	movs	r3, #0
 8003c80:	9300      	str	r3, [sp, #0]
 8003c82:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c86:	68f8      	ldr	r0, [r7, #12]
 8003c88:	f001 fac2 	bl	8005210 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c90:	b29b      	uxth	r3, r3
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d19e      	bne.n	8003bd4 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c96:	697a      	ldr	r2, [r7, #20]
 8003c98:	6a39      	ldr	r1, [r7, #32]
 8003c9a:	68f8      	ldr	r0, [r7, #12]
 8003c9c:	f001 f99b 	bl	8004fd6 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d001      	beq.n	8003caa <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e01a      	b.n	8003ce0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	2220      	movs	r2, #32
 8003cb0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	6859      	ldr	r1, [r3, #4]
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681a      	ldr	r2, [r3, #0]
 8003cbc:	4b0b      	ldr	r3, [pc, #44]	; (8003cec <HAL_I2C_Master_Transmit+0x1e4>)
 8003cbe:	400b      	ands	r3, r1
 8003cc0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2220      	movs	r2, #32
 8003cc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	e000      	b.n	8003ce0 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8003cde:	2302      	movs	r3, #2
  }
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	3718      	adds	r7, #24
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}
 8003ce8:	80002000 	.word	0x80002000
 8003cec:	fe00e800 	.word	0xfe00e800

08003cf0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b088      	sub	sp, #32
 8003cf4:	af02      	add	r7, sp, #8
 8003cf6:	60f8      	str	r0, [r7, #12]
 8003cf8:	4608      	mov	r0, r1
 8003cfa:	4611      	mov	r1, r2
 8003cfc:	461a      	mov	r2, r3
 8003cfe:	4603      	mov	r3, r0
 8003d00:	817b      	strh	r3, [r7, #10]
 8003d02:	460b      	mov	r3, r1
 8003d04:	813b      	strh	r3, [r7, #8]
 8003d06:	4613      	mov	r3, r2
 8003d08:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	2b20      	cmp	r3, #32
 8003d14:	f040 80f9 	bne.w	8003f0a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d18:	6a3b      	ldr	r3, [r7, #32]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d002      	beq.n	8003d24 <HAL_I2C_Mem_Write+0x34>
 8003d1e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d105      	bne.n	8003d30 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d2a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	e0ed      	b.n	8003f0c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d36:	2b01      	cmp	r3, #1
 8003d38:	d101      	bne.n	8003d3e <HAL_I2C_Mem_Write+0x4e>
 8003d3a:	2302      	movs	r3, #2
 8003d3c:	e0e6      	b.n	8003f0c <HAL_I2C_Mem_Write+0x21c>
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2201      	movs	r2, #1
 8003d42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003d46:	f7ff fa81 	bl	800324c <HAL_GetTick>
 8003d4a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	9300      	str	r3, [sp, #0]
 8003d50:	2319      	movs	r3, #25
 8003d52:	2201      	movs	r2, #1
 8003d54:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003d58:	68f8      	ldr	r0, [r7, #12]
 8003d5a:	f001 f8bc 	bl	8004ed6 <I2C_WaitOnFlagUntilTimeout>
 8003d5e:	4603      	mov	r3, r0
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d001      	beq.n	8003d68 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003d64:	2301      	movs	r3, #1
 8003d66:	e0d1      	b.n	8003f0c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	2221      	movs	r2, #33	; 0x21
 8003d6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2240      	movs	r2, #64	; 0x40
 8003d74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	6a3a      	ldr	r2, [r7, #32]
 8003d82:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003d88:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003d90:	88f8      	ldrh	r0, [r7, #6]
 8003d92:	893a      	ldrh	r2, [r7, #8]
 8003d94:	8979      	ldrh	r1, [r7, #10]
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	9301      	str	r3, [sp, #4]
 8003d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d9c:	9300      	str	r3, [sp, #0]
 8003d9e:	4603      	mov	r3, r0
 8003da0:	68f8      	ldr	r0, [r7, #12]
 8003da2:	f000 fc75 	bl	8004690 <I2C_RequestMemoryWrite>
 8003da6:	4603      	mov	r3, r0
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d005      	beq.n	8003db8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2200      	movs	r2, #0
 8003db0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	e0a9      	b.n	8003f0c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dbc:	b29b      	uxth	r3, r3
 8003dbe:	2bff      	cmp	r3, #255	; 0xff
 8003dc0:	d90e      	bls.n	8003de0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	22ff      	movs	r2, #255	; 0xff
 8003dc6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dcc:	b2da      	uxtb	r2, r3
 8003dce:	8979      	ldrh	r1, [r7, #10]
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	9300      	str	r3, [sp, #0]
 8003dd4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003dd8:	68f8      	ldr	r0, [r7, #12]
 8003dda:	f001 fa19 	bl	8005210 <I2C_TransferConfig>
 8003dde:	e00f      	b.n	8003e00 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003de4:	b29a      	uxth	r2, r3
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dee:	b2da      	uxtb	r2, r3
 8003df0:	8979      	ldrh	r1, [r7, #10]
 8003df2:	2300      	movs	r3, #0
 8003df4:	9300      	str	r3, [sp, #0]
 8003df6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003dfa:	68f8      	ldr	r0, [r7, #12]
 8003dfc:	f001 fa08 	bl	8005210 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e00:	697a      	ldr	r2, [r7, #20]
 8003e02:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003e04:	68f8      	ldr	r0, [r7, #12]
 8003e06:	f001 f8a6 	bl	8004f56 <I2C_WaitOnTXISFlagUntilTimeout>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d001      	beq.n	8003e14 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	e07b      	b.n	8003f0c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e18:	781a      	ldrb	r2, [r3, #0]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e24:	1c5a      	adds	r2, r3, #1
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e2e:	b29b      	uxth	r3, r3
 8003e30:	3b01      	subs	r3, #1
 8003e32:	b29a      	uxth	r2, r3
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e3c:	3b01      	subs	r3, #1
 8003e3e:	b29a      	uxth	r2, r3
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e48:	b29b      	uxth	r3, r3
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d034      	beq.n	8003eb8 <HAL_I2C_Mem_Write+0x1c8>
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d130      	bne.n	8003eb8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	9300      	str	r3, [sp, #0]
 8003e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	2180      	movs	r1, #128	; 0x80
 8003e60:	68f8      	ldr	r0, [r7, #12]
 8003e62:	f001 f838 	bl	8004ed6 <I2C_WaitOnFlagUntilTimeout>
 8003e66:	4603      	mov	r3, r0
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d001      	beq.n	8003e70 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	e04d      	b.n	8003f0c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e74:	b29b      	uxth	r3, r3
 8003e76:	2bff      	cmp	r3, #255	; 0xff
 8003e78:	d90e      	bls.n	8003e98 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	22ff      	movs	r2, #255	; 0xff
 8003e7e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e84:	b2da      	uxtb	r2, r3
 8003e86:	8979      	ldrh	r1, [r7, #10]
 8003e88:	2300      	movs	r3, #0
 8003e8a:	9300      	str	r3, [sp, #0]
 8003e8c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003e90:	68f8      	ldr	r0, [r7, #12]
 8003e92:	f001 f9bd 	bl	8005210 <I2C_TransferConfig>
 8003e96:	e00f      	b.n	8003eb8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e9c:	b29a      	uxth	r2, r3
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ea6:	b2da      	uxtb	r2, r3
 8003ea8:	8979      	ldrh	r1, [r7, #10]
 8003eaa:	2300      	movs	r3, #0
 8003eac:	9300      	str	r3, [sp, #0]
 8003eae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003eb2:	68f8      	ldr	r0, [r7, #12]
 8003eb4:	f001 f9ac 	bl	8005210 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ebc:	b29b      	uxth	r3, r3
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d19e      	bne.n	8003e00 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ec2:	697a      	ldr	r2, [r7, #20]
 8003ec4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ec6:	68f8      	ldr	r0, [r7, #12]
 8003ec8:	f001 f885 	bl	8004fd6 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d001      	beq.n	8003ed6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e01a      	b.n	8003f0c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	2220      	movs	r2, #32
 8003edc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	6859      	ldr	r1, [r3, #4]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681a      	ldr	r2, [r3, #0]
 8003ee8:	4b0a      	ldr	r3, [pc, #40]	; (8003f14 <HAL_I2C_Mem_Write+0x224>)
 8003eea:	400b      	ands	r3, r1
 8003eec:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2220      	movs	r2, #32
 8003ef2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2200      	movs	r2, #0
 8003f02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003f06:	2300      	movs	r3, #0
 8003f08:	e000      	b.n	8003f0c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003f0a:	2302      	movs	r3, #2
  }
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	3718      	adds	r7, #24
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}
 8003f14:	fe00e800 	.word	0xfe00e800

08003f18 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b088      	sub	sp, #32
 8003f1c:	af02      	add	r7, sp, #8
 8003f1e:	60f8      	str	r0, [r7, #12]
 8003f20:	4608      	mov	r0, r1
 8003f22:	4611      	mov	r1, r2
 8003f24:	461a      	mov	r2, r3
 8003f26:	4603      	mov	r3, r0
 8003f28:	817b      	strh	r3, [r7, #10]
 8003f2a:	460b      	mov	r3, r1
 8003f2c:	813b      	strh	r3, [r7, #8]
 8003f2e:	4613      	mov	r3, r2
 8003f30:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f38:	b2db      	uxtb	r3, r3
 8003f3a:	2b20      	cmp	r3, #32
 8003f3c:	f040 80fd 	bne.w	800413a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f40:	6a3b      	ldr	r3, [r7, #32]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d002      	beq.n	8003f4c <HAL_I2C_Mem_Read+0x34>
 8003f46:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d105      	bne.n	8003f58 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f52:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003f54:	2301      	movs	r3, #1
 8003f56:	e0f1      	b.n	800413c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f5e:	2b01      	cmp	r3, #1
 8003f60:	d101      	bne.n	8003f66 <HAL_I2C_Mem_Read+0x4e>
 8003f62:	2302      	movs	r3, #2
 8003f64:	e0ea      	b.n	800413c <HAL_I2C_Mem_Read+0x224>
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	2201      	movs	r2, #1
 8003f6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003f6e:	f7ff f96d 	bl	800324c <HAL_GetTick>
 8003f72:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	9300      	str	r3, [sp, #0]
 8003f78:	2319      	movs	r3, #25
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003f80:	68f8      	ldr	r0, [r7, #12]
 8003f82:	f000 ffa8 	bl	8004ed6 <I2C_WaitOnFlagUntilTimeout>
 8003f86:	4603      	mov	r3, r0
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d001      	beq.n	8003f90 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	e0d5      	b.n	800413c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2222      	movs	r2, #34	; 0x22
 8003f94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2240      	movs	r2, #64	; 0x40
 8003f9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	6a3a      	ldr	r2, [r7, #32]
 8003faa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003fb0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003fb8:	88f8      	ldrh	r0, [r7, #6]
 8003fba:	893a      	ldrh	r2, [r7, #8]
 8003fbc:	8979      	ldrh	r1, [r7, #10]
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	9301      	str	r3, [sp, #4]
 8003fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fc4:	9300      	str	r3, [sp, #0]
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	68f8      	ldr	r0, [r7, #12]
 8003fca:	f000 fbb5 	bl	8004738 <I2C_RequestMemoryRead>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d005      	beq.n	8003fe0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	e0ad      	b.n	800413c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fe4:	b29b      	uxth	r3, r3
 8003fe6:	2bff      	cmp	r3, #255	; 0xff
 8003fe8:	d90e      	bls.n	8004008 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	22ff      	movs	r2, #255	; 0xff
 8003fee:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ff4:	b2da      	uxtb	r2, r3
 8003ff6:	8979      	ldrh	r1, [r7, #10]
 8003ff8:	4b52      	ldr	r3, [pc, #328]	; (8004144 <HAL_I2C_Mem_Read+0x22c>)
 8003ffa:	9300      	str	r3, [sp, #0]
 8003ffc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004000:	68f8      	ldr	r0, [r7, #12]
 8004002:	f001 f905 	bl	8005210 <I2C_TransferConfig>
 8004006:	e00f      	b.n	8004028 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800400c:	b29a      	uxth	r2, r3
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004016:	b2da      	uxtb	r2, r3
 8004018:	8979      	ldrh	r1, [r7, #10]
 800401a:	4b4a      	ldr	r3, [pc, #296]	; (8004144 <HAL_I2C_Mem_Read+0x22c>)
 800401c:	9300      	str	r3, [sp, #0]
 800401e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004022:	68f8      	ldr	r0, [r7, #12]
 8004024:	f001 f8f4 	bl	8005210 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	9300      	str	r3, [sp, #0]
 800402c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800402e:	2200      	movs	r2, #0
 8004030:	2104      	movs	r1, #4
 8004032:	68f8      	ldr	r0, [r7, #12]
 8004034:	f000 ff4f 	bl	8004ed6 <I2C_WaitOnFlagUntilTimeout>
 8004038:	4603      	mov	r3, r0
 800403a:	2b00      	cmp	r3, #0
 800403c:	d001      	beq.n	8004042 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	e07c      	b.n	800413c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800404c:	b2d2      	uxtb	r2, r2
 800404e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004054:	1c5a      	adds	r2, r3, #1
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800405e:	3b01      	subs	r3, #1
 8004060:	b29a      	uxth	r2, r3
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800406a:	b29b      	uxth	r3, r3
 800406c:	3b01      	subs	r3, #1
 800406e:	b29a      	uxth	r2, r3
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004078:	b29b      	uxth	r3, r3
 800407a:	2b00      	cmp	r3, #0
 800407c:	d034      	beq.n	80040e8 <HAL_I2C_Mem_Read+0x1d0>
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004082:	2b00      	cmp	r3, #0
 8004084:	d130      	bne.n	80040e8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	9300      	str	r3, [sp, #0]
 800408a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800408c:	2200      	movs	r2, #0
 800408e:	2180      	movs	r1, #128	; 0x80
 8004090:	68f8      	ldr	r0, [r7, #12]
 8004092:	f000 ff20 	bl	8004ed6 <I2C_WaitOnFlagUntilTimeout>
 8004096:	4603      	mov	r3, r0
 8004098:	2b00      	cmp	r3, #0
 800409a:	d001      	beq.n	80040a0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800409c:	2301      	movs	r3, #1
 800409e:	e04d      	b.n	800413c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040a4:	b29b      	uxth	r3, r3
 80040a6:	2bff      	cmp	r3, #255	; 0xff
 80040a8:	d90e      	bls.n	80040c8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	22ff      	movs	r2, #255	; 0xff
 80040ae:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040b4:	b2da      	uxtb	r2, r3
 80040b6:	8979      	ldrh	r1, [r7, #10]
 80040b8:	2300      	movs	r3, #0
 80040ba:	9300      	str	r3, [sp, #0]
 80040bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80040c0:	68f8      	ldr	r0, [r7, #12]
 80040c2:	f001 f8a5 	bl	8005210 <I2C_TransferConfig>
 80040c6:	e00f      	b.n	80040e8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040cc:	b29a      	uxth	r2, r3
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040d6:	b2da      	uxtb	r2, r3
 80040d8:	8979      	ldrh	r1, [r7, #10]
 80040da:	2300      	movs	r3, #0
 80040dc:	9300      	str	r3, [sp, #0]
 80040de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80040e2:	68f8      	ldr	r0, [r7, #12]
 80040e4:	f001 f894 	bl	8005210 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040ec:	b29b      	uxth	r3, r3
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d19a      	bne.n	8004028 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040f2:	697a      	ldr	r2, [r7, #20]
 80040f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80040f6:	68f8      	ldr	r0, [r7, #12]
 80040f8:	f000 ff6d 	bl	8004fd6 <I2C_WaitOnSTOPFlagUntilTimeout>
 80040fc:	4603      	mov	r3, r0
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d001      	beq.n	8004106 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	e01a      	b.n	800413c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	2220      	movs	r2, #32
 800410c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	6859      	ldr	r1, [r3, #4]
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681a      	ldr	r2, [r3, #0]
 8004118:	4b0b      	ldr	r3, [pc, #44]	; (8004148 <HAL_I2C_Mem_Read+0x230>)
 800411a:	400b      	ands	r3, r1
 800411c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2220      	movs	r2, #32
 8004122:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2200      	movs	r2, #0
 800412a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2200      	movs	r2, #0
 8004132:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004136:	2300      	movs	r3, #0
 8004138:	e000      	b.n	800413c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800413a:	2302      	movs	r3, #2
  }
}
 800413c:	4618      	mov	r0, r3
 800413e:	3718      	adds	r7, #24
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}
 8004144:	80002400 	.word	0x80002400
 8004148:	fe00e800 	.word	0xfe00e800

0800414c <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b08a      	sub	sp, #40	; 0x28
 8004150:	af02      	add	r7, sp, #8
 8004152:	60f8      	str	r0, [r7, #12]
 8004154:	607a      	str	r2, [r7, #4]
 8004156:	603b      	str	r3, [r7, #0]
 8004158:	460b      	mov	r3, r1
 800415a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 800415c:	2300      	movs	r3, #0
 800415e:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004166:	b2db      	uxtb	r3, r3
 8004168:	2b20      	cmp	r3, #32
 800416a:	f040 80ef 	bne.w	800434c <HAL_I2C_IsDeviceReady+0x200>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	699b      	ldr	r3, [r3, #24]
 8004174:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004178:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800417c:	d101      	bne.n	8004182 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 800417e:	2302      	movs	r3, #2
 8004180:	e0e5      	b.n	800434e <HAL_I2C_IsDeviceReady+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004188:	2b01      	cmp	r3, #1
 800418a:	d101      	bne.n	8004190 <HAL_I2C_IsDeviceReady+0x44>
 800418c:	2302      	movs	r3, #2
 800418e:	e0de      	b.n	800434e <HAL_I2C_IsDeviceReady+0x202>
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2201      	movs	r2, #1
 8004194:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2224      	movs	r2, #36	; 0x24
 800419c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2200      	movs	r2, #0
 80041a4:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	68db      	ldr	r3, [r3, #12]
 80041aa:	2b01      	cmp	r3, #1
 80041ac:	d105      	bne.n	80041ba <HAL_I2C_IsDeviceReady+0x6e>
 80041ae:	897b      	ldrh	r3, [r7, #10]
 80041b0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80041b4:	4b68      	ldr	r3, [pc, #416]	; (8004358 <HAL_I2C_IsDeviceReady+0x20c>)
 80041b6:	4313      	orrs	r3, r2
 80041b8:	e004      	b.n	80041c4 <HAL_I2C_IsDeviceReady+0x78>
 80041ba:	897b      	ldrh	r3, [r7, #10]
 80041bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80041c0:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 80041c4:	68fa      	ldr	r2, [r7, #12]
 80041c6:	6812      	ldr	r2, [r2, #0]
 80041c8:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80041ca:	f7ff f83f 	bl	800324c <HAL_GetTick>
 80041ce:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	699b      	ldr	r3, [r3, #24]
 80041d6:	f003 0320 	and.w	r3, r3, #32
 80041da:	2b20      	cmp	r3, #32
 80041dc:	bf0c      	ite	eq
 80041de:	2301      	moveq	r3, #1
 80041e0:	2300      	movne	r3, #0
 80041e2:	b2db      	uxtb	r3, r3
 80041e4:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	699b      	ldr	r3, [r3, #24]
 80041ec:	f003 0310 	and.w	r3, r3, #16
 80041f0:	2b10      	cmp	r3, #16
 80041f2:	bf0c      	ite	eq
 80041f4:	2301      	moveq	r3, #1
 80041f6:	2300      	movne	r3, #0
 80041f8:	b2db      	uxtb	r3, r3
 80041fa:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80041fc:	e034      	b.n	8004268 <HAL_I2C_IsDeviceReady+0x11c>
      {
        if (Timeout != HAL_MAX_DELAY)
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004204:	d01a      	beq.n	800423c <HAL_I2C_IsDeviceReady+0xf0>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004206:	f7ff f821 	bl	800324c <HAL_GetTick>
 800420a:	4602      	mov	r2, r0
 800420c:	69bb      	ldr	r3, [r7, #24]
 800420e:	1ad3      	subs	r3, r2, r3
 8004210:	683a      	ldr	r2, [r7, #0]
 8004212:	429a      	cmp	r2, r3
 8004214:	d302      	bcc.n	800421c <HAL_I2C_IsDeviceReady+0xd0>
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d10f      	bne.n	800423c <HAL_I2C_IsDeviceReady+0xf0>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2220      	movs	r2, #32
 8004220:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004228:	f043 0220 	orr.w	r2, r3, #32
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2200      	movs	r2, #0
 8004234:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8004238:	2301      	movs	r3, #1
 800423a:	e088      	b.n	800434e <HAL_I2C_IsDeviceReady+0x202>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	699b      	ldr	r3, [r3, #24]
 8004242:	f003 0320 	and.w	r3, r3, #32
 8004246:	2b20      	cmp	r3, #32
 8004248:	bf0c      	ite	eq
 800424a:	2301      	moveq	r3, #1
 800424c:	2300      	movne	r3, #0
 800424e:	b2db      	uxtb	r3, r3
 8004250:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	699b      	ldr	r3, [r3, #24]
 8004258:	f003 0310 	and.w	r3, r3, #16
 800425c:	2b10      	cmp	r3, #16
 800425e:	bf0c      	ite	eq
 8004260:	2301      	moveq	r3, #1
 8004262:	2300      	movne	r3, #0
 8004264:	b2db      	uxtb	r3, r3
 8004266:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8004268:	7ffb      	ldrb	r3, [r7, #31]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d102      	bne.n	8004274 <HAL_I2C_IsDeviceReady+0x128>
 800426e:	7fbb      	ldrb	r3, [r7, #30]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d0c4      	beq.n	80041fe <HAL_I2C_IsDeviceReady+0xb2>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	699b      	ldr	r3, [r3, #24]
 800427a:	f003 0310 	and.w	r3, r3, #16
 800427e:	2b10      	cmp	r3, #16
 8004280:	d01a      	beq.n	80042b8 <HAL_I2C_IsDeviceReady+0x16c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004282:	69bb      	ldr	r3, [r7, #24]
 8004284:	9300      	str	r3, [sp, #0]
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	2200      	movs	r2, #0
 800428a:	2120      	movs	r1, #32
 800428c:	68f8      	ldr	r0, [r7, #12]
 800428e:	f000 fe22 	bl	8004ed6 <I2C_WaitOnFlagUntilTimeout>
 8004292:	4603      	mov	r3, r0
 8004294:	2b00      	cmp	r3, #0
 8004296:	d001      	beq.n	800429c <HAL_I2C_IsDeviceReady+0x150>
        {
          return HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	e058      	b.n	800434e <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	2220      	movs	r2, #32
 80042a2:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2220      	movs	r2, #32
 80042a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2200      	movs	r2, #0
 80042b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 80042b4:	2300      	movs	r3, #0
 80042b6:	e04a      	b.n	800434e <HAL_I2C_IsDeviceReady+0x202>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80042b8:	69bb      	ldr	r3, [r7, #24]
 80042ba:	9300      	str	r3, [sp, #0]
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	2200      	movs	r2, #0
 80042c0:	2120      	movs	r1, #32
 80042c2:	68f8      	ldr	r0, [r7, #12]
 80042c4:	f000 fe07 	bl	8004ed6 <I2C_WaitOnFlagUntilTimeout>
 80042c8:	4603      	mov	r3, r0
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d001      	beq.n	80042d2 <HAL_I2C_IsDeviceReady+0x186>
        {
          return HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	e03d      	b.n	800434e <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	2210      	movs	r2, #16
 80042d8:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	2220      	movs	r2, #32
 80042e0:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	687a      	ldr	r2, [r7, #4]
 80042e6:	429a      	cmp	r2, r3
 80042e8:	d118      	bne.n	800431c <HAL_I2C_IsDeviceReady+0x1d0>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	685a      	ldr	r2, [r3, #4]
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80042f8:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80042fa:	69bb      	ldr	r3, [r7, #24]
 80042fc:	9300      	str	r3, [sp, #0]
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	2200      	movs	r2, #0
 8004302:	2120      	movs	r1, #32
 8004304:	68f8      	ldr	r0, [r7, #12]
 8004306:	f000 fde6 	bl	8004ed6 <I2C_WaitOnFlagUntilTimeout>
 800430a:	4603      	mov	r3, r0
 800430c:	2b00      	cmp	r3, #0
 800430e:	d001      	beq.n	8004314 <HAL_I2C_IsDeviceReady+0x1c8>
        {
          return HAL_ERROR;
 8004310:	2301      	movs	r3, #1
 8004312:	e01c      	b.n	800434e <HAL_I2C_IsDeviceReady+0x202>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	2220      	movs	r2, #32
 800431a:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	3301      	adds	r3, #1
 8004320:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	687a      	ldr	r2, [r7, #4]
 8004326:	429a      	cmp	r2, r3
 8004328:	f63f af3d 	bhi.w	80041a6 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2220      	movs	r2, #32
 8004330:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004338:	f043 0220 	orr.w	r2, r3, #32
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2200      	movs	r2, #0
 8004344:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8004348:	2301      	movs	r3, #1
 800434a:	e000      	b.n	800434e <HAL_I2C_IsDeviceReady+0x202>
  }
  else
  {
    return HAL_BUSY;
 800434c:	2302      	movs	r3, #2
  }
}
 800434e:	4618      	mov	r0, r3
 8004350:	3720      	adds	r7, #32
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}
 8004356:	bf00      	nop
 8004358:	02002000 	.word	0x02002000

0800435c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b086      	sub	sp, #24
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	699b      	ldr	r3, [r3, #24]
 800436a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	0a1b      	lsrs	r3, r3, #8
 8004378:	f003 0301 	and.w	r3, r3, #1
 800437c:	2b00      	cmp	r3, #0
 800437e:	d010      	beq.n	80043a2 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	09db      	lsrs	r3, r3, #7
 8004384:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8004388:	2b00      	cmp	r3, #0
 800438a:	d00a      	beq.n	80043a2 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004390:	f043 0201 	orr.w	r2, r3, #1
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80043a0:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	0a9b      	lsrs	r3, r3, #10
 80043a6:	f003 0301 	and.w	r3, r3, #1
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d010      	beq.n	80043d0 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	09db      	lsrs	r3, r3, #7
 80043b2:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d00a      	beq.n	80043d0 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043be:	f043 0208 	orr.w	r2, r3, #8
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80043ce:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	0a5b      	lsrs	r3, r3, #9
 80043d4:	f003 0301 	and.w	r3, r3, #1
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d010      	beq.n	80043fe <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	09db      	lsrs	r3, r3, #7
 80043e0:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d00a      	beq.n	80043fe <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043ec:	f043 0202 	orr.w	r2, r3, #2
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80043fc:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004402:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	f003 030b 	and.w	r3, r3, #11
 800440a:	2b00      	cmp	r3, #0
 800440c:	d003      	beq.n	8004416 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 800440e:	68f9      	ldr	r1, [r7, #12]
 8004410:	6878      	ldr	r0, [r7, #4]
 8004412:	f000 fc27 	bl	8004c64 <I2C_ITError>
  }
}
 8004416:	bf00      	nop
 8004418:	3718      	adds	r7, #24
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}

0800441e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800441e:	b480      	push	{r7}
 8004420:	b083      	sub	sp, #12
 8004422:	af00      	add	r7, sp, #0
 8004424:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004426:	bf00      	nop
 8004428:	370c      	adds	r7, #12
 800442a:	46bd      	mov	sp, r7
 800442c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004430:	4770      	bx	lr

08004432 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004432:	b480      	push	{r7}
 8004434:	b083      	sub	sp, #12
 8004436:	af00      	add	r7, sp, #0
 8004438:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800443a:	bf00      	nop
 800443c:	370c      	adds	r7, #12
 800443e:	46bd      	mov	sp, r7
 8004440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004444:	4770      	bx	lr

08004446 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004446:	b480      	push	{r7}
 8004448:	b083      	sub	sp, #12
 800444a:	af00      	add	r7, sp, #0
 800444c:	6078      	str	r0, [r7, #4]
 800444e:	460b      	mov	r3, r1
 8004450:	70fb      	strb	r3, [r7, #3]
 8004452:	4613      	mov	r3, r2
 8004454:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004456:	bf00      	nop
 8004458:	370c      	adds	r7, #12
 800445a:	46bd      	mov	sp, r7
 800445c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004460:	4770      	bx	lr

08004462 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004462:	b480      	push	{r7}
 8004464:	b083      	sub	sp, #12
 8004466:	af00      	add	r7, sp, #0
 8004468:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800446a:	bf00      	nop
 800446c:	370c      	adds	r7, #12
 800446e:	46bd      	mov	sp, r7
 8004470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004474:	4770      	bx	lr

08004476 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004476:	b480      	push	{r7}
 8004478:	b083      	sub	sp, #12
 800447a:	af00      	add	r7, sp, #0
 800447c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800447e:	bf00      	nop
 8004480:	370c      	adds	r7, #12
 8004482:	46bd      	mov	sp, r7
 8004484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004488:	4770      	bx	lr

0800448a <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800448a:	b580      	push	{r7, lr}
 800448c:	b086      	sub	sp, #24
 800448e:	af00      	add	r7, sp, #0
 8004490:	60f8      	str	r0, [r7, #12]
 8004492:	60b9      	str	r1, [r7, #8]
 8004494:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800449a:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80044a6:	2b01      	cmp	r3, #1
 80044a8:	d101      	bne.n	80044ae <I2C_Slave_ISR_IT+0x24>
 80044aa:	2302      	movs	r3, #2
 80044ac:	e0ec      	b.n	8004688 <I2C_Slave_ISR_IT+0x1fe>
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	2201      	movs	r2, #1
 80044b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	095b      	lsrs	r3, r3, #5
 80044ba:	f003 0301 	and.w	r3, r3, #1
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d009      	beq.n	80044d6 <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	095b      	lsrs	r3, r3, #5
 80044c6:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d003      	beq.n	80044d6 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80044ce:	6939      	ldr	r1, [r7, #16]
 80044d0:	68f8      	ldr	r0, [r7, #12]
 80044d2:	f000 fa67 	bl	80049a4 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	091b      	lsrs	r3, r3, #4
 80044da:	f003 0301 	and.w	r3, r3, #1
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d04d      	beq.n	800457e <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	091b      	lsrs	r3, r3, #4
 80044e6:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d047      	beq.n	800457e <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044f2:	b29b      	uxth	r3, r3
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d128      	bne.n	800454a <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044fe:	b2db      	uxtb	r3, r3
 8004500:	2b28      	cmp	r3, #40	; 0x28
 8004502:	d108      	bne.n	8004516 <I2C_Slave_ISR_IT+0x8c>
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800450a:	d104      	bne.n	8004516 <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800450c:	6939      	ldr	r1, [r7, #16]
 800450e:	68f8      	ldr	r0, [r7, #12]
 8004510:	f000 fb52 	bl	8004bb8 <I2C_ITListenCplt>
 8004514:	e032      	b.n	800457c <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800451c:	b2db      	uxtb	r3, r3
 800451e:	2b29      	cmp	r3, #41	; 0x29
 8004520:	d10e      	bne.n	8004540 <I2C_Slave_ISR_IT+0xb6>
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004528:	d00a      	beq.n	8004540 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	2210      	movs	r2, #16
 8004530:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8004532:	68f8      	ldr	r0, [r7, #12]
 8004534:	f000 fc8d 	bl	8004e52 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004538:	68f8      	ldr	r0, [r7, #12]
 800453a:	f000 f9d5 	bl	80048e8 <I2C_ITSlaveSeqCplt>
 800453e:	e01d      	b.n	800457c <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	2210      	movs	r2, #16
 8004546:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8004548:	e096      	b.n	8004678 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	2210      	movs	r2, #16
 8004550:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004556:	f043 0204 	orr.w	r2, r3, #4
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d004      	beq.n	800456e <I2C_Slave_ISR_IT+0xe4>
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800456a:	f040 8085 	bne.w	8004678 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004572:	4619      	mov	r1, r3
 8004574:	68f8      	ldr	r0, [r7, #12]
 8004576:	f000 fb75 	bl	8004c64 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800457a:	e07d      	b.n	8004678 <I2C_Slave_ISR_IT+0x1ee>
 800457c:	e07c      	b.n	8004678 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	089b      	lsrs	r3, r3, #2
 8004582:	f003 0301 	and.w	r3, r3, #1
 8004586:	2b00      	cmp	r3, #0
 8004588:	d030      	beq.n	80045ec <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	089b      	lsrs	r3, r3, #2
 800458e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004592:	2b00      	cmp	r3, #0
 8004594:	d02a      	beq.n	80045ec <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800459a:	b29b      	uxth	r3, r3
 800459c:	2b00      	cmp	r3, #0
 800459e:	d018      	beq.n	80045d2 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045aa:	b2d2      	uxtb	r2, r2
 80045ac:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b2:	1c5a      	adds	r2, r3, #1
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045bc:	3b01      	subs	r3, #1
 80045be:	b29a      	uxth	r2, r3
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045c8:	b29b      	uxth	r3, r3
 80045ca:	3b01      	subs	r3, #1
 80045cc:	b29a      	uxth	r2, r3
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045d6:	b29b      	uxth	r3, r3
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d14f      	bne.n	800467c <I2C_Slave_ISR_IT+0x1f2>
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80045e2:	d04b      	beq.n	800467c <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80045e4:	68f8      	ldr	r0, [r7, #12]
 80045e6:	f000 f97f 	bl	80048e8 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80045ea:	e047      	b.n	800467c <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	08db      	lsrs	r3, r3, #3
 80045f0:	f003 0301 	and.w	r3, r3, #1
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d00a      	beq.n	800460e <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	08db      	lsrs	r3, r3, #3
 80045fc:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8004600:	2b00      	cmp	r3, #0
 8004602:	d004      	beq.n	800460e <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8004604:	6939      	ldr	r1, [r7, #16]
 8004606:	68f8      	ldr	r0, [r7, #12]
 8004608:	f000 f8ea 	bl	80047e0 <I2C_ITAddrCplt>
 800460c:	e037      	b.n	800467e <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	085b      	lsrs	r3, r3, #1
 8004612:	f003 0301 	and.w	r3, r3, #1
 8004616:	2b00      	cmp	r3, #0
 8004618:	d031      	beq.n	800467e <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	085b      	lsrs	r3, r3, #1
 800461e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004622:	2b00      	cmp	r3, #0
 8004624:	d02b      	beq.n	800467e <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800462a:	b29b      	uxth	r3, r3
 800462c:	2b00      	cmp	r3, #0
 800462e:	d018      	beq.n	8004662 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004634:	781a      	ldrb	r2, [r3, #0]
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004640:	1c5a      	adds	r2, r3, #1
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800464a:	b29b      	uxth	r3, r3
 800464c:	3b01      	subs	r3, #1
 800464e:	b29a      	uxth	r2, r3
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004658:	3b01      	subs	r3, #1
 800465a:	b29a      	uxth	r2, r3
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	851a      	strh	r2, [r3, #40]	; 0x28
 8004660:	e00d      	b.n	800467e <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004668:	d002      	beq.n	8004670 <I2C_Slave_ISR_IT+0x1e6>
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d106      	bne.n	800467e <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004670:	68f8      	ldr	r0, [r7, #12]
 8004672:	f000 f939 	bl	80048e8 <I2C_ITSlaveSeqCplt>
 8004676:	e002      	b.n	800467e <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8004678:	bf00      	nop
 800467a:	e000      	b.n	800467e <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 800467c:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	2200      	movs	r2, #0
 8004682:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004686:	2300      	movs	r3, #0
}
 8004688:	4618      	mov	r0, r3
 800468a:	3718      	adds	r7, #24
 800468c:	46bd      	mov	sp, r7
 800468e:	bd80      	pop	{r7, pc}

08004690 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b086      	sub	sp, #24
 8004694:	af02      	add	r7, sp, #8
 8004696:	60f8      	str	r0, [r7, #12]
 8004698:	4608      	mov	r0, r1
 800469a:	4611      	mov	r1, r2
 800469c:	461a      	mov	r2, r3
 800469e:	4603      	mov	r3, r0
 80046a0:	817b      	strh	r3, [r7, #10]
 80046a2:	460b      	mov	r3, r1
 80046a4:	813b      	strh	r3, [r7, #8]
 80046a6:	4613      	mov	r3, r2
 80046a8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80046aa:	88fb      	ldrh	r3, [r7, #6]
 80046ac:	b2da      	uxtb	r2, r3
 80046ae:	8979      	ldrh	r1, [r7, #10]
 80046b0:	4b20      	ldr	r3, [pc, #128]	; (8004734 <I2C_RequestMemoryWrite+0xa4>)
 80046b2:	9300      	str	r3, [sp, #0]
 80046b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80046b8:	68f8      	ldr	r0, [r7, #12]
 80046ba:	f000 fda9 	bl	8005210 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80046be:	69fa      	ldr	r2, [r7, #28]
 80046c0:	69b9      	ldr	r1, [r7, #24]
 80046c2:	68f8      	ldr	r0, [r7, #12]
 80046c4:	f000 fc47 	bl	8004f56 <I2C_WaitOnTXISFlagUntilTimeout>
 80046c8:	4603      	mov	r3, r0
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d001      	beq.n	80046d2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	e02c      	b.n	800472c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80046d2:	88fb      	ldrh	r3, [r7, #6]
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	d105      	bne.n	80046e4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80046d8:	893b      	ldrh	r3, [r7, #8]
 80046da:	b2da      	uxtb	r2, r3
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	629a      	str	r2, [r3, #40]	; 0x28
 80046e2:	e015      	b.n	8004710 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80046e4:	893b      	ldrh	r3, [r7, #8]
 80046e6:	0a1b      	lsrs	r3, r3, #8
 80046e8:	b29b      	uxth	r3, r3
 80046ea:	b2da      	uxtb	r2, r3
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80046f2:	69fa      	ldr	r2, [r7, #28]
 80046f4:	69b9      	ldr	r1, [r7, #24]
 80046f6:	68f8      	ldr	r0, [r7, #12]
 80046f8:	f000 fc2d 	bl	8004f56 <I2C_WaitOnTXISFlagUntilTimeout>
 80046fc:	4603      	mov	r3, r0
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d001      	beq.n	8004706 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	e012      	b.n	800472c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004706:	893b      	ldrh	r3, [r7, #8]
 8004708:	b2da      	uxtb	r2, r3
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004710:	69fb      	ldr	r3, [r7, #28]
 8004712:	9300      	str	r3, [sp, #0]
 8004714:	69bb      	ldr	r3, [r7, #24]
 8004716:	2200      	movs	r2, #0
 8004718:	2180      	movs	r1, #128	; 0x80
 800471a:	68f8      	ldr	r0, [r7, #12]
 800471c:	f000 fbdb 	bl	8004ed6 <I2C_WaitOnFlagUntilTimeout>
 8004720:	4603      	mov	r3, r0
 8004722:	2b00      	cmp	r3, #0
 8004724:	d001      	beq.n	800472a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	e000      	b.n	800472c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800472a:	2300      	movs	r3, #0
}
 800472c:	4618      	mov	r0, r3
 800472e:	3710      	adds	r7, #16
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}
 8004734:	80002000 	.word	0x80002000

08004738 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b086      	sub	sp, #24
 800473c:	af02      	add	r7, sp, #8
 800473e:	60f8      	str	r0, [r7, #12]
 8004740:	4608      	mov	r0, r1
 8004742:	4611      	mov	r1, r2
 8004744:	461a      	mov	r2, r3
 8004746:	4603      	mov	r3, r0
 8004748:	817b      	strh	r3, [r7, #10]
 800474a:	460b      	mov	r3, r1
 800474c:	813b      	strh	r3, [r7, #8]
 800474e:	4613      	mov	r3, r2
 8004750:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004752:	88fb      	ldrh	r3, [r7, #6]
 8004754:	b2da      	uxtb	r2, r3
 8004756:	8979      	ldrh	r1, [r7, #10]
 8004758:	4b20      	ldr	r3, [pc, #128]	; (80047dc <I2C_RequestMemoryRead+0xa4>)
 800475a:	9300      	str	r3, [sp, #0]
 800475c:	2300      	movs	r3, #0
 800475e:	68f8      	ldr	r0, [r7, #12]
 8004760:	f000 fd56 	bl	8005210 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004764:	69fa      	ldr	r2, [r7, #28]
 8004766:	69b9      	ldr	r1, [r7, #24]
 8004768:	68f8      	ldr	r0, [r7, #12]
 800476a:	f000 fbf4 	bl	8004f56 <I2C_WaitOnTXISFlagUntilTimeout>
 800476e:	4603      	mov	r3, r0
 8004770:	2b00      	cmp	r3, #0
 8004772:	d001      	beq.n	8004778 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004774:	2301      	movs	r3, #1
 8004776:	e02c      	b.n	80047d2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004778:	88fb      	ldrh	r3, [r7, #6]
 800477a:	2b01      	cmp	r3, #1
 800477c:	d105      	bne.n	800478a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800477e:	893b      	ldrh	r3, [r7, #8]
 8004780:	b2da      	uxtb	r2, r3
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	629a      	str	r2, [r3, #40]	; 0x28
 8004788:	e015      	b.n	80047b6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800478a:	893b      	ldrh	r3, [r7, #8]
 800478c:	0a1b      	lsrs	r3, r3, #8
 800478e:	b29b      	uxth	r3, r3
 8004790:	b2da      	uxtb	r2, r3
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004798:	69fa      	ldr	r2, [r7, #28]
 800479a:	69b9      	ldr	r1, [r7, #24]
 800479c:	68f8      	ldr	r0, [r7, #12]
 800479e:	f000 fbda 	bl	8004f56 <I2C_WaitOnTXISFlagUntilTimeout>
 80047a2:	4603      	mov	r3, r0
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d001      	beq.n	80047ac <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
 80047aa:	e012      	b.n	80047d2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80047ac:	893b      	ldrh	r3, [r7, #8]
 80047ae:	b2da      	uxtb	r2, r3
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80047b6:	69fb      	ldr	r3, [r7, #28]
 80047b8:	9300      	str	r3, [sp, #0]
 80047ba:	69bb      	ldr	r3, [r7, #24]
 80047bc:	2200      	movs	r2, #0
 80047be:	2140      	movs	r1, #64	; 0x40
 80047c0:	68f8      	ldr	r0, [r7, #12]
 80047c2:	f000 fb88 	bl	8004ed6 <I2C_WaitOnFlagUntilTimeout>
 80047c6:	4603      	mov	r3, r0
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d001      	beq.n	80047d0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80047cc:	2301      	movs	r3, #1
 80047ce:	e000      	b.n	80047d2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80047d0:	2300      	movs	r3, #0
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	3710      	adds	r7, #16
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}
 80047da:	bf00      	nop
 80047dc:	80002000 	.word	0x80002000

080047e0 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b084      	sub	sp, #16
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
 80047e8:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80047f6:	2b28      	cmp	r3, #40	; 0x28
 80047f8:	d16a      	bne.n	80048d0 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	699b      	ldr	r3, [r3, #24]
 8004800:	0c1b      	lsrs	r3, r3, #16
 8004802:	b2db      	uxtb	r3, r3
 8004804:	f003 0301 	and.w	r3, r3, #1
 8004808:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	699b      	ldr	r3, [r3, #24]
 8004810:	0c1b      	lsrs	r3, r3, #16
 8004812:	b29b      	uxth	r3, r3
 8004814:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8004818:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	b29b      	uxth	r3, r3
 8004822:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004826:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	68db      	ldr	r3, [r3, #12]
 800482e:	b29b      	uxth	r3, r3
 8004830:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8004834:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	68db      	ldr	r3, [r3, #12]
 800483a:	2b02      	cmp	r3, #2
 800483c:	d138      	bne.n	80048b0 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800483e:	897b      	ldrh	r3, [r7, #10]
 8004840:	09db      	lsrs	r3, r3, #7
 8004842:	b29a      	uxth	r2, r3
 8004844:	89bb      	ldrh	r3, [r7, #12]
 8004846:	4053      	eors	r3, r2
 8004848:	b29b      	uxth	r3, r3
 800484a:	f003 0306 	and.w	r3, r3, #6
 800484e:	2b00      	cmp	r3, #0
 8004850:	d11c      	bne.n	800488c <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8004852:	897b      	ldrh	r3, [r7, #10]
 8004854:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800485a:	1c5a      	adds	r2, r3, #1
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004864:	2b02      	cmp	r3, #2
 8004866:	d13b      	bne.n	80048e0 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2200      	movs	r2, #0
 800486c:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	2208      	movs	r2, #8
 8004874:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2200      	movs	r2, #0
 800487a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800487e:	89ba      	ldrh	r2, [r7, #12]
 8004880:	7bfb      	ldrb	r3, [r7, #15]
 8004882:	4619      	mov	r1, r3
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	f7ff fdde 	bl	8004446 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800488a:	e029      	b.n	80048e0 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800488c:	893b      	ldrh	r3, [r7, #8]
 800488e:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004890:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004894:	6878      	ldr	r0, [r7, #4]
 8004896:	f000 fced 	bl	8005274 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2200      	movs	r2, #0
 800489e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80048a2:	89ba      	ldrh	r2, [r7, #12]
 80048a4:	7bfb      	ldrb	r3, [r7, #15]
 80048a6:	4619      	mov	r1, r3
 80048a8:	6878      	ldr	r0, [r7, #4]
 80048aa:	f7ff fdcc 	bl	8004446 <HAL_I2C_AddrCallback>
}
 80048ae:	e017      	b.n	80048e0 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80048b0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80048b4:	6878      	ldr	r0, [r7, #4]
 80048b6:	f000 fcdd 	bl	8005274 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2200      	movs	r2, #0
 80048be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80048c2:	89ba      	ldrh	r2, [r7, #12]
 80048c4:	7bfb      	ldrb	r3, [r7, #15]
 80048c6:	4619      	mov	r1, r3
 80048c8:	6878      	ldr	r0, [r7, #4]
 80048ca:	f7ff fdbc 	bl	8004446 <HAL_I2C_AddrCallback>
}
 80048ce:	e007      	b.n	80048e0 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	2208      	movs	r2, #8
 80048d6:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2200      	movs	r2, #0
 80048dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 80048e0:	bf00      	nop
 80048e2:	3710      	adds	r7, #16
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}

080048e8 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b084      	sub	sp, #16
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2200      	movs	r2, #0
 80048fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	0b9b      	lsrs	r3, r3, #14
 8004904:	f003 0301 	and.w	r3, r3, #1
 8004908:	2b00      	cmp	r3, #0
 800490a:	d008      	beq.n	800491e <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	681a      	ldr	r2, [r3, #0]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800491a:	601a      	str	r2, [r3, #0]
 800491c:	e00d      	b.n	800493a <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	0bdb      	lsrs	r3, r3, #15
 8004922:	f003 0301 	and.w	r3, r3, #1
 8004926:	2b00      	cmp	r3, #0
 8004928:	d007      	beq.n	800493a <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004938:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004940:	b2db      	uxtb	r3, r3
 8004942:	2b29      	cmp	r3, #41	; 0x29
 8004944:	d112      	bne.n	800496c <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2228      	movs	r2, #40	; 0x28
 800494a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2221      	movs	r2, #33	; 0x21
 8004952:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004954:	2101      	movs	r1, #1
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	f000 fc8c 	bl	8005274 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2200      	movs	r2, #0
 8004960:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004964:	6878      	ldr	r0, [r7, #4]
 8004966:	f7ff fd5a 	bl	800441e <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800496a:	e017      	b.n	800499c <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004972:	b2db      	uxtb	r3, r3
 8004974:	2b2a      	cmp	r3, #42	; 0x2a
 8004976:	d111      	bne.n	800499c <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2228      	movs	r2, #40	; 0x28
 800497c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2222      	movs	r2, #34	; 0x22
 8004984:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004986:	2102      	movs	r1, #2
 8004988:	6878      	ldr	r0, [r7, #4]
 800498a:	f000 fc73 	bl	8005274 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2200      	movs	r2, #0
 8004992:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f7ff fd4b 	bl	8004432 <HAL_I2C_SlaveRxCpltCallback>
}
 800499c:	bf00      	nop
 800499e:	3710      	adds	r7, #16
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}

080049a4 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b086      	sub	sp, #24
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
 80049ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049c0:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	2220      	movs	r2, #32
 80049c8:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80049ca:	7bfb      	ldrb	r3, [r7, #15]
 80049cc:	2b21      	cmp	r3, #33	; 0x21
 80049ce:	d002      	beq.n	80049d6 <I2C_ITSlaveCplt+0x32>
 80049d0:	7bfb      	ldrb	r3, [r7, #15]
 80049d2:	2b29      	cmp	r3, #41	; 0x29
 80049d4:	d108      	bne.n	80049e8 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80049d6:	f248 0101 	movw	r1, #32769	; 0x8001
 80049da:	6878      	ldr	r0, [r7, #4]
 80049dc:	f000 fc4a 	bl	8005274 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2221      	movs	r2, #33	; 0x21
 80049e4:	631a      	str	r2, [r3, #48]	; 0x30
 80049e6:	e00d      	b.n	8004a04 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80049e8:	7bfb      	ldrb	r3, [r7, #15]
 80049ea:	2b22      	cmp	r3, #34	; 0x22
 80049ec:	d002      	beq.n	80049f4 <I2C_ITSlaveCplt+0x50>
 80049ee:	7bfb      	ldrb	r3, [r7, #15]
 80049f0:	2b2a      	cmp	r3, #42	; 0x2a
 80049f2:	d107      	bne.n	8004a04 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80049f4:	f248 0102 	movw	r1, #32770	; 0x8002
 80049f8:	6878      	ldr	r0, [r7, #4]
 80049fa:	f000 fc3b 	bl	8005274 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2222      	movs	r2, #34	; 0x22
 8004a02:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	685a      	ldr	r2, [r3, #4]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a12:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	6859      	ldr	r1, [r3, #4]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681a      	ldr	r2, [r3, #0]
 8004a1e:	4b64      	ldr	r3, [pc, #400]	; (8004bb0 <I2C_ITSlaveCplt+0x20c>)
 8004a20:	400b      	ands	r3, r1
 8004a22:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004a24:	6878      	ldr	r0, [r7, #4]
 8004a26:	f000 fa14 	bl	8004e52 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	0b9b      	lsrs	r3, r3, #14
 8004a2e:	f003 0301 	and.w	r3, r3, #1
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d013      	beq.n	8004a5e <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	681a      	ldr	r2, [r3, #0]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004a44:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d020      	beq.n	8004a90 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	b29a      	uxth	r2, r3
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004a5c:	e018      	b.n	8004a90 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004a5e:	693b      	ldr	r3, [r7, #16]
 8004a60:	0bdb      	lsrs	r3, r3, #15
 8004a62:	f003 0301 	and.w	r3, r3, #1
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d012      	beq.n	8004a90 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	681a      	ldr	r2, [r3, #0]
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004a78:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d006      	beq.n	8004a90 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	b29a      	uxth	r2, r3
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	089b      	lsrs	r3, r3, #2
 8004a94:	f003 0301 	and.w	r3, r3, #1
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d020      	beq.n	8004ade <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	f023 0304 	bic.w	r3, r3, #4
 8004aa2:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aae:	b2d2      	uxtb	r2, r2
 8004ab0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab6:	1c5a      	adds	r2, r3, #1
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d00c      	beq.n	8004ade <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ac8:	3b01      	subs	r3, #1
 8004aca:	b29a      	uxth	r2, r3
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ad4:	b29b      	uxth	r3, r3
 8004ad6:	3b01      	subs	r3, #1
 8004ad8:	b29a      	uxth	r2, r3
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ae2:	b29b      	uxth	r3, r3
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d005      	beq.n	8004af4 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aec:	f043 0204 	orr.w	r2, r3, #4
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2200      	movs	r2, #0
 8004af8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2200      	movs	r2, #0
 8004b00:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d010      	beq.n	8004b2c <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b0e:	4619      	mov	r1, r3
 8004b10:	6878      	ldr	r0, [r7, #4]
 8004b12:	f000 f8a7 	bl	8004c64 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b1c:	b2db      	uxtb	r3, r3
 8004b1e:	2b28      	cmp	r3, #40	; 0x28
 8004b20:	d141      	bne.n	8004ba6 <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8004b22:	6979      	ldr	r1, [r7, #20]
 8004b24:	6878      	ldr	r0, [r7, #4]
 8004b26:	f000 f847 	bl	8004bb8 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004b2a:	e03c      	b.n	8004ba6 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b30:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004b34:	d014      	beq.n	8004b60 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f7ff fed6 	bl	80048e8 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	4a1d      	ldr	r2, [pc, #116]	; (8004bb4 <I2C_ITSlaveCplt+0x210>)
 8004b40:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2220      	movs	r2, #32
 8004b46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2200      	movs	r2, #0
 8004b54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8004b58:	6878      	ldr	r0, [r7, #4]
 8004b5a:	f7ff fc82 	bl	8004462 <HAL_I2C_ListenCpltCallback>
}
 8004b5e:	e022      	b.n	8004ba6 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b66:	b2db      	uxtb	r3, r3
 8004b68:	2b22      	cmp	r3, #34	; 0x22
 8004b6a:	d10e      	bne.n	8004b8a <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2220      	movs	r2, #32
 8004b70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2200      	movs	r2, #0
 8004b78:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f7ff fc55 	bl	8004432 <HAL_I2C_SlaveRxCpltCallback>
}
 8004b88:	e00d      	b.n	8004ba6 <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2220      	movs	r2, #32
 8004b8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2200      	movs	r2, #0
 8004b96:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004ba0:	6878      	ldr	r0, [r7, #4]
 8004ba2:	f7ff fc3c 	bl	800441e <HAL_I2C_SlaveTxCpltCallback>
}
 8004ba6:	bf00      	nop
 8004ba8:	3718      	adds	r7, #24
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}
 8004bae:	bf00      	nop
 8004bb0:	fe00e800 	.word	0xfe00e800
 8004bb4:	ffff0000 	.word	0xffff0000

08004bb8 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b082      	sub	sp, #8
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
 8004bc0:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	4a26      	ldr	r2, [pc, #152]	; (8004c60 <I2C_ITListenCplt+0xa8>)
 8004bc6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2220      	movs	r2, #32
 8004bd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2200      	movs	r2, #0
 8004be2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	089b      	lsrs	r3, r3, #2
 8004be8:	f003 0301 	and.w	r3, r3, #1
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d022      	beq.n	8004c36 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bfa:	b2d2      	uxtb	r2, r2
 8004bfc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c02:	1c5a      	adds	r2, r3, #1
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d012      	beq.n	8004c36 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c14:	3b01      	subs	r3, #1
 8004c16:	b29a      	uxth	r2, r3
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c20:	b29b      	uxth	r3, r3
 8004c22:	3b01      	subs	r3, #1
 8004c24:	b29a      	uxth	r2, r3
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c2e:	f043 0204 	orr.w	r2, r3, #4
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004c36:	f248 0103 	movw	r1, #32771	; 0x8003
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	f000 fb1a 	bl	8005274 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	2210      	movs	r2, #16
 8004c46:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8004c50:	6878      	ldr	r0, [r7, #4]
 8004c52:	f7ff fc06 	bl	8004462 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8004c56:	bf00      	nop
 8004c58:	3708      	adds	r7, #8
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}
 8004c5e:	bf00      	nop
 8004c60:	ffff0000 	.word	0xffff0000

08004c64 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b084      	sub	sp, #16
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
 8004c6c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c74:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	4a5d      	ldr	r2, [pc, #372]	; (8004df8 <I2C_ITError+0x194>)
 8004c82:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2200      	movs	r2, #0
 8004c88:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	431a      	orrs	r2, r3
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8004c96:	7bfb      	ldrb	r3, [r7, #15]
 8004c98:	2b28      	cmp	r3, #40	; 0x28
 8004c9a:	d005      	beq.n	8004ca8 <I2C_ITError+0x44>
 8004c9c:	7bfb      	ldrb	r3, [r7, #15]
 8004c9e:	2b29      	cmp	r3, #41	; 0x29
 8004ca0:	d002      	beq.n	8004ca8 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8004ca2:	7bfb      	ldrb	r3, [r7, #15]
 8004ca4:	2b2a      	cmp	r3, #42	; 0x2a
 8004ca6:	d10b      	bne.n	8004cc0 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004ca8:	2103      	movs	r1, #3
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	f000 fae2 	bl	8005274 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2228      	movs	r2, #40	; 0x28
 8004cb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	4a50      	ldr	r2, [pc, #320]	; (8004dfc <I2C_ITError+0x198>)
 8004cbc:	635a      	str	r2, [r3, #52]	; 0x34
 8004cbe:	e011      	b.n	8004ce4 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004cc0:	f248 0103 	movw	r1, #32771	; 0x8003
 8004cc4:	6878      	ldr	r0, [r7, #4]
 8004cc6:	f000 fad5 	bl	8005274 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004cd0:	b2db      	uxtb	r3, r3
 8004cd2:	2b60      	cmp	r3, #96	; 0x60
 8004cd4:	d003      	beq.n	8004cde <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2220      	movs	r2, #32
 8004cda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ce8:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d039      	beq.n	8004d66 <I2C_ITError+0x102>
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	2b11      	cmp	r3, #17
 8004cf6:	d002      	beq.n	8004cfe <I2C_ITError+0x9a>
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	2b21      	cmp	r3, #33	; 0x21
 8004cfc:	d133      	bne.n	8004d66 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d08:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004d0c:	d107      	bne.n	8004d1e <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	681a      	ldr	r2, [r3, #0]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004d1c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d22:	4618      	mov	r0, r3
 8004d24:	f7fe fc72 	bl	800360c <HAL_DMA_GetState>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	2b01      	cmp	r3, #1
 8004d2c:	d017      	beq.n	8004d5e <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d32:	4a33      	ldr	r2, [pc, #204]	; (8004e00 <I2C_ITError+0x19c>)
 8004d34:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2200      	movs	r2, #0
 8004d3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d42:	4618      	mov	r0, r3
 8004d44:	f7fe fc40 	bl	80035c8 <HAL_DMA_Abort_IT>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d04d      	beq.n	8004dea <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d54:	687a      	ldr	r2, [r7, #4]
 8004d56:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004d58:	4610      	mov	r0, r2
 8004d5a:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004d5c:	e045      	b.n	8004dea <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	f000 f850 	bl	8004e04 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004d64:	e041      	b.n	8004dea <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d039      	beq.n	8004de2 <I2C_ITError+0x17e>
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	2b12      	cmp	r3, #18
 8004d72:	d002      	beq.n	8004d7a <I2C_ITError+0x116>
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	2b22      	cmp	r3, #34	; 0x22
 8004d78:	d133      	bne.n	8004de2 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d88:	d107      	bne.n	8004d9a <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	681a      	ldr	r2, [r3, #0]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004d98:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f7fe fc34 	bl	800360c <HAL_DMA_GetState>
 8004da4:	4603      	mov	r3, r0
 8004da6:	2b01      	cmp	r3, #1
 8004da8:	d017      	beq.n	8004dda <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dae:	4a14      	ldr	r2, [pc, #80]	; (8004e00 <I2C_ITError+0x19c>)
 8004db0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2200      	movs	r2, #0
 8004db6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f7fe fc02 	bl	80035c8 <HAL_DMA_Abort_IT>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d011      	beq.n	8004dee <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dd0:	687a      	ldr	r2, [r7, #4]
 8004dd2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004dd4:	4610      	mov	r0, r2
 8004dd6:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004dd8:	e009      	b.n	8004dee <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	f000 f812 	bl	8004e04 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004de0:	e005      	b.n	8004dee <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	f000 f80e 	bl	8004e04 <I2C_TreatErrorCallback>
  }
}
 8004de8:	e002      	b.n	8004df0 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004dea:	bf00      	nop
 8004dec:	e000      	b.n	8004df0 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004dee:	bf00      	nop
}
 8004df0:	bf00      	nop
 8004df2:	3710      	adds	r7, #16
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}
 8004df8:	ffff0000 	.word	0xffff0000
 8004dfc:	0800448b 	.word	0x0800448b
 8004e00:	08004e9b 	.word	0x08004e9b

08004e04 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b082      	sub	sp, #8
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e12:	b2db      	uxtb	r3, r3
 8004e14:	2b60      	cmp	r3, #96	; 0x60
 8004e16:	d10e      	bne.n	8004e36 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2220      	movs	r2, #32
 8004e1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2200      	movs	r2, #0
 8004e24:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004e2e:	6878      	ldr	r0, [r7, #4]
 8004e30:	f7ff fb21 	bl	8004476 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004e34:	e009      	b.n	8004e4a <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8004e44:	6878      	ldr	r0, [r7, #4]
 8004e46:	f7fd fd53 	bl	80028f0 <HAL_I2C_ErrorCallback>
}
 8004e4a:	bf00      	nop
 8004e4c:	3708      	adds	r7, #8
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}

08004e52 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004e52:	b480      	push	{r7}
 8004e54:	b083      	sub	sp, #12
 8004e56:	af00      	add	r7, sp, #0
 8004e58:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	699b      	ldr	r3, [r3, #24]
 8004e60:	f003 0302 	and.w	r3, r3, #2
 8004e64:	2b02      	cmp	r3, #2
 8004e66:	d103      	bne.n	8004e70 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	699b      	ldr	r3, [r3, #24]
 8004e76:	f003 0301 	and.w	r3, r3, #1
 8004e7a:	2b01      	cmp	r3, #1
 8004e7c:	d007      	beq.n	8004e8e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	699a      	ldr	r2, [r3, #24]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f042 0201 	orr.w	r2, r2, #1
 8004e8c:	619a      	str	r2, [r3, #24]
  }
}
 8004e8e:	bf00      	nop
 8004e90:	370c      	adds	r7, #12
 8004e92:	46bd      	mov	sp, r7
 8004e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e98:	4770      	bx	lr

08004e9a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004e9a:	b580      	push	{r7, lr}
 8004e9c:	b084      	sub	sp, #16
 8004e9e:	af00      	add	r7, sp, #0
 8004ea0:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ea6:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d003      	beq.n	8004eb8 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d003      	beq.n	8004ec8 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8004ec8:	68f8      	ldr	r0, [r7, #12]
 8004eca:	f7ff ff9b 	bl	8004e04 <I2C_TreatErrorCallback>
}
 8004ece:	bf00      	nop
 8004ed0:	3710      	adds	r7, #16
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}

08004ed6 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004ed6:	b580      	push	{r7, lr}
 8004ed8:	b084      	sub	sp, #16
 8004eda:	af00      	add	r7, sp, #0
 8004edc:	60f8      	str	r0, [r7, #12]
 8004ede:	60b9      	str	r1, [r7, #8]
 8004ee0:	603b      	str	r3, [r7, #0]
 8004ee2:	4613      	mov	r3, r2
 8004ee4:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ee6:	e022      	b.n	8004f2e <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eee:	d01e      	beq.n	8004f2e <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ef0:	f7fe f9ac 	bl	800324c <HAL_GetTick>
 8004ef4:	4602      	mov	r2, r0
 8004ef6:	69bb      	ldr	r3, [r7, #24]
 8004ef8:	1ad3      	subs	r3, r2, r3
 8004efa:	683a      	ldr	r2, [r7, #0]
 8004efc:	429a      	cmp	r2, r3
 8004efe:	d302      	bcc.n	8004f06 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d113      	bne.n	8004f2e <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f0a:	f043 0220 	orr.w	r2, r3, #32
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2220      	movs	r2, #32
 8004f16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	2200      	movs	r2, #0
 8004f26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	e00f      	b.n	8004f4e <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	699a      	ldr	r2, [r3, #24]
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	4013      	ands	r3, r2
 8004f38:	68ba      	ldr	r2, [r7, #8]
 8004f3a:	429a      	cmp	r2, r3
 8004f3c:	bf0c      	ite	eq
 8004f3e:	2301      	moveq	r3, #1
 8004f40:	2300      	movne	r3, #0
 8004f42:	b2db      	uxtb	r3, r3
 8004f44:	461a      	mov	r2, r3
 8004f46:	79fb      	ldrb	r3, [r7, #7]
 8004f48:	429a      	cmp	r2, r3
 8004f4a:	d0cd      	beq.n	8004ee8 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004f4c:	2300      	movs	r3, #0
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	3710      	adds	r7, #16
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd80      	pop	{r7, pc}

08004f56 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004f56:	b580      	push	{r7, lr}
 8004f58:	b084      	sub	sp, #16
 8004f5a:	af00      	add	r7, sp, #0
 8004f5c:	60f8      	str	r0, [r7, #12]
 8004f5e:	60b9      	str	r1, [r7, #8]
 8004f60:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004f62:	e02c      	b.n	8004fbe <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004f64:	687a      	ldr	r2, [r7, #4]
 8004f66:	68b9      	ldr	r1, [r7, #8]
 8004f68:	68f8      	ldr	r0, [r7, #12]
 8004f6a:	f000 f871 	bl	8005050 <I2C_IsErrorOccurred>
 8004f6e:	4603      	mov	r3, r0
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d001      	beq.n	8004f78 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004f74:	2301      	movs	r3, #1
 8004f76:	e02a      	b.n	8004fce <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f7e:	d01e      	beq.n	8004fbe <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f80:	f7fe f964 	bl	800324c <HAL_GetTick>
 8004f84:	4602      	mov	r2, r0
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	1ad3      	subs	r3, r2, r3
 8004f8a:	68ba      	ldr	r2, [r7, #8]
 8004f8c:	429a      	cmp	r2, r3
 8004f8e:	d302      	bcc.n	8004f96 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d113      	bne.n	8004fbe <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f9a:	f043 0220 	orr.w	r2, r3, #32
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	2220      	movs	r2, #32
 8004fa6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	2200      	movs	r2, #0
 8004fae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	e007      	b.n	8004fce <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	699b      	ldr	r3, [r3, #24]
 8004fc4:	f003 0302 	and.w	r3, r3, #2
 8004fc8:	2b02      	cmp	r3, #2
 8004fca:	d1cb      	bne.n	8004f64 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004fcc:	2300      	movs	r3, #0
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	3710      	adds	r7, #16
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}

08004fd6 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004fd6:	b580      	push	{r7, lr}
 8004fd8:	b084      	sub	sp, #16
 8004fda:	af00      	add	r7, sp, #0
 8004fdc:	60f8      	str	r0, [r7, #12]
 8004fde:	60b9      	str	r1, [r7, #8]
 8004fe0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004fe2:	e028      	b.n	8005036 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004fe4:	687a      	ldr	r2, [r7, #4]
 8004fe6:	68b9      	ldr	r1, [r7, #8]
 8004fe8:	68f8      	ldr	r0, [r7, #12]
 8004fea:	f000 f831 	bl	8005050 <I2C_IsErrorOccurred>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d001      	beq.n	8004ff8 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	e026      	b.n	8005046 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ff8:	f7fe f928 	bl	800324c <HAL_GetTick>
 8004ffc:	4602      	mov	r2, r0
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	1ad3      	subs	r3, r2, r3
 8005002:	68ba      	ldr	r2, [r7, #8]
 8005004:	429a      	cmp	r2, r3
 8005006:	d302      	bcc.n	800500e <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d113      	bne.n	8005036 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005012:	f043 0220 	orr.w	r2, r3, #32
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	2220      	movs	r2, #32
 800501e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	2200      	movs	r2, #0
 8005026:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	2200      	movs	r2, #0
 800502e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005032:	2301      	movs	r3, #1
 8005034:	e007      	b.n	8005046 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	699b      	ldr	r3, [r3, #24]
 800503c:	f003 0320 	and.w	r3, r3, #32
 8005040:	2b20      	cmp	r3, #32
 8005042:	d1cf      	bne.n	8004fe4 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005044:	2300      	movs	r3, #0
}
 8005046:	4618      	mov	r0, r3
 8005048:	3710      	adds	r7, #16
 800504a:	46bd      	mov	sp, r7
 800504c:	bd80      	pop	{r7, pc}
	...

08005050 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b08a      	sub	sp, #40	; 0x28
 8005054:	af00      	add	r7, sp, #0
 8005056:	60f8      	str	r0, [r7, #12]
 8005058:	60b9      	str	r1, [r7, #8]
 800505a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800505c:	2300      	movs	r3, #0
 800505e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	699b      	ldr	r3, [r3, #24]
 8005068:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800506a:	2300      	movs	r3, #0
 800506c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005072:	69bb      	ldr	r3, [r7, #24]
 8005074:	f003 0310 	and.w	r3, r3, #16
 8005078:	2b00      	cmp	r3, #0
 800507a:	d068      	beq.n	800514e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	2210      	movs	r2, #16
 8005082:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005084:	e049      	b.n	800511a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800508c:	d045      	beq.n	800511a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800508e:	f7fe f8dd 	bl	800324c <HAL_GetTick>
 8005092:	4602      	mov	r2, r0
 8005094:	69fb      	ldr	r3, [r7, #28]
 8005096:	1ad3      	subs	r3, r2, r3
 8005098:	68ba      	ldr	r2, [r7, #8]
 800509a:	429a      	cmp	r2, r3
 800509c:	d302      	bcc.n	80050a4 <I2C_IsErrorOccurred+0x54>
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d13a      	bne.n	800511a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050ae:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80050b6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	699b      	ldr	r3, [r3, #24]
 80050be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80050c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050c6:	d121      	bne.n	800510c <I2C_IsErrorOccurred+0xbc>
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80050ce:	d01d      	beq.n	800510c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80050d0:	7cfb      	ldrb	r3, [r7, #19]
 80050d2:	2b20      	cmp	r3, #32
 80050d4:	d01a      	beq.n	800510c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	685a      	ldr	r2, [r3, #4]
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80050e4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80050e6:	f7fe f8b1 	bl	800324c <HAL_GetTick>
 80050ea:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80050ec:	e00e      	b.n	800510c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80050ee:	f7fe f8ad 	bl	800324c <HAL_GetTick>
 80050f2:	4602      	mov	r2, r0
 80050f4:	69fb      	ldr	r3, [r7, #28]
 80050f6:	1ad3      	subs	r3, r2, r3
 80050f8:	2b19      	cmp	r3, #25
 80050fa:	d907      	bls.n	800510c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 80050fc:	6a3b      	ldr	r3, [r7, #32]
 80050fe:	f043 0320 	orr.w	r3, r3, #32
 8005102:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005104:	2301      	movs	r3, #1
 8005106:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800510a:	e006      	b.n	800511a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	699b      	ldr	r3, [r3, #24]
 8005112:	f003 0320 	and.w	r3, r3, #32
 8005116:	2b20      	cmp	r3, #32
 8005118:	d1e9      	bne.n	80050ee <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	699b      	ldr	r3, [r3, #24]
 8005120:	f003 0320 	and.w	r3, r3, #32
 8005124:	2b20      	cmp	r3, #32
 8005126:	d003      	beq.n	8005130 <I2C_IsErrorOccurred+0xe0>
 8005128:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800512c:	2b00      	cmp	r3, #0
 800512e:	d0aa      	beq.n	8005086 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005130:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005134:	2b00      	cmp	r3, #0
 8005136:	d103      	bne.n	8005140 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	2220      	movs	r2, #32
 800513e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005140:	6a3b      	ldr	r3, [r7, #32]
 8005142:	f043 0304 	orr.w	r3, r3, #4
 8005146:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005148:	2301      	movs	r3, #1
 800514a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	699b      	ldr	r3, [r3, #24]
 8005154:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8005156:	69bb      	ldr	r3, [r7, #24]
 8005158:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800515c:	2b00      	cmp	r3, #0
 800515e:	d00b      	beq.n	8005178 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8005160:	6a3b      	ldr	r3, [r7, #32]
 8005162:	f043 0301 	orr.w	r3, r3, #1
 8005166:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005170:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005172:	2301      	movs	r3, #1
 8005174:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8005178:	69bb      	ldr	r3, [r7, #24]
 800517a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800517e:	2b00      	cmp	r3, #0
 8005180:	d00b      	beq.n	800519a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8005182:	6a3b      	ldr	r3, [r7, #32]
 8005184:	f043 0308 	orr.w	r3, r3, #8
 8005188:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005192:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005194:	2301      	movs	r3, #1
 8005196:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800519a:	69bb      	ldr	r3, [r7, #24]
 800519c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d00b      	beq.n	80051bc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80051a4:	6a3b      	ldr	r3, [r7, #32]
 80051a6:	f043 0302 	orr.w	r3, r3, #2
 80051aa:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80051b4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80051b6:	2301      	movs	r3, #1
 80051b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80051bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d01c      	beq.n	80051fe <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80051c4:	68f8      	ldr	r0, [r7, #12]
 80051c6:	f7ff fe44 	bl	8004e52 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	6859      	ldr	r1, [r3, #4]
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681a      	ldr	r2, [r3, #0]
 80051d4:	4b0d      	ldr	r3, [pc, #52]	; (800520c <I2C_IsErrorOccurred+0x1bc>)
 80051d6:	400b      	ands	r3, r1
 80051d8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80051de:	6a3b      	ldr	r3, [r7, #32]
 80051e0:	431a      	orrs	r2, r3
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	2220      	movs	r2, #32
 80051ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	2200      	movs	r2, #0
 80051f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	2200      	movs	r2, #0
 80051fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80051fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005202:	4618      	mov	r0, r3
 8005204:	3728      	adds	r7, #40	; 0x28
 8005206:	46bd      	mov	sp, r7
 8005208:	bd80      	pop	{r7, pc}
 800520a:	bf00      	nop
 800520c:	fe00e800 	.word	0xfe00e800

08005210 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005210:	b480      	push	{r7}
 8005212:	b087      	sub	sp, #28
 8005214:	af00      	add	r7, sp, #0
 8005216:	60f8      	str	r0, [r7, #12]
 8005218:	607b      	str	r3, [r7, #4]
 800521a:	460b      	mov	r3, r1
 800521c:	817b      	strh	r3, [r7, #10]
 800521e:	4613      	mov	r3, r2
 8005220:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005222:	897b      	ldrh	r3, [r7, #10]
 8005224:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005228:	7a7b      	ldrb	r3, [r7, #9]
 800522a:	041b      	lsls	r3, r3, #16
 800522c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005230:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005236:	6a3b      	ldr	r3, [r7, #32]
 8005238:	4313      	orrs	r3, r2
 800523a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800523e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	685a      	ldr	r2, [r3, #4]
 8005246:	6a3b      	ldr	r3, [r7, #32]
 8005248:	0d5b      	lsrs	r3, r3, #21
 800524a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800524e:	4b08      	ldr	r3, [pc, #32]	; (8005270 <I2C_TransferConfig+0x60>)
 8005250:	430b      	orrs	r3, r1
 8005252:	43db      	mvns	r3, r3
 8005254:	ea02 0103 	and.w	r1, r2, r3
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	697a      	ldr	r2, [r7, #20]
 800525e:	430a      	orrs	r2, r1
 8005260:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005262:	bf00      	nop
 8005264:	371c      	adds	r7, #28
 8005266:	46bd      	mov	sp, r7
 8005268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526c:	4770      	bx	lr
 800526e:	bf00      	nop
 8005270:	03ff63ff 	.word	0x03ff63ff

08005274 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8005274:	b480      	push	{r7}
 8005276:	b085      	sub	sp, #20
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
 800527c:	460b      	mov	r3, r1
 800527e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8005280:	2300      	movs	r3, #0
 8005282:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8005284:	887b      	ldrh	r3, [r7, #2]
 8005286:	f003 0301 	and.w	r3, r3, #1
 800528a:	2b00      	cmp	r3, #0
 800528c:	d00f      	beq.n	80052ae <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8005294:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800529c:	b2db      	uxtb	r3, r3
 800529e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80052a2:	2b28      	cmp	r3, #40	; 0x28
 80052a4:	d003      	beq.n	80052ae <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80052ac:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80052ae:	887b      	ldrh	r3, [r7, #2]
 80052b0:	f003 0302 	and.w	r3, r3, #2
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d00f      	beq.n	80052d8 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 80052be:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80052c6:	b2db      	uxtb	r3, r3
 80052c8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80052cc:	2b28      	cmp	r3, #40	; 0x28
 80052ce:	d003      	beq.n	80052d8 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80052d6:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80052d8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	da03      	bge.n	80052e8 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80052e6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80052e8:	887b      	ldrh	r3, [r7, #2]
 80052ea:	2b10      	cmp	r3, #16
 80052ec:	d103      	bne.n	80052f6 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80052f4:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80052f6:	887b      	ldrh	r3, [r7, #2]
 80052f8:	2b20      	cmp	r3, #32
 80052fa:	d103      	bne.n	8005304 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	f043 0320 	orr.w	r3, r3, #32
 8005302:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8005304:	887b      	ldrh	r3, [r7, #2]
 8005306:	2b40      	cmp	r3, #64	; 0x40
 8005308:	d103      	bne.n	8005312 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005310:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	6819      	ldr	r1, [r3, #0]
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	43da      	mvns	r2, r3
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	400a      	ands	r2, r1
 8005322:	601a      	str	r2, [r3, #0]
}
 8005324:	bf00      	nop
 8005326:	3714      	adds	r7, #20
 8005328:	46bd      	mov	sp, r7
 800532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532e:	4770      	bx	lr

08005330 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005330:	b480      	push	{r7}
 8005332:	b083      	sub	sp, #12
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
 8005338:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005340:	b2db      	uxtb	r3, r3
 8005342:	2b20      	cmp	r3, #32
 8005344:	d138      	bne.n	80053b8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800534c:	2b01      	cmp	r3, #1
 800534e:	d101      	bne.n	8005354 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005350:	2302      	movs	r3, #2
 8005352:	e032      	b.n	80053ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2201      	movs	r2, #1
 8005358:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2224      	movs	r2, #36	; 0x24
 8005360:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	681a      	ldr	r2, [r3, #0]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f022 0201 	bic.w	r2, r2, #1
 8005372:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	681a      	ldr	r2, [r3, #0]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005382:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	6819      	ldr	r1, [r3, #0]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	683a      	ldr	r2, [r7, #0]
 8005390:	430a      	orrs	r2, r1
 8005392:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	681a      	ldr	r2, [r3, #0]
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f042 0201 	orr.w	r2, r2, #1
 80053a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2220      	movs	r2, #32
 80053a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2200      	movs	r2, #0
 80053b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80053b4:	2300      	movs	r3, #0
 80053b6:	e000      	b.n	80053ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80053b8:	2302      	movs	r3, #2
  }
}
 80053ba:	4618      	mov	r0, r3
 80053bc:	370c      	adds	r7, #12
 80053be:	46bd      	mov	sp, r7
 80053c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c4:	4770      	bx	lr

080053c6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80053c6:	b480      	push	{r7}
 80053c8:	b085      	sub	sp, #20
 80053ca:	af00      	add	r7, sp, #0
 80053cc:	6078      	str	r0, [r7, #4]
 80053ce:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053d6:	b2db      	uxtb	r3, r3
 80053d8:	2b20      	cmp	r3, #32
 80053da:	d139      	bne.n	8005450 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80053e2:	2b01      	cmp	r3, #1
 80053e4:	d101      	bne.n	80053ea <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80053e6:	2302      	movs	r3, #2
 80053e8:	e033      	b.n	8005452 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2201      	movs	r2, #1
 80053ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2224      	movs	r2, #36	; 0x24
 80053f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	681a      	ldr	r2, [r3, #0]
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f022 0201 	bic.w	r2, r2, #1
 8005408:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005418:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	021b      	lsls	r3, r3, #8
 800541e:	68fa      	ldr	r2, [r7, #12]
 8005420:	4313      	orrs	r3, r2
 8005422:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	68fa      	ldr	r2, [r7, #12]
 800542a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	681a      	ldr	r2, [r3, #0]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f042 0201 	orr.w	r2, r2, #1
 800543a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2220      	movs	r2, #32
 8005440:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2200      	movs	r2, #0
 8005448:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800544c:	2300      	movs	r3, #0
 800544e:	e000      	b.n	8005452 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005450:	2302      	movs	r3, #2
  }
}
 8005452:	4618      	mov	r0, r3
 8005454:	3714      	adds	r7, #20
 8005456:	46bd      	mov	sp, r7
 8005458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545c:	4770      	bx	lr

0800545e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800545e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005460:	b08f      	sub	sp, #60	; 0x3c
 8005462:	af0a      	add	r7, sp, #40	; 0x28
 8005464:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d101      	bne.n	8005470 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800546c:	2301      	movs	r3, #1
 800546e:	e116      	b.n	800569e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800547c:	b2db      	uxtb	r3, r3
 800547e:	2b00      	cmp	r3, #0
 8005480:	d106      	bne.n	8005490 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2200      	movs	r2, #0
 8005486:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	f006 faac 	bl	800b9e8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2203      	movs	r2, #3
 8005494:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800549c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d102      	bne.n	80054aa <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2200      	movs	r2, #0
 80054a8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4618      	mov	r0, r3
 80054b0:	f002 fc4b 	bl	8007d4a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	603b      	str	r3, [r7, #0]
 80054ba:	687e      	ldr	r6, [r7, #4]
 80054bc:	466d      	mov	r5, sp
 80054be:	f106 0410 	add.w	r4, r6, #16
 80054c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80054c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80054c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80054c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80054ca:	e894 0003 	ldmia.w	r4, {r0, r1}
 80054ce:	e885 0003 	stmia.w	r5, {r0, r1}
 80054d2:	1d33      	adds	r3, r6, #4
 80054d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80054d6:	6838      	ldr	r0, [r7, #0]
 80054d8:	f002 fb2c 	bl	8007b34 <USB_CoreInit>
 80054dc:	4603      	mov	r3, r0
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d005      	beq.n	80054ee <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2202      	movs	r2, #2
 80054e6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80054ea:	2301      	movs	r3, #1
 80054ec:	e0d7      	b.n	800569e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	2100      	movs	r1, #0
 80054f4:	4618      	mov	r0, r3
 80054f6:	f002 fc39 	bl	8007d6c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80054fa:	2300      	movs	r3, #0
 80054fc:	73fb      	strb	r3, [r7, #15]
 80054fe:	e04a      	b.n	8005596 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005500:	7bfa      	ldrb	r2, [r7, #15]
 8005502:	6879      	ldr	r1, [r7, #4]
 8005504:	4613      	mov	r3, r2
 8005506:	00db      	lsls	r3, r3, #3
 8005508:	4413      	add	r3, r2
 800550a:	009b      	lsls	r3, r3, #2
 800550c:	440b      	add	r3, r1
 800550e:	333d      	adds	r3, #61	; 0x3d
 8005510:	2201      	movs	r2, #1
 8005512:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005514:	7bfa      	ldrb	r2, [r7, #15]
 8005516:	6879      	ldr	r1, [r7, #4]
 8005518:	4613      	mov	r3, r2
 800551a:	00db      	lsls	r3, r3, #3
 800551c:	4413      	add	r3, r2
 800551e:	009b      	lsls	r3, r3, #2
 8005520:	440b      	add	r3, r1
 8005522:	333c      	adds	r3, #60	; 0x3c
 8005524:	7bfa      	ldrb	r2, [r7, #15]
 8005526:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005528:	7bfa      	ldrb	r2, [r7, #15]
 800552a:	7bfb      	ldrb	r3, [r7, #15]
 800552c:	b298      	uxth	r0, r3
 800552e:	6879      	ldr	r1, [r7, #4]
 8005530:	4613      	mov	r3, r2
 8005532:	00db      	lsls	r3, r3, #3
 8005534:	4413      	add	r3, r2
 8005536:	009b      	lsls	r3, r3, #2
 8005538:	440b      	add	r3, r1
 800553a:	3344      	adds	r3, #68	; 0x44
 800553c:	4602      	mov	r2, r0
 800553e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005540:	7bfa      	ldrb	r2, [r7, #15]
 8005542:	6879      	ldr	r1, [r7, #4]
 8005544:	4613      	mov	r3, r2
 8005546:	00db      	lsls	r3, r3, #3
 8005548:	4413      	add	r3, r2
 800554a:	009b      	lsls	r3, r3, #2
 800554c:	440b      	add	r3, r1
 800554e:	3340      	adds	r3, #64	; 0x40
 8005550:	2200      	movs	r2, #0
 8005552:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005554:	7bfa      	ldrb	r2, [r7, #15]
 8005556:	6879      	ldr	r1, [r7, #4]
 8005558:	4613      	mov	r3, r2
 800555a:	00db      	lsls	r3, r3, #3
 800555c:	4413      	add	r3, r2
 800555e:	009b      	lsls	r3, r3, #2
 8005560:	440b      	add	r3, r1
 8005562:	3348      	adds	r3, #72	; 0x48
 8005564:	2200      	movs	r2, #0
 8005566:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005568:	7bfa      	ldrb	r2, [r7, #15]
 800556a:	6879      	ldr	r1, [r7, #4]
 800556c:	4613      	mov	r3, r2
 800556e:	00db      	lsls	r3, r3, #3
 8005570:	4413      	add	r3, r2
 8005572:	009b      	lsls	r3, r3, #2
 8005574:	440b      	add	r3, r1
 8005576:	334c      	adds	r3, #76	; 0x4c
 8005578:	2200      	movs	r2, #0
 800557a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800557c:	7bfa      	ldrb	r2, [r7, #15]
 800557e:	6879      	ldr	r1, [r7, #4]
 8005580:	4613      	mov	r3, r2
 8005582:	00db      	lsls	r3, r3, #3
 8005584:	4413      	add	r3, r2
 8005586:	009b      	lsls	r3, r3, #2
 8005588:	440b      	add	r3, r1
 800558a:	3354      	adds	r3, #84	; 0x54
 800558c:	2200      	movs	r2, #0
 800558e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005590:	7bfb      	ldrb	r3, [r7, #15]
 8005592:	3301      	adds	r3, #1
 8005594:	73fb      	strb	r3, [r7, #15]
 8005596:	7bfa      	ldrb	r2, [r7, #15]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	429a      	cmp	r2, r3
 800559e:	d3af      	bcc.n	8005500 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80055a0:	2300      	movs	r3, #0
 80055a2:	73fb      	strb	r3, [r7, #15]
 80055a4:	e044      	b.n	8005630 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80055a6:	7bfa      	ldrb	r2, [r7, #15]
 80055a8:	6879      	ldr	r1, [r7, #4]
 80055aa:	4613      	mov	r3, r2
 80055ac:	00db      	lsls	r3, r3, #3
 80055ae:	4413      	add	r3, r2
 80055b0:	009b      	lsls	r3, r3, #2
 80055b2:	440b      	add	r3, r1
 80055b4:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80055b8:	2200      	movs	r2, #0
 80055ba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80055bc:	7bfa      	ldrb	r2, [r7, #15]
 80055be:	6879      	ldr	r1, [r7, #4]
 80055c0:	4613      	mov	r3, r2
 80055c2:	00db      	lsls	r3, r3, #3
 80055c4:	4413      	add	r3, r2
 80055c6:	009b      	lsls	r3, r3, #2
 80055c8:	440b      	add	r3, r1
 80055ca:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80055ce:	7bfa      	ldrb	r2, [r7, #15]
 80055d0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80055d2:	7bfa      	ldrb	r2, [r7, #15]
 80055d4:	6879      	ldr	r1, [r7, #4]
 80055d6:	4613      	mov	r3, r2
 80055d8:	00db      	lsls	r3, r3, #3
 80055da:	4413      	add	r3, r2
 80055dc:	009b      	lsls	r3, r3, #2
 80055de:	440b      	add	r3, r1
 80055e0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80055e4:	2200      	movs	r2, #0
 80055e6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80055e8:	7bfa      	ldrb	r2, [r7, #15]
 80055ea:	6879      	ldr	r1, [r7, #4]
 80055ec:	4613      	mov	r3, r2
 80055ee:	00db      	lsls	r3, r3, #3
 80055f0:	4413      	add	r3, r2
 80055f2:	009b      	lsls	r3, r3, #2
 80055f4:	440b      	add	r3, r1
 80055f6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80055fa:	2200      	movs	r2, #0
 80055fc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80055fe:	7bfa      	ldrb	r2, [r7, #15]
 8005600:	6879      	ldr	r1, [r7, #4]
 8005602:	4613      	mov	r3, r2
 8005604:	00db      	lsls	r3, r3, #3
 8005606:	4413      	add	r3, r2
 8005608:	009b      	lsls	r3, r3, #2
 800560a:	440b      	add	r3, r1
 800560c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8005610:	2200      	movs	r2, #0
 8005612:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005614:	7bfa      	ldrb	r2, [r7, #15]
 8005616:	6879      	ldr	r1, [r7, #4]
 8005618:	4613      	mov	r3, r2
 800561a:	00db      	lsls	r3, r3, #3
 800561c:	4413      	add	r3, r2
 800561e:	009b      	lsls	r3, r3, #2
 8005620:	440b      	add	r3, r1
 8005622:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005626:	2200      	movs	r2, #0
 8005628:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800562a:	7bfb      	ldrb	r3, [r7, #15]
 800562c:	3301      	adds	r3, #1
 800562e:	73fb      	strb	r3, [r7, #15]
 8005630:	7bfa      	ldrb	r2, [r7, #15]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	429a      	cmp	r2, r3
 8005638:	d3b5      	bcc.n	80055a6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	603b      	str	r3, [r7, #0]
 8005640:	687e      	ldr	r6, [r7, #4]
 8005642:	466d      	mov	r5, sp
 8005644:	f106 0410 	add.w	r4, r6, #16
 8005648:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800564a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800564c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800564e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005650:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005654:	e885 0003 	stmia.w	r5, {r0, r1}
 8005658:	1d33      	adds	r3, r6, #4
 800565a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800565c:	6838      	ldr	r0, [r7, #0]
 800565e:	f002 fbd1 	bl	8007e04 <USB_DevInit>
 8005662:	4603      	mov	r3, r0
 8005664:	2b00      	cmp	r3, #0
 8005666:	d005      	beq.n	8005674 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2202      	movs	r2, #2
 800566c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005670:	2301      	movs	r3, #1
 8005672:	e014      	b.n	800569e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2200      	movs	r2, #0
 8005678:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2201      	movs	r2, #1
 8005680:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005688:	2b01      	cmp	r3, #1
 800568a:	d102      	bne.n	8005692 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800568c:	6878      	ldr	r0, [r7, #4]
 800568e:	f001 f97b 	bl	8006988 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4618      	mov	r0, r3
 8005698:	f003 fd1f 	bl	80090da <USB_DevDisconnect>

  return HAL_OK;
 800569c:	2300      	movs	r3, #0
}
 800569e:	4618      	mov	r0, r3
 80056a0:	3714      	adds	r7, #20
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080056a6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80056a6:	b580      	push	{r7, lr}
 80056a8:	b082      	sub	sp, #8
 80056aa:	af00      	add	r7, sp, #0
 80056ac:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80056b4:	2b01      	cmp	r3, #1
 80056b6:	d101      	bne.n	80056bc <HAL_PCD_Start+0x16>
 80056b8:	2302      	movs	r3, #2
 80056ba:	e012      	b.n	80056e2 <HAL_PCD_Start+0x3c>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2201      	movs	r2, #1
 80056c0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  __HAL_PCD_ENABLE(hpcd);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4618      	mov	r0, r3
 80056ca:	f002 fb2d 	bl	8007d28 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4618      	mov	r0, r3
 80056d4:	f003 fce0 	bl	8009098 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2200      	movs	r2, #0
 80056dc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80056e0:	2300      	movs	r3, #0
}
 80056e2:	4618      	mov	r0, r3
 80056e4:	3708      	adds	r7, #8
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd80      	pop	{r7, pc}

080056ea <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80056ea:	b590      	push	{r4, r7, lr}
 80056ec:	b08d      	sub	sp, #52	; 0x34
 80056ee:	af00      	add	r7, sp, #0
 80056f0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056f8:	6a3b      	ldr	r3, [r7, #32]
 80056fa:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4618      	mov	r0, r3
 8005702:	f003 fd9e 	bl	8009242 <USB_GetMode>
 8005706:	4603      	mov	r3, r0
 8005708:	2b00      	cmp	r3, #0
 800570a:	f040 84b7 	bne.w	800607c <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4618      	mov	r0, r3
 8005714:	f003 fd02 	bl	800911c <USB_ReadInterrupts>
 8005718:	4603      	mov	r3, r0
 800571a:	2b00      	cmp	r3, #0
 800571c:	f000 84ad 	beq.w	800607a <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8005720:	69fb      	ldr	r3, [r7, #28]
 8005722:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005726:	689b      	ldr	r3, [r3, #8]
 8005728:	0a1b      	lsrs	r3, r3, #8
 800572a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4618      	mov	r0, r3
 800573a:	f003 fcef 	bl	800911c <USB_ReadInterrupts>
 800573e:	4603      	mov	r3, r0
 8005740:	f003 0302 	and.w	r3, r3, #2
 8005744:	2b02      	cmp	r3, #2
 8005746:	d107      	bne.n	8005758 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	695a      	ldr	r2, [r3, #20]
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f002 0202 	and.w	r2, r2, #2
 8005756:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4618      	mov	r0, r3
 800575e:	f003 fcdd 	bl	800911c <USB_ReadInterrupts>
 8005762:	4603      	mov	r3, r0
 8005764:	f003 0310 	and.w	r3, r3, #16
 8005768:	2b10      	cmp	r3, #16
 800576a:	d161      	bne.n	8005830 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	699a      	ldr	r2, [r3, #24]
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f022 0210 	bic.w	r2, r2, #16
 800577a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800577c:	6a3b      	ldr	r3, [r7, #32]
 800577e:	6a1b      	ldr	r3, [r3, #32]
 8005780:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8005782:	69bb      	ldr	r3, [r7, #24]
 8005784:	f003 020f 	and.w	r2, r3, #15
 8005788:	4613      	mov	r3, r2
 800578a:	00db      	lsls	r3, r3, #3
 800578c:	4413      	add	r3, r2
 800578e:	009b      	lsls	r3, r3, #2
 8005790:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005794:	687a      	ldr	r2, [r7, #4]
 8005796:	4413      	add	r3, r2
 8005798:	3304      	adds	r3, #4
 800579a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800579c:	69bb      	ldr	r3, [r7, #24]
 800579e:	0c5b      	lsrs	r3, r3, #17
 80057a0:	f003 030f 	and.w	r3, r3, #15
 80057a4:	2b02      	cmp	r3, #2
 80057a6:	d124      	bne.n	80057f2 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80057a8:	69ba      	ldr	r2, [r7, #24]
 80057aa:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80057ae:	4013      	ands	r3, r2
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d035      	beq.n	8005820 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80057b8:	69bb      	ldr	r3, [r7, #24]
 80057ba:	091b      	lsrs	r3, r3, #4
 80057bc:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80057be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80057c2:	b29b      	uxth	r3, r3
 80057c4:	461a      	mov	r2, r3
 80057c6:	6a38      	ldr	r0, [r7, #32]
 80057c8:	f003 fb14 	bl	8008df4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	691a      	ldr	r2, [r3, #16]
 80057d0:	69bb      	ldr	r3, [r7, #24]
 80057d2:	091b      	lsrs	r3, r3, #4
 80057d4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80057d8:	441a      	add	r2, r3
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	6a1a      	ldr	r2, [r3, #32]
 80057e2:	69bb      	ldr	r3, [r7, #24]
 80057e4:	091b      	lsrs	r3, r3, #4
 80057e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80057ea:	441a      	add	r2, r3
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	621a      	str	r2, [r3, #32]
 80057f0:	e016      	b.n	8005820 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80057f2:	69bb      	ldr	r3, [r7, #24]
 80057f4:	0c5b      	lsrs	r3, r3, #17
 80057f6:	f003 030f 	and.w	r3, r3, #15
 80057fa:	2b06      	cmp	r3, #6
 80057fc:	d110      	bne.n	8005820 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005804:	2208      	movs	r2, #8
 8005806:	4619      	mov	r1, r3
 8005808:	6a38      	ldr	r0, [r7, #32]
 800580a:	f003 faf3 	bl	8008df4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800580e:	697b      	ldr	r3, [r7, #20]
 8005810:	6a1a      	ldr	r2, [r3, #32]
 8005812:	69bb      	ldr	r3, [r7, #24]
 8005814:	091b      	lsrs	r3, r3, #4
 8005816:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800581a:	441a      	add	r2, r3
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	699a      	ldr	r2, [r3, #24]
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f042 0210 	orr.w	r2, r2, #16
 800582e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4618      	mov	r0, r3
 8005836:	f003 fc71 	bl	800911c <USB_ReadInterrupts>
 800583a:	4603      	mov	r3, r0
 800583c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005840:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005844:	f040 80a7 	bne.w	8005996 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8005848:	2300      	movs	r3, #0
 800584a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4618      	mov	r0, r3
 8005852:	f003 fc76 	bl	8009142 <USB_ReadDevAllOutEpInterrupt>
 8005856:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8005858:	e099      	b.n	800598e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800585a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800585c:	f003 0301 	and.w	r3, r3, #1
 8005860:	2b00      	cmp	r3, #0
 8005862:	f000 808e 	beq.w	8005982 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800586c:	b2d2      	uxtb	r2, r2
 800586e:	4611      	mov	r1, r2
 8005870:	4618      	mov	r0, r3
 8005872:	f003 fc9a 	bl	80091aa <USB_ReadDevOutEPInterrupt>
 8005876:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005878:	693b      	ldr	r3, [r7, #16]
 800587a:	f003 0301 	and.w	r3, r3, #1
 800587e:	2b00      	cmp	r3, #0
 8005880:	d00c      	beq.n	800589c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005884:	015a      	lsls	r2, r3, #5
 8005886:	69fb      	ldr	r3, [r7, #28]
 8005888:	4413      	add	r3, r2
 800588a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800588e:	461a      	mov	r2, r3
 8005890:	2301      	movs	r3, #1
 8005892:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005894:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f000 fef0 	bl	800667c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	f003 0308 	and.w	r3, r3, #8
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d00c      	beq.n	80058c0 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80058a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a8:	015a      	lsls	r2, r3, #5
 80058aa:	69fb      	ldr	r3, [r7, #28]
 80058ac:	4413      	add	r3, r2
 80058ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058b2:	461a      	mov	r2, r3
 80058b4:	2308      	movs	r3, #8
 80058b6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80058b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	f000 ffc6 	bl	800684c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80058c0:	693b      	ldr	r3, [r7, #16]
 80058c2:	f003 0310 	and.w	r3, r3, #16
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d008      	beq.n	80058dc <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80058ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058cc:	015a      	lsls	r2, r3, #5
 80058ce:	69fb      	ldr	r3, [r7, #28]
 80058d0:	4413      	add	r3, r2
 80058d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058d6:	461a      	mov	r2, r3
 80058d8:	2310      	movs	r3, #16
 80058da:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80058dc:	693b      	ldr	r3, [r7, #16]
 80058de:	f003 0302 	and.w	r3, r3, #2
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d030      	beq.n	8005948 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80058e6:	6a3b      	ldr	r3, [r7, #32]
 80058e8:	695b      	ldr	r3, [r3, #20]
 80058ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058ee:	2b80      	cmp	r3, #128	; 0x80
 80058f0:	d109      	bne.n	8005906 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80058f2:	69fb      	ldr	r3, [r7, #28]
 80058f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	69fa      	ldr	r2, [r7, #28]
 80058fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005900:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005904:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8005906:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005908:	4613      	mov	r3, r2
 800590a:	00db      	lsls	r3, r3, #3
 800590c:	4413      	add	r3, r2
 800590e:	009b      	lsls	r3, r3, #2
 8005910:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005914:	687a      	ldr	r2, [r7, #4]
 8005916:	4413      	add	r3, r2
 8005918:	3304      	adds	r3, #4
 800591a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	78db      	ldrb	r3, [r3, #3]
 8005920:	2b01      	cmp	r3, #1
 8005922:	d108      	bne.n	8005936 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	2200      	movs	r2, #0
 8005928:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800592a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800592c:	b2db      	uxtb	r3, r3
 800592e:	4619      	mov	r1, r3
 8005930:	6878      	ldr	r0, [r7, #4]
 8005932:	f006 f97d 	bl	800bc30 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8005936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005938:	015a      	lsls	r2, r3, #5
 800593a:	69fb      	ldr	r3, [r7, #28]
 800593c:	4413      	add	r3, r2
 800593e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005942:	461a      	mov	r2, r3
 8005944:	2302      	movs	r3, #2
 8005946:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005948:	693b      	ldr	r3, [r7, #16]
 800594a:	f003 0320 	and.w	r3, r3, #32
 800594e:	2b00      	cmp	r3, #0
 8005950:	d008      	beq.n	8005964 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005954:	015a      	lsls	r2, r3, #5
 8005956:	69fb      	ldr	r3, [r7, #28]
 8005958:	4413      	add	r3, r2
 800595a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800595e:	461a      	mov	r2, r3
 8005960:	2320      	movs	r3, #32
 8005962:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005964:	693b      	ldr	r3, [r7, #16]
 8005966:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800596a:	2b00      	cmp	r3, #0
 800596c:	d009      	beq.n	8005982 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800596e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005970:	015a      	lsls	r2, r3, #5
 8005972:	69fb      	ldr	r3, [r7, #28]
 8005974:	4413      	add	r3, r2
 8005976:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800597a:	461a      	mov	r2, r3
 800597c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005980:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005984:	3301      	adds	r3, #1
 8005986:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800598a:	085b      	lsrs	r3, r3, #1
 800598c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800598e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005990:	2b00      	cmp	r3, #0
 8005992:	f47f af62 	bne.w	800585a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4618      	mov	r0, r3
 800599c:	f003 fbbe 	bl	800911c <USB_ReadInterrupts>
 80059a0:	4603      	mov	r3, r0
 80059a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80059a6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80059aa:	f040 80db 	bne.w	8005b64 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4618      	mov	r0, r3
 80059b4:	f003 fbdf 	bl	8009176 <USB_ReadDevAllInEpInterrupt>
 80059b8:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80059ba:	2300      	movs	r3, #0
 80059bc:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80059be:	e0cd      	b.n	8005b5c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80059c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059c2:	f003 0301 	and.w	r3, r3, #1
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	f000 80c2 	beq.w	8005b50 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059d2:	b2d2      	uxtb	r2, r2
 80059d4:	4611      	mov	r1, r2
 80059d6:	4618      	mov	r0, r3
 80059d8:	f003 fc05 	bl	80091e6 <USB_ReadDevInEPInterrupt>
 80059dc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80059de:	693b      	ldr	r3, [r7, #16]
 80059e0:	f003 0301 	and.w	r3, r3, #1
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d057      	beq.n	8005a98 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80059e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ea:	f003 030f 	and.w	r3, r3, #15
 80059ee:	2201      	movs	r2, #1
 80059f0:	fa02 f303 	lsl.w	r3, r2, r3
 80059f4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80059f6:	69fb      	ldr	r3, [r7, #28]
 80059f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	43db      	mvns	r3, r3
 8005a02:	69f9      	ldr	r1, [r7, #28]
 8005a04:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a08:	4013      	ands	r3, r2
 8005a0a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a0e:	015a      	lsls	r2, r3, #5
 8005a10:	69fb      	ldr	r3, [r7, #28]
 8005a12:	4413      	add	r3, r2
 8005a14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a18:	461a      	mov	r2, r3
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	691b      	ldr	r3, [r3, #16]
 8005a22:	2b01      	cmp	r3, #1
 8005a24:	d132      	bne.n	8005a8c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005a26:	6879      	ldr	r1, [r7, #4]
 8005a28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a2a:	4613      	mov	r3, r2
 8005a2c:	00db      	lsls	r3, r3, #3
 8005a2e:	4413      	add	r3, r2
 8005a30:	009b      	lsls	r3, r3, #2
 8005a32:	440b      	add	r3, r1
 8005a34:	334c      	adds	r3, #76	; 0x4c
 8005a36:	6819      	ldr	r1, [r3, #0]
 8005a38:	6878      	ldr	r0, [r7, #4]
 8005a3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a3c:	4613      	mov	r3, r2
 8005a3e:	00db      	lsls	r3, r3, #3
 8005a40:	4413      	add	r3, r2
 8005a42:	009b      	lsls	r3, r3, #2
 8005a44:	4403      	add	r3, r0
 8005a46:	3348      	adds	r3, #72	; 0x48
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4419      	add	r1, r3
 8005a4c:	6878      	ldr	r0, [r7, #4]
 8005a4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a50:	4613      	mov	r3, r2
 8005a52:	00db      	lsls	r3, r3, #3
 8005a54:	4413      	add	r3, r2
 8005a56:	009b      	lsls	r3, r3, #2
 8005a58:	4403      	add	r3, r0
 8005a5a:	334c      	adds	r3, #76	; 0x4c
 8005a5c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d113      	bne.n	8005a8c <HAL_PCD_IRQHandler+0x3a2>
 8005a64:	6879      	ldr	r1, [r7, #4]
 8005a66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a68:	4613      	mov	r3, r2
 8005a6a:	00db      	lsls	r3, r3, #3
 8005a6c:	4413      	add	r3, r2
 8005a6e:	009b      	lsls	r3, r3, #2
 8005a70:	440b      	add	r3, r1
 8005a72:	3354      	adds	r3, #84	; 0x54
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d108      	bne.n	8005a8c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6818      	ldr	r0, [r3, #0]
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005a84:	461a      	mov	r2, r3
 8005a86:	2101      	movs	r1, #1
 8005a88:	f003 fc0e 	bl	80092a8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a8e:	b2db      	uxtb	r3, r3
 8005a90:	4619      	mov	r1, r3
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	f006 f847 	bl	800bb26 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005a98:	693b      	ldr	r3, [r7, #16]
 8005a9a:	f003 0308 	and.w	r3, r3, #8
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d008      	beq.n	8005ab4 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa4:	015a      	lsls	r2, r3, #5
 8005aa6:	69fb      	ldr	r3, [r7, #28]
 8005aa8:	4413      	add	r3, r2
 8005aaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005aae:	461a      	mov	r2, r3
 8005ab0:	2308      	movs	r3, #8
 8005ab2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005ab4:	693b      	ldr	r3, [r7, #16]
 8005ab6:	f003 0310 	and.w	r3, r3, #16
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d008      	beq.n	8005ad0 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac0:	015a      	lsls	r2, r3, #5
 8005ac2:	69fb      	ldr	r3, [r7, #28]
 8005ac4:	4413      	add	r3, r2
 8005ac6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005aca:	461a      	mov	r2, r3
 8005acc:	2310      	movs	r3, #16
 8005ace:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005ad0:	693b      	ldr	r3, [r7, #16]
 8005ad2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d008      	beq.n	8005aec <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005adc:	015a      	lsls	r2, r3, #5
 8005ade:	69fb      	ldr	r3, [r7, #28]
 8005ae0:	4413      	add	r3, r2
 8005ae2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ae6:	461a      	mov	r2, r3
 8005ae8:	2340      	movs	r3, #64	; 0x40
 8005aea:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005aec:	693b      	ldr	r3, [r7, #16]
 8005aee:	f003 0302 	and.w	r3, r3, #2
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d023      	beq.n	8005b3e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8005af6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005af8:	6a38      	ldr	r0, [r7, #32]
 8005afa:	f002 fae1 	bl	80080c0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8005afe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b00:	4613      	mov	r3, r2
 8005b02:	00db      	lsls	r3, r3, #3
 8005b04:	4413      	add	r3, r2
 8005b06:	009b      	lsls	r3, r3, #2
 8005b08:	3338      	adds	r3, #56	; 0x38
 8005b0a:	687a      	ldr	r2, [r7, #4]
 8005b0c:	4413      	add	r3, r2
 8005b0e:	3304      	adds	r3, #4
 8005b10:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	78db      	ldrb	r3, [r3, #3]
 8005b16:	2b01      	cmp	r3, #1
 8005b18:	d108      	bne.n	8005b2c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b22:	b2db      	uxtb	r3, r3
 8005b24:	4619      	mov	r1, r3
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f006 f894 	bl	800bc54 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b2e:	015a      	lsls	r2, r3, #5
 8005b30:	69fb      	ldr	r3, [r7, #28]
 8005b32:	4413      	add	r3, r2
 8005b34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b38:	461a      	mov	r2, r3
 8005b3a:	2302      	movs	r3, #2
 8005b3c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005b3e:	693b      	ldr	r3, [r7, #16]
 8005b40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d003      	beq.n	8005b50 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005b48:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f000 fd08 	bl	8006560 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b52:	3301      	adds	r3, #1
 8005b54:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b58:	085b      	lsrs	r3, r3, #1
 8005b5a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	f47f af2e 	bne.w	80059c0 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4618      	mov	r0, r3
 8005b6a:	f003 fad7 	bl	800911c <USB_ReadInterrupts>
 8005b6e:	4603      	mov	r3, r0
 8005b70:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b74:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b78:	d122      	bne.n	8005bc0 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005b7a:	69fb      	ldr	r3, [r7, #28]
 8005b7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	69fa      	ldr	r2, [r7, #28]
 8005b84:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b88:	f023 0301 	bic.w	r3, r3, #1
 8005b8c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8005b94:	2b01      	cmp	r3, #1
 8005b96:	d108      	bne.n	8005baa <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005ba0:	2100      	movs	r1, #0
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	f006 fa0e 	bl	800bfc4 <HAL_PCDEx_LPM_Callback>
 8005ba8:	e002      	b.n	8005bb0 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	f006 f832 	bl	800bc14 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	695a      	ldr	r2, [r3, #20]
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005bbe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	f003 faa9 	bl	800911c <USB_ReadInterrupts>
 8005bca:	4603      	mov	r3, r0
 8005bcc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005bd0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005bd4:	d112      	bne.n	8005bfc <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005bd6:	69fb      	ldr	r3, [r7, #28]
 8005bd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bdc:	689b      	ldr	r3, [r3, #8]
 8005bde:	f003 0301 	and.w	r3, r3, #1
 8005be2:	2b01      	cmp	r3, #1
 8005be4:	d102      	bne.n	8005bec <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005be6:	6878      	ldr	r0, [r7, #4]
 8005be8:	f005 ffee 	bl	800bbc8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	695a      	ldr	r2, [r3, #20]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8005bfa:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	4618      	mov	r0, r3
 8005c02:	f003 fa8b 	bl	800911c <USB_ReadInterrupts>
 8005c06:	4603      	mov	r3, r0
 8005c08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c0c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005c10:	d121      	bne.n	8005c56 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	695a      	ldr	r2, [r3, #20]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8005c20:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d111      	bne.n	8005c50 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2201      	movs	r2, #1
 8005c30:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c3a:	089b      	lsrs	r3, r3, #2
 8005c3c:	f003 020f 	and.w	r2, r3, #15
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8005c46:	2101      	movs	r1, #1
 8005c48:	6878      	ldr	r0, [r7, #4]
 8005c4a:	f006 f9bb 	bl	800bfc4 <HAL_PCDEx_LPM_Callback>
 8005c4e:	e002      	b.n	8005c56 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005c50:	6878      	ldr	r0, [r7, #4]
 8005c52:	f005 ffb9 	bl	800bbc8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	f003 fa5e 	bl	800911c <USB_ReadInterrupts>
 8005c60:	4603      	mov	r3, r0
 8005c62:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005c66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c6a:	f040 80b7 	bne.w	8005ddc <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005c6e:	69fb      	ldr	r3, [r7, #28]
 8005c70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	69fa      	ldr	r2, [r7, #28]
 8005c78:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c7c:	f023 0301 	bic.w	r3, r3, #1
 8005c80:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	2110      	movs	r1, #16
 8005c88:	4618      	mov	r0, r3
 8005c8a:	f002 fa19 	bl	80080c0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005c8e:	2300      	movs	r3, #0
 8005c90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c92:	e046      	b.n	8005d22 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005c94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c96:	015a      	lsls	r2, r3, #5
 8005c98:	69fb      	ldr	r3, [r7, #28]
 8005c9a:	4413      	add	r3, r2
 8005c9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ca0:	461a      	mov	r2, r3
 8005ca2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005ca6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005caa:	015a      	lsls	r2, r3, #5
 8005cac:	69fb      	ldr	r3, [r7, #28]
 8005cae:	4413      	add	r3, r2
 8005cb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005cb8:	0151      	lsls	r1, r2, #5
 8005cba:	69fa      	ldr	r2, [r7, #28]
 8005cbc:	440a      	add	r2, r1
 8005cbe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cc2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005cc6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005cc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cca:	015a      	lsls	r2, r3, #5
 8005ccc:	69fb      	ldr	r3, [r7, #28]
 8005cce:	4413      	add	r3, r2
 8005cd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cd4:	461a      	mov	r2, r3
 8005cd6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005cda:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cde:	015a      	lsls	r2, r3, #5
 8005ce0:	69fb      	ldr	r3, [r7, #28]
 8005ce2:	4413      	add	r3, r2
 8005ce4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005cec:	0151      	lsls	r1, r2, #5
 8005cee:	69fa      	ldr	r2, [r7, #28]
 8005cf0:	440a      	add	r2, r1
 8005cf2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cf6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005cfa:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cfe:	015a      	lsls	r2, r3, #5
 8005d00:	69fb      	ldr	r3, [r7, #28]
 8005d02:	4413      	add	r3, r2
 8005d04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d0c:	0151      	lsls	r1, r2, #5
 8005d0e:	69fa      	ldr	r2, [r7, #28]
 8005d10:	440a      	add	r2, r1
 8005d12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d16:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005d1a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d1e:	3301      	adds	r3, #1
 8005d20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	685b      	ldr	r3, [r3, #4]
 8005d26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d28:	429a      	cmp	r2, r3
 8005d2a:	d3b3      	bcc.n	8005c94 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005d2c:	69fb      	ldr	r3, [r7, #28]
 8005d2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d32:	69db      	ldr	r3, [r3, #28]
 8005d34:	69fa      	ldr	r2, [r7, #28]
 8005d36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d3a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8005d3e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d016      	beq.n	8005d76 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005d48:	69fb      	ldr	r3, [r7, #28]
 8005d4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d52:	69fa      	ldr	r2, [r7, #28]
 8005d54:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d58:	f043 030b 	orr.w	r3, r3, #11
 8005d5c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005d60:	69fb      	ldr	r3, [r7, #28]
 8005d62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d68:	69fa      	ldr	r2, [r7, #28]
 8005d6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d6e:	f043 030b 	orr.w	r3, r3, #11
 8005d72:	6453      	str	r3, [r2, #68]	; 0x44
 8005d74:	e015      	b.n	8005da2 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005d76:	69fb      	ldr	r3, [r7, #28]
 8005d78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d7c:	695a      	ldr	r2, [r3, #20]
 8005d7e:	69fb      	ldr	r3, [r7, #28]
 8005d80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d84:	4619      	mov	r1, r3
 8005d86:	f242 032b 	movw	r3, #8235	; 0x202b
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005d8e:	69fb      	ldr	r3, [r7, #28]
 8005d90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d94:	691b      	ldr	r3, [r3, #16]
 8005d96:	69fa      	ldr	r2, [r7, #28]
 8005d98:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d9c:	f043 030b 	orr.w	r3, r3, #11
 8005da0:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005da2:	69fb      	ldr	r3, [r7, #28]
 8005da4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	69fa      	ldr	r2, [r7, #28]
 8005dac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005db0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005db4:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6818      	ldr	r0, [r3, #0]
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	691b      	ldr	r3, [r3, #16]
 8005dbe:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005dc6:	461a      	mov	r2, r3
 8005dc8:	f003 fa6e 	bl	80092a8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	695a      	ldr	r2, [r3, #20]
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005dda:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4618      	mov	r0, r3
 8005de2:	f003 f99b 	bl	800911c <USB_ReadInterrupts>
 8005de6:	4603      	mov	r3, r0
 8005de8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005dec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005df0:	d124      	bne.n	8005e3c <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4618      	mov	r0, r3
 8005df8:	f003 fa32 	bl	8009260 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4618      	mov	r0, r3
 8005e02:	f002 f9da 	bl	80081ba <USB_GetDevSpeed>
 8005e06:	4603      	mov	r3, r0
 8005e08:	461a      	mov	r2, r3
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681c      	ldr	r4, [r3, #0]
 8005e12:	f001 fa93 	bl	800733c <HAL_RCC_GetHCLKFreq>
 8005e16:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005e1c:	b2db      	uxtb	r3, r3
 8005e1e:	461a      	mov	r2, r3
 8005e20:	4620      	mov	r0, r4
 8005e22:	f001 fedf 	bl	8007be4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	f005 fea5 	bl	800bb76 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	695a      	ldr	r2, [r3, #20]
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8005e3a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4618      	mov	r0, r3
 8005e42:	f003 f96b 	bl	800911c <USB_ReadInterrupts>
 8005e46:	4603      	mov	r3, r0
 8005e48:	f003 0308 	and.w	r3, r3, #8
 8005e4c:	2b08      	cmp	r3, #8
 8005e4e:	d10a      	bne.n	8005e66 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005e50:	6878      	ldr	r0, [r7, #4]
 8005e52:	f005 fe82 	bl	800bb5a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	695a      	ldr	r2, [r3, #20]
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f002 0208 	and.w	r2, r2, #8
 8005e64:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	f003 f956 	bl	800911c <USB_ReadInterrupts>
 8005e70:	4603      	mov	r3, r0
 8005e72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e76:	2b80      	cmp	r3, #128	; 0x80
 8005e78:	d122      	bne.n	8005ec0 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8005e7a:	6a3b      	ldr	r3, [r7, #32]
 8005e7c:	699b      	ldr	r3, [r3, #24]
 8005e7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005e82:	6a3b      	ldr	r3, [r7, #32]
 8005e84:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005e86:	2301      	movs	r3, #1
 8005e88:	627b      	str	r3, [r7, #36]	; 0x24
 8005e8a:	e014      	b.n	8005eb6 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8005e8c:	6879      	ldr	r1, [r7, #4]
 8005e8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e90:	4613      	mov	r3, r2
 8005e92:	00db      	lsls	r3, r3, #3
 8005e94:	4413      	add	r3, r2
 8005e96:	009b      	lsls	r3, r3, #2
 8005e98:	440b      	add	r3, r1
 8005e9a:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8005e9e:	781b      	ldrb	r3, [r3, #0]
 8005ea0:	2b01      	cmp	r3, #1
 8005ea2:	d105      	bne.n	8005eb0 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8005ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea6:	b2db      	uxtb	r3, r3
 8005ea8:	4619      	mov	r1, r3
 8005eaa:	6878      	ldr	r0, [r7, #4]
 8005eac:	f000 fb27 	bl	80064fe <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb2:	3301      	adds	r3, #1
 8005eb4:	627b      	str	r3, [r7, #36]	; 0x24
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	685b      	ldr	r3, [r3, #4]
 8005eba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ebc:	429a      	cmp	r2, r3
 8005ebe:	d3e5      	bcc.n	8005e8c <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	f003 f929 	bl	800911c <USB_ReadInterrupts>
 8005eca:	4603      	mov	r3, r0
 8005ecc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005ed0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ed4:	d13b      	bne.n	8005f4e <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	627b      	str	r3, [r7, #36]	; 0x24
 8005eda:	e02b      	b.n	8005f34 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8005edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ede:	015a      	lsls	r2, r3, #5
 8005ee0:	69fb      	ldr	r3, [r7, #28]
 8005ee2:	4413      	add	r3, r2
 8005ee4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005eec:	6879      	ldr	r1, [r7, #4]
 8005eee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ef0:	4613      	mov	r3, r2
 8005ef2:	00db      	lsls	r3, r3, #3
 8005ef4:	4413      	add	r3, r2
 8005ef6:	009b      	lsls	r3, r3, #2
 8005ef8:	440b      	add	r3, r1
 8005efa:	3340      	adds	r3, #64	; 0x40
 8005efc:	781b      	ldrb	r3, [r3, #0]
 8005efe:	2b01      	cmp	r3, #1
 8005f00:	d115      	bne.n	8005f2e <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8005f02:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	da12      	bge.n	8005f2e <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005f08:	6879      	ldr	r1, [r7, #4]
 8005f0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f0c:	4613      	mov	r3, r2
 8005f0e:	00db      	lsls	r3, r3, #3
 8005f10:	4413      	add	r3, r2
 8005f12:	009b      	lsls	r3, r3, #2
 8005f14:	440b      	add	r3, r1
 8005f16:	333f      	adds	r3, #63	; 0x3f
 8005f18:	2201      	movs	r2, #1
 8005f1a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8005f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f1e:	b2db      	uxtb	r3, r3
 8005f20:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005f24:	b2db      	uxtb	r3, r3
 8005f26:	4619      	mov	r1, r3
 8005f28:	6878      	ldr	r0, [r7, #4]
 8005f2a:	f000 fae8 	bl	80064fe <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f30:	3301      	adds	r3, #1
 8005f32:	627b      	str	r3, [r7, #36]	; 0x24
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f3a:	429a      	cmp	r2, r3
 8005f3c:	d3ce      	bcc.n	8005edc <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	695a      	ldr	r2, [r3, #20]
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8005f4c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4618      	mov	r0, r3
 8005f54:	f003 f8e2 	bl	800911c <USB_ReadInterrupts>
 8005f58:	4603      	mov	r3, r0
 8005f5a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005f5e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005f62:	d155      	bne.n	8006010 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005f64:	2301      	movs	r3, #1
 8005f66:	627b      	str	r3, [r7, #36]	; 0x24
 8005f68:	e045      	b.n	8005ff6 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8005f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f6c:	015a      	lsls	r2, r3, #5
 8005f6e:	69fb      	ldr	r3, [r7, #28]
 8005f70:	4413      	add	r3, r2
 8005f72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005f7a:	6879      	ldr	r1, [r7, #4]
 8005f7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f7e:	4613      	mov	r3, r2
 8005f80:	00db      	lsls	r3, r3, #3
 8005f82:	4413      	add	r3, r2
 8005f84:	009b      	lsls	r3, r3, #2
 8005f86:	440b      	add	r3, r1
 8005f88:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005f8c:	781b      	ldrb	r3, [r3, #0]
 8005f8e:	2b01      	cmp	r3, #1
 8005f90:	d12e      	bne.n	8005ff0 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005f92:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	da2b      	bge.n	8005ff0 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8005f98:	69bb      	ldr	r3, [r7, #24]
 8005f9a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8005fa4:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005fa8:	429a      	cmp	r2, r3
 8005faa:	d121      	bne.n	8005ff0 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8005fac:	6879      	ldr	r1, [r7, #4]
 8005fae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fb0:	4613      	mov	r3, r2
 8005fb2:	00db      	lsls	r3, r3, #3
 8005fb4:	4413      	add	r3, r2
 8005fb6:	009b      	lsls	r3, r3, #2
 8005fb8:	440b      	add	r3, r1
 8005fba:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005fc2:	6a3b      	ldr	r3, [r7, #32]
 8005fc4:	699b      	ldr	r3, [r3, #24]
 8005fc6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005fca:	6a3b      	ldr	r3, [r7, #32]
 8005fcc:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8005fce:	6a3b      	ldr	r3, [r7, #32]
 8005fd0:	695b      	ldr	r3, [r3, #20]
 8005fd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d10a      	bne.n	8005ff0 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8005fda:	69fb      	ldr	r3, [r7, #28]
 8005fdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fe0:	685b      	ldr	r3, [r3, #4]
 8005fe2:	69fa      	ldr	r2, [r7, #28]
 8005fe4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005fe8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005fec:	6053      	str	r3, [r2, #4]
            break;
 8005fee:	e007      	b.n	8006000 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff2:	3301      	adds	r3, #1
 8005ff4:	627b      	str	r3, [r7, #36]	; 0x24
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	685b      	ldr	r3, [r3, #4]
 8005ffa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ffc:	429a      	cmp	r2, r3
 8005ffe:	d3b4      	bcc.n	8005f6a <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	695a      	ldr	r2, [r3, #20]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800600e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4618      	mov	r0, r3
 8006016:	f003 f881 	bl	800911c <USB_ReadInterrupts>
 800601a:	4603      	mov	r3, r0
 800601c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006020:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006024:	d10a      	bne.n	800603c <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f005 fe26 	bl	800bc78 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	695a      	ldr	r2, [r3, #20]
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800603a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4618      	mov	r0, r3
 8006042:	f003 f86b 	bl	800911c <USB_ReadInterrupts>
 8006046:	4603      	mov	r3, r0
 8006048:	f003 0304 	and.w	r3, r3, #4
 800604c:	2b04      	cmp	r3, #4
 800604e:	d115      	bne.n	800607c <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	685b      	ldr	r3, [r3, #4]
 8006056:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8006058:	69bb      	ldr	r3, [r7, #24]
 800605a:	f003 0304 	and.w	r3, r3, #4
 800605e:	2b00      	cmp	r3, #0
 8006060:	d002      	beq.n	8006068 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8006062:	6878      	ldr	r0, [r7, #4]
 8006064:	f005 fe16 	bl	800bc94 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	6859      	ldr	r1, [r3, #4]
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	69ba      	ldr	r2, [r7, #24]
 8006074:	430a      	orrs	r2, r1
 8006076:	605a      	str	r2, [r3, #4]
 8006078:	e000      	b.n	800607c <HAL_PCD_IRQHandler+0x992>
      return;
 800607a:	bf00      	nop
    }
  }
}
 800607c:	3734      	adds	r7, #52	; 0x34
 800607e:	46bd      	mov	sp, r7
 8006080:	bd90      	pop	{r4, r7, pc}

08006082 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006082:	b580      	push	{r7, lr}
 8006084:	b082      	sub	sp, #8
 8006086:	af00      	add	r7, sp, #0
 8006088:	6078      	str	r0, [r7, #4]
 800608a:	460b      	mov	r3, r1
 800608c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006094:	2b01      	cmp	r3, #1
 8006096:	d101      	bne.n	800609c <HAL_PCD_SetAddress+0x1a>
 8006098:	2302      	movs	r3, #2
 800609a:	e013      	b.n	80060c4 <HAL_PCD_SetAddress+0x42>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2201      	movs	r2, #1
 80060a0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	78fa      	ldrb	r2, [r7, #3]
 80060a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	78fa      	ldrb	r2, [r7, #3]
 80060b2:	4611      	mov	r1, r2
 80060b4:	4618      	mov	r0, r3
 80060b6:	f002 ffc9 	bl	800904c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2200      	movs	r2, #0
 80060be:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80060c2:	2300      	movs	r3, #0
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	3708      	adds	r7, #8
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bd80      	pop	{r7, pc}

080060cc <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b084      	sub	sp, #16
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
 80060d4:	4608      	mov	r0, r1
 80060d6:	4611      	mov	r1, r2
 80060d8:	461a      	mov	r2, r3
 80060da:	4603      	mov	r3, r0
 80060dc:	70fb      	strb	r3, [r7, #3]
 80060de:	460b      	mov	r3, r1
 80060e0:	803b      	strh	r3, [r7, #0]
 80060e2:	4613      	mov	r3, r2
 80060e4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80060e6:	2300      	movs	r3, #0
 80060e8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80060ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	da0f      	bge.n	8006112 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80060f2:	78fb      	ldrb	r3, [r7, #3]
 80060f4:	f003 020f 	and.w	r2, r3, #15
 80060f8:	4613      	mov	r3, r2
 80060fa:	00db      	lsls	r3, r3, #3
 80060fc:	4413      	add	r3, r2
 80060fe:	009b      	lsls	r3, r3, #2
 8006100:	3338      	adds	r3, #56	; 0x38
 8006102:	687a      	ldr	r2, [r7, #4]
 8006104:	4413      	add	r3, r2
 8006106:	3304      	adds	r3, #4
 8006108:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	2201      	movs	r2, #1
 800610e:	705a      	strb	r2, [r3, #1]
 8006110:	e00f      	b.n	8006132 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006112:	78fb      	ldrb	r3, [r7, #3]
 8006114:	f003 020f 	and.w	r2, r3, #15
 8006118:	4613      	mov	r3, r2
 800611a:	00db      	lsls	r3, r3, #3
 800611c:	4413      	add	r3, r2
 800611e:	009b      	lsls	r3, r3, #2
 8006120:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006124:	687a      	ldr	r2, [r7, #4]
 8006126:	4413      	add	r3, r2
 8006128:	3304      	adds	r3, #4
 800612a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	2200      	movs	r2, #0
 8006130:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006132:	78fb      	ldrb	r3, [r7, #3]
 8006134:	f003 030f 	and.w	r3, r3, #15
 8006138:	b2da      	uxtb	r2, r3
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800613e:	883a      	ldrh	r2, [r7, #0]
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	78ba      	ldrb	r2, [r7, #2]
 8006148:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	785b      	ldrb	r3, [r3, #1]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d004      	beq.n	800615c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	781b      	ldrb	r3, [r3, #0]
 8006156:	b29a      	uxth	r2, r3
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800615c:	78bb      	ldrb	r3, [r7, #2]
 800615e:	2b02      	cmp	r3, #2
 8006160:	d102      	bne.n	8006168 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	2200      	movs	r2, #0
 8006166:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800616e:	2b01      	cmp	r3, #1
 8006170:	d101      	bne.n	8006176 <HAL_PCD_EP_Open+0xaa>
 8006172:	2302      	movs	r3, #2
 8006174:	e00e      	b.n	8006194 <HAL_PCD_EP_Open+0xc8>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2201      	movs	r2, #1
 800617a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	68f9      	ldr	r1, [r7, #12]
 8006184:	4618      	mov	r0, r3
 8006186:	f002 f83d 	bl	8008204 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2200      	movs	r2, #0
 800618e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8006192:	7afb      	ldrb	r3, [r7, #11]
}
 8006194:	4618      	mov	r0, r3
 8006196:	3710      	adds	r7, #16
 8006198:	46bd      	mov	sp, r7
 800619a:	bd80      	pop	{r7, pc}

0800619c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b084      	sub	sp, #16
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
 80061a4:	460b      	mov	r3, r1
 80061a6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80061a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	da0f      	bge.n	80061d0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80061b0:	78fb      	ldrb	r3, [r7, #3]
 80061b2:	f003 020f 	and.w	r2, r3, #15
 80061b6:	4613      	mov	r3, r2
 80061b8:	00db      	lsls	r3, r3, #3
 80061ba:	4413      	add	r3, r2
 80061bc:	009b      	lsls	r3, r3, #2
 80061be:	3338      	adds	r3, #56	; 0x38
 80061c0:	687a      	ldr	r2, [r7, #4]
 80061c2:	4413      	add	r3, r2
 80061c4:	3304      	adds	r3, #4
 80061c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	2201      	movs	r2, #1
 80061cc:	705a      	strb	r2, [r3, #1]
 80061ce:	e00f      	b.n	80061f0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80061d0:	78fb      	ldrb	r3, [r7, #3]
 80061d2:	f003 020f 	and.w	r2, r3, #15
 80061d6:	4613      	mov	r3, r2
 80061d8:	00db      	lsls	r3, r3, #3
 80061da:	4413      	add	r3, r2
 80061dc:	009b      	lsls	r3, r3, #2
 80061de:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80061e2:	687a      	ldr	r2, [r7, #4]
 80061e4:	4413      	add	r3, r2
 80061e6:	3304      	adds	r3, #4
 80061e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	2200      	movs	r2, #0
 80061ee:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80061f0:	78fb      	ldrb	r3, [r7, #3]
 80061f2:	f003 030f 	and.w	r3, r3, #15
 80061f6:	b2da      	uxtb	r2, r3
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006202:	2b01      	cmp	r3, #1
 8006204:	d101      	bne.n	800620a <HAL_PCD_EP_Close+0x6e>
 8006206:	2302      	movs	r3, #2
 8006208:	e00e      	b.n	8006228 <HAL_PCD_EP_Close+0x8c>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2201      	movs	r2, #1
 800620e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	68f9      	ldr	r1, [r7, #12]
 8006218:	4618      	mov	r0, r3
 800621a:	f002 f87b 	bl	8008314 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2200      	movs	r2, #0
 8006222:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8006226:	2300      	movs	r3, #0
}
 8006228:	4618      	mov	r0, r3
 800622a:	3710      	adds	r7, #16
 800622c:	46bd      	mov	sp, r7
 800622e:	bd80      	pop	{r7, pc}

08006230 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b086      	sub	sp, #24
 8006234:	af00      	add	r7, sp, #0
 8006236:	60f8      	str	r0, [r7, #12]
 8006238:	607a      	str	r2, [r7, #4]
 800623a:	603b      	str	r3, [r7, #0]
 800623c:	460b      	mov	r3, r1
 800623e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006240:	7afb      	ldrb	r3, [r7, #11]
 8006242:	f003 020f 	and.w	r2, r3, #15
 8006246:	4613      	mov	r3, r2
 8006248:	00db      	lsls	r3, r3, #3
 800624a:	4413      	add	r3, r2
 800624c:	009b      	lsls	r3, r3, #2
 800624e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006252:	68fa      	ldr	r2, [r7, #12]
 8006254:	4413      	add	r3, r2
 8006256:	3304      	adds	r3, #4
 8006258:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800625a:	697b      	ldr	r3, [r7, #20]
 800625c:	687a      	ldr	r2, [r7, #4]
 800625e:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8006260:	697b      	ldr	r3, [r7, #20]
 8006262:	683a      	ldr	r2, [r7, #0]
 8006264:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	2200      	movs	r2, #0
 800626a:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800626c:	697b      	ldr	r3, [r7, #20]
 800626e:	2200      	movs	r2, #0
 8006270:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006272:	7afb      	ldrb	r3, [r7, #11]
 8006274:	f003 030f 	and.w	r3, r3, #15
 8006278:	b2da      	uxtb	r2, r3
 800627a:	697b      	ldr	r3, [r7, #20]
 800627c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	691b      	ldr	r3, [r3, #16]
 8006282:	2b01      	cmp	r3, #1
 8006284:	d102      	bne.n	800628c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006286:	687a      	ldr	r2, [r7, #4]
 8006288:	697b      	ldr	r3, [r7, #20]
 800628a:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800628c:	7afb      	ldrb	r3, [r7, #11]
 800628e:	f003 030f 	and.w	r3, r3, #15
 8006292:	2b00      	cmp	r3, #0
 8006294:	d109      	bne.n	80062aa <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	6818      	ldr	r0, [r3, #0]
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	691b      	ldr	r3, [r3, #16]
 800629e:	b2db      	uxtb	r3, r3
 80062a0:	461a      	mov	r2, r3
 80062a2:	6979      	ldr	r1, [r7, #20]
 80062a4:	f002 fb62 	bl	800896c <USB_EP0StartXfer>
 80062a8:	e008      	b.n	80062bc <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	6818      	ldr	r0, [r3, #0]
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	691b      	ldr	r3, [r3, #16]
 80062b2:	b2db      	uxtb	r3, r3
 80062b4:	461a      	mov	r2, r3
 80062b6:	6979      	ldr	r1, [r7, #20]
 80062b8:	f002 f908 	bl	80084cc <USB_EPStartXfer>
  }

  return HAL_OK;
 80062bc:	2300      	movs	r3, #0
}
 80062be:	4618      	mov	r0, r3
 80062c0:	3718      	adds	r7, #24
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd80      	pop	{r7, pc}

080062c6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80062c6:	b480      	push	{r7}
 80062c8:	b083      	sub	sp, #12
 80062ca:	af00      	add	r7, sp, #0
 80062cc:	6078      	str	r0, [r7, #4]
 80062ce:	460b      	mov	r3, r1
 80062d0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80062d2:	78fb      	ldrb	r3, [r7, #3]
 80062d4:	f003 020f 	and.w	r2, r3, #15
 80062d8:	6879      	ldr	r1, [r7, #4]
 80062da:	4613      	mov	r3, r2
 80062dc:	00db      	lsls	r3, r3, #3
 80062de:	4413      	add	r3, r2
 80062e0:	009b      	lsls	r3, r3, #2
 80062e2:	440b      	add	r3, r1
 80062e4:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80062e8:	681b      	ldr	r3, [r3, #0]
}
 80062ea:	4618      	mov	r0, r3
 80062ec:	370c      	adds	r7, #12
 80062ee:	46bd      	mov	sp, r7
 80062f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f4:	4770      	bx	lr

080062f6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80062f6:	b580      	push	{r7, lr}
 80062f8:	b086      	sub	sp, #24
 80062fa:	af00      	add	r7, sp, #0
 80062fc:	60f8      	str	r0, [r7, #12]
 80062fe:	607a      	str	r2, [r7, #4]
 8006300:	603b      	str	r3, [r7, #0]
 8006302:	460b      	mov	r3, r1
 8006304:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006306:	7afb      	ldrb	r3, [r7, #11]
 8006308:	f003 020f 	and.w	r2, r3, #15
 800630c:	4613      	mov	r3, r2
 800630e:	00db      	lsls	r3, r3, #3
 8006310:	4413      	add	r3, r2
 8006312:	009b      	lsls	r3, r3, #2
 8006314:	3338      	adds	r3, #56	; 0x38
 8006316:	68fa      	ldr	r2, [r7, #12]
 8006318:	4413      	add	r3, r2
 800631a:	3304      	adds	r3, #4
 800631c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800631e:	697b      	ldr	r3, [r7, #20]
 8006320:	687a      	ldr	r2, [r7, #4]
 8006322:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8006324:	697b      	ldr	r3, [r7, #20]
 8006326:	683a      	ldr	r2, [r7, #0]
 8006328:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800632a:	697b      	ldr	r3, [r7, #20]
 800632c:	2200      	movs	r2, #0
 800632e:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8006330:	697b      	ldr	r3, [r7, #20]
 8006332:	2201      	movs	r2, #1
 8006334:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006336:	7afb      	ldrb	r3, [r7, #11]
 8006338:	f003 030f 	and.w	r3, r3, #15
 800633c:	b2da      	uxtb	r2, r3
 800633e:	697b      	ldr	r3, [r7, #20]
 8006340:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	691b      	ldr	r3, [r3, #16]
 8006346:	2b01      	cmp	r3, #1
 8006348:	d102      	bne.n	8006350 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800634a:	687a      	ldr	r2, [r7, #4]
 800634c:	697b      	ldr	r3, [r7, #20]
 800634e:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006350:	7afb      	ldrb	r3, [r7, #11]
 8006352:	f003 030f 	and.w	r3, r3, #15
 8006356:	2b00      	cmp	r3, #0
 8006358:	d109      	bne.n	800636e <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	6818      	ldr	r0, [r3, #0]
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	691b      	ldr	r3, [r3, #16]
 8006362:	b2db      	uxtb	r3, r3
 8006364:	461a      	mov	r2, r3
 8006366:	6979      	ldr	r1, [r7, #20]
 8006368:	f002 fb00 	bl	800896c <USB_EP0StartXfer>
 800636c:	e008      	b.n	8006380 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	6818      	ldr	r0, [r3, #0]
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	691b      	ldr	r3, [r3, #16]
 8006376:	b2db      	uxtb	r3, r3
 8006378:	461a      	mov	r2, r3
 800637a:	6979      	ldr	r1, [r7, #20]
 800637c:	f002 f8a6 	bl	80084cc <USB_EPStartXfer>
  }

  return HAL_OK;
 8006380:	2300      	movs	r3, #0
}
 8006382:	4618      	mov	r0, r3
 8006384:	3718      	adds	r7, #24
 8006386:	46bd      	mov	sp, r7
 8006388:	bd80      	pop	{r7, pc}

0800638a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800638a:	b580      	push	{r7, lr}
 800638c:	b084      	sub	sp, #16
 800638e:	af00      	add	r7, sp, #0
 8006390:	6078      	str	r0, [r7, #4]
 8006392:	460b      	mov	r3, r1
 8006394:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006396:	78fb      	ldrb	r3, [r7, #3]
 8006398:	f003 020f 	and.w	r2, r3, #15
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	685b      	ldr	r3, [r3, #4]
 80063a0:	429a      	cmp	r2, r3
 80063a2:	d901      	bls.n	80063a8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80063a4:	2301      	movs	r3, #1
 80063a6:	e050      	b.n	800644a <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80063a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	da0f      	bge.n	80063d0 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80063b0:	78fb      	ldrb	r3, [r7, #3]
 80063b2:	f003 020f 	and.w	r2, r3, #15
 80063b6:	4613      	mov	r3, r2
 80063b8:	00db      	lsls	r3, r3, #3
 80063ba:	4413      	add	r3, r2
 80063bc:	009b      	lsls	r3, r3, #2
 80063be:	3338      	adds	r3, #56	; 0x38
 80063c0:	687a      	ldr	r2, [r7, #4]
 80063c2:	4413      	add	r3, r2
 80063c4:	3304      	adds	r3, #4
 80063c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	2201      	movs	r2, #1
 80063cc:	705a      	strb	r2, [r3, #1]
 80063ce:	e00d      	b.n	80063ec <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80063d0:	78fa      	ldrb	r2, [r7, #3]
 80063d2:	4613      	mov	r3, r2
 80063d4:	00db      	lsls	r3, r3, #3
 80063d6:	4413      	add	r3, r2
 80063d8:	009b      	lsls	r3, r3, #2
 80063da:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80063de:	687a      	ldr	r2, [r7, #4]
 80063e0:	4413      	add	r3, r2
 80063e2:	3304      	adds	r3, #4
 80063e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	2200      	movs	r2, #0
 80063ea:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	2201      	movs	r2, #1
 80063f0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80063f2:	78fb      	ldrb	r3, [r7, #3]
 80063f4:	f003 030f 	and.w	r3, r3, #15
 80063f8:	b2da      	uxtb	r2, r3
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006404:	2b01      	cmp	r3, #1
 8006406:	d101      	bne.n	800640c <HAL_PCD_EP_SetStall+0x82>
 8006408:	2302      	movs	r3, #2
 800640a:	e01e      	b.n	800644a <HAL_PCD_EP_SetStall+0xc0>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2201      	movs	r2, #1
 8006410:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	68f9      	ldr	r1, [r7, #12]
 800641a:	4618      	mov	r0, r3
 800641c:	f002 fd42 	bl	8008ea4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006420:	78fb      	ldrb	r3, [r7, #3]
 8006422:	f003 030f 	and.w	r3, r3, #15
 8006426:	2b00      	cmp	r3, #0
 8006428:	d10a      	bne.n	8006440 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6818      	ldr	r0, [r3, #0]
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	691b      	ldr	r3, [r3, #16]
 8006432:	b2d9      	uxtb	r1, r3
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800643a:	461a      	mov	r2, r3
 800643c:	f002 ff34 	bl	80092a8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2200      	movs	r2, #0
 8006444:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006448:	2300      	movs	r3, #0
}
 800644a:	4618      	mov	r0, r3
 800644c:	3710      	adds	r7, #16
 800644e:	46bd      	mov	sp, r7
 8006450:	bd80      	pop	{r7, pc}

08006452 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006452:	b580      	push	{r7, lr}
 8006454:	b084      	sub	sp, #16
 8006456:	af00      	add	r7, sp, #0
 8006458:	6078      	str	r0, [r7, #4]
 800645a:	460b      	mov	r3, r1
 800645c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800645e:	78fb      	ldrb	r3, [r7, #3]
 8006460:	f003 020f 	and.w	r2, r3, #15
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	685b      	ldr	r3, [r3, #4]
 8006468:	429a      	cmp	r2, r3
 800646a:	d901      	bls.n	8006470 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800646c:	2301      	movs	r3, #1
 800646e:	e042      	b.n	80064f6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006470:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006474:	2b00      	cmp	r3, #0
 8006476:	da0f      	bge.n	8006498 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006478:	78fb      	ldrb	r3, [r7, #3]
 800647a:	f003 020f 	and.w	r2, r3, #15
 800647e:	4613      	mov	r3, r2
 8006480:	00db      	lsls	r3, r3, #3
 8006482:	4413      	add	r3, r2
 8006484:	009b      	lsls	r3, r3, #2
 8006486:	3338      	adds	r3, #56	; 0x38
 8006488:	687a      	ldr	r2, [r7, #4]
 800648a:	4413      	add	r3, r2
 800648c:	3304      	adds	r3, #4
 800648e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	2201      	movs	r2, #1
 8006494:	705a      	strb	r2, [r3, #1]
 8006496:	e00f      	b.n	80064b8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006498:	78fb      	ldrb	r3, [r7, #3]
 800649a:	f003 020f 	and.w	r2, r3, #15
 800649e:	4613      	mov	r3, r2
 80064a0:	00db      	lsls	r3, r3, #3
 80064a2:	4413      	add	r3, r2
 80064a4:	009b      	lsls	r3, r3, #2
 80064a6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80064aa:	687a      	ldr	r2, [r7, #4]
 80064ac:	4413      	add	r3, r2
 80064ae:	3304      	adds	r3, #4
 80064b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	2200      	movs	r2, #0
 80064b6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	2200      	movs	r2, #0
 80064bc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80064be:	78fb      	ldrb	r3, [r7, #3]
 80064c0:	f003 030f 	and.w	r3, r3, #15
 80064c4:	b2da      	uxtb	r2, r3
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80064d0:	2b01      	cmp	r3, #1
 80064d2:	d101      	bne.n	80064d8 <HAL_PCD_EP_ClrStall+0x86>
 80064d4:	2302      	movs	r3, #2
 80064d6:	e00e      	b.n	80064f6 <HAL_PCD_EP_ClrStall+0xa4>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2201      	movs	r2, #1
 80064dc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	68f9      	ldr	r1, [r7, #12]
 80064e6:	4618      	mov	r0, r3
 80064e8:	f002 fd4a 	bl	8008f80 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2200      	movs	r2, #0
 80064f0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80064f4:	2300      	movs	r3, #0
}
 80064f6:	4618      	mov	r0, r3
 80064f8:	3710      	adds	r7, #16
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd80      	pop	{r7, pc}

080064fe <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80064fe:	b580      	push	{r7, lr}
 8006500:	b084      	sub	sp, #16
 8006502:	af00      	add	r7, sp, #0
 8006504:	6078      	str	r0, [r7, #4]
 8006506:	460b      	mov	r3, r1
 8006508:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800650a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800650e:	2b00      	cmp	r3, #0
 8006510:	da0c      	bge.n	800652c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006512:	78fb      	ldrb	r3, [r7, #3]
 8006514:	f003 020f 	and.w	r2, r3, #15
 8006518:	4613      	mov	r3, r2
 800651a:	00db      	lsls	r3, r3, #3
 800651c:	4413      	add	r3, r2
 800651e:	009b      	lsls	r3, r3, #2
 8006520:	3338      	adds	r3, #56	; 0x38
 8006522:	687a      	ldr	r2, [r7, #4]
 8006524:	4413      	add	r3, r2
 8006526:	3304      	adds	r3, #4
 8006528:	60fb      	str	r3, [r7, #12]
 800652a:	e00c      	b.n	8006546 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800652c:	78fb      	ldrb	r3, [r7, #3]
 800652e:	f003 020f 	and.w	r2, r3, #15
 8006532:	4613      	mov	r3, r2
 8006534:	00db      	lsls	r3, r3, #3
 8006536:	4413      	add	r3, r2
 8006538:	009b      	lsls	r3, r3, #2
 800653a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800653e:	687a      	ldr	r2, [r7, #4]
 8006540:	4413      	add	r3, r2
 8006542:	3304      	adds	r3, #4
 8006544:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	68f9      	ldr	r1, [r7, #12]
 800654c:	4618      	mov	r0, r3
 800654e:	f002 fb69 	bl	8008c24 <USB_EPStopXfer>
 8006552:	4603      	mov	r3, r0
 8006554:	72fb      	strb	r3, [r7, #11]

  return ret;
 8006556:	7afb      	ldrb	r3, [r7, #11]
}
 8006558:	4618      	mov	r0, r3
 800655a:	3710      	adds	r7, #16
 800655c:	46bd      	mov	sp, r7
 800655e:	bd80      	pop	{r7, pc}

08006560 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b08a      	sub	sp, #40	; 0x28
 8006564:	af02      	add	r7, sp, #8
 8006566:	6078      	str	r0, [r7, #4]
 8006568:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006570:	697b      	ldr	r3, [r7, #20]
 8006572:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8006574:	683a      	ldr	r2, [r7, #0]
 8006576:	4613      	mov	r3, r2
 8006578:	00db      	lsls	r3, r3, #3
 800657a:	4413      	add	r3, r2
 800657c:	009b      	lsls	r3, r3, #2
 800657e:	3338      	adds	r3, #56	; 0x38
 8006580:	687a      	ldr	r2, [r7, #4]
 8006582:	4413      	add	r3, r2
 8006584:	3304      	adds	r3, #4
 8006586:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	6a1a      	ldr	r2, [r3, #32]
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	699b      	ldr	r3, [r3, #24]
 8006590:	429a      	cmp	r2, r3
 8006592:	d901      	bls.n	8006598 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8006594:	2301      	movs	r3, #1
 8006596:	e06c      	b.n	8006672 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	699a      	ldr	r2, [r3, #24]
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	6a1b      	ldr	r3, [r3, #32]
 80065a0:	1ad3      	subs	r3, r2, r3
 80065a2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	68db      	ldr	r3, [r3, #12]
 80065a8:	69fa      	ldr	r2, [r7, #28]
 80065aa:	429a      	cmp	r2, r3
 80065ac:	d902      	bls.n	80065b4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	68db      	ldr	r3, [r3, #12]
 80065b2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80065b4:	69fb      	ldr	r3, [r7, #28]
 80065b6:	3303      	adds	r3, #3
 80065b8:	089b      	lsrs	r3, r3, #2
 80065ba:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80065bc:	e02b      	b.n	8006616 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	699a      	ldr	r2, [r3, #24]
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	6a1b      	ldr	r3, [r3, #32]
 80065c6:	1ad3      	subs	r3, r2, r3
 80065c8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	68db      	ldr	r3, [r3, #12]
 80065ce:	69fa      	ldr	r2, [r7, #28]
 80065d0:	429a      	cmp	r2, r3
 80065d2:	d902      	bls.n	80065da <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	68db      	ldr	r3, [r3, #12]
 80065d8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80065da:	69fb      	ldr	r3, [r7, #28]
 80065dc:	3303      	adds	r3, #3
 80065de:	089b      	lsrs	r3, r3, #2
 80065e0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	6919      	ldr	r1, [r3, #16]
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	b2da      	uxtb	r2, r3
 80065ea:	69fb      	ldr	r3, [r7, #28]
 80065ec:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80065f2:	b2db      	uxtb	r3, r3
 80065f4:	9300      	str	r3, [sp, #0]
 80065f6:	4603      	mov	r3, r0
 80065f8:	6978      	ldr	r0, [r7, #20]
 80065fa:	f002 fbbd 	bl	8008d78 <USB_WritePacket>

    ep->xfer_buff  += len;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	691a      	ldr	r2, [r3, #16]
 8006602:	69fb      	ldr	r3, [r7, #28]
 8006604:	441a      	add	r2, r3
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	6a1a      	ldr	r2, [r3, #32]
 800660e:	69fb      	ldr	r3, [r7, #28]
 8006610:	441a      	add	r2, r3
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	015a      	lsls	r2, r3, #5
 800661a:	693b      	ldr	r3, [r7, #16]
 800661c:	4413      	add	r3, r2
 800661e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006622:	699b      	ldr	r3, [r3, #24]
 8006624:	b29b      	uxth	r3, r3
 8006626:	69ba      	ldr	r2, [r7, #24]
 8006628:	429a      	cmp	r2, r3
 800662a:	d809      	bhi.n	8006640 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	6a1a      	ldr	r2, [r3, #32]
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006634:	429a      	cmp	r2, r3
 8006636:	d203      	bcs.n	8006640 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	699b      	ldr	r3, [r3, #24]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d1be      	bne.n	80065be <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	699a      	ldr	r2, [r3, #24]
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	6a1b      	ldr	r3, [r3, #32]
 8006648:	429a      	cmp	r2, r3
 800664a:	d811      	bhi.n	8006670 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	f003 030f 	and.w	r3, r3, #15
 8006652:	2201      	movs	r2, #1
 8006654:	fa02 f303 	lsl.w	r3, r2, r3
 8006658:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800665a:	693b      	ldr	r3, [r7, #16]
 800665c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006660:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006662:	68bb      	ldr	r3, [r7, #8]
 8006664:	43db      	mvns	r3, r3
 8006666:	6939      	ldr	r1, [r7, #16]
 8006668:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800666c:	4013      	ands	r3, r2
 800666e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8006670:	2300      	movs	r3, #0
}
 8006672:	4618      	mov	r0, r3
 8006674:	3720      	adds	r7, #32
 8006676:	46bd      	mov	sp, r7
 8006678:	bd80      	pop	{r7, pc}
	...

0800667c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b088      	sub	sp, #32
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
 8006684:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800668c:	69fb      	ldr	r3, [r7, #28]
 800668e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006690:	69fb      	ldr	r3, [r7, #28]
 8006692:	333c      	adds	r3, #60	; 0x3c
 8006694:	3304      	adds	r3, #4
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	015a      	lsls	r2, r3, #5
 800669e:	69bb      	ldr	r3, [r7, #24]
 80066a0:	4413      	add	r3, r2
 80066a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066a6:	689b      	ldr	r3, [r3, #8]
 80066a8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	691b      	ldr	r3, [r3, #16]
 80066ae:	2b01      	cmp	r3, #1
 80066b0:	d17b      	bne.n	80067aa <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80066b2:	693b      	ldr	r3, [r7, #16]
 80066b4:	f003 0308 	and.w	r3, r3, #8
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d015      	beq.n	80066e8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80066bc:	697b      	ldr	r3, [r7, #20]
 80066be:	4a61      	ldr	r2, [pc, #388]	; (8006844 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	f240 80b9 	bls.w	8006838 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	f000 80b3 	beq.w	8006838 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	015a      	lsls	r2, r3, #5
 80066d6:	69bb      	ldr	r3, [r7, #24]
 80066d8:	4413      	add	r3, r2
 80066da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066de:	461a      	mov	r2, r3
 80066e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80066e4:	6093      	str	r3, [r2, #8]
 80066e6:	e0a7      	b.n	8006838 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80066e8:	693b      	ldr	r3, [r7, #16]
 80066ea:	f003 0320 	and.w	r3, r3, #32
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d009      	beq.n	8006706 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	015a      	lsls	r2, r3, #5
 80066f6:	69bb      	ldr	r3, [r7, #24]
 80066f8:	4413      	add	r3, r2
 80066fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066fe:	461a      	mov	r2, r3
 8006700:	2320      	movs	r3, #32
 8006702:	6093      	str	r3, [r2, #8]
 8006704:	e098      	b.n	8006838 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8006706:	693b      	ldr	r3, [r7, #16]
 8006708:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800670c:	2b00      	cmp	r3, #0
 800670e:	f040 8093 	bne.w	8006838 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006712:	697b      	ldr	r3, [r7, #20]
 8006714:	4a4b      	ldr	r2, [pc, #300]	; (8006844 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006716:	4293      	cmp	r3, r2
 8006718:	d90f      	bls.n	800673a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800671a:	693b      	ldr	r3, [r7, #16]
 800671c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006720:	2b00      	cmp	r3, #0
 8006722:	d00a      	beq.n	800673a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	015a      	lsls	r2, r3, #5
 8006728:	69bb      	ldr	r3, [r7, #24]
 800672a:	4413      	add	r3, r2
 800672c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006730:	461a      	mov	r2, r3
 8006732:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006736:	6093      	str	r3, [r2, #8]
 8006738:	e07e      	b.n	8006838 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800673a:	683a      	ldr	r2, [r7, #0]
 800673c:	4613      	mov	r3, r2
 800673e:	00db      	lsls	r3, r3, #3
 8006740:	4413      	add	r3, r2
 8006742:	009b      	lsls	r3, r3, #2
 8006744:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006748:	687a      	ldr	r2, [r7, #4]
 800674a:	4413      	add	r3, r2
 800674c:	3304      	adds	r3, #4
 800674e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	69da      	ldr	r2, [r3, #28]
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	0159      	lsls	r1, r3, #5
 8006758:	69bb      	ldr	r3, [r7, #24]
 800675a:	440b      	add	r3, r1
 800675c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006760:	691b      	ldr	r3, [r3, #16]
 8006762:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006766:	1ad2      	subs	r2, r2, r3
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d114      	bne.n	800679c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	699b      	ldr	r3, [r3, #24]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d109      	bne.n	800678e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6818      	ldr	r0, [r3, #0]
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006784:	461a      	mov	r2, r3
 8006786:	2101      	movs	r1, #1
 8006788:	f002 fd8e 	bl	80092a8 <USB_EP0_OutStart>
 800678c:	e006      	b.n	800679c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	691a      	ldr	r2, [r3, #16]
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	6a1b      	ldr	r3, [r3, #32]
 8006796:	441a      	add	r2, r3
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	b2db      	uxtb	r3, r3
 80067a0:	4619      	mov	r1, r3
 80067a2:	6878      	ldr	r0, [r7, #4]
 80067a4:	f005 f9a4 	bl	800baf0 <HAL_PCD_DataOutStageCallback>
 80067a8:	e046      	b.n	8006838 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80067aa:	697b      	ldr	r3, [r7, #20]
 80067ac:	4a26      	ldr	r2, [pc, #152]	; (8006848 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d124      	bne.n	80067fc <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80067b2:	693b      	ldr	r3, [r7, #16]
 80067b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d00a      	beq.n	80067d2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	015a      	lsls	r2, r3, #5
 80067c0:	69bb      	ldr	r3, [r7, #24]
 80067c2:	4413      	add	r3, r2
 80067c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067c8:	461a      	mov	r2, r3
 80067ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80067ce:	6093      	str	r3, [r2, #8]
 80067d0:	e032      	b.n	8006838 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80067d2:	693b      	ldr	r3, [r7, #16]
 80067d4:	f003 0320 	and.w	r3, r3, #32
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d008      	beq.n	80067ee <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	015a      	lsls	r2, r3, #5
 80067e0:	69bb      	ldr	r3, [r7, #24]
 80067e2:	4413      	add	r3, r2
 80067e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067e8:	461a      	mov	r2, r3
 80067ea:	2320      	movs	r3, #32
 80067ec:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	b2db      	uxtb	r3, r3
 80067f2:	4619      	mov	r1, r3
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	f005 f97b 	bl	800baf0 <HAL_PCD_DataOutStageCallback>
 80067fa:	e01d      	b.n	8006838 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d114      	bne.n	800682c <PCD_EP_OutXfrComplete_int+0x1b0>
 8006802:	6879      	ldr	r1, [r7, #4]
 8006804:	683a      	ldr	r2, [r7, #0]
 8006806:	4613      	mov	r3, r2
 8006808:	00db      	lsls	r3, r3, #3
 800680a:	4413      	add	r3, r2
 800680c:	009b      	lsls	r3, r3, #2
 800680e:	440b      	add	r3, r1
 8006810:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d108      	bne.n	800682c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6818      	ldr	r0, [r3, #0]
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006824:	461a      	mov	r2, r3
 8006826:	2100      	movs	r1, #0
 8006828:	f002 fd3e 	bl	80092a8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	b2db      	uxtb	r3, r3
 8006830:	4619      	mov	r1, r3
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f005 f95c 	bl	800baf0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006838:	2300      	movs	r3, #0
}
 800683a:	4618      	mov	r0, r3
 800683c:	3720      	adds	r7, #32
 800683e:	46bd      	mov	sp, r7
 8006840:	bd80      	pop	{r7, pc}
 8006842:	bf00      	nop
 8006844:	4f54300a 	.word	0x4f54300a
 8006848:	4f54310a 	.word	0x4f54310a

0800684c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b086      	sub	sp, #24
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
 8006854:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800685c:	697b      	ldr	r3, [r7, #20]
 800685e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006860:	697b      	ldr	r3, [r7, #20]
 8006862:	333c      	adds	r3, #60	; 0x3c
 8006864:	3304      	adds	r3, #4
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	015a      	lsls	r2, r3, #5
 800686e:	693b      	ldr	r3, [r7, #16]
 8006870:	4413      	add	r3, r2
 8006872:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006876:	689b      	ldr	r3, [r3, #8]
 8006878:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	4a15      	ldr	r2, [pc, #84]	; (80068d4 <PCD_EP_OutSetupPacket_int+0x88>)
 800687e:	4293      	cmp	r3, r2
 8006880:	d90e      	bls.n	80068a0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006882:	68bb      	ldr	r3, [r7, #8]
 8006884:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006888:	2b00      	cmp	r3, #0
 800688a:	d009      	beq.n	80068a0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	015a      	lsls	r2, r3, #5
 8006890:	693b      	ldr	r3, [r7, #16]
 8006892:	4413      	add	r3, r2
 8006894:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006898:	461a      	mov	r2, r3
 800689a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800689e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80068a0:	6878      	ldr	r0, [r7, #4]
 80068a2:	f005 f913 	bl	800bacc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	4a0a      	ldr	r2, [pc, #40]	; (80068d4 <PCD_EP_OutSetupPacket_int+0x88>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d90c      	bls.n	80068c8 <PCD_EP_OutSetupPacket_int+0x7c>
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	691b      	ldr	r3, [r3, #16]
 80068b2:	2b01      	cmp	r3, #1
 80068b4:	d108      	bne.n	80068c8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6818      	ldr	r0, [r3, #0]
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80068c0:	461a      	mov	r2, r3
 80068c2:	2101      	movs	r1, #1
 80068c4:	f002 fcf0 	bl	80092a8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80068c8:	2300      	movs	r3, #0
}
 80068ca:	4618      	mov	r0, r3
 80068cc:	3718      	adds	r7, #24
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bd80      	pop	{r7, pc}
 80068d2:	bf00      	nop
 80068d4:	4f54300a 	.word	0x4f54300a

080068d8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80068d8:	b480      	push	{r7}
 80068da:	b085      	sub	sp, #20
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
 80068e0:	460b      	mov	r3, r1
 80068e2:	70fb      	strb	r3, [r7, #3]
 80068e4:	4613      	mov	r3, r2
 80068e6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ee:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80068f0:	78fb      	ldrb	r3, [r7, #3]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d107      	bne.n	8006906 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80068f6:	883b      	ldrh	r3, [r7, #0]
 80068f8:	0419      	lsls	r1, r3, #16
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	68ba      	ldr	r2, [r7, #8]
 8006900:	430a      	orrs	r2, r1
 8006902:	629a      	str	r2, [r3, #40]	; 0x28
 8006904:	e028      	b.n	8006958 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800690c:	0c1b      	lsrs	r3, r3, #16
 800690e:	68ba      	ldr	r2, [r7, #8]
 8006910:	4413      	add	r3, r2
 8006912:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006914:	2300      	movs	r3, #0
 8006916:	73fb      	strb	r3, [r7, #15]
 8006918:	e00d      	b.n	8006936 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681a      	ldr	r2, [r3, #0]
 800691e:	7bfb      	ldrb	r3, [r7, #15]
 8006920:	3340      	adds	r3, #64	; 0x40
 8006922:	009b      	lsls	r3, r3, #2
 8006924:	4413      	add	r3, r2
 8006926:	685b      	ldr	r3, [r3, #4]
 8006928:	0c1b      	lsrs	r3, r3, #16
 800692a:	68ba      	ldr	r2, [r7, #8]
 800692c:	4413      	add	r3, r2
 800692e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006930:	7bfb      	ldrb	r3, [r7, #15]
 8006932:	3301      	adds	r3, #1
 8006934:	73fb      	strb	r3, [r7, #15]
 8006936:	7bfa      	ldrb	r2, [r7, #15]
 8006938:	78fb      	ldrb	r3, [r7, #3]
 800693a:	3b01      	subs	r3, #1
 800693c:	429a      	cmp	r2, r3
 800693e:	d3ec      	bcc.n	800691a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006940:	883b      	ldrh	r3, [r7, #0]
 8006942:	0418      	lsls	r0, r3, #16
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6819      	ldr	r1, [r3, #0]
 8006948:	78fb      	ldrb	r3, [r7, #3]
 800694a:	3b01      	subs	r3, #1
 800694c:	68ba      	ldr	r2, [r7, #8]
 800694e:	4302      	orrs	r2, r0
 8006950:	3340      	adds	r3, #64	; 0x40
 8006952:	009b      	lsls	r3, r3, #2
 8006954:	440b      	add	r3, r1
 8006956:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006958:	2300      	movs	r3, #0
}
 800695a:	4618      	mov	r0, r3
 800695c:	3714      	adds	r7, #20
 800695e:	46bd      	mov	sp, r7
 8006960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006964:	4770      	bx	lr

08006966 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8006966:	b480      	push	{r7}
 8006968:	b083      	sub	sp, #12
 800696a:	af00      	add	r7, sp, #0
 800696c:	6078      	str	r0, [r7, #4]
 800696e:	460b      	mov	r3, r1
 8006970:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	887a      	ldrh	r2, [r7, #2]
 8006978:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800697a:	2300      	movs	r3, #0
}
 800697c:	4618      	mov	r0, r3
 800697e:	370c      	adds	r7, #12
 8006980:	46bd      	mov	sp, r7
 8006982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006986:	4770      	bx	lr

08006988 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006988:	b480      	push	{r7}
 800698a:	b085      	sub	sp, #20
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2201      	movs	r2, #1
 800699a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2200      	movs	r2, #0
 80069a2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	699b      	ldr	r3, [r3, #24]
 80069aa:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80069b6:	4b05      	ldr	r3, [pc, #20]	; (80069cc <HAL_PCDEx_ActivateLPM+0x44>)
 80069b8:	4313      	orrs	r3, r2
 80069ba:	68fa      	ldr	r2, [r7, #12]
 80069bc:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80069be:	2300      	movs	r3, #0
}
 80069c0:	4618      	mov	r0, r3
 80069c2:	3714      	adds	r7, #20
 80069c4:	46bd      	mov	sp, r7
 80069c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ca:	4770      	bx	lr
 80069cc:	10000003 	.word	0x10000003

080069d0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80069d0:	b480      	push	{r7}
 80069d2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80069d4:	4b05      	ldr	r3, [pc, #20]	; (80069ec <HAL_PWR_EnableBkUpAccess+0x1c>)
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	4a04      	ldr	r2, [pc, #16]	; (80069ec <HAL_PWR_EnableBkUpAccess+0x1c>)
 80069da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80069de:	6013      	str	r3, [r2, #0]
}
 80069e0:	bf00      	nop
 80069e2:	46bd      	mov	sp, r7
 80069e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e8:	4770      	bx	lr
 80069ea:	bf00      	nop
 80069ec:	40007000 	.word	0x40007000

080069f0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b082      	sub	sp, #8
 80069f4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80069f6:	2300      	movs	r3, #0
 80069f8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80069fa:	4b23      	ldr	r3, [pc, #140]	; (8006a88 <HAL_PWREx_EnableOverDrive+0x98>)
 80069fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069fe:	4a22      	ldr	r2, [pc, #136]	; (8006a88 <HAL_PWREx_EnableOverDrive+0x98>)
 8006a00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a04:	6413      	str	r3, [r2, #64]	; 0x40
 8006a06:	4b20      	ldr	r3, [pc, #128]	; (8006a88 <HAL_PWREx_EnableOverDrive+0x98>)
 8006a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a0e:	603b      	str	r3, [r7, #0]
 8006a10:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006a12:	4b1e      	ldr	r3, [pc, #120]	; (8006a8c <HAL_PWREx_EnableOverDrive+0x9c>)
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	4a1d      	ldr	r2, [pc, #116]	; (8006a8c <HAL_PWREx_EnableOverDrive+0x9c>)
 8006a18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a1c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006a1e:	f7fc fc15 	bl	800324c <HAL_GetTick>
 8006a22:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006a24:	e009      	b.n	8006a3a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006a26:	f7fc fc11 	bl	800324c <HAL_GetTick>
 8006a2a:	4602      	mov	r2, r0
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	1ad3      	subs	r3, r2, r3
 8006a30:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006a34:	d901      	bls.n	8006a3a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8006a36:	2303      	movs	r3, #3
 8006a38:	e022      	b.n	8006a80 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006a3a:	4b14      	ldr	r3, [pc, #80]	; (8006a8c <HAL_PWREx_EnableOverDrive+0x9c>)
 8006a3c:	685b      	ldr	r3, [r3, #4]
 8006a3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a46:	d1ee      	bne.n	8006a26 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006a48:	4b10      	ldr	r3, [pc, #64]	; (8006a8c <HAL_PWREx_EnableOverDrive+0x9c>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4a0f      	ldr	r2, [pc, #60]	; (8006a8c <HAL_PWREx_EnableOverDrive+0x9c>)
 8006a4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a52:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006a54:	f7fc fbfa 	bl	800324c <HAL_GetTick>
 8006a58:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006a5a:	e009      	b.n	8006a70 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006a5c:	f7fc fbf6 	bl	800324c <HAL_GetTick>
 8006a60:	4602      	mov	r2, r0
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	1ad3      	subs	r3, r2, r3
 8006a66:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006a6a:	d901      	bls.n	8006a70 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8006a6c:	2303      	movs	r3, #3
 8006a6e:	e007      	b.n	8006a80 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006a70:	4b06      	ldr	r3, [pc, #24]	; (8006a8c <HAL_PWREx_EnableOverDrive+0x9c>)
 8006a72:	685b      	ldr	r3, [r3, #4]
 8006a74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a78:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006a7c:	d1ee      	bne.n	8006a5c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8006a7e:	2300      	movs	r3, #0
}
 8006a80:	4618      	mov	r0, r3
 8006a82:	3708      	adds	r7, #8
 8006a84:	46bd      	mov	sp, r7
 8006a86:	bd80      	pop	{r7, pc}
 8006a88:	40023800 	.word	0x40023800
 8006a8c:	40007000 	.word	0x40007000

08006a90 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b086      	sub	sp, #24
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8006a98:	2300      	movs	r3, #0
 8006a9a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d101      	bne.n	8006aa6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	e291      	b.n	8006fca <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f003 0301 	and.w	r3, r3, #1
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	f000 8087 	beq.w	8006bc2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006ab4:	4b96      	ldr	r3, [pc, #600]	; (8006d10 <HAL_RCC_OscConfig+0x280>)
 8006ab6:	689b      	ldr	r3, [r3, #8]
 8006ab8:	f003 030c 	and.w	r3, r3, #12
 8006abc:	2b04      	cmp	r3, #4
 8006abe:	d00c      	beq.n	8006ada <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006ac0:	4b93      	ldr	r3, [pc, #588]	; (8006d10 <HAL_RCC_OscConfig+0x280>)
 8006ac2:	689b      	ldr	r3, [r3, #8]
 8006ac4:	f003 030c 	and.w	r3, r3, #12
 8006ac8:	2b08      	cmp	r3, #8
 8006aca:	d112      	bne.n	8006af2 <HAL_RCC_OscConfig+0x62>
 8006acc:	4b90      	ldr	r3, [pc, #576]	; (8006d10 <HAL_RCC_OscConfig+0x280>)
 8006ace:	685b      	ldr	r3, [r3, #4]
 8006ad0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ad4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006ad8:	d10b      	bne.n	8006af2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ada:	4b8d      	ldr	r3, [pc, #564]	; (8006d10 <HAL_RCC_OscConfig+0x280>)
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d06c      	beq.n	8006bc0 <HAL_RCC_OscConfig+0x130>
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	685b      	ldr	r3, [r3, #4]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d168      	bne.n	8006bc0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006aee:	2301      	movs	r3, #1
 8006af0:	e26b      	b.n	8006fca <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	685b      	ldr	r3, [r3, #4]
 8006af6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006afa:	d106      	bne.n	8006b0a <HAL_RCC_OscConfig+0x7a>
 8006afc:	4b84      	ldr	r3, [pc, #528]	; (8006d10 <HAL_RCC_OscConfig+0x280>)
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	4a83      	ldr	r2, [pc, #524]	; (8006d10 <HAL_RCC_OscConfig+0x280>)
 8006b02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b06:	6013      	str	r3, [r2, #0]
 8006b08:	e02e      	b.n	8006b68 <HAL_RCC_OscConfig+0xd8>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	685b      	ldr	r3, [r3, #4]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d10c      	bne.n	8006b2c <HAL_RCC_OscConfig+0x9c>
 8006b12:	4b7f      	ldr	r3, [pc, #508]	; (8006d10 <HAL_RCC_OscConfig+0x280>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	4a7e      	ldr	r2, [pc, #504]	; (8006d10 <HAL_RCC_OscConfig+0x280>)
 8006b18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b1c:	6013      	str	r3, [r2, #0]
 8006b1e:	4b7c      	ldr	r3, [pc, #496]	; (8006d10 <HAL_RCC_OscConfig+0x280>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	4a7b      	ldr	r2, [pc, #492]	; (8006d10 <HAL_RCC_OscConfig+0x280>)
 8006b24:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006b28:	6013      	str	r3, [r2, #0]
 8006b2a:	e01d      	b.n	8006b68 <HAL_RCC_OscConfig+0xd8>
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	685b      	ldr	r3, [r3, #4]
 8006b30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006b34:	d10c      	bne.n	8006b50 <HAL_RCC_OscConfig+0xc0>
 8006b36:	4b76      	ldr	r3, [pc, #472]	; (8006d10 <HAL_RCC_OscConfig+0x280>)
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	4a75      	ldr	r2, [pc, #468]	; (8006d10 <HAL_RCC_OscConfig+0x280>)
 8006b3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006b40:	6013      	str	r3, [r2, #0]
 8006b42:	4b73      	ldr	r3, [pc, #460]	; (8006d10 <HAL_RCC_OscConfig+0x280>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	4a72      	ldr	r2, [pc, #456]	; (8006d10 <HAL_RCC_OscConfig+0x280>)
 8006b48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b4c:	6013      	str	r3, [r2, #0]
 8006b4e:	e00b      	b.n	8006b68 <HAL_RCC_OscConfig+0xd8>
 8006b50:	4b6f      	ldr	r3, [pc, #444]	; (8006d10 <HAL_RCC_OscConfig+0x280>)
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	4a6e      	ldr	r2, [pc, #440]	; (8006d10 <HAL_RCC_OscConfig+0x280>)
 8006b56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b5a:	6013      	str	r3, [r2, #0]
 8006b5c:	4b6c      	ldr	r3, [pc, #432]	; (8006d10 <HAL_RCC_OscConfig+0x280>)
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4a6b      	ldr	r2, [pc, #428]	; (8006d10 <HAL_RCC_OscConfig+0x280>)
 8006b62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006b66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	685b      	ldr	r3, [r3, #4]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d013      	beq.n	8006b98 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b70:	f7fc fb6c 	bl	800324c <HAL_GetTick>
 8006b74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b76:	e008      	b.n	8006b8a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006b78:	f7fc fb68 	bl	800324c <HAL_GetTick>
 8006b7c:	4602      	mov	r2, r0
 8006b7e:	693b      	ldr	r3, [r7, #16]
 8006b80:	1ad3      	subs	r3, r2, r3
 8006b82:	2b64      	cmp	r3, #100	; 0x64
 8006b84:	d901      	bls.n	8006b8a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006b86:	2303      	movs	r3, #3
 8006b88:	e21f      	b.n	8006fca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b8a:	4b61      	ldr	r3, [pc, #388]	; (8006d10 <HAL_RCC_OscConfig+0x280>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d0f0      	beq.n	8006b78 <HAL_RCC_OscConfig+0xe8>
 8006b96:	e014      	b.n	8006bc2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b98:	f7fc fb58 	bl	800324c <HAL_GetTick>
 8006b9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006b9e:	e008      	b.n	8006bb2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006ba0:	f7fc fb54 	bl	800324c <HAL_GetTick>
 8006ba4:	4602      	mov	r2, r0
 8006ba6:	693b      	ldr	r3, [r7, #16]
 8006ba8:	1ad3      	subs	r3, r2, r3
 8006baa:	2b64      	cmp	r3, #100	; 0x64
 8006bac:	d901      	bls.n	8006bb2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006bae:	2303      	movs	r3, #3
 8006bb0:	e20b      	b.n	8006fca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006bb2:	4b57      	ldr	r3, [pc, #348]	; (8006d10 <HAL_RCC_OscConfig+0x280>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d1f0      	bne.n	8006ba0 <HAL_RCC_OscConfig+0x110>
 8006bbe:	e000      	b.n	8006bc2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006bc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f003 0302 	and.w	r3, r3, #2
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d069      	beq.n	8006ca2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006bce:	4b50      	ldr	r3, [pc, #320]	; (8006d10 <HAL_RCC_OscConfig+0x280>)
 8006bd0:	689b      	ldr	r3, [r3, #8]
 8006bd2:	f003 030c 	and.w	r3, r3, #12
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d00b      	beq.n	8006bf2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006bda:	4b4d      	ldr	r3, [pc, #308]	; (8006d10 <HAL_RCC_OscConfig+0x280>)
 8006bdc:	689b      	ldr	r3, [r3, #8]
 8006bde:	f003 030c 	and.w	r3, r3, #12
 8006be2:	2b08      	cmp	r3, #8
 8006be4:	d11c      	bne.n	8006c20 <HAL_RCC_OscConfig+0x190>
 8006be6:	4b4a      	ldr	r3, [pc, #296]	; (8006d10 <HAL_RCC_OscConfig+0x280>)
 8006be8:	685b      	ldr	r3, [r3, #4]
 8006bea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d116      	bne.n	8006c20 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006bf2:	4b47      	ldr	r3, [pc, #284]	; (8006d10 <HAL_RCC_OscConfig+0x280>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f003 0302 	and.w	r3, r3, #2
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d005      	beq.n	8006c0a <HAL_RCC_OscConfig+0x17a>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	68db      	ldr	r3, [r3, #12]
 8006c02:	2b01      	cmp	r3, #1
 8006c04:	d001      	beq.n	8006c0a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006c06:	2301      	movs	r3, #1
 8006c08:	e1df      	b.n	8006fca <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c0a:	4b41      	ldr	r3, [pc, #260]	; (8006d10 <HAL_RCC_OscConfig+0x280>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	691b      	ldr	r3, [r3, #16]
 8006c16:	00db      	lsls	r3, r3, #3
 8006c18:	493d      	ldr	r1, [pc, #244]	; (8006d10 <HAL_RCC_OscConfig+0x280>)
 8006c1a:	4313      	orrs	r3, r2
 8006c1c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006c1e:	e040      	b.n	8006ca2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	68db      	ldr	r3, [r3, #12]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d023      	beq.n	8006c70 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006c28:	4b39      	ldr	r3, [pc, #228]	; (8006d10 <HAL_RCC_OscConfig+0x280>)
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4a38      	ldr	r2, [pc, #224]	; (8006d10 <HAL_RCC_OscConfig+0x280>)
 8006c2e:	f043 0301 	orr.w	r3, r3, #1
 8006c32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c34:	f7fc fb0a 	bl	800324c <HAL_GetTick>
 8006c38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c3a:	e008      	b.n	8006c4e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006c3c:	f7fc fb06 	bl	800324c <HAL_GetTick>
 8006c40:	4602      	mov	r2, r0
 8006c42:	693b      	ldr	r3, [r7, #16]
 8006c44:	1ad3      	subs	r3, r2, r3
 8006c46:	2b02      	cmp	r3, #2
 8006c48:	d901      	bls.n	8006c4e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8006c4a:	2303      	movs	r3, #3
 8006c4c:	e1bd      	b.n	8006fca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c4e:	4b30      	ldr	r3, [pc, #192]	; (8006d10 <HAL_RCC_OscConfig+0x280>)
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f003 0302 	and.w	r3, r3, #2
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d0f0      	beq.n	8006c3c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c5a:	4b2d      	ldr	r3, [pc, #180]	; (8006d10 <HAL_RCC_OscConfig+0x280>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	691b      	ldr	r3, [r3, #16]
 8006c66:	00db      	lsls	r3, r3, #3
 8006c68:	4929      	ldr	r1, [pc, #164]	; (8006d10 <HAL_RCC_OscConfig+0x280>)
 8006c6a:	4313      	orrs	r3, r2
 8006c6c:	600b      	str	r3, [r1, #0]
 8006c6e:	e018      	b.n	8006ca2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006c70:	4b27      	ldr	r3, [pc, #156]	; (8006d10 <HAL_RCC_OscConfig+0x280>)
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	4a26      	ldr	r2, [pc, #152]	; (8006d10 <HAL_RCC_OscConfig+0x280>)
 8006c76:	f023 0301 	bic.w	r3, r3, #1
 8006c7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c7c:	f7fc fae6 	bl	800324c <HAL_GetTick>
 8006c80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006c82:	e008      	b.n	8006c96 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006c84:	f7fc fae2 	bl	800324c <HAL_GetTick>
 8006c88:	4602      	mov	r2, r0
 8006c8a:	693b      	ldr	r3, [r7, #16]
 8006c8c:	1ad3      	subs	r3, r2, r3
 8006c8e:	2b02      	cmp	r3, #2
 8006c90:	d901      	bls.n	8006c96 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006c92:	2303      	movs	r3, #3
 8006c94:	e199      	b.n	8006fca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006c96:	4b1e      	ldr	r3, [pc, #120]	; (8006d10 <HAL_RCC_OscConfig+0x280>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f003 0302 	and.w	r3, r3, #2
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d1f0      	bne.n	8006c84 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f003 0308 	and.w	r3, r3, #8
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d038      	beq.n	8006d20 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	695b      	ldr	r3, [r3, #20]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d019      	beq.n	8006cea <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006cb6:	4b16      	ldr	r3, [pc, #88]	; (8006d10 <HAL_RCC_OscConfig+0x280>)
 8006cb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006cba:	4a15      	ldr	r2, [pc, #84]	; (8006d10 <HAL_RCC_OscConfig+0x280>)
 8006cbc:	f043 0301 	orr.w	r3, r3, #1
 8006cc0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cc2:	f7fc fac3 	bl	800324c <HAL_GetTick>
 8006cc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006cc8:	e008      	b.n	8006cdc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006cca:	f7fc fabf 	bl	800324c <HAL_GetTick>
 8006cce:	4602      	mov	r2, r0
 8006cd0:	693b      	ldr	r3, [r7, #16]
 8006cd2:	1ad3      	subs	r3, r2, r3
 8006cd4:	2b02      	cmp	r3, #2
 8006cd6:	d901      	bls.n	8006cdc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006cd8:	2303      	movs	r3, #3
 8006cda:	e176      	b.n	8006fca <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006cdc:	4b0c      	ldr	r3, [pc, #48]	; (8006d10 <HAL_RCC_OscConfig+0x280>)
 8006cde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ce0:	f003 0302 	and.w	r3, r3, #2
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d0f0      	beq.n	8006cca <HAL_RCC_OscConfig+0x23a>
 8006ce8:	e01a      	b.n	8006d20 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006cea:	4b09      	ldr	r3, [pc, #36]	; (8006d10 <HAL_RCC_OscConfig+0x280>)
 8006cec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006cee:	4a08      	ldr	r2, [pc, #32]	; (8006d10 <HAL_RCC_OscConfig+0x280>)
 8006cf0:	f023 0301 	bic.w	r3, r3, #1
 8006cf4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cf6:	f7fc faa9 	bl	800324c <HAL_GetTick>
 8006cfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006cfc:	e00a      	b.n	8006d14 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006cfe:	f7fc faa5 	bl	800324c <HAL_GetTick>
 8006d02:	4602      	mov	r2, r0
 8006d04:	693b      	ldr	r3, [r7, #16]
 8006d06:	1ad3      	subs	r3, r2, r3
 8006d08:	2b02      	cmp	r3, #2
 8006d0a:	d903      	bls.n	8006d14 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006d0c:	2303      	movs	r3, #3
 8006d0e:	e15c      	b.n	8006fca <HAL_RCC_OscConfig+0x53a>
 8006d10:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006d14:	4b91      	ldr	r3, [pc, #580]	; (8006f5c <HAL_RCC_OscConfig+0x4cc>)
 8006d16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d18:	f003 0302 	and.w	r3, r3, #2
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d1ee      	bne.n	8006cfe <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f003 0304 	and.w	r3, r3, #4
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	f000 80a4 	beq.w	8006e76 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006d2e:	4b8b      	ldr	r3, [pc, #556]	; (8006f5c <HAL_RCC_OscConfig+0x4cc>)
 8006d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d10d      	bne.n	8006d56 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8006d3a:	4b88      	ldr	r3, [pc, #544]	; (8006f5c <HAL_RCC_OscConfig+0x4cc>)
 8006d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d3e:	4a87      	ldr	r2, [pc, #540]	; (8006f5c <HAL_RCC_OscConfig+0x4cc>)
 8006d40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d44:	6413      	str	r3, [r2, #64]	; 0x40
 8006d46:	4b85      	ldr	r3, [pc, #532]	; (8006f5c <HAL_RCC_OscConfig+0x4cc>)
 8006d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d4e:	60bb      	str	r3, [r7, #8]
 8006d50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006d52:	2301      	movs	r3, #1
 8006d54:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006d56:	4b82      	ldr	r3, [pc, #520]	; (8006f60 <HAL_RCC_OscConfig+0x4d0>)
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d118      	bne.n	8006d94 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8006d62:	4b7f      	ldr	r3, [pc, #508]	; (8006f60 <HAL_RCC_OscConfig+0x4d0>)
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	4a7e      	ldr	r2, [pc, #504]	; (8006f60 <HAL_RCC_OscConfig+0x4d0>)
 8006d68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006d6e:	f7fc fa6d 	bl	800324c <HAL_GetTick>
 8006d72:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006d74:	e008      	b.n	8006d88 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d76:	f7fc fa69 	bl	800324c <HAL_GetTick>
 8006d7a:	4602      	mov	r2, r0
 8006d7c:	693b      	ldr	r3, [r7, #16]
 8006d7e:	1ad3      	subs	r3, r2, r3
 8006d80:	2b64      	cmp	r3, #100	; 0x64
 8006d82:	d901      	bls.n	8006d88 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8006d84:	2303      	movs	r3, #3
 8006d86:	e120      	b.n	8006fca <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006d88:	4b75      	ldr	r3, [pc, #468]	; (8006f60 <HAL_RCC_OscConfig+0x4d0>)
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d0f0      	beq.n	8006d76 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	689b      	ldr	r3, [r3, #8]
 8006d98:	2b01      	cmp	r3, #1
 8006d9a:	d106      	bne.n	8006daa <HAL_RCC_OscConfig+0x31a>
 8006d9c:	4b6f      	ldr	r3, [pc, #444]	; (8006f5c <HAL_RCC_OscConfig+0x4cc>)
 8006d9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006da0:	4a6e      	ldr	r2, [pc, #440]	; (8006f5c <HAL_RCC_OscConfig+0x4cc>)
 8006da2:	f043 0301 	orr.w	r3, r3, #1
 8006da6:	6713      	str	r3, [r2, #112]	; 0x70
 8006da8:	e02d      	b.n	8006e06 <HAL_RCC_OscConfig+0x376>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	689b      	ldr	r3, [r3, #8]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d10c      	bne.n	8006dcc <HAL_RCC_OscConfig+0x33c>
 8006db2:	4b6a      	ldr	r3, [pc, #424]	; (8006f5c <HAL_RCC_OscConfig+0x4cc>)
 8006db4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006db6:	4a69      	ldr	r2, [pc, #420]	; (8006f5c <HAL_RCC_OscConfig+0x4cc>)
 8006db8:	f023 0301 	bic.w	r3, r3, #1
 8006dbc:	6713      	str	r3, [r2, #112]	; 0x70
 8006dbe:	4b67      	ldr	r3, [pc, #412]	; (8006f5c <HAL_RCC_OscConfig+0x4cc>)
 8006dc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dc2:	4a66      	ldr	r2, [pc, #408]	; (8006f5c <HAL_RCC_OscConfig+0x4cc>)
 8006dc4:	f023 0304 	bic.w	r3, r3, #4
 8006dc8:	6713      	str	r3, [r2, #112]	; 0x70
 8006dca:	e01c      	b.n	8006e06 <HAL_RCC_OscConfig+0x376>
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	689b      	ldr	r3, [r3, #8]
 8006dd0:	2b05      	cmp	r3, #5
 8006dd2:	d10c      	bne.n	8006dee <HAL_RCC_OscConfig+0x35e>
 8006dd4:	4b61      	ldr	r3, [pc, #388]	; (8006f5c <HAL_RCC_OscConfig+0x4cc>)
 8006dd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dd8:	4a60      	ldr	r2, [pc, #384]	; (8006f5c <HAL_RCC_OscConfig+0x4cc>)
 8006dda:	f043 0304 	orr.w	r3, r3, #4
 8006dde:	6713      	str	r3, [r2, #112]	; 0x70
 8006de0:	4b5e      	ldr	r3, [pc, #376]	; (8006f5c <HAL_RCC_OscConfig+0x4cc>)
 8006de2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006de4:	4a5d      	ldr	r2, [pc, #372]	; (8006f5c <HAL_RCC_OscConfig+0x4cc>)
 8006de6:	f043 0301 	orr.w	r3, r3, #1
 8006dea:	6713      	str	r3, [r2, #112]	; 0x70
 8006dec:	e00b      	b.n	8006e06 <HAL_RCC_OscConfig+0x376>
 8006dee:	4b5b      	ldr	r3, [pc, #364]	; (8006f5c <HAL_RCC_OscConfig+0x4cc>)
 8006df0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006df2:	4a5a      	ldr	r2, [pc, #360]	; (8006f5c <HAL_RCC_OscConfig+0x4cc>)
 8006df4:	f023 0301 	bic.w	r3, r3, #1
 8006df8:	6713      	str	r3, [r2, #112]	; 0x70
 8006dfa:	4b58      	ldr	r3, [pc, #352]	; (8006f5c <HAL_RCC_OscConfig+0x4cc>)
 8006dfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dfe:	4a57      	ldr	r2, [pc, #348]	; (8006f5c <HAL_RCC_OscConfig+0x4cc>)
 8006e00:	f023 0304 	bic.w	r3, r3, #4
 8006e04:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	689b      	ldr	r3, [r3, #8]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d015      	beq.n	8006e3a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e0e:	f7fc fa1d 	bl	800324c <HAL_GetTick>
 8006e12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e14:	e00a      	b.n	8006e2c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e16:	f7fc fa19 	bl	800324c <HAL_GetTick>
 8006e1a:	4602      	mov	r2, r0
 8006e1c:	693b      	ldr	r3, [r7, #16]
 8006e1e:	1ad3      	subs	r3, r2, r3
 8006e20:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d901      	bls.n	8006e2c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8006e28:	2303      	movs	r3, #3
 8006e2a:	e0ce      	b.n	8006fca <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e2c:	4b4b      	ldr	r3, [pc, #300]	; (8006f5c <HAL_RCC_OscConfig+0x4cc>)
 8006e2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e30:	f003 0302 	and.w	r3, r3, #2
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d0ee      	beq.n	8006e16 <HAL_RCC_OscConfig+0x386>
 8006e38:	e014      	b.n	8006e64 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e3a:	f7fc fa07 	bl	800324c <HAL_GetTick>
 8006e3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006e40:	e00a      	b.n	8006e58 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e42:	f7fc fa03 	bl	800324c <HAL_GetTick>
 8006e46:	4602      	mov	r2, r0
 8006e48:	693b      	ldr	r3, [r7, #16]
 8006e4a:	1ad3      	subs	r3, r2, r3
 8006e4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d901      	bls.n	8006e58 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8006e54:	2303      	movs	r3, #3
 8006e56:	e0b8      	b.n	8006fca <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006e58:	4b40      	ldr	r3, [pc, #256]	; (8006f5c <HAL_RCC_OscConfig+0x4cc>)
 8006e5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e5c:	f003 0302 	and.w	r3, r3, #2
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d1ee      	bne.n	8006e42 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006e64:	7dfb      	ldrb	r3, [r7, #23]
 8006e66:	2b01      	cmp	r3, #1
 8006e68:	d105      	bne.n	8006e76 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006e6a:	4b3c      	ldr	r3, [pc, #240]	; (8006f5c <HAL_RCC_OscConfig+0x4cc>)
 8006e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e6e:	4a3b      	ldr	r2, [pc, #236]	; (8006f5c <HAL_RCC_OscConfig+0x4cc>)
 8006e70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006e74:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	699b      	ldr	r3, [r3, #24]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	f000 80a4 	beq.w	8006fc8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006e80:	4b36      	ldr	r3, [pc, #216]	; (8006f5c <HAL_RCC_OscConfig+0x4cc>)
 8006e82:	689b      	ldr	r3, [r3, #8]
 8006e84:	f003 030c 	and.w	r3, r3, #12
 8006e88:	2b08      	cmp	r3, #8
 8006e8a:	d06b      	beq.n	8006f64 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	699b      	ldr	r3, [r3, #24]
 8006e90:	2b02      	cmp	r3, #2
 8006e92:	d149      	bne.n	8006f28 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e94:	4b31      	ldr	r3, [pc, #196]	; (8006f5c <HAL_RCC_OscConfig+0x4cc>)
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	4a30      	ldr	r2, [pc, #192]	; (8006f5c <HAL_RCC_OscConfig+0x4cc>)
 8006e9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006e9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ea0:	f7fc f9d4 	bl	800324c <HAL_GetTick>
 8006ea4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ea6:	e008      	b.n	8006eba <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ea8:	f7fc f9d0 	bl	800324c <HAL_GetTick>
 8006eac:	4602      	mov	r2, r0
 8006eae:	693b      	ldr	r3, [r7, #16]
 8006eb0:	1ad3      	subs	r3, r2, r3
 8006eb2:	2b02      	cmp	r3, #2
 8006eb4:	d901      	bls.n	8006eba <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8006eb6:	2303      	movs	r3, #3
 8006eb8:	e087      	b.n	8006fca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006eba:	4b28      	ldr	r3, [pc, #160]	; (8006f5c <HAL_RCC_OscConfig+0x4cc>)
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d1f0      	bne.n	8006ea8 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	69da      	ldr	r2, [r3, #28]
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6a1b      	ldr	r3, [r3, #32]
 8006ece:	431a      	orrs	r2, r3
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ed4:	019b      	lsls	r3, r3, #6
 8006ed6:	431a      	orrs	r2, r3
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006edc:	085b      	lsrs	r3, r3, #1
 8006ede:	3b01      	subs	r3, #1
 8006ee0:	041b      	lsls	r3, r3, #16
 8006ee2:	431a      	orrs	r2, r3
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ee8:	061b      	lsls	r3, r3, #24
 8006eea:	4313      	orrs	r3, r2
 8006eec:	4a1b      	ldr	r2, [pc, #108]	; (8006f5c <HAL_RCC_OscConfig+0x4cc>)
 8006eee:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006ef2:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006ef4:	4b19      	ldr	r3, [pc, #100]	; (8006f5c <HAL_RCC_OscConfig+0x4cc>)
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	4a18      	ldr	r2, [pc, #96]	; (8006f5c <HAL_RCC_OscConfig+0x4cc>)
 8006efa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006efe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f00:	f7fc f9a4 	bl	800324c <HAL_GetTick>
 8006f04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f06:	e008      	b.n	8006f1a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f08:	f7fc f9a0 	bl	800324c <HAL_GetTick>
 8006f0c:	4602      	mov	r2, r0
 8006f0e:	693b      	ldr	r3, [r7, #16]
 8006f10:	1ad3      	subs	r3, r2, r3
 8006f12:	2b02      	cmp	r3, #2
 8006f14:	d901      	bls.n	8006f1a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8006f16:	2303      	movs	r3, #3
 8006f18:	e057      	b.n	8006fca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f1a:	4b10      	ldr	r3, [pc, #64]	; (8006f5c <HAL_RCC_OscConfig+0x4cc>)
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d0f0      	beq.n	8006f08 <HAL_RCC_OscConfig+0x478>
 8006f26:	e04f      	b.n	8006fc8 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f28:	4b0c      	ldr	r3, [pc, #48]	; (8006f5c <HAL_RCC_OscConfig+0x4cc>)
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	4a0b      	ldr	r2, [pc, #44]	; (8006f5c <HAL_RCC_OscConfig+0x4cc>)
 8006f2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006f32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f34:	f7fc f98a 	bl	800324c <HAL_GetTick>
 8006f38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f3a:	e008      	b.n	8006f4e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f3c:	f7fc f986 	bl	800324c <HAL_GetTick>
 8006f40:	4602      	mov	r2, r0
 8006f42:	693b      	ldr	r3, [r7, #16]
 8006f44:	1ad3      	subs	r3, r2, r3
 8006f46:	2b02      	cmp	r3, #2
 8006f48:	d901      	bls.n	8006f4e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8006f4a:	2303      	movs	r3, #3
 8006f4c:	e03d      	b.n	8006fca <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f4e:	4b03      	ldr	r3, [pc, #12]	; (8006f5c <HAL_RCC_OscConfig+0x4cc>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d1f0      	bne.n	8006f3c <HAL_RCC_OscConfig+0x4ac>
 8006f5a:	e035      	b.n	8006fc8 <HAL_RCC_OscConfig+0x538>
 8006f5c:	40023800 	.word	0x40023800
 8006f60:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8006f64:	4b1b      	ldr	r3, [pc, #108]	; (8006fd4 <HAL_RCC_OscConfig+0x544>)
 8006f66:	685b      	ldr	r3, [r3, #4]
 8006f68:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	699b      	ldr	r3, [r3, #24]
 8006f6e:	2b01      	cmp	r3, #1
 8006f70:	d028      	beq.n	8006fc4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006f7c:	429a      	cmp	r2, r3
 8006f7e:	d121      	bne.n	8006fc4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f8a:	429a      	cmp	r2, r3
 8006f8c:	d11a      	bne.n	8006fc4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006f8e:	68fa      	ldr	r2, [r7, #12]
 8006f90:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006f94:	4013      	ands	r3, r2
 8006f96:	687a      	ldr	r2, [r7, #4]
 8006f98:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006f9a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	d111      	bne.n	8006fc4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006faa:	085b      	lsrs	r3, r3, #1
 8006fac:	3b01      	subs	r3, #1
 8006fae:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006fb0:	429a      	cmp	r2, r3
 8006fb2:	d107      	bne.n	8006fc4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fbe:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006fc0:	429a      	cmp	r2, r3
 8006fc2:	d001      	beq.n	8006fc8 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8006fc4:	2301      	movs	r3, #1
 8006fc6:	e000      	b.n	8006fca <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8006fc8:	2300      	movs	r3, #0
}
 8006fca:	4618      	mov	r0, r3
 8006fcc:	3718      	adds	r7, #24
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	bd80      	pop	{r7, pc}
 8006fd2:	bf00      	nop
 8006fd4:	40023800 	.word	0x40023800

08006fd8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b084      	sub	sp, #16
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
 8006fe0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d101      	bne.n	8006ff0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006fec:	2301      	movs	r3, #1
 8006fee:	e0d0      	b.n	8007192 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006ff0:	4b6a      	ldr	r3, [pc, #424]	; (800719c <HAL_RCC_ClockConfig+0x1c4>)
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f003 030f 	and.w	r3, r3, #15
 8006ff8:	683a      	ldr	r2, [r7, #0]
 8006ffa:	429a      	cmp	r2, r3
 8006ffc:	d910      	bls.n	8007020 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ffe:	4b67      	ldr	r3, [pc, #412]	; (800719c <HAL_RCC_ClockConfig+0x1c4>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f023 020f 	bic.w	r2, r3, #15
 8007006:	4965      	ldr	r1, [pc, #404]	; (800719c <HAL_RCC_ClockConfig+0x1c4>)
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	4313      	orrs	r3, r2
 800700c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800700e:	4b63      	ldr	r3, [pc, #396]	; (800719c <HAL_RCC_ClockConfig+0x1c4>)
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f003 030f 	and.w	r3, r3, #15
 8007016:	683a      	ldr	r2, [r7, #0]
 8007018:	429a      	cmp	r2, r3
 800701a:	d001      	beq.n	8007020 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800701c:	2301      	movs	r3, #1
 800701e:	e0b8      	b.n	8007192 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f003 0302 	and.w	r3, r3, #2
 8007028:	2b00      	cmp	r3, #0
 800702a:	d020      	beq.n	800706e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f003 0304 	and.w	r3, r3, #4
 8007034:	2b00      	cmp	r3, #0
 8007036:	d005      	beq.n	8007044 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007038:	4b59      	ldr	r3, [pc, #356]	; (80071a0 <HAL_RCC_ClockConfig+0x1c8>)
 800703a:	689b      	ldr	r3, [r3, #8]
 800703c:	4a58      	ldr	r2, [pc, #352]	; (80071a0 <HAL_RCC_ClockConfig+0x1c8>)
 800703e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007042:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f003 0308 	and.w	r3, r3, #8
 800704c:	2b00      	cmp	r3, #0
 800704e:	d005      	beq.n	800705c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007050:	4b53      	ldr	r3, [pc, #332]	; (80071a0 <HAL_RCC_ClockConfig+0x1c8>)
 8007052:	689b      	ldr	r3, [r3, #8]
 8007054:	4a52      	ldr	r2, [pc, #328]	; (80071a0 <HAL_RCC_ClockConfig+0x1c8>)
 8007056:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800705a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800705c:	4b50      	ldr	r3, [pc, #320]	; (80071a0 <HAL_RCC_ClockConfig+0x1c8>)
 800705e:	689b      	ldr	r3, [r3, #8]
 8007060:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	689b      	ldr	r3, [r3, #8]
 8007068:	494d      	ldr	r1, [pc, #308]	; (80071a0 <HAL_RCC_ClockConfig+0x1c8>)
 800706a:	4313      	orrs	r3, r2
 800706c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f003 0301 	and.w	r3, r3, #1
 8007076:	2b00      	cmp	r3, #0
 8007078:	d040      	beq.n	80070fc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	685b      	ldr	r3, [r3, #4]
 800707e:	2b01      	cmp	r3, #1
 8007080:	d107      	bne.n	8007092 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007082:	4b47      	ldr	r3, [pc, #284]	; (80071a0 <HAL_RCC_ClockConfig+0x1c8>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800708a:	2b00      	cmp	r3, #0
 800708c:	d115      	bne.n	80070ba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800708e:	2301      	movs	r3, #1
 8007090:	e07f      	b.n	8007192 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	685b      	ldr	r3, [r3, #4]
 8007096:	2b02      	cmp	r3, #2
 8007098:	d107      	bne.n	80070aa <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800709a:	4b41      	ldr	r3, [pc, #260]	; (80071a0 <HAL_RCC_ClockConfig+0x1c8>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d109      	bne.n	80070ba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80070a6:	2301      	movs	r3, #1
 80070a8:	e073      	b.n	8007192 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80070aa:	4b3d      	ldr	r3, [pc, #244]	; (80071a0 <HAL_RCC_ClockConfig+0x1c8>)
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f003 0302 	and.w	r3, r3, #2
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d101      	bne.n	80070ba <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80070b6:	2301      	movs	r3, #1
 80070b8:	e06b      	b.n	8007192 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80070ba:	4b39      	ldr	r3, [pc, #228]	; (80071a0 <HAL_RCC_ClockConfig+0x1c8>)
 80070bc:	689b      	ldr	r3, [r3, #8]
 80070be:	f023 0203 	bic.w	r2, r3, #3
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	685b      	ldr	r3, [r3, #4]
 80070c6:	4936      	ldr	r1, [pc, #216]	; (80071a0 <HAL_RCC_ClockConfig+0x1c8>)
 80070c8:	4313      	orrs	r3, r2
 80070ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80070cc:	f7fc f8be 	bl	800324c <HAL_GetTick>
 80070d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80070d2:	e00a      	b.n	80070ea <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80070d4:	f7fc f8ba 	bl	800324c <HAL_GetTick>
 80070d8:	4602      	mov	r2, r0
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	1ad3      	subs	r3, r2, r3
 80070de:	f241 3288 	movw	r2, #5000	; 0x1388
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d901      	bls.n	80070ea <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80070e6:	2303      	movs	r3, #3
 80070e8:	e053      	b.n	8007192 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80070ea:	4b2d      	ldr	r3, [pc, #180]	; (80071a0 <HAL_RCC_ClockConfig+0x1c8>)
 80070ec:	689b      	ldr	r3, [r3, #8]
 80070ee:	f003 020c 	and.w	r2, r3, #12
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	685b      	ldr	r3, [r3, #4]
 80070f6:	009b      	lsls	r3, r3, #2
 80070f8:	429a      	cmp	r2, r3
 80070fa:	d1eb      	bne.n	80070d4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80070fc:	4b27      	ldr	r3, [pc, #156]	; (800719c <HAL_RCC_ClockConfig+0x1c4>)
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f003 030f 	and.w	r3, r3, #15
 8007104:	683a      	ldr	r2, [r7, #0]
 8007106:	429a      	cmp	r2, r3
 8007108:	d210      	bcs.n	800712c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800710a:	4b24      	ldr	r3, [pc, #144]	; (800719c <HAL_RCC_ClockConfig+0x1c4>)
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f023 020f 	bic.w	r2, r3, #15
 8007112:	4922      	ldr	r1, [pc, #136]	; (800719c <HAL_RCC_ClockConfig+0x1c4>)
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	4313      	orrs	r3, r2
 8007118:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800711a:	4b20      	ldr	r3, [pc, #128]	; (800719c <HAL_RCC_ClockConfig+0x1c4>)
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f003 030f 	and.w	r3, r3, #15
 8007122:	683a      	ldr	r2, [r7, #0]
 8007124:	429a      	cmp	r2, r3
 8007126:	d001      	beq.n	800712c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8007128:	2301      	movs	r3, #1
 800712a:	e032      	b.n	8007192 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f003 0304 	and.w	r3, r3, #4
 8007134:	2b00      	cmp	r3, #0
 8007136:	d008      	beq.n	800714a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007138:	4b19      	ldr	r3, [pc, #100]	; (80071a0 <HAL_RCC_ClockConfig+0x1c8>)
 800713a:	689b      	ldr	r3, [r3, #8]
 800713c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	68db      	ldr	r3, [r3, #12]
 8007144:	4916      	ldr	r1, [pc, #88]	; (80071a0 <HAL_RCC_ClockConfig+0x1c8>)
 8007146:	4313      	orrs	r3, r2
 8007148:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f003 0308 	and.w	r3, r3, #8
 8007152:	2b00      	cmp	r3, #0
 8007154:	d009      	beq.n	800716a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007156:	4b12      	ldr	r3, [pc, #72]	; (80071a0 <HAL_RCC_ClockConfig+0x1c8>)
 8007158:	689b      	ldr	r3, [r3, #8]
 800715a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	691b      	ldr	r3, [r3, #16]
 8007162:	00db      	lsls	r3, r3, #3
 8007164:	490e      	ldr	r1, [pc, #56]	; (80071a0 <HAL_RCC_ClockConfig+0x1c8>)
 8007166:	4313      	orrs	r3, r2
 8007168:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800716a:	f000 f821 	bl	80071b0 <HAL_RCC_GetSysClockFreq>
 800716e:	4602      	mov	r2, r0
 8007170:	4b0b      	ldr	r3, [pc, #44]	; (80071a0 <HAL_RCC_ClockConfig+0x1c8>)
 8007172:	689b      	ldr	r3, [r3, #8]
 8007174:	091b      	lsrs	r3, r3, #4
 8007176:	f003 030f 	and.w	r3, r3, #15
 800717a:	490a      	ldr	r1, [pc, #40]	; (80071a4 <HAL_RCC_ClockConfig+0x1cc>)
 800717c:	5ccb      	ldrb	r3, [r1, r3]
 800717e:	fa22 f303 	lsr.w	r3, r2, r3
 8007182:	4a09      	ldr	r2, [pc, #36]	; (80071a8 <HAL_RCC_ClockConfig+0x1d0>)
 8007184:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007186:	4b09      	ldr	r3, [pc, #36]	; (80071ac <HAL_RCC_ClockConfig+0x1d4>)
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	4618      	mov	r0, r3
 800718c:	f7fc f81a 	bl	80031c4 <HAL_InitTick>

  return HAL_OK;
 8007190:	2300      	movs	r3, #0
}
 8007192:	4618      	mov	r0, r3
 8007194:	3710      	adds	r7, #16
 8007196:	46bd      	mov	sp, r7
 8007198:	bd80      	pop	{r7, pc}
 800719a:	bf00      	nop
 800719c:	40023c00 	.word	0x40023c00
 80071a0:	40023800 	.word	0x40023800
 80071a4:	0800f850 	.word	0x0800f850
 80071a8:	20000000 	.word	0x20000000
 80071ac:	2000002c 	.word	0x2000002c

080071b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80071b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80071b4:	b090      	sub	sp, #64	; 0x40
 80071b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80071b8:	2300      	movs	r3, #0
 80071ba:	637b      	str	r3, [r7, #52]	; 0x34
 80071bc:	2300      	movs	r3, #0
 80071be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80071c0:	2300      	movs	r3, #0
 80071c2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 80071c4:	2300      	movs	r3, #0
 80071c6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80071c8:	4b59      	ldr	r3, [pc, #356]	; (8007330 <HAL_RCC_GetSysClockFreq+0x180>)
 80071ca:	689b      	ldr	r3, [r3, #8]
 80071cc:	f003 030c 	and.w	r3, r3, #12
 80071d0:	2b08      	cmp	r3, #8
 80071d2:	d00d      	beq.n	80071f0 <HAL_RCC_GetSysClockFreq+0x40>
 80071d4:	2b08      	cmp	r3, #8
 80071d6:	f200 80a1 	bhi.w	800731c <HAL_RCC_GetSysClockFreq+0x16c>
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d002      	beq.n	80071e4 <HAL_RCC_GetSysClockFreq+0x34>
 80071de:	2b04      	cmp	r3, #4
 80071e0:	d003      	beq.n	80071ea <HAL_RCC_GetSysClockFreq+0x3a>
 80071e2:	e09b      	b.n	800731c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80071e4:	4b53      	ldr	r3, [pc, #332]	; (8007334 <HAL_RCC_GetSysClockFreq+0x184>)
 80071e6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80071e8:	e09b      	b.n	8007322 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80071ea:	4b53      	ldr	r3, [pc, #332]	; (8007338 <HAL_RCC_GetSysClockFreq+0x188>)
 80071ec:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80071ee:	e098      	b.n	8007322 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80071f0:	4b4f      	ldr	r3, [pc, #316]	; (8007330 <HAL_RCC_GetSysClockFreq+0x180>)
 80071f2:	685b      	ldr	r3, [r3, #4]
 80071f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80071f8:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80071fa:	4b4d      	ldr	r3, [pc, #308]	; (8007330 <HAL_RCC_GetSysClockFreq+0x180>)
 80071fc:	685b      	ldr	r3, [r3, #4]
 80071fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007202:	2b00      	cmp	r3, #0
 8007204:	d028      	beq.n	8007258 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007206:	4b4a      	ldr	r3, [pc, #296]	; (8007330 <HAL_RCC_GetSysClockFreq+0x180>)
 8007208:	685b      	ldr	r3, [r3, #4]
 800720a:	099b      	lsrs	r3, r3, #6
 800720c:	2200      	movs	r2, #0
 800720e:	623b      	str	r3, [r7, #32]
 8007210:	627a      	str	r2, [r7, #36]	; 0x24
 8007212:	6a3b      	ldr	r3, [r7, #32]
 8007214:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007218:	2100      	movs	r1, #0
 800721a:	4b47      	ldr	r3, [pc, #284]	; (8007338 <HAL_RCC_GetSysClockFreq+0x188>)
 800721c:	fb03 f201 	mul.w	r2, r3, r1
 8007220:	2300      	movs	r3, #0
 8007222:	fb00 f303 	mul.w	r3, r0, r3
 8007226:	4413      	add	r3, r2
 8007228:	4a43      	ldr	r2, [pc, #268]	; (8007338 <HAL_RCC_GetSysClockFreq+0x188>)
 800722a:	fba0 1202 	umull	r1, r2, r0, r2
 800722e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007230:	460a      	mov	r2, r1
 8007232:	62ba      	str	r2, [r7, #40]	; 0x28
 8007234:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007236:	4413      	add	r3, r2
 8007238:	62fb      	str	r3, [r7, #44]	; 0x2c
 800723a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800723c:	2200      	movs	r2, #0
 800723e:	61bb      	str	r3, [r7, #24]
 8007240:	61fa      	str	r2, [r7, #28]
 8007242:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007246:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800724a:	f7f9 fd25 	bl	8000c98 <__aeabi_uldivmod>
 800724e:	4602      	mov	r2, r0
 8007250:	460b      	mov	r3, r1
 8007252:	4613      	mov	r3, r2
 8007254:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007256:	e053      	b.n	8007300 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007258:	4b35      	ldr	r3, [pc, #212]	; (8007330 <HAL_RCC_GetSysClockFreq+0x180>)
 800725a:	685b      	ldr	r3, [r3, #4]
 800725c:	099b      	lsrs	r3, r3, #6
 800725e:	2200      	movs	r2, #0
 8007260:	613b      	str	r3, [r7, #16]
 8007262:	617a      	str	r2, [r7, #20]
 8007264:	693b      	ldr	r3, [r7, #16]
 8007266:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800726a:	f04f 0b00 	mov.w	fp, #0
 800726e:	4652      	mov	r2, sl
 8007270:	465b      	mov	r3, fp
 8007272:	f04f 0000 	mov.w	r0, #0
 8007276:	f04f 0100 	mov.w	r1, #0
 800727a:	0159      	lsls	r1, r3, #5
 800727c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007280:	0150      	lsls	r0, r2, #5
 8007282:	4602      	mov	r2, r0
 8007284:	460b      	mov	r3, r1
 8007286:	ebb2 080a 	subs.w	r8, r2, sl
 800728a:	eb63 090b 	sbc.w	r9, r3, fp
 800728e:	f04f 0200 	mov.w	r2, #0
 8007292:	f04f 0300 	mov.w	r3, #0
 8007296:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800729a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800729e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80072a2:	ebb2 0408 	subs.w	r4, r2, r8
 80072a6:	eb63 0509 	sbc.w	r5, r3, r9
 80072aa:	f04f 0200 	mov.w	r2, #0
 80072ae:	f04f 0300 	mov.w	r3, #0
 80072b2:	00eb      	lsls	r3, r5, #3
 80072b4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80072b8:	00e2      	lsls	r2, r4, #3
 80072ba:	4614      	mov	r4, r2
 80072bc:	461d      	mov	r5, r3
 80072be:	eb14 030a 	adds.w	r3, r4, sl
 80072c2:	603b      	str	r3, [r7, #0]
 80072c4:	eb45 030b 	adc.w	r3, r5, fp
 80072c8:	607b      	str	r3, [r7, #4]
 80072ca:	f04f 0200 	mov.w	r2, #0
 80072ce:	f04f 0300 	mov.w	r3, #0
 80072d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80072d6:	4629      	mov	r1, r5
 80072d8:	028b      	lsls	r3, r1, #10
 80072da:	4621      	mov	r1, r4
 80072dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80072e0:	4621      	mov	r1, r4
 80072e2:	028a      	lsls	r2, r1, #10
 80072e4:	4610      	mov	r0, r2
 80072e6:	4619      	mov	r1, r3
 80072e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072ea:	2200      	movs	r2, #0
 80072ec:	60bb      	str	r3, [r7, #8]
 80072ee:	60fa      	str	r2, [r7, #12]
 80072f0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80072f4:	f7f9 fcd0 	bl	8000c98 <__aeabi_uldivmod>
 80072f8:	4602      	mov	r2, r0
 80072fa:	460b      	mov	r3, r1
 80072fc:	4613      	mov	r3, r2
 80072fe:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8007300:	4b0b      	ldr	r3, [pc, #44]	; (8007330 <HAL_RCC_GetSysClockFreq+0x180>)
 8007302:	685b      	ldr	r3, [r3, #4]
 8007304:	0c1b      	lsrs	r3, r3, #16
 8007306:	f003 0303 	and.w	r3, r3, #3
 800730a:	3301      	adds	r3, #1
 800730c:	005b      	lsls	r3, r3, #1
 800730e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8007310:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007314:	fbb2 f3f3 	udiv	r3, r2, r3
 8007318:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800731a:	e002      	b.n	8007322 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800731c:	4b05      	ldr	r3, [pc, #20]	; (8007334 <HAL_RCC_GetSysClockFreq+0x184>)
 800731e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007320:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8007324:	4618      	mov	r0, r3
 8007326:	3740      	adds	r7, #64	; 0x40
 8007328:	46bd      	mov	sp, r7
 800732a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800732e:	bf00      	nop
 8007330:	40023800 	.word	0x40023800
 8007334:	00f42400 	.word	0x00f42400
 8007338:	017d7840 	.word	0x017d7840

0800733c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800733c:	b480      	push	{r7}
 800733e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007340:	4b03      	ldr	r3, [pc, #12]	; (8007350 <HAL_RCC_GetHCLKFreq+0x14>)
 8007342:	681b      	ldr	r3, [r3, #0]
}
 8007344:	4618      	mov	r0, r3
 8007346:	46bd      	mov	sp, r7
 8007348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734c:	4770      	bx	lr
 800734e:	bf00      	nop
 8007350:	20000000 	.word	0x20000000

08007354 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b088      	sub	sp, #32
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800735c:	2300      	movs	r3, #0
 800735e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8007360:	2300      	movs	r3, #0
 8007362:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8007364:	2300      	movs	r3, #0
 8007366:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8007368:	2300      	movs	r3, #0
 800736a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800736c:	2300      	movs	r3, #0
 800736e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f003 0301 	and.w	r3, r3, #1
 8007378:	2b00      	cmp	r3, #0
 800737a:	d012      	beq.n	80073a2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800737c:	4b69      	ldr	r3, [pc, #420]	; (8007524 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800737e:	689b      	ldr	r3, [r3, #8]
 8007380:	4a68      	ldr	r2, [pc, #416]	; (8007524 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007382:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007386:	6093      	str	r3, [r2, #8]
 8007388:	4b66      	ldr	r3, [pc, #408]	; (8007524 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800738a:	689a      	ldr	r2, [r3, #8]
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007390:	4964      	ldr	r1, [pc, #400]	; (8007524 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007392:	4313      	orrs	r3, r2
 8007394:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800739a:	2b00      	cmp	r3, #0
 800739c:	d101      	bne.n	80073a2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800739e:	2301      	movs	r3, #1
 80073a0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d017      	beq.n	80073de <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80073ae:	4b5d      	ldr	r3, [pc, #372]	; (8007524 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80073b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80073b4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073bc:	4959      	ldr	r1, [pc, #356]	; (8007524 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80073be:	4313      	orrs	r3, r2
 80073c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80073cc:	d101      	bne.n	80073d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80073ce:	2301      	movs	r3, #1
 80073d0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d101      	bne.n	80073de <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80073da:	2301      	movs	r3, #1
 80073dc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d017      	beq.n	800741a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80073ea:	4b4e      	ldr	r3, [pc, #312]	; (8007524 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80073ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80073f0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073f8:	494a      	ldr	r1, [pc, #296]	; (8007524 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80073fa:	4313      	orrs	r3, r2
 80073fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007404:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007408:	d101      	bne.n	800740e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800740a:	2301      	movs	r3, #1
 800740c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007412:	2b00      	cmp	r3, #0
 8007414:	d101      	bne.n	800741a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8007416:	2301      	movs	r3, #1
 8007418:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007422:	2b00      	cmp	r3, #0
 8007424:	d001      	beq.n	800742a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8007426:	2301      	movs	r3, #1
 8007428:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f003 0320 	and.w	r3, r3, #32
 8007432:	2b00      	cmp	r3, #0
 8007434:	f000 808b 	beq.w	800754e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007438:	4b3a      	ldr	r3, [pc, #232]	; (8007524 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800743a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800743c:	4a39      	ldr	r2, [pc, #228]	; (8007524 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800743e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007442:	6413      	str	r3, [r2, #64]	; 0x40
 8007444:	4b37      	ldr	r3, [pc, #220]	; (8007524 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007448:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800744c:	60bb      	str	r3, [r7, #8]
 800744e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007450:	4b35      	ldr	r3, [pc, #212]	; (8007528 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	4a34      	ldr	r2, [pc, #208]	; (8007528 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007456:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800745a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800745c:	f7fb fef6 	bl	800324c <HAL_GetTick>
 8007460:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007462:	e008      	b.n	8007476 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007464:	f7fb fef2 	bl	800324c <HAL_GetTick>
 8007468:	4602      	mov	r2, r0
 800746a:	697b      	ldr	r3, [r7, #20]
 800746c:	1ad3      	subs	r3, r2, r3
 800746e:	2b64      	cmp	r3, #100	; 0x64
 8007470:	d901      	bls.n	8007476 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8007472:	2303      	movs	r3, #3
 8007474:	e357      	b.n	8007b26 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007476:	4b2c      	ldr	r3, [pc, #176]	; (8007528 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800747e:	2b00      	cmp	r3, #0
 8007480:	d0f0      	beq.n	8007464 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007482:	4b28      	ldr	r3, [pc, #160]	; (8007524 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007484:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007486:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800748a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800748c:	693b      	ldr	r3, [r7, #16]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d035      	beq.n	80074fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007496:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800749a:	693a      	ldr	r2, [r7, #16]
 800749c:	429a      	cmp	r2, r3
 800749e:	d02e      	beq.n	80074fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80074a0:	4b20      	ldr	r3, [pc, #128]	; (8007524 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80074a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80074a8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80074aa:	4b1e      	ldr	r3, [pc, #120]	; (8007524 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80074ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074ae:	4a1d      	ldr	r2, [pc, #116]	; (8007524 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80074b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80074b4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80074b6:	4b1b      	ldr	r3, [pc, #108]	; (8007524 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80074b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074ba:	4a1a      	ldr	r2, [pc, #104]	; (8007524 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80074bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80074c0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80074c2:	4a18      	ldr	r2, [pc, #96]	; (8007524 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80074c4:	693b      	ldr	r3, [r7, #16]
 80074c6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80074c8:	4b16      	ldr	r3, [pc, #88]	; (8007524 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80074ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074cc:	f003 0301 	and.w	r3, r3, #1
 80074d0:	2b01      	cmp	r3, #1
 80074d2:	d114      	bne.n	80074fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074d4:	f7fb feba 	bl	800324c <HAL_GetTick>
 80074d8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80074da:	e00a      	b.n	80074f2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80074dc:	f7fb feb6 	bl	800324c <HAL_GetTick>
 80074e0:	4602      	mov	r2, r0
 80074e2:	697b      	ldr	r3, [r7, #20]
 80074e4:	1ad3      	subs	r3, r2, r3
 80074e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80074ea:	4293      	cmp	r3, r2
 80074ec:	d901      	bls.n	80074f2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80074ee:	2303      	movs	r3, #3
 80074f0:	e319      	b.n	8007b26 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80074f2:	4b0c      	ldr	r3, [pc, #48]	; (8007524 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80074f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074f6:	f003 0302 	and.w	r3, r3, #2
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d0ee      	beq.n	80074dc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007502:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007506:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800750a:	d111      	bne.n	8007530 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800750c:	4b05      	ldr	r3, [pc, #20]	; (8007524 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800750e:	689b      	ldr	r3, [r3, #8]
 8007510:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007518:	4b04      	ldr	r3, [pc, #16]	; (800752c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800751a:	400b      	ands	r3, r1
 800751c:	4901      	ldr	r1, [pc, #4]	; (8007524 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800751e:	4313      	orrs	r3, r2
 8007520:	608b      	str	r3, [r1, #8]
 8007522:	e00b      	b.n	800753c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8007524:	40023800 	.word	0x40023800
 8007528:	40007000 	.word	0x40007000
 800752c:	0ffffcff 	.word	0x0ffffcff
 8007530:	4baa      	ldr	r3, [pc, #680]	; (80077dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007532:	689b      	ldr	r3, [r3, #8]
 8007534:	4aa9      	ldr	r2, [pc, #676]	; (80077dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007536:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800753a:	6093      	str	r3, [r2, #8]
 800753c:	4ba7      	ldr	r3, [pc, #668]	; (80077dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800753e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007544:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007548:	49a4      	ldr	r1, [pc, #656]	; (80077dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800754a:	4313      	orrs	r3, r2
 800754c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	f003 0310 	and.w	r3, r3, #16
 8007556:	2b00      	cmp	r3, #0
 8007558:	d010      	beq.n	800757c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800755a:	4ba0      	ldr	r3, [pc, #640]	; (80077dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800755c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007560:	4a9e      	ldr	r2, [pc, #632]	; (80077dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007562:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007566:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800756a:	4b9c      	ldr	r3, [pc, #624]	; (80077dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800756c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007574:	4999      	ldr	r1, [pc, #612]	; (80077dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007576:	4313      	orrs	r3, r2
 8007578:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007584:	2b00      	cmp	r3, #0
 8007586:	d00a      	beq.n	800759e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007588:	4b94      	ldr	r3, [pc, #592]	; (80077dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800758a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800758e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007596:	4991      	ldr	r1, [pc, #580]	; (80077dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007598:	4313      	orrs	r3, r2
 800759a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d00a      	beq.n	80075c0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80075aa:	4b8c      	ldr	r3, [pc, #560]	; (80077dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80075ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075b0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80075b8:	4988      	ldr	r1, [pc, #544]	; (80077dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80075ba:	4313      	orrs	r3, r2
 80075bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d00a      	beq.n	80075e2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80075cc:	4b83      	ldr	r3, [pc, #524]	; (80077dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80075ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075d2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80075da:	4980      	ldr	r1, [pc, #512]	; (80077dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80075dc:	4313      	orrs	r3, r2
 80075de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d00a      	beq.n	8007604 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80075ee:	4b7b      	ldr	r3, [pc, #492]	; (80077dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80075f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075f4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075fc:	4977      	ldr	r1, [pc, #476]	; (80077dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80075fe:	4313      	orrs	r3, r2
 8007600:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800760c:	2b00      	cmp	r3, #0
 800760e:	d00a      	beq.n	8007626 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007610:	4b72      	ldr	r3, [pc, #456]	; (80077dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007612:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007616:	f023 0203 	bic.w	r2, r3, #3
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800761e:	496f      	ldr	r1, [pc, #444]	; (80077dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007620:	4313      	orrs	r3, r2
 8007622:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800762e:	2b00      	cmp	r3, #0
 8007630:	d00a      	beq.n	8007648 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007632:	4b6a      	ldr	r3, [pc, #424]	; (80077dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007634:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007638:	f023 020c 	bic.w	r2, r3, #12
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007640:	4966      	ldr	r1, [pc, #408]	; (80077dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007642:	4313      	orrs	r3, r2
 8007644:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007650:	2b00      	cmp	r3, #0
 8007652:	d00a      	beq.n	800766a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007654:	4b61      	ldr	r3, [pc, #388]	; (80077dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007656:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800765a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007662:	495e      	ldr	r1, [pc, #376]	; (80077dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007664:	4313      	orrs	r3, r2
 8007666:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007672:	2b00      	cmp	r3, #0
 8007674:	d00a      	beq.n	800768c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007676:	4b59      	ldr	r3, [pc, #356]	; (80077dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007678:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800767c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007684:	4955      	ldr	r1, [pc, #340]	; (80077dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007686:	4313      	orrs	r3, r2
 8007688:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007694:	2b00      	cmp	r3, #0
 8007696:	d00a      	beq.n	80076ae <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007698:	4b50      	ldr	r3, [pc, #320]	; (80077dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800769a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800769e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076a6:	494d      	ldr	r1, [pc, #308]	; (80077dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80076a8:	4313      	orrs	r3, r2
 80076aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d00a      	beq.n	80076d0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80076ba:	4b48      	ldr	r3, [pc, #288]	; (80077dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80076bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076c0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076c8:	4944      	ldr	r1, [pc, #272]	; (80077dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80076ca:	4313      	orrs	r3, r2
 80076cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d00a      	beq.n	80076f2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80076dc:	4b3f      	ldr	r3, [pc, #252]	; (80077dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80076de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076e2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076ea:	493c      	ldr	r1, [pc, #240]	; (80077dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80076ec:	4313      	orrs	r3, r2
 80076ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d00a      	beq.n	8007714 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80076fe:	4b37      	ldr	r3, [pc, #220]	; (80077dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007700:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007704:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800770c:	4933      	ldr	r1, [pc, #204]	; (80077dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800770e:	4313      	orrs	r3, r2
 8007710:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800771c:	2b00      	cmp	r3, #0
 800771e:	d00a      	beq.n	8007736 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007720:	4b2e      	ldr	r3, [pc, #184]	; (80077dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007722:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007726:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800772e:	492b      	ldr	r1, [pc, #172]	; (80077dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007730:	4313      	orrs	r3, r2
 8007732:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800773e:	2b00      	cmp	r3, #0
 8007740:	d011      	beq.n	8007766 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007742:	4b26      	ldr	r3, [pc, #152]	; (80077dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007744:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007748:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007750:	4922      	ldr	r1, [pc, #136]	; (80077dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007752:	4313      	orrs	r3, r2
 8007754:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800775c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007760:	d101      	bne.n	8007766 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8007762:	2301      	movs	r3, #1
 8007764:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f003 0308 	and.w	r3, r3, #8
 800776e:	2b00      	cmp	r3, #0
 8007770:	d001      	beq.n	8007776 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8007772:	2301      	movs	r3, #1
 8007774:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800777e:	2b00      	cmp	r3, #0
 8007780:	d00a      	beq.n	8007798 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007782:	4b16      	ldr	r3, [pc, #88]	; (80077dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007784:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007788:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007790:	4912      	ldr	r1, [pc, #72]	; (80077dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007792:	4313      	orrs	r3, r2
 8007794:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d00b      	beq.n	80077bc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80077a4:	4b0d      	ldr	r3, [pc, #52]	; (80077dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80077a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077aa:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80077b4:	4909      	ldr	r1, [pc, #36]	; (80077dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80077b6:	4313      	orrs	r3, r2
 80077b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80077bc:	69fb      	ldr	r3, [r7, #28]
 80077be:	2b01      	cmp	r3, #1
 80077c0:	d006      	beq.n	80077d0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	f000 80d9 	beq.w	8007982 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80077d0:	4b02      	ldr	r3, [pc, #8]	; (80077dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	4a01      	ldr	r2, [pc, #4]	; (80077dc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80077d6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80077da:	e001      	b.n	80077e0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80077dc:	40023800 	.word	0x40023800
 80077e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80077e2:	f7fb fd33 	bl	800324c <HAL_GetTick>
 80077e6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80077e8:	e008      	b.n	80077fc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80077ea:	f7fb fd2f 	bl	800324c <HAL_GetTick>
 80077ee:	4602      	mov	r2, r0
 80077f0:	697b      	ldr	r3, [r7, #20]
 80077f2:	1ad3      	subs	r3, r2, r3
 80077f4:	2b64      	cmp	r3, #100	; 0x64
 80077f6:	d901      	bls.n	80077fc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80077f8:	2303      	movs	r3, #3
 80077fa:	e194      	b.n	8007b26 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80077fc:	4b6c      	ldr	r3, [pc, #432]	; (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007804:	2b00      	cmp	r3, #0
 8007806:	d1f0      	bne.n	80077ea <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	f003 0301 	and.w	r3, r3, #1
 8007810:	2b00      	cmp	r3, #0
 8007812:	d021      	beq.n	8007858 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007818:	2b00      	cmp	r3, #0
 800781a:	d11d      	bne.n	8007858 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800781c:	4b64      	ldr	r3, [pc, #400]	; (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800781e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007822:	0c1b      	lsrs	r3, r3, #16
 8007824:	f003 0303 	and.w	r3, r3, #3
 8007828:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800782a:	4b61      	ldr	r3, [pc, #388]	; (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800782c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007830:	0e1b      	lsrs	r3, r3, #24
 8007832:	f003 030f 	and.w	r3, r3, #15
 8007836:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	685b      	ldr	r3, [r3, #4]
 800783c:	019a      	lsls	r2, r3, #6
 800783e:	693b      	ldr	r3, [r7, #16]
 8007840:	041b      	lsls	r3, r3, #16
 8007842:	431a      	orrs	r2, r3
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	061b      	lsls	r3, r3, #24
 8007848:	431a      	orrs	r2, r3
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	689b      	ldr	r3, [r3, #8]
 800784e:	071b      	lsls	r3, r3, #28
 8007850:	4957      	ldr	r1, [pc, #348]	; (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007852:	4313      	orrs	r3, r2
 8007854:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007860:	2b00      	cmp	r3, #0
 8007862:	d004      	beq.n	800786e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007868:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800786c:	d00a      	beq.n	8007884 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007876:	2b00      	cmp	r3, #0
 8007878:	d02e      	beq.n	80078d8 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800787e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007882:	d129      	bne.n	80078d8 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007884:	4b4a      	ldr	r3, [pc, #296]	; (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007886:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800788a:	0c1b      	lsrs	r3, r3, #16
 800788c:	f003 0303 	and.w	r3, r3, #3
 8007890:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007892:	4b47      	ldr	r3, [pc, #284]	; (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007894:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007898:	0f1b      	lsrs	r3, r3, #28
 800789a:	f003 0307 	and.w	r3, r3, #7
 800789e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	685b      	ldr	r3, [r3, #4]
 80078a4:	019a      	lsls	r2, r3, #6
 80078a6:	693b      	ldr	r3, [r7, #16]
 80078a8:	041b      	lsls	r3, r3, #16
 80078aa:	431a      	orrs	r2, r3
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	68db      	ldr	r3, [r3, #12]
 80078b0:	061b      	lsls	r3, r3, #24
 80078b2:	431a      	orrs	r2, r3
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	071b      	lsls	r3, r3, #28
 80078b8:	493d      	ldr	r1, [pc, #244]	; (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80078ba:	4313      	orrs	r3, r2
 80078bc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80078c0:	4b3b      	ldr	r3, [pc, #236]	; (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80078c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80078c6:	f023 021f 	bic.w	r2, r3, #31
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078ce:	3b01      	subs	r3, #1
 80078d0:	4937      	ldr	r1, [pc, #220]	; (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80078d2:	4313      	orrs	r3, r2
 80078d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d01d      	beq.n	8007920 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80078e4:	4b32      	ldr	r3, [pc, #200]	; (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80078e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80078ea:	0e1b      	lsrs	r3, r3, #24
 80078ec:	f003 030f 	and.w	r3, r3, #15
 80078f0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80078f2:	4b2f      	ldr	r3, [pc, #188]	; (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80078f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80078f8:	0f1b      	lsrs	r3, r3, #28
 80078fa:	f003 0307 	and.w	r3, r3, #7
 80078fe:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	685b      	ldr	r3, [r3, #4]
 8007904:	019a      	lsls	r2, r3, #6
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	691b      	ldr	r3, [r3, #16]
 800790a:	041b      	lsls	r3, r3, #16
 800790c:	431a      	orrs	r2, r3
 800790e:	693b      	ldr	r3, [r7, #16]
 8007910:	061b      	lsls	r3, r3, #24
 8007912:	431a      	orrs	r2, r3
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	071b      	lsls	r3, r3, #28
 8007918:	4925      	ldr	r1, [pc, #148]	; (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800791a:	4313      	orrs	r3, r2
 800791c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007928:	2b00      	cmp	r3, #0
 800792a:	d011      	beq.n	8007950 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	685b      	ldr	r3, [r3, #4]
 8007930:	019a      	lsls	r2, r3, #6
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	691b      	ldr	r3, [r3, #16]
 8007936:	041b      	lsls	r3, r3, #16
 8007938:	431a      	orrs	r2, r3
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	68db      	ldr	r3, [r3, #12]
 800793e:	061b      	lsls	r3, r3, #24
 8007940:	431a      	orrs	r2, r3
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	689b      	ldr	r3, [r3, #8]
 8007946:	071b      	lsls	r3, r3, #28
 8007948:	4919      	ldr	r1, [pc, #100]	; (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800794a:	4313      	orrs	r3, r2
 800794c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007950:	4b17      	ldr	r3, [pc, #92]	; (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	4a16      	ldr	r2, [pc, #88]	; (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007956:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800795a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800795c:	f7fb fc76 	bl	800324c <HAL_GetTick>
 8007960:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007962:	e008      	b.n	8007976 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007964:	f7fb fc72 	bl	800324c <HAL_GetTick>
 8007968:	4602      	mov	r2, r0
 800796a:	697b      	ldr	r3, [r7, #20]
 800796c:	1ad3      	subs	r3, r2, r3
 800796e:	2b64      	cmp	r3, #100	; 0x64
 8007970:	d901      	bls.n	8007976 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007972:	2303      	movs	r3, #3
 8007974:	e0d7      	b.n	8007b26 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007976:	4b0e      	ldr	r3, [pc, #56]	; (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800797e:	2b00      	cmp	r3, #0
 8007980:	d0f0      	beq.n	8007964 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8007982:	69bb      	ldr	r3, [r7, #24]
 8007984:	2b01      	cmp	r3, #1
 8007986:	f040 80cd 	bne.w	8007b24 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800798a:	4b09      	ldr	r3, [pc, #36]	; (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	4a08      	ldr	r2, [pc, #32]	; (80079b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007990:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007994:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007996:	f7fb fc59 	bl	800324c <HAL_GetTick>
 800799a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800799c:	e00a      	b.n	80079b4 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800799e:	f7fb fc55 	bl	800324c <HAL_GetTick>
 80079a2:	4602      	mov	r2, r0
 80079a4:	697b      	ldr	r3, [r7, #20]
 80079a6:	1ad3      	subs	r3, r2, r3
 80079a8:	2b64      	cmp	r3, #100	; 0x64
 80079aa:	d903      	bls.n	80079b4 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80079ac:	2303      	movs	r3, #3
 80079ae:	e0ba      	b.n	8007b26 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80079b0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80079b4:	4b5e      	ldr	r3, [pc, #376]	; (8007b30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80079bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80079c0:	d0ed      	beq.n	800799e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d003      	beq.n	80079d6 <HAL_RCCEx_PeriphCLKConfig+0x682>
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d009      	beq.n	80079ea <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d02e      	beq.n	8007a40 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d12a      	bne.n	8007a40 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80079ea:	4b51      	ldr	r3, [pc, #324]	; (8007b30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80079ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079f0:	0c1b      	lsrs	r3, r3, #16
 80079f2:	f003 0303 	and.w	r3, r3, #3
 80079f6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80079f8:	4b4d      	ldr	r3, [pc, #308]	; (8007b30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80079fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079fe:	0f1b      	lsrs	r3, r3, #28
 8007a00:	f003 0307 	and.w	r3, r3, #7
 8007a04:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	695b      	ldr	r3, [r3, #20]
 8007a0a:	019a      	lsls	r2, r3, #6
 8007a0c:	693b      	ldr	r3, [r7, #16]
 8007a0e:	041b      	lsls	r3, r3, #16
 8007a10:	431a      	orrs	r2, r3
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	699b      	ldr	r3, [r3, #24]
 8007a16:	061b      	lsls	r3, r3, #24
 8007a18:	431a      	orrs	r2, r3
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	071b      	lsls	r3, r3, #28
 8007a1e:	4944      	ldr	r1, [pc, #272]	; (8007b30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007a20:	4313      	orrs	r3, r2
 8007a22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007a26:	4b42      	ldr	r3, [pc, #264]	; (8007b30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007a28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a2c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a34:	3b01      	subs	r3, #1
 8007a36:	021b      	lsls	r3, r3, #8
 8007a38:	493d      	ldr	r1, [pc, #244]	; (8007b30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007a3a:	4313      	orrs	r3, r2
 8007a3c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d022      	beq.n	8007a92 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a50:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007a54:	d11d      	bne.n	8007a92 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007a56:	4b36      	ldr	r3, [pc, #216]	; (8007b30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007a58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a5c:	0e1b      	lsrs	r3, r3, #24
 8007a5e:	f003 030f 	and.w	r3, r3, #15
 8007a62:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007a64:	4b32      	ldr	r3, [pc, #200]	; (8007b30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a6a:	0f1b      	lsrs	r3, r3, #28
 8007a6c:	f003 0307 	and.w	r3, r3, #7
 8007a70:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	695b      	ldr	r3, [r3, #20]
 8007a76:	019a      	lsls	r2, r3, #6
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	6a1b      	ldr	r3, [r3, #32]
 8007a7c:	041b      	lsls	r3, r3, #16
 8007a7e:	431a      	orrs	r2, r3
 8007a80:	693b      	ldr	r3, [r7, #16]
 8007a82:	061b      	lsls	r3, r3, #24
 8007a84:	431a      	orrs	r2, r3
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	071b      	lsls	r3, r3, #28
 8007a8a:	4929      	ldr	r1, [pc, #164]	; (8007b30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007a8c:	4313      	orrs	r3, r2
 8007a8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f003 0308 	and.w	r3, r3, #8
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d028      	beq.n	8007af0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007a9e:	4b24      	ldr	r3, [pc, #144]	; (8007b30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007aa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007aa4:	0e1b      	lsrs	r3, r3, #24
 8007aa6:	f003 030f 	and.w	r3, r3, #15
 8007aaa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007aac:	4b20      	ldr	r3, [pc, #128]	; (8007b30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ab2:	0c1b      	lsrs	r3, r3, #16
 8007ab4:	f003 0303 	and.w	r3, r3, #3
 8007ab8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	695b      	ldr	r3, [r3, #20]
 8007abe:	019a      	lsls	r2, r3, #6
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	041b      	lsls	r3, r3, #16
 8007ac4:	431a      	orrs	r2, r3
 8007ac6:	693b      	ldr	r3, [r7, #16]
 8007ac8:	061b      	lsls	r3, r3, #24
 8007aca:	431a      	orrs	r2, r3
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	69db      	ldr	r3, [r3, #28]
 8007ad0:	071b      	lsls	r3, r3, #28
 8007ad2:	4917      	ldr	r1, [pc, #92]	; (8007b30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007ad4:	4313      	orrs	r3, r2
 8007ad6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007ada:	4b15      	ldr	r3, [pc, #84]	; (8007b30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007adc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ae0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ae8:	4911      	ldr	r1, [pc, #68]	; (8007b30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007aea:	4313      	orrs	r3, r2
 8007aec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007af0:	4b0f      	ldr	r3, [pc, #60]	; (8007b30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	4a0e      	ldr	r2, [pc, #56]	; (8007b30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007af6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007afa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007afc:	f7fb fba6 	bl	800324c <HAL_GetTick>
 8007b00:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007b02:	e008      	b.n	8007b16 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007b04:	f7fb fba2 	bl	800324c <HAL_GetTick>
 8007b08:	4602      	mov	r2, r0
 8007b0a:	697b      	ldr	r3, [r7, #20]
 8007b0c:	1ad3      	subs	r3, r2, r3
 8007b0e:	2b64      	cmp	r3, #100	; 0x64
 8007b10:	d901      	bls.n	8007b16 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007b12:	2303      	movs	r3, #3
 8007b14:	e007      	b.n	8007b26 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007b16:	4b06      	ldr	r3, [pc, #24]	; (8007b30 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007b1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007b22:	d1ef      	bne.n	8007b04 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8007b24:	2300      	movs	r3, #0
}
 8007b26:	4618      	mov	r0, r3
 8007b28:	3720      	adds	r7, #32
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	bd80      	pop	{r7, pc}
 8007b2e:	bf00      	nop
 8007b30:	40023800 	.word	0x40023800

08007b34 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007b34:	b084      	sub	sp, #16
 8007b36:	b580      	push	{r7, lr}
 8007b38:	b084      	sub	sp, #16
 8007b3a:	af00      	add	r7, sp, #0
 8007b3c:	6078      	str	r0, [r7, #4]
 8007b3e:	f107 001c 	add.w	r0, r7, #28
 8007b42:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b48:	2b01      	cmp	r3, #1
 8007b4a:	d120      	bne.n	8007b8e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b50:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	68da      	ldr	r2, [r3, #12]
 8007b5c:	4b20      	ldr	r3, [pc, #128]	; (8007be0 <USB_CoreInit+0xac>)
 8007b5e:	4013      	ands	r3, r2
 8007b60:	687a      	ldr	r2, [r7, #4]
 8007b62:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	68db      	ldr	r3, [r3, #12]
 8007b68:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007b70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b72:	2b01      	cmp	r3, #1
 8007b74:	d105      	bne.n	8007b82 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	68db      	ldr	r3, [r3, #12]
 8007b7a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	f001 fbee 	bl	8009364 <USB_CoreReset>
 8007b88:	4603      	mov	r3, r0
 8007b8a:	73fb      	strb	r3, [r7, #15]
 8007b8c:	e010      	b.n	8007bb0 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	68db      	ldr	r3, [r3, #12]
 8007b92:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007b9a:	6878      	ldr	r0, [r7, #4]
 8007b9c:	f001 fbe2 	bl	8009364 <USB_CoreReset>
 8007ba0:	4603      	mov	r3, r0
 8007ba2:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ba8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8007bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bb2:	2b01      	cmp	r3, #1
 8007bb4:	d10b      	bne.n	8007bce <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	689b      	ldr	r3, [r3, #8]
 8007bba:	f043 0206 	orr.w	r2, r3, #6
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	689b      	ldr	r3, [r3, #8]
 8007bc6:	f043 0220 	orr.w	r2, r3, #32
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007bce:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	3710      	adds	r7, #16
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007bda:	b004      	add	sp, #16
 8007bdc:	4770      	bx	lr
 8007bde:	bf00      	nop
 8007be0:	ffbdffbf 	.word	0xffbdffbf

08007be4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007be4:	b480      	push	{r7}
 8007be6:	b087      	sub	sp, #28
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	60f8      	str	r0, [r7, #12]
 8007bec:	60b9      	str	r1, [r7, #8]
 8007bee:	4613      	mov	r3, r2
 8007bf0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007bf2:	79fb      	ldrb	r3, [r7, #7]
 8007bf4:	2b02      	cmp	r3, #2
 8007bf6:	d165      	bne.n	8007cc4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007bf8:	68bb      	ldr	r3, [r7, #8]
 8007bfa:	4a41      	ldr	r2, [pc, #260]	; (8007d00 <USB_SetTurnaroundTime+0x11c>)
 8007bfc:	4293      	cmp	r3, r2
 8007bfe:	d906      	bls.n	8007c0e <USB_SetTurnaroundTime+0x2a>
 8007c00:	68bb      	ldr	r3, [r7, #8]
 8007c02:	4a40      	ldr	r2, [pc, #256]	; (8007d04 <USB_SetTurnaroundTime+0x120>)
 8007c04:	4293      	cmp	r3, r2
 8007c06:	d202      	bcs.n	8007c0e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007c08:	230f      	movs	r3, #15
 8007c0a:	617b      	str	r3, [r7, #20]
 8007c0c:	e062      	b.n	8007cd4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007c0e:	68bb      	ldr	r3, [r7, #8]
 8007c10:	4a3c      	ldr	r2, [pc, #240]	; (8007d04 <USB_SetTurnaroundTime+0x120>)
 8007c12:	4293      	cmp	r3, r2
 8007c14:	d306      	bcc.n	8007c24 <USB_SetTurnaroundTime+0x40>
 8007c16:	68bb      	ldr	r3, [r7, #8]
 8007c18:	4a3b      	ldr	r2, [pc, #236]	; (8007d08 <USB_SetTurnaroundTime+0x124>)
 8007c1a:	4293      	cmp	r3, r2
 8007c1c:	d202      	bcs.n	8007c24 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007c1e:	230e      	movs	r3, #14
 8007c20:	617b      	str	r3, [r7, #20]
 8007c22:	e057      	b.n	8007cd4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007c24:	68bb      	ldr	r3, [r7, #8]
 8007c26:	4a38      	ldr	r2, [pc, #224]	; (8007d08 <USB_SetTurnaroundTime+0x124>)
 8007c28:	4293      	cmp	r3, r2
 8007c2a:	d306      	bcc.n	8007c3a <USB_SetTurnaroundTime+0x56>
 8007c2c:	68bb      	ldr	r3, [r7, #8]
 8007c2e:	4a37      	ldr	r2, [pc, #220]	; (8007d0c <USB_SetTurnaroundTime+0x128>)
 8007c30:	4293      	cmp	r3, r2
 8007c32:	d202      	bcs.n	8007c3a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007c34:	230d      	movs	r3, #13
 8007c36:	617b      	str	r3, [r7, #20]
 8007c38:	e04c      	b.n	8007cd4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007c3a:	68bb      	ldr	r3, [r7, #8]
 8007c3c:	4a33      	ldr	r2, [pc, #204]	; (8007d0c <USB_SetTurnaroundTime+0x128>)
 8007c3e:	4293      	cmp	r3, r2
 8007c40:	d306      	bcc.n	8007c50 <USB_SetTurnaroundTime+0x6c>
 8007c42:	68bb      	ldr	r3, [r7, #8]
 8007c44:	4a32      	ldr	r2, [pc, #200]	; (8007d10 <USB_SetTurnaroundTime+0x12c>)
 8007c46:	4293      	cmp	r3, r2
 8007c48:	d802      	bhi.n	8007c50 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007c4a:	230c      	movs	r3, #12
 8007c4c:	617b      	str	r3, [r7, #20]
 8007c4e:	e041      	b.n	8007cd4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	4a2f      	ldr	r2, [pc, #188]	; (8007d10 <USB_SetTurnaroundTime+0x12c>)
 8007c54:	4293      	cmp	r3, r2
 8007c56:	d906      	bls.n	8007c66 <USB_SetTurnaroundTime+0x82>
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	4a2e      	ldr	r2, [pc, #184]	; (8007d14 <USB_SetTurnaroundTime+0x130>)
 8007c5c:	4293      	cmp	r3, r2
 8007c5e:	d802      	bhi.n	8007c66 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007c60:	230b      	movs	r3, #11
 8007c62:	617b      	str	r3, [r7, #20]
 8007c64:	e036      	b.n	8007cd4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007c66:	68bb      	ldr	r3, [r7, #8]
 8007c68:	4a2a      	ldr	r2, [pc, #168]	; (8007d14 <USB_SetTurnaroundTime+0x130>)
 8007c6a:	4293      	cmp	r3, r2
 8007c6c:	d906      	bls.n	8007c7c <USB_SetTurnaroundTime+0x98>
 8007c6e:	68bb      	ldr	r3, [r7, #8]
 8007c70:	4a29      	ldr	r2, [pc, #164]	; (8007d18 <USB_SetTurnaroundTime+0x134>)
 8007c72:	4293      	cmp	r3, r2
 8007c74:	d802      	bhi.n	8007c7c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007c76:	230a      	movs	r3, #10
 8007c78:	617b      	str	r3, [r7, #20]
 8007c7a:	e02b      	b.n	8007cd4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007c7c:	68bb      	ldr	r3, [r7, #8]
 8007c7e:	4a26      	ldr	r2, [pc, #152]	; (8007d18 <USB_SetTurnaroundTime+0x134>)
 8007c80:	4293      	cmp	r3, r2
 8007c82:	d906      	bls.n	8007c92 <USB_SetTurnaroundTime+0xae>
 8007c84:	68bb      	ldr	r3, [r7, #8]
 8007c86:	4a25      	ldr	r2, [pc, #148]	; (8007d1c <USB_SetTurnaroundTime+0x138>)
 8007c88:	4293      	cmp	r3, r2
 8007c8a:	d202      	bcs.n	8007c92 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007c8c:	2309      	movs	r3, #9
 8007c8e:	617b      	str	r3, [r7, #20]
 8007c90:	e020      	b.n	8007cd4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007c92:	68bb      	ldr	r3, [r7, #8]
 8007c94:	4a21      	ldr	r2, [pc, #132]	; (8007d1c <USB_SetTurnaroundTime+0x138>)
 8007c96:	4293      	cmp	r3, r2
 8007c98:	d306      	bcc.n	8007ca8 <USB_SetTurnaroundTime+0xc4>
 8007c9a:	68bb      	ldr	r3, [r7, #8]
 8007c9c:	4a20      	ldr	r2, [pc, #128]	; (8007d20 <USB_SetTurnaroundTime+0x13c>)
 8007c9e:	4293      	cmp	r3, r2
 8007ca0:	d802      	bhi.n	8007ca8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007ca2:	2308      	movs	r3, #8
 8007ca4:	617b      	str	r3, [r7, #20]
 8007ca6:	e015      	b.n	8007cd4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007ca8:	68bb      	ldr	r3, [r7, #8]
 8007caa:	4a1d      	ldr	r2, [pc, #116]	; (8007d20 <USB_SetTurnaroundTime+0x13c>)
 8007cac:	4293      	cmp	r3, r2
 8007cae:	d906      	bls.n	8007cbe <USB_SetTurnaroundTime+0xda>
 8007cb0:	68bb      	ldr	r3, [r7, #8]
 8007cb2:	4a1c      	ldr	r2, [pc, #112]	; (8007d24 <USB_SetTurnaroundTime+0x140>)
 8007cb4:	4293      	cmp	r3, r2
 8007cb6:	d202      	bcs.n	8007cbe <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007cb8:	2307      	movs	r3, #7
 8007cba:	617b      	str	r3, [r7, #20]
 8007cbc:	e00a      	b.n	8007cd4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007cbe:	2306      	movs	r3, #6
 8007cc0:	617b      	str	r3, [r7, #20]
 8007cc2:	e007      	b.n	8007cd4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007cc4:	79fb      	ldrb	r3, [r7, #7]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d102      	bne.n	8007cd0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8007cca:	2309      	movs	r3, #9
 8007ccc:	617b      	str	r3, [r7, #20]
 8007cce:	e001      	b.n	8007cd4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007cd0:	2309      	movs	r3, #9
 8007cd2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	68db      	ldr	r3, [r3, #12]
 8007cd8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	68da      	ldr	r2, [r3, #12]
 8007ce4:	697b      	ldr	r3, [r7, #20]
 8007ce6:	029b      	lsls	r3, r3, #10
 8007ce8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8007cec:	431a      	orrs	r2, r3
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007cf2:	2300      	movs	r3, #0
}
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	371c      	adds	r7, #28
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfe:	4770      	bx	lr
 8007d00:	00d8acbf 	.word	0x00d8acbf
 8007d04:	00e4e1c0 	.word	0x00e4e1c0
 8007d08:	00f42400 	.word	0x00f42400
 8007d0c:	01067380 	.word	0x01067380
 8007d10:	011a499f 	.word	0x011a499f
 8007d14:	01312cff 	.word	0x01312cff
 8007d18:	014ca43f 	.word	0x014ca43f
 8007d1c:	016e3600 	.word	0x016e3600
 8007d20:	01a6ab1f 	.word	0x01a6ab1f
 8007d24:	01e84800 	.word	0x01e84800

08007d28 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007d28:	b480      	push	{r7}
 8007d2a:	b083      	sub	sp, #12
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	689b      	ldr	r3, [r3, #8]
 8007d34:	f043 0201 	orr.w	r2, r3, #1
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007d3c:	2300      	movs	r3, #0
}
 8007d3e:	4618      	mov	r0, r3
 8007d40:	370c      	adds	r7, #12
 8007d42:	46bd      	mov	sp, r7
 8007d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d48:	4770      	bx	lr

08007d4a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007d4a:	b480      	push	{r7}
 8007d4c:	b083      	sub	sp, #12
 8007d4e:	af00      	add	r7, sp, #0
 8007d50:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	689b      	ldr	r3, [r3, #8]
 8007d56:	f023 0201 	bic.w	r2, r3, #1
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007d5e:	2300      	movs	r3, #0
}
 8007d60:	4618      	mov	r0, r3
 8007d62:	370c      	adds	r7, #12
 8007d64:	46bd      	mov	sp, r7
 8007d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6a:	4770      	bx	lr

08007d6c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b084      	sub	sp, #16
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
 8007d74:	460b      	mov	r3, r1
 8007d76:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007d78:	2300      	movs	r3, #0
 8007d7a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	68db      	ldr	r3, [r3, #12]
 8007d80:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007d88:	78fb      	ldrb	r3, [r7, #3]
 8007d8a:	2b01      	cmp	r3, #1
 8007d8c:	d115      	bne.n	8007dba <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	68db      	ldr	r3, [r3, #12]
 8007d92:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007d9a:	2001      	movs	r0, #1
 8007d9c:	f7fb fa62 	bl	8003264 <HAL_Delay>
      ms++;
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	3301      	adds	r3, #1
 8007da4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007da6:	6878      	ldr	r0, [r7, #4]
 8007da8:	f001 fa4b 	bl	8009242 <USB_GetMode>
 8007dac:	4603      	mov	r3, r0
 8007dae:	2b01      	cmp	r3, #1
 8007db0:	d01e      	beq.n	8007df0 <USB_SetCurrentMode+0x84>
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	2b31      	cmp	r3, #49	; 0x31
 8007db6:	d9f0      	bls.n	8007d9a <USB_SetCurrentMode+0x2e>
 8007db8:	e01a      	b.n	8007df0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007dba:	78fb      	ldrb	r3, [r7, #3]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d115      	bne.n	8007dec <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	68db      	ldr	r3, [r3, #12]
 8007dc4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007dcc:	2001      	movs	r0, #1
 8007dce:	f7fb fa49 	bl	8003264 <HAL_Delay>
      ms++;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	3301      	adds	r3, #1
 8007dd6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007dd8:	6878      	ldr	r0, [r7, #4]
 8007dda:	f001 fa32 	bl	8009242 <USB_GetMode>
 8007dde:	4603      	mov	r3, r0
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d005      	beq.n	8007df0 <USB_SetCurrentMode+0x84>
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	2b31      	cmp	r3, #49	; 0x31
 8007de8:	d9f0      	bls.n	8007dcc <USB_SetCurrentMode+0x60>
 8007dea:	e001      	b.n	8007df0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007dec:	2301      	movs	r3, #1
 8007dee:	e005      	b.n	8007dfc <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	2b32      	cmp	r3, #50	; 0x32
 8007df4:	d101      	bne.n	8007dfa <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007df6:	2301      	movs	r3, #1
 8007df8:	e000      	b.n	8007dfc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007dfa:	2300      	movs	r3, #0
}
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	3710      	adds	r7, #16
 8007e00:	46bd      	mov	sp, r7
 8007e02:	bd80      	pop	{r7, pc}

08007e04 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007e04:	b084      	sub	sp, #16
 8007e06:	b580      	push	{r7, lr}
 8007e08:	b086      	sub	sp, #24
 8007e0a:	af00      	add	r7, sp, #0
 8007e0c:	6078      	str	r0, [r7, #4]
 8007e0e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007e12:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007e16:	2300      	movs	r3, #0
 8007e18:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007e1e:	2300      	movs	r3, #0
 8007e20:	613b      	str	r3, [r7, #16]
 8007e22:	e009      	b.n	8007e38 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007e24:	687a      	ldr	r2, [r7, #4]
 8007e26:	693b      	ldr	r3, [r7, #16]
 8007e28:	3340      	adds	r3, #64	; 0x40
 8007e2a:	009b      	lsls	r3, r3, #2
 8007e2c:	4413      	add	r3, r2
 8007e2e:	2200      	movs	r2, #0
 8007e30:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007e32:	693b      	ldr	r3, [r7, #16]
 8007e34:	3301      	adds	r3, #1
 8007e36:	613b      	str	r3, [r7, #16]
 8007e38:	693b      	ldr	r3, [r7, #16]
 8007e3a:	2b0e      	cmp	r3, #14
 8007e3c:	d9f2      	bls.n	8007e24 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007e3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d11c      	bne.n	8007e7e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e4a:	685b      	ldr	r3, [r3, #4]
 8007e4c:	68fa      	ldr	r2, [r7, #12]
 8007e4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007e52:	f043 0302 	orr.w	r3, r3, #2
 8007e56:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e5c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	601a      	str	r2, [r3, #0]
 8007e7c:	e005      	b.n	8007e8a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e82:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007e90:	461a      	mov	r2, r3
 8007e92:	2300      	movs	r3, #0
 8007e94:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e9c:	4619      	mov	r1, r3
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ea4:	461a      	mov	r2, r3
 8007ea6:	680b      	ldr	r3, [r1, #0]
 8007ea8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eac:	2b01      	cmp	r3, #1
 8007eae:	d10c      	bne.n	8007eca <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d104      	bne.n	8007ec0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007eb6:	2100      	movs	r1, #0
 8007eb8:	6878      	ldr	r0, [r7, #4]
 8007eba:	f000 f965 	bl	8008188 <USB_SetDevSpeed>
 8007ebe:	e008      	b.n	8007ed2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007ec0:	2101      	movs	r1, #1
 8007ec2:	6878      	ldr	r0, [r7, #4]
 8007ec4:	f000 f960 	bl	8008188 <USB_SetDevSpeed>
 8007ec8:	e003      	b.n	8007ed2 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007eca:	2103      	movs	r1, #3
 8007ecc:	6878      	ldr	r0, [r7, #4]
 8007ece:	f000 f95b 	bl	8008188 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007ed2:	2110      	movs	r1, #16
 8007ed4:	6878      	ldr	r0, [r7, #4]
 8007ed6:	f000 f8f3 	bl	80080c0 <USB_FlushTxFifo>
 8007eda:	4603      	mov	r3, r0
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d001      	beq.n	8007ee4 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8007ee0:	2301      	movs	r3, #1
 8007ee2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007ee4:	6878      	ldr	r0, [r7, #4]
 8007ee6:	f000 f91f 	bl	8008128 <USB_FlushRxFifo>
 8007eea:	4603      	mov	r3, r0
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d001      	beq.n	8007ef4 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8007ef0:	2301      	movs	r3, #1
 8007ef2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007efa:	461a      	mov	r2, r3
 8007efc:	2300      	movs	r3, #0
 8007efe:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f06:	461a      	mov	r2, r3
 8007f08:	2300      	movs	r3, #0
 8007f0a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f12:	461a      	mov	r2, r3
 8007f14:	2300      	movs	r3, #0
 8007f16:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007f18:	2300      	movs	r3, #0
 8007f1a:	613b      	str	r3, [r7, #16]
 8007f1c:	e043      	b.n	8007fa6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007f1e:	693b      	ldr	r3, [r7, #16]
 8007f20:	015a      	lsls	r2, r3, #5
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	4413      	add	r3, r2
 8007f26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007f30:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007f34:	d118      	bne.n	8007f68 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8007f36:	693b      	ldr	r3, [r7, #16]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d10a      	bne.n	8007f52 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007f3c:	693b      	ldr	r3, [r7, #16]
 8007f3e:	015a      	lsls	r2, r3, #5
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	4413      	add	r3, r2
 8007f44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f48:	461a      	mov	r2, r3
 8007f4a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007f4e:	6013      	str	r3, [r2, #0]
 8007f50:	e013      	b.n	8007f7a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007f52:	693b      	ldr	r3, [r7, #16]
 8007f54:	015a      	lsls	r2, r3, #5
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	4413      	add	r3, r2
 8007f5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f5e:	461a      	mov	r2, r3
 8007f60:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007f64:	6013      	str	r3, [r2, #0]
 8007f66:	e008      	b.n	8007f7a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007f68:	693b      	ldr	r3, [r7, #16]
 8007f6a:	015a      	lsls	r2, r3, #5
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	4413      	add	r3, r2
 8007f70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f74:	461a      	mov	r2, r3
 8007f76:	2300      	movs	r3, #0
 8007f78:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007f7a:	693b      	ldr	r3, [r7, #16]
 8007f7c:	015a      	lsls	r2, r3, #5
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	4413      	add	r3, r2
 8007f82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f86:	461a      	mov	r2, r3
 8007f88:	2300      	movs	r3, #0
 8007f8a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007f8c:	693b      	ldr	r3, [r7, #16]
 8007f8e:	015a      	lsls	r2, r3, #5
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	4413      	add	r3, r2
 8007f94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f98:	461a      	mov	r2, r3
 8007f9a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007f9e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007fa0:	693b      	ldr	r3, [r7, #16]
 8007fa2:	3301      	adds	r3, #1
 8007fa4:	613b      	str	r3, [r7, #16]
 8007fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fa8:	693a      	ldr	r2, [r7, #16]
 8007faa:	429a      	cmp	r2, r3
 8007fac:	d3b7      	bcc.n	8007f1e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007fae:	2300      	movs	r3, #0
 8007fb0:	613b      	str	r3, [r7, #16]
 8007fb2:	e043      	b.n	800803c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007fb4:	693b      	ldr	r3, [r7, #16]
 8007fb6:	015a      	lsls	r2, r3, #5
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	4413      	add	r3, r2
 8007fbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007fc6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007fca:	d118      	bne.n	8007ffe <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8007fcc:	693b      	ldr	r3, [r7, #16]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d10a      	bne.n	8007fe8 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007fd2:	693b      	ldr	r3, [r7, #16]
 8007fd4:	015a      	lsls	r2, r3, #5
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	4413      	add	r3, r2
 8007fda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fde:	461a      	mov	r2, r3
 8007fe0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007fe4:	6013      	str	r3, [r2, #0]
 8007fe6:	e013      	b.n	8008010 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007fe8:	693b      	ldr	r3, [r7, #16]
 8007fea:	015a      	lsls	r2, r3, #5
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	4413      	add	r3, r2
 8007ff0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ff4:	461a      	mov	r2, r3
 8007ff6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007ffa:	6013      	str	r3, [r2, #0]
 8007ffc:	e008      	b.n	8008010 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007ffe:	693b      	ldr	r3, [r7, #16]
 8008000:	015a      	lsls	r2, r3, #5
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	4413      	add	r3, r2
 8008006:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800800a:	461a      	mov	r2, r3
 800800c:	2300      	movs	r3, #0
 800800e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008010:	693b      	ldr	r3, [r7, #16]
 8008012:	015a      	lsls	r2, r3, #5
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	4413      	add	r3, r2
 8008018:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800801c:	461a      	mov	r2, r3
 800801e:	2300      	movs	r3, #0
 8008020:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008022:	693b      	ldr	r3, [r7, #16]
 8008024:	015a      	lsls	r2, r3, #5
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	4413      	add	r3, r2
 800802a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800802e:	461a      	mov	r2, r3
 8008030:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008034:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008036:	693b      	ldr	r3, [r7, #16]
 8008038:	3301      	adds	r3, #1
 800803a:	613b      	str	r3, [r7, #16]
 800803c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800803e:	693a      	ldr	r2, [r7, #16]
 8008040:	429a      	cmp	r2, r3
 8008042:	d3b7      	bcc.n	8007fb4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800804a:	691b      	ldr	r3, [r3, #16]
 800804c:	68fa      	ldr	r2, [r7, #12]
 800804e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008052:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008056:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2200      	movs	r2, #0
 800805c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008064:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008068:	2b00      	cmp	r3, #0
 800806a:	d105      	bne.n	8008078 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	699b      	ldr	r3, [r3, #24]
 8008070:	f043 0210 	orr.w	r2, r3, #16
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	699a      	ldr	r2, [r3, #24]
 800807c:	4b0e      	ldr	r3, [pc, #56]	; (80080b8 <USB_DevInit+0x2b4>)
 800807e:	4313      	orrs	r3, r2
 8008080:	687a      	ldr	r2, [r7, #4]
 8008082:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008084:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008086:	2b00      	cmp	r3, #0
 8008088:	d005      	beq.n	8008096 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	699b      	ldr	r3, [r3, #24]
 800808e:	f043 0208 	orr.w	r2, r3, #8
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008096:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008098:	2b01      	cmp	r3, #1
 800809a:	d105      	bne.n	80080a8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	699a      	ldr	r2, [r3, #24]
 80080a0:	4b06      	ldr	r3, [pc, #24]	; (80080bc <USB_DevInit+0x2b8>)
 80080a2:	4313      	orrs	r3, r2
 80080a4:	687a      	ldr	r2, [r7, #4]
 80080a6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80080a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80080aa:	4618      	mov	r0, r3
 80080ac:	3718      	adds	r7, #24
 80080ae:	46bd      	mov	sp, r7
 80080b0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80080b4:	b004      	add	sp, #16
 80080b6:	4770      	bx	lr
 80080b8:	803c3800 	.word	0x803c3800
 80080bc:	40000004 	.word	0x40000004

080080c0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80080c0:	b480      	push	{r7}
 80080c2:	b085      	sub	sp, #20
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
 80080c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80080ca:	2300      	movs	r3, #0
 80080cc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	3301      	adds	r3, #1
 80080d2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	4a13      	ldr	r2, [pc, #76]	; (8008124 <USB_FlushTxFifo+0x64>)
 80080d8:	4293      	cmp	r3, r2
 80080da:	d901      	bls.n	80080e0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80080dc:	2303      	movs	r3, #3
 80080de:	e01b      	b.n	8008118 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	691b      	ldr	r3, [r3, #16]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	daf2      	bge.n	80080ce <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80080e8:	2300      	movs	r3, #0
 80080ea:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	019b      	lsls	r3, r3, #6
 80080f0:	f043 0220 	orr.w	r2, r3, #32
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	3301      	adds	r3, #1
 80080fc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	4a08      	ldr	r2, [pc, #32]	; (8008124 <USB_FlushTxFifo+0x64>)
 8008102:	4293      	cmp	r3, r2
 8008104:	d901      	bls.n	800810a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008106:	2303      	movs	r3, #3
 8008108:	e006      	b.n	8008118 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	691b      	ldr	r3, [r3, #16]
 800810e:	f003 0320 	and.w	r3, r3, #32
 8008112:	2b20      	cmp	r3, #32
 8008114:	d0f0      	beq.n	80080f8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008116:	2300      	movs	r3, #0
}
 8008118:	4618      	mov	r0, r3
 800811a:	3714      	adds	r7, #20
 800811c:	46bd      	mov	sp, r7
 800811e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008122:	4770      	bx	lr
 8008124:	00030d40 	.word	0x00030d40

08008128 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008128:	b480      	push	{r7}
 800812a:	b085      	sub	sp, #20
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008130:	2300      	movs	r3, #0
 8008132:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	3301      	adds	r3, #1
 8008138:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	4a11      	ldr	r2, [pc, #68]	; (8008184 <USB_FlushRxFifo+0x5c>)
 800813e:	4293      	cmp	r3, r2
 8008140:	d901      	bls.n	8008146 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008142:	2303      	movs	r3, #3
 8008144:	e018      	b.n	8008178 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	691b      	ldr	r3, [r3, #16]
 800814a:	2b00      	cmp	r3, #0
 800814c:	daf2      	bge.n	8008134 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800814e:	2300      	movs	r3, #0
 8008150:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2210      	movs	r2, #16
 8008156:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	3301      	adds	r3, #1
 800815c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	4a08      	ldr	r2, [pc, #32]	; (8008184 <USB_FlushRxFifo+0x5c>)
 8008162:	4293      	cmp	r3, r2
 8008164:	d901      	bls.n	800816a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008166:	2303      	movs	r3, #3
 8008168:	e006      	b.n	8008178 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	691b      	ldr	r3, [r3, #16]
 800816e:	f003 0310 	and.w	r3, r3, #16
 8008172:	2b10      	cmp	r3, #16
 8008174:	d0f0      	beq.n	8008158 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008176:	2300      	movs	r3, #0
}
 8008178:	4618      	mov	r0, r3
 800817a:	3714      	adds	r7, #20
 800817c:	46bd      	mov	sp, r7
 800817e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008182:	4770      	bx	lr
 8008184:	00030d40 	.word	0x00030d40

08008188 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008188:	b480      	push	{r7}
 800818a:	b085      	sub	sp, #20
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
 8008190:	460b      	mov	r3, r1
 8008192:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800819e:	681a      	ldr	r2, [r3, #0]
 80081a0:	78fb      	ldrb	r3, [r7, #3]
 80081a2:	68f9      	ldr	r1, [r7, #12]
 80081a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80081a8:	4313      	orrs	r3, r2
 80081aa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80081ac:	2300      	movs	r3, #0
}
 80081ae:	4618      	mov	r0, r3
 80081b0:	3714      	adds	r7, #20
 80081b2:	46bd      	mov	sp, r7
 80081b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b8:	4770      	bx	lr

080081ba <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80081ba:	b480      	push	{r7}
 80081bc:	b087      	sub	sp, #28
 80081be:	af00      	add	r7, sp, #0
 80081c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80081c6:	693b      	ldr	r3, [r7, #16]
 80081c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081cc:	689b      	ldr	r3, [r3, #8]
 80081ce:	f003 0306 	and.w	r3, r3, #6
 80081d2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d102      	bne.n	80081e0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80081da:	2300      	movs	r3, #0
 80081dc:	75fb      	strb	r3, [r7, #23]
 80081de:	e00a      	b.n	80081f6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	2b02      	cmp	r3, #2
 80081e4:	d002      	beq.n	80081ec <USB_GetDevSpeed+0x32>
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	2b06      	cmp	r3, #6
 80081ea:	d102      	bne.n	80081f2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80081ec:	2302      	movs	r3, #2
 80081ee:	75fb      	strb	r3, [r7, #23]
 80081f0:	e001      	b.n	80081f6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80081f2:	230f      	movs	r3, #15
 80081f4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80081f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80081f8:	4618      	mov	r0, r3
 80081fa:	371c      	adds	r7, #28
 80081fc:	46bd      	mov	sp, r7
 80081fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008202:	4770      	bx	lr

08008204 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008204:	b480      	push	{r7}
 8008206:	b085      	sub	sp, #20
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
 800820c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	781b      	ldrb	r3, [r3, #0]
 8008216:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	785b      	ldrb	r3, [r3, #1]
 800821c:	2b01      	cmp	r3, #1
 800821e:	d139      	bne.n	8008294 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008226:	69da      	ldr	r2, [r3, #28]
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	781b      	ldrb	r3, [r3, #0]
 800822c:	f003 030f 	and.w	r3, r3, #15
 8008230:	2101      	movs	r1, #1
 8008232:	fa01 f303 	lsl.w	r3, r1, r3
 8008236:	b29b      	uxth	r3, r3
 8008238:	68f9      	ldr	r1, [r7, #12]
 800823a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800823e:	4313      	orrs	r3, r2
 8008240:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008242:	68bb      	ldr	r3, [r7, #8]
 8008244:	015a      	lsls	r2, r3, #5
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	4413      	add	r3, r2
 800824a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008254:	2b00      	cmp	r3, #0
 8008256:	d153      	bne.n	8008300 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008258:	68bb      	ldr	r3, [r7, #8]
 800825a:	015a      	lsls	r2, r3, #5
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	4413      	add	r3, r2
 8008260:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008264:	681a      	ldr	r2, [r3, #0]
 8008266:	683b      	ldr	r3, [r7, #0]
 8008268:	68db      	ldr	r3, [r3, #12]
 800826a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	791b      	ldrb	r3, [r3, #4]
 8008272:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008274:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008276:	68bb      	ldr	r3, [r7, #8]
 8008278:	059b      	lsls	r3, r3, #22
 800827a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800827c:	431a      	orrs	r2, r3
 800827e:	68bb      	ldr	r3, [r7, #8]
 8008280:	0159      	lsls	r1, r3, #5
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	440b      	add	r3, r1
 8008286:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800828a:	4619      	mov	r1, r3
 800828c:	4b20      	ldr	r3, [pc, #128]	; (8008310 <USB_ActivateEndpoint+0x10c>)
 800828e:	4313      	orrs	r3, r2
 8008290:	600b      	str	r3, [r1, #0]
 8008292:	e035      	b.n	8008300 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800829a:	69da      	ldr	r2, [r3, #28]
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	781b      	ldrb	r3, [r3, #0]
 80082a0:	f003 030f 	and.w	r3, r3, #15
 80082a4:	2101      	movs	r1, #1
 80082a6:	fa01 f303 	lsl.w	r3, r1, r3
 80082aa:	041b      	lsls	r3, r3, #16
 80082ac:	68f9      	ldr	r1, [r7, #12]
 80082ae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80082b2:	4313      	orrs	r3, r2
 80082b4:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80082b6:	68bb      	ldr	r3, [r7, #8]
 80082b8:	015a      	lsls	r2, r3, #5
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	4413      	add	r3, r2
 80082be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d119      	bne.n	8008300 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80082cc:	68bb      	ldr	r3, [r7, #8]
 80082ce:	015a      	lsls	r2, r3, #5
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	4413      	add	r3, r2
 80082d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082d8:	681a      	ldr	r2, [r3, #0]
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	68db      	ldr	r3, [r3, #12]
 80082de:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	791b      	ldrb	r3, [r3, #4]
 80082e6:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80082e8:	430b      	orrs	r3, r1
 80082ea:	431a      	orrs	r2, r3
 80082ec:	68bb      	ldr	r3, [r7, #8]
 80082ee:	0159      	lsls	r1, r3, #5
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	440b      	add	r3, r1
 80082f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082f8:	4619      	mov	r1, r3
 80082fa:	4b05      	ldr	r3, [pc, #20]	; (8008310 <USB_ActivateEndpoint+0x10c>)
 80082fc:	4313      	orrs	r3, r2
 80082fe:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008300:	2300      	movs	r3, #0
}
 8008302:	4618      	mov	r0, r3
 8008304:	3714      	adds	r7, #20
 8008306:	46bd      	mov	sp, r7
 8008308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830c:	4770      	bx	lr
 800830e:	bf00      	nop
 8008310:	10008000 	.word	0x10008000

08008314 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008314:	b480      	push	{r7}
 8008316:	b085      	sub	sp, #20
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
 800831c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008322:	683b      	ldr	r3, [r7, #0]
 8008324:	781b      	ldrb	r3, [r3, #0]
 8008326:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	785b      	ldrb	r3, [r3, #1]
 800832c:	2b01      	cmp	r3, #1
 800832e:	d161      	bne.n	80083f4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008330:	68bb      	ldr	r3, [r7, #8]
 8008332:	015a      	lsls	r2, r3, #5
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	4413      	add	r3, r2
 8008338:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008342:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008346:	d11f      	bne.n	8008388 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008348:	68bb      	ldr	r3, [r7, #8]
 800834a:	015a      	lsls	r2, r3, #5
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	4413      	add	r3, r2
 8008350:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	68ba      	ldr	r2, [r7, #8]
 8008358:	0151      	lsls	r1, r2, #5
 800835a:	68fa      	ldr	r2, [r7, #12]
 800835c:	440a      	add	r2, r1
 800835e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008362:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008366:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008368:	68bb      	ldr	r3, [r7, #8]
 800836a:	015a      	lsls	r2, r3, #5
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	4413      	add	r3, r2
 8008370:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	68ba      	ldr	r2, [r7, #8]
 8008378:	0151      	lsls	r1, r2, #5
 800837a:	68fa      	ldr	r2, [r7, #12]
 800837c:	440a      	add	r2, r1
 800837e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008382:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008386:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800838e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	781b      	ldrb	r3, [r3, #0]
 8008394:	f003 030f 	and.w	r3, r3, #15
 8008398:	2101      	movs	r1, #1
 800839a:	fa01 f303 	lsl.w	r3, r1, r3
 800839e:	b29b      	uxth	r3, r3
 80083a0:	43db      	mvns	r3, r3
 80083a2:	68f9      	ldr	r1, [r7, #12]
 80083a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80083a8:	4013      	ands	r3, r2
 80083aa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083b2:	69da      	ldr	r2, [r3, #28]
 80083b4:	683b      	ldr	r3, [r7, #0]
 80083b6:	781b      	ldrb	r3, [r3, #0]
 80083b8:	f003 030f 	and.w	r3, r3, #15
 80083bc:	2101      	movs	r1, #1
 80083be:	fa01 f303 	lsl.w	r3, r1, r3
 80083c2:	b29b      	uxth	r3, r3
 80083c4:	43db      	mvns	r3, r3
 80083c6:	68f9      	ldr	r1, [r7, #12]
 80083c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80083cc:	4013      	ands	r3, r2
 80083ce:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80083d0:	68bb      	ldr	r3, [r7, #8]
 80083d2:	015a      	lsls	r2, r3, #5
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	4413      	add	r3, r2
 80083d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083dc:	681a      	ldr	r2, [r3, #0]
 80083de:	68bb      	ldr	r3, [r7, #8]
 80083e0:	0159      	lsls	r1, r3, #5
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	440b      	add	r3, r1
 80083e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083ea:	4619      	mov	r1, r3
 80083ec:	4b35      	ldr	r3, [pc, #212]	; (80084c4 <USB_DeactivateEndpoint+0x1b0>)
 80083ee:	4013      	ands	r3, r2
 80083f0:	600b      	str	r3, [r1, #0]
 80083f2:	e060      	b.n	80084b6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80083f4:	68bb      	ldr	r3, [r7, #8]
 80083f6:	015a      	lsls	r2, r3, #5
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	4413      	add	r3, r2
 80083fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008406:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800840a:	d11f      	bne.n	800844c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800840c:	68bb      	ldr	r3, [r7, #8]
 800840e:	015a      	lsls	r2, r3, #5
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	4413      	add	r3, r2
 8008414:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	68ba      	ldr	r2, [r7, #8]
 800841c:	0151      	lsls	r1, r2, #5
 800841e:	68fa      	ldr	r2, [r7, #12]
 8008420:	440a      	add	r2, r1
 8008422:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008426:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800842a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800842c:	68bb      	ldr	r3, [r7, #8]
 800842e:	015a      	lsls	r2, r3, #5
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	4413      	add	r3, r2
 8008434:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	68ba      	ldr	r2, [r7, #8]
 800843c:	0151      	lsls	r1, r2, #5
 800843e:	68fa      	ldr	r2, [r7, #12]
 8008440:	440a      	add	r2, r1
 8008442:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008446:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800844a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008452:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	781b      	ldrb	r3, [r3, #0]
 8008458:	f003 030f 	and.w	r3, r3, #15
 800845c:	2101      	movs	r1, #1
 800845e:	fa01 f303 	lsl.w	r3, r1, r3
 8008462:	041b      	lsls	r3, r3, #16
 8008464:	43db      	mvns	r3, r3
 8008466:	68f9      	ldr	r1, [r7, #12]
 8008468:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800846c:	4013      	ands	r3, r2
 800846e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008476:	69da      	ldr	r2, [r3, #28]
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	781b      	ldrb	r3, [r3, #0]
 800847c:	f003 030f 	and.w	r3, r3, #15
 8008480:	2101      	movs	r1, #1
 8008482:	fa01 f303 	lsl.w	r3, r1, r3
 8008486:	041b      	lsls	r3, r3, #16
 8008488:	43db      	mvns	r3, r3
 800848a:	68f9      	ldr	r1, [r7, #12]
 800848c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008490:	4013      	ands	r3, r2
 8008492:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008494:	68bb      	ldr	r3, [r7, #8]
 8008496:	015a      	lsls	r2, r3, #5
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	4413      	add	r3, r2
 800849c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084a0:	681a      	ldr	r2, [r3, #0]
 80084a2:	68bb      	ldr	r3, [r7, #8]
 80084a4:	0159      	lsls	r1, r3, #5
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	440b      	add	r3, r1
 80084aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084ae:	4619      	mov	r1, r3
 80084b0:	4b05      	ldr	r3, [pc, #20]	; (80084c8 <USB_DeactivateEndpoint+0x1b4>)
 80084b2:	4013      	ands	r3, r2
 80084b4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80084b6:	2300      	movs	r3, #0
}
 80084b8:	4618      	mov	r0, r3
 80084ba:	3714      	adds	r7, #20
 80084bc:	46bd      	mov	sp, r7
 80084be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c2:	4770      	bx	lr
 80084c4:	ec337800 	.word	0xec337800
 80084c8:	eff37800 	.word	0xeff37800

080084cc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b08a      	sub	sp, #40	; 0x28
 80084d0:	af02      	add	r7, sp, #8
 80084d2:	60f8      	str	r0, [r7, #12]
 80084d4:	60b9      	str	r1, [r7, #8]
 80084d6:	4613      	mov	r3, r2
 80084d8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80084de:	68bb      	ldr	r3, [r7, #8]
 80084e0:	781b      	ldrb	r3, [r3, #0]
 80084e2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80084e4:	68bb      	ldr	r3, [r7, #8]
 80084e6:	785b      	ldrb	r3, [r3, #1]
 80084e8:	2b01      	cmp	r3, #1
 80084ea:	f040 8163 	bne.w	80087b4 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80084ee:	68bb      	ldr	r3, [r7, #8]
 80084f0:	699b      	ldr	r3, [r3, #24]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d132      	bne.n	800855c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80084f6:	69bb      	ldr	r3, [r7, #24]
 80084f8:	015a      	lsls	r2, r3, #5
 80084fa:	69fb      	ldr	r3, [r7, #28]
 80084fc:	4413      	add	r3, r2
 80084fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008502:	691a      	ldr	r2, [r3, #16]
 8008504:	69bb      	ldr	r3, [r7, #24]
 8008506:	0159      	lsls	r1, r3, #5
 8008508:	69fb      	ldr	r3, [r7, #28]
 800850a:	440b      	add	r3, r1
 800850c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008510:	4619      	mov	r1, r3
 8008512:	4ba5      	ldr	r3, [pc, #660]	; (80087a8 <USB_EPStartXfer+0x2dc>)
 8008514:	4013      	ands	r3, r2
 8008516:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008518:	69bb      	ldr	r3, [r7, #24]
 800851a:	015a      	lsls	r2, r3, #5
 800851c:	69fb      	ldr	r3, [r7, #28]
 800851e:	4413      	add	r3, r2
 8008520:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008524:	691b      	ldr	r3, [r3, #16]
 8008526:	69ba      	ldr	r2, [r7, #24]
 8008528:	0151      	lsls	r1, r2, #5
 800852a:	69fa      	ldr	r2, [r7, #28]
 800852c:	440a      	add	r2, r1
 800852e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008532:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008536:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008538:	69bb      	ldr	r3, [r7, #24]
 800853a:	015a      	lsls	r2, r3, #5
 800853c:	69fb      	ldr	r3, [r7, #28]
 800853e:	4413      	add	r3, r2
 8008540:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008544:	691a      	ldr	r2, [r3, #16]
 8008546:	69bb      	ldr	r3, [r7, #24]
 8008548:	0159      	lsls	r1, r3, #5
 800854a:	69fb      	ldr	r3, [r7, #28]
 800854c:	440b      	add	r3, r1
 800854e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008552:	4619      	mov	r1, r3
 8008554:	4b95      	ldr	r3, [pc, #596]	; (80087ac <USB_EPStartXfer+0x2e0>)
 8008556:	4013      	ands	r3, r2
 8008558:	610b      	str	r3, [r1, #16]
 800855a:	e074      	b.n	8008646 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800855c:	69bb      	ldr	r3, [r7, #24]
 800855e:	015a      	lsls	r2, r3, #5
 8008560:	69fb      	ldr	r3, [r7, #28]
 8008562:	4413      	add	r3, r2
 8008564:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008568:	691a      	ldr	r2, [r3, #16]
 800856a:	69bb      	ldr	r3, [r7, #24]
 800856c:	0159      	lsls	r1, r3, #5
 800856e:	69fb      	ldr	r3, [r7, #28]
 8008570:	440b      	add	r3, r1
 8008572:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008576:	4619      	mov	r1, r3
 8008578:	4b8c      	ldr	r3, [pc, #560]	; (80087ac <USB_EPStartXfer+0x2e0>)
 800857a:	4013      	ands	r3, r2
 800857c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800857e:	69bb      	ldr	r3, [r7, #24]
 8008580:	015a      	lsls	r2, r3, #5
 8008582:	69fb      	ldr	r3, [r7, #28]
 8008584:	4413      	add	r3, r2
 8008586:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800858a:	691a      	ldr	r2, [r3, #16]
 800858c:	69bb      	ldr	r3, [r7, #24]
 800858e:	0159      	lsls	r1, r3, #5
 8008590:	69fb      	ldr	r3, [r7, #28]
 8008592:	440b      	add	r3, r1
 8008594:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008598:	4619      	mov	r1, r3
 800859a:	4b83      	ldr	r3, [pc, #524]	; (80087a8 <USB_EPStartXfer+0x2dc>)
 800859c:	4013      	ands	r3, r2
 800859e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80085a0:	69bb      	ldr	r3, [r7, #24]
 80085a2:	015a      	lsls	r2, r3, #5
 80085a4:	69fb      	ldr	r3, [r7, #28]
 80085a6:	4413      	add	r3, r2
 80085a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085ac:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80085ae:	68bb      	ldr	r3, [r7, #8]
 80085b0:	6999      	ldr	r1, [r3, #24]
 80085b2:	68bb      	ldr	r3, [r7, #8]
 80085b4:	68db      	ldr	r3, [r3, #12]
 80085b6:	440b      	add	r3, r1
 80085b8:	1e59      	subs	r1, r3, #1
 80085ba:	68bb      	ldr	r3, [r7, #8]
 80085bc:	68db      	ldr	r3, [r3, #12]
 80085be:	fbb1 f3f3 	udiv	r3, r1, r3
 80085c2:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80085c4:	4b7a      	ldr	r3, [pc, #488]	; (80087b0 <USB_EPStartXfer+0x2e4>)
 80085c6:	400b      	ands	r3, r1
 80085c8:	69b9      	ldr	r1, [r7, #24]
 80085ca:	0148      	lsls	r0, r1, #5
 80085cc:	69f9      	ldr	r1, [r7, #28]
 80085ce:	4401      	add	r1, r0
 80085d0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80085d4:	4313      	orrs	r3, r2
 80085d6:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80085d8:	69bb      	ldr	r3, [r7, #24]
 80085da:	015a      	lsls	r2, r3, #5
 80085dc:	69fb      	ldr	r3, [r7, #28]
 80085de:	4413      	add	r3, r2
 80085e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085e4:	691a      	ldr	r2, [r3, #16]
 80085e6:	68bb      	ldr	r3, [r7, #8]
 80085e8:	699b      	ldr	r3, [r3, #24]
 80085ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80085ee:	69b9      	ldr	r1, [r7, #24]
 80085f0:	0148      	lsls	r0, r1, #5
 80085f2:	69f9      	ldr	r1, [r7, #28]
 80085f4:	4401      	add	r1, r0
 80085f6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80085fa:	4313      	orrs	r3, r2
 80085fc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80085fe:	68bb      	ldr	r3, [r7, #8]
 8008600:	791b      	ldrb	r3, [r3, #4]
 8008602:	2b01      	cmp	r3, #1
 8008604:	d11f      	bne.n	8008646 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008606:	69bb      	ldr	r3, [r7, #24]
 8008608:	015a      	lsls	r2, r3, #5
 800860a:	69fb      	ldr	r3, [r7, #28]
 800860c:	4413      	add	r3, r2
 800860e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008612:	691b      	ldr	r3, [r3, #16]
 8008614:	69ba      	ldr	r2, [r7, #24]
 8008616:	0151      	lsls	r1, r2, #5
 8008618:	69fa      	ldr	r2, [r7, #28]
 800861a:	440a      	add	r2, r1
 800861c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008620:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8008624:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8008626:	69bb      	ldr	r3, [r7, #24]
 8008628:	015a      	lsls	r2, r3, #5
 800862a:	69fb      	ldr	r3, [r7, #28]
 800862c:	4413      	add	r3, r2
 800862e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008632:	691b      	ldr	r3, [r3, #16]
 8008634:	69ba      	ldr	r2, [r7, #24]
 8008636:	0151      	lsls	r1, r2, #5
 8008638:	69fa      	ldr	r2, [r7, #28]
 800863a:	440a      	add	r2, r1
 800863c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008640:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008644:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8008646:	79fb      	ldrb	r3, [r7, #7]
 8008648:	2b01      	cmp	r3, #1
 800864a:	d14b      	bne.n	80086e4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800864c:	68bb      	ldr	r3, [r7, #8]
 800864e:	695b      	ldr	r3, [r3, #20]
 8008650:	2b00      	cmp	r3, #0
 8008652:	d009      	beq.n	8008668 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008654:	69bb      	ldr	r3, [r7, #24]
 8008656:	015a      	lsls	r2, r3, #5
 8008658:	69fb      	ldr	r3, [r7, #28]
 800865a:	4413      	add	r3, r2
 800865c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008660:	461a      	mov	r2, r3
 8008662:	68bb      	ldr	r3, [r7, #8]
 8008664:	695b      	ldr	r3, [r3, #20]
 8008666:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008668:	68bb      	ldr	r3, [r7, #8]
 800866a:	791b      	ldrb	r3, [r3, #4]
 800866c:	2b01      	cmp	r3, #1
 800866e:	d128      	bne.n	80086c2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008670:	69fb      	ldr	r3, [r7, #28]
 8008672:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008676:	689b      	ldr	r3, [r3, #8]
 8008678:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800867c:	2b00      	cmp	r3, #0
 800867e:	d110      	bne.n	80086a2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008680:	69bb      	ldr	r3, [r7, #24]
 8008682:	015a      	lsls	r2, r3, #5
 8008684:	69fb      	ldr	r3, [r7, #28]
 8008686:	4413      	add	r3, r2
 8008688:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	69ba      	ldr	r2, [r7, #24]
 8008690:	0151      	lsls	r1, r2, #5
 8008692:	69fa      	ldr	r2, [r7, #28]
 8008694:	440a      	add	r2, r1
 8008696:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800869a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800869e:	6013      	str	r3, [r2, #0]
 80086a0:	e00f      	b.n	80086c2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80086a2:	69bb      	ldr	r3, [r7, #24]
 80086a4:	015a      	lsls	r2, r3, #5
 80086a6:	69fb      	ldr	r3, [r7, #28]
 80086a8:	4413      	add	r3, r2
 80086aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	69ba      	ldr	r2, [r7, #24]
 80086b2:	0151      	lsls	r1, r2, #5
 80086b4:	69fa      	ldr	r2, [r7, #28]
 80086b6:	440a      	add	r2, r1
 80086b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80086bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80086c0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80086c2:	69bb      	ldr	r3, [r7, #24]
 80086c4:	015a      	lsls	r2, r3, #5
 80086c6:	69fb      	ldr	r3, [r7, #28]
 80086c8:	4413      	add	r3, r2
 80086ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	69ba      	ldr	r2, [r7, #24]
 80086d2:	0151      	lsls	r1, r2, #5
 80086d4:	69fa      	ldr	r2, [r7, #28]
 80086d6:	440a      	add	r2, r1
 80086d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80086dc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80086e0:	6013      	str	r3, [r2, #0]
 80086e2:	e137      	b.n	8008954 <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80086e4:	69bb      	ldr	r3, [r7, #24]
 80086e6:	015a      	lsls	r2, r3, #5
 80086e8:	69fb      	ldr	r3, [r7, #28]
 80086ea:	4413      	add	r3, r2
 80086ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	69ba      	ldr	r2, [r7, #24]
 80086f4:	0151      	lsls	r1, r2, #5
 80086f6:	69fa      	ldr	r2, [r7, #28]
 80086f8:	440a      	add	r2, r1
 80086fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80086fe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008702:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008704:	68bb      	ldr	r3, [r7, #8]
 8008706:	791b      	ldrb	r3, [r3, #4]
 8008708:	2b01      	cmp	r3, #1
 800870a:	d015      	beq.n	8008738 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800870c:	68bb      	ldr	r3, [r7, #8]
 800870e:	699b      	ldr	r3, [r3, #24]
 8008710:	2b00      	cmp	r3, #0
 8008712:	f000 811f 	beq.w	8008954 <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008716:	69fb      	ldr	r3, [r7, #28]
 8008718:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800871c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800871e:	68bb      	ldr	r3, [r7, #8]
 8008720:	781b      	ldrb	r3, [r3, #0]
 8008722:	f003 030f 	and.w	r3, r3, #15
 8008726:	2101      	movs	r1, #1
 8008728:	fa01 f303 	lsl.w	r3, r1, r3
 800872c:	69f9      	ldr	r1, [r7, #28]
 800872e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008732:	4313      	orrs	r3, r2
 8008734:	634b      	str	r3, [r1, #52]	; 0x34
 8008736:	e10d      	b.n	8008954 <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008738:	69fb      	ldr	r3, [r7, #28]
 800873a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800873e:	689b      	ldr	r3, [r3, #8]
 8008740:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008744:	2b00      	cmp	r3, #0
 8008746:	d110      	bne.n	800876a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008748:	69bb      	ldr	r3, [r7, #24]
 800874a:	015a      	lsls	r2, r3, #5
 800874c:	69fb      	ldr	r3, [r7, #28]
 800874e:	4413      	add	r3, r2
 8008750:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	69ba      	ldr	r2, [r7, #24]
 8008758:	0151      	lsls	r1, r2, #5
 800875a:	69fa      	ldr	r2, [r7, #28]
 800875c:	440a      	add	r2, r1
 800875e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008762:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008766:	6013      	str	r3, [r2, #0]
 8008768:	e00f      	b.n	800878a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800876a:	69bb      	ldr	r3, [r7, #24]
 800876c:	015a      	lsls	r2, r3, #5
 800876e:	69fb      	ldr	r3, [r7, #28]
 8008770:	4413      	add	r3, r2
 8008772:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	69ba      	ldr	r2, [r7, #24]
 800877a:	0151      	lsls	r1, r2, #5
 800877c:	69fa      	ldr	r2, [r7, #28]
 800877e:	440a      	add	r2, r1
 8008780:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008784:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008788:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800878a:	68bb      	ldr	r3, [r7, #8]
 800878c:	6919      	ldr	r1, [r3, #16]
 800878e:	68bb      	ldr	r3, [r7, #8]
 8008790:	781a      	ldrb	r2, [r3, #0]
 8008792:	68bb      	ldr	r3, [r7, #8]
 8008794:	699b      	ldr	r3, [r3, #24]
 8008796:	b298      	uxth	r0, r3
 8008798:	79fb      	ldrb	r3, [r7, #7]
 800879a:	9300      	str	r3, [sp, #0]
 800879c:	4603      	mov	r3, r0
 800879e:	68f8      	ldr	r0, [r7, #12]
 80087a0:	f000 faea 	bl	8008d78 <USB_WritePacket>
 80087a4:	e0d6      	b.n	8008954 <USB_EPStartXfer+0x488>
 80087a6:	bf00      	nop
 80087a8:	e007ffff 	.word	0xe007ffff
 80087ac:	fff80000 	.word	0xfff80000
 80087b0:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80087b4:	69bb      	ldr	r3, [r7, #24]
 80087b6:	015a      	lsls	r2, r3, #5
 80087b8:	69fb      	ldr	r3, [r7, #28]
 80087ba:	4413      	add	r3, r2
 80087bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087c0:	691a      	ldr	r2, [r3, #16]
 80087c2:	69bb      	ldr	r3, [r7, #24]
 80087c4:	0159      	lsls	r1, r3, #5
 80087c6:	69fb      	ldr	r3, [r7, #28]
 80087c8:	440b      	add	r3, r1
 80087ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087ce:	4619      	mov	r1, r3
 80087d0:	4b63      	ldr	r3, [pc, #396]	; (8008960 <USB_EPStartXfer+0x494>)
 80087d2:	4013      	ands	r3, r2
 80087d4:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80087d6:	69bb      	ldr	r3, [r7, #24]
 80087d8:	015a      	lsls	r2, r3, #5
 80087da:	69fb      	ldr	r3, [r7, #28]
 80087dc:	4413      	add	r3, r2
 80087de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087e2:	691a      	ldr	r2, [r3, #16]
 80087e4:	69bb      	ldr	r3, [r7, #24]
 80087e6:	0159      	lsls	r1, r3, #5
 80087e8:	69fb      	ldr	r3, [r7, #28]
 80087ea:	440b      	add	r3, r1
 80087ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087f0:	4619      	mov	r1, r3
 80087f2:	4b5c      	ldr	r3, [pc, #368]	; (8008964 <USB_EPStartXfer+0x498>)
 80087f4:	4013      	ands	r3, r2
 80087f6:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 80087f8:	68bb      	ldr	r3, [r7, #8]
 80087fa:	699b      	ldr	r3, [r3, #24]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d123      	bne.n	8008848 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008800:	69bb      	ldr	r3, [r7, #24]
 8008802:	015a      	lsls	r2, r3, #5
 8008804:	69fb      	ldr	r3, [r7, #28]
 8008806:	4413      	add	r3, r2
 8008808:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800880c:	691a      	ldr	r2, [r3, #16]
 800880e:	68bb      	ldr	r3, [r7, #8]
 8008810:	68db      	ldr	r3, [r3, #12]
 8008812:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008816:	69b9      	ldr	r1, [r7, #24]
 8008818:	0148      	lsls	r0, r1, #5
 800881a:	69f9      	ldr	r1, [r7, #28]
 800881c:	4401      	add	r1, r0
 800881e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008822:	4313      	orrs	r3, r2
 8008824:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008826:	69bb      	ldr	r3, [r7, #24]
 8008828:	015a      	lsls	r2, r3, #5
 800882a:	69fb      	ldr	r3, [r7, #28]
 800882c:	4413      	add	r3, r2
 800882e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008832:	691b      	ldr	r3, [r3, #16]
 8008834:	69ba      	ldr	r2, [r7, #24]
 8008836:	0151      	lsls	r1, r2, #5
 8008838:	69fa      	ldr	r2, [r7, #28]
 800883a:	440a      	add	r2, r1
 800883c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008840:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008844:	6113      	str	r3, [r2, #16]
 8008846:	e037      	b.n	80088b8 <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008848:	68bb      	ldr	r3, [r7, #8]
 800884a:	699a      	ldr	r2, [r3, #24]
 800884c:	68bb      	ldr	r3, [r7, #8]
 800884e:	68db      	ldr	r3, [r3, #12]
 8008850:	4413      	add	r3, r2
 8008852:	1e5a      	subs	r2, r3, #1
 8008854:	68bb      	ldr	r3, [r7, #8]
 8008856:	68db      	ldr	r3, [r3, #12]
 8008858:	fbb2 f3f3 	udiv	r3, r2, r3
 800885c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800885e:	68bb      	ldr	r3, [r7, #8]
 8008860:	68db      	ldr	r3, [r3, #12]
 8008862:	8afa      	ldrh	r2, [r7, #22]
 8008864:	fb03 f202 	mul.w	r2, r3, r2
 8008868:	68bb      	ldr	r3, [r7, #8]
 800886a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800886c:	69bb      	ldr	r3, [r7, #24]
 800886e:	015a      	lsls	r2, r3, #5
 8008870:	69fb      	ldr	r3, [r7, #28]
 8008872:	4413      	add	r3, r2
 8008874:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008878:	691a      	ldr	r2, [r3, #16]
 800887a:	8afb      	ldrh	r3, [r7, #22]
 800887c:	04d9      	lsls	r1, r3, #19
 800887e:	4b3a      	ldr	r3, [pc, #232]	; (8008968 <USB_EPStartXfer+0x49c>)
 8008880:	400b      	ands	r3, r1
 8008882:	69b9      	ldr	r1, [r7, #24]
 8008884:	0148      	lsls	r0, r1, #5
 8008886:	69f9      	ldr	r1, [r7, #28]
 8008888:	4401      	add	r1, r0
 800888a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800888e:	4313      	orrs	r3, r2
 8008890:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8008892:	69bb      	ldr	r3, [r7, #24]
 8008894:	015a      	lsls	r2, r3, #5
 8008896:	69fb      	ldr	r3, [r7, #28]
 8008898:	4413      	add	r3, r2
 800889a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800889e:	691a      	ldr	r2, [r3, #16]
 80088a0:	68bb      	ldr	r3, [r7, #8]
 80088a2:	69db      	ldr	r3, [r3, #28]
 80088a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80088a8:	69b9      	ldr	r1, [r7, #24]
 80088aa:	0148      	lsls	r0, r1, #5
 80088ac:	69f9      	ldr	r1, [r7, #28]
 80088ae:	4401      	add	r1, r0
 80088b0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80088b4:	4313      	orrs	r3, r2
 80088b6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80088b8:	79fb      	ldrb	r3, [r7, #7]
 80088ba:	2b01      	cmp	r3, #1
 80088bc:	d10d      	bne.n	80088da <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80088be:	68bb      	ldr	r3, [r7, #8]
 80088c0:	691b      	ldr	r3, [r3, #16]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d009      	beq.n	80088da <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80088c6:	68bb      	ldr	r3, [r7, #8]
 80088c8:	6919      	ldr	r1, [r3, #16]
 80088ca:	69bb      	ldr	r3, [r7, #24]
 80088cc:	015a      	lsls	r2, r3, #5
 80088ce:	69fb      	ldr	r3, [r7, #28]
 80088d0:	4413      	add	r3, r2
 80088d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088d6:	460a      	mov	r2, r1
 80088d8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80088da:	68bb      	ldr	r3, [r7, #8]
 80088dc:	791b      	ldrb	r3, [r3, #4]
 80088de:	2b01      	cmp	r3, #1
 80088e0:	d128      	bne.n	8008934 <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80088e2:	69fb      	ldr	r3, [r7, #28]
 80088e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088e8:	689b      	ldr	r3, [r3, #8]
 80088ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d110      	bne.n	8008914 <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80088f2:	69bb      	ldr	r3, [r7, #24]
 80088f4:	015a      	lsls	r2, r3, #5
 80088f6:	69fb      	ldr	r3, [r7, #28]
 80088f8:	4413      	add	r3, r2
 80088fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	69ba      	ldr	r2, [r7, #24]
 8008902:	0151      	lsls	r1, r2, #5
 8008904:	69fa      	ldr	r2, [r7, #28]
 8008906:	440a      	add	r2, r1
 8008908:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800890c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008910:	6013      	str	r3, [r2, #0]
 8008912:	e00f      	b.n	8008934 <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008914:	69bb      	ldr	r3, [r7, #24]
 8008916:	015a      	lsls	r2, r3, #5
 8008918:	69fb      	ldr	r3, [r7, #28]
 800891a:	4413      	add	r3, r2
 800891c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	69ba      	ldr	r2, [r7, #24]
 8008924:	0151      	lsls	r1, r2, #5
 8008926:	69fa      	ldr	r2, [r7, #28]
 8008928:	440a      	add	r2, r1
 800892a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800892e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008932:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008934:	69bb      	ldr	r3, [r7, #24]
 8008936:	015a      	lsls	r2, r3, #5
 8008938:	69fb      	ldr	r3, [r7, #28]
 800893a:	4413      	add	r3, r2
 800893c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	69ba      	ldr	r2, [r7, #24]
 8008944:	0151      	lsls	r1, r2, #5
 8008946:	69fa      	ldr	r2, [r7, #28]
 8008948:	440a      	add	r2, r1
 800894a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800894e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008952:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008954:	2300      	movs	r3, #0
}
 8008956:	4618      	mov	r0, r3
 8008958:	3720      	adds	r7, #32
 800895a:	46bd      	mov	sp, r7
 800895c:	bd80      	pop	{r7, pc}
 800895e:	bf00      	nop
 8008960:	fff80000 	.word	0xfff80000
 8008964:	e007ffff 	.word	0xe007ffff
 8008968:	1ff80000 	.word	0x1ff80000

0800896c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800896c:	b480      	push	{r7}
 800896e:	b087      	sub	sp, #28
 8008970:	af00      	add	r7, sp, #0
 8008972:	60f8      	str	r0, [r7, #12]
 8008974:	60b9      	str	r1, [r7, #8]
 8008976:	4613      	mov	r3, r2
 8008978:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800897e:	68bb      	ldr	r3, [r7, #8]
 8008980:	781b      	ldrb	r3, [r3, #0]
 8008982:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008984:	68bb      	ldr	r3, [r7, #8]
 8008986:	785b      	ldrb	r3, [r3, #1]
 8008988:	2b01      	cmp	r3, #1
 800898a:	f040 80ce 	bne.w	8008b2a <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800898e:	68bb      	ldr	r3, [r7, #8]
 8008990:	699b      	ldr	r3, [r3, #24]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d132      	bne.n	80089fc <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008996:	693b      	ldr	r3, [r7, #16]
 8008998:	015a      	lsls	r2, r3, #5
 800899a:	697b      	ldr	r3, [r7, #20]
 800899c:	4413      	add	r3, r2
 800899e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089a2:	691a      	ldr	r2, [r3, #16]
 80089a4:	693b      	ldr	r3, [r7, #16]
 80089a6:	0159      	lsls	r1, r3, #5
 80089a8:	697b      	ldr	r3, [r7, #20]
 80089aa:	440b      	add	r3, r1
 80089ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089b0:	4619      	mov	r1, r3
 80089b2:	4b9a      	ldr	r3, [pc, #616]	; (8008c1c <USB_EP0StartXfer+0x2b0>)
 80089b4:	4013      	ands	r3, r2
 80089b6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80089b8:	693b      	ldr	r3, [r7, #16]
 80089ba:	015a      	lsls	r2, r3, #5
 80089bc:	697b      	ldr	r3, [r7, #20]
 80089be:	4413      	add	r3, r2
 80089c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089c4:	691b      	ldr	r3, [r3, #16]
 80089c6:	693a      	ldr	r2, [r7, #16]
 80089c8:	0151      	lsls	r1, r2, #5
 80089ca:	697a      	ldr	r2, [r7, #20]
 80089cc:	440a      	add	r2, r1
 80089ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80089d2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80089d6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80089d8:	693b      	ldr	r3, [r7, #16]
 80089da:	015a      	lsls	r2, r3, #5
 80089dc:	697b      	ldr	r3, [r7, #20]
 80089de:	4413      	add	r3, r2
 80089e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089e4:	691a      	ldr	r2, [r3, #16]
 80089e6:	693b      	ldr	r3, [r7, #16]
 80089e8:	0159      	lsls	r1, r3, #5
 80089ea:	697b      	ldr	r3, [r7, #20]
 80089ec:	440b      	add	r3, r1
 80089ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089f2:	4619      	mov	r1, r3
 80089f4:	4b8a      	ldr	r3, [pc, #552]	; (8008c20 <USB_EP0StartXfer+0x2b4>)
 80089f6:	4013      	ands	r3, r2
 80089f8:	610b      	str	r3, [r1, #16]
 80089fa:	e04e      	b.n	8008a9a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80089fc:	693b      	ldr	r3, [r7, #16]
 80089fe:	015a      	lsls	r2, r3, #5
 8008a00:	697b      	ldr	r3, [r7, #20]
 8008a02:	4413      	add	r3, r2
 8008a04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a08:	691a      	ldr	r2, [r3, #16]
 8008a0a:	693b      	ldr	r3, [r7, #16]
 8008a0c:	0159      	lsls	r1, r3, #5
 8008a0e:	697b      	ldr	r3, [r7, #20]
 8008a10:	440b      	add	r3, r1
 8008a12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a16:	4619      	mov	r1, r3
 8008a18:	4b81      	ldr	r3, [pc, #516]	; (8008c20 <USB_EP0StartXfer+0x2b4>)
 8008a1a:	4013      	ands	r3, r2
 8008a1c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008a1e:	693b      	ldr	r3, [r7, #16]
 8008a20:	015a      	lsls	r2, r3, #5
 8008a22:	697b      	ldr	r3, [r7, #20]
 8008a24:	4413      	add	r3, r2
 8008a26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a2a:	691a      	ldr	r2, [r3, #16]
 8008a2c:	693b      	ldr	r3, [r7, #16]
 8008a2e:	0159      	lsls	r1, r3, #5
 8008a30:	697b      	ldr	r3, [r7, #20]
 8008a32:	440b      	add	r3, r1
 8008a34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a38:	4619      	mov	r1, r3
 8008a3a:	4b78      	ldr	r3, [pc, #480]	; (8008c1c <USB_EP0StartXfer+0x2b0>)
 8008a3c:	4013      	ands	r3, r2
 8008a3e:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8008a40:	68bb      	ldr	r3, [r7, #8]
 8008a42:	699a      	ldr	r2, [r3, #24]
 8008a44:	68bb      	ldr	r3, [r7, #8]
 8008a46:	68db      	ldr	r3, [r3, #12]
 8008a48:	429a      	cmp	r2, r3
 8008a4a:	d903      	bls.n	8008a54 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8008a4c:	68bb      	ldr	r3, [r7, #8]
 8008a4e:	68da      	ldr	r2, [r3, #12]
 8008a50:	68bb      	ldr	r3, [r7, #8]
 8008a52:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008a54:	693b      	ldr	r3, [r7, #16]
 8008a56:	015a      	lsls	r2, r3, #5
 8008a58:	697b      	ldr	r3, [r7, #20]
 8008a5a:	4413      	add	r3, r2
 8008a5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a60:	691b      	ldr	r3, [r3, #16]
 8008a62:	693a      	ldr	r2, [r7, #16]
 8008a64:	0151      	lsls	r1, r2, #5
 8008a66:	697a      	ldr	r2, [r7, #20]
 8008a68:	440a      	add	r2, r1
 8008a6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a6e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008a72:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008a74:	693b      	ldr	r3, [r7, #16]
 8008a76:	015a      	lsls	r2, r3, #5
 8008a78:	697b      	ldr	r3, [r7, #20]
 8008a7a:	4413      	add	r3, r2
 8008a7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a80:	691a      	ldr	r2, [r3, #16]
 8008a82:	68bb      	ldr	r3, [r7, #8]
 8008a84:	699b      	ldr	r3, [r3, #24]
 8008a86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008a8a:	6939      	ldr	r1, [r7, #16]
 8008a8c:	0148      	lsls	r0, r1, #5
 8008a8e:	6979      	ldr	r1, [r7, #20]
 8008a90:	4401      	add	r1, r0
 8008a92:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008a96:	4313      	orrs	r3, r2
 8008a98:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008a9a:	79fb      	ldrb	r3, [r7, #7]
 8008a9c:	2b01      	cmp	r3, #1
 8008a9e:	d11e      	bne.n	8008ade <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008aa0:	68bb      	ldr	r3, [r7, #8]
 8008aa2:	695b      	ldr	r3, [r3, #20]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d009      	beq.n	8008abc <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008aa8:	693b      	ldr	r3, [r7, #16]
 8008aaa:	015a      	lsls	r2, r3, #5
 8008aac:	697b      	ldr	r3, [r7, #20]
 8008aae:	4413      	add	r3, r2
 8008ab0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ab4:	461a      	mov	r2, r3
 8008ab6:	68bb      	ldr	r3, [r7, #8]
 8008ab8:	695b      	ldr	r3, [r3, #20]
 8008aba:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008abc:	693b      	ldr	r3, [r7, #16]
 8008abe:	015a      	lsls	r2, r3, #5
 8008ac0:	697b      	ldr	r3, [r7, #20]
 8008ac2:	4413      	add	r3, r2
 8008ac4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	693a      	ldr	r2, [r7, #16]
 8008acc:	0151      	lsls	r1, r2, #5
 8008ace:	697a      	ldr	r2, [r7, #20]
 8008ad0:	440a      	add	r2, r1
 8008ad2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ad6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008ada:	6013      	str	r3, [r2, #0]
 8008adc:	e097      	b.n	8008c0e <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008ade:	693b      	ldr	r3, [r7, #16]
 8008ae0:	015a      	lsls	r2, r3, #5
 8008ae2:	697b      	ldr	r3, [r7, #20]
 8008ae4:	4413      	add	r3, r2
 8008ae6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	693a      	ldr	r2, [r7, #16]
 8008aee:	0151      	lsls	r1, r2, #5
 8008af0:	697a      	ldr	r2, [r7, #20]
 8008af2:	440a      	add	r2, r1
 8008af4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008af8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008afc:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8008afe:	68bb      	ldr	r3, [r7, #8]
 8008b00:	699b      	ldr	r3, [r3, #24]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	f000 8083 	beq.w	8008c0e <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008b08:	697b      	ldr	r3, [r7, #20]
 8008b0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008b10:	68bb      	ldr	r3, [r7, #8]
 8008b12:	781b      	ldrb	r3, [r3, #0]
 8008b14:	f003 030f 	and.w	r3, r3, #15
 8008b18:	2101      	movs	r1, #1
 8008b1a:	fa01 f303 	lsl.w	r3, r1, r3
 8008b1e:	6979      	ldr	r1, [r7, #20]
 8008b20:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008b24:	4313      	orrs	r3, r2
 8008b26:	634b      	str	r3, [r1, #52]	; 0x34
 8008b28:	e071      	b.n	8008c0e <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008b2a:	693b      	ldr	r3, [r7, #16]
 8008b2c:	015a      	lsls	r2, r3, #5
 8008b2e:	697b      	ldr	r3, [r7, #20]
 8008b30:	4413      	add	r3, r2
 8008b32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b36:	691a      	ldr	r2, [r3, #16]
 8008b38:	693b      	ldr	r3, [r7, #16]
 8008b3a:	0159      	lsls	r1, r3, #5
 8008b3c:	697b      	ldr	r3, [r7, #20]
 8008b3e:	440b      	add	r3, r1
 8008b40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b44:	4619      	mov	r1, r3
 8008b46:	4b36      	ldr	r3, [pc, #216]	; (8008c20 <USB_EP0StartXfer+0x2b4>)
 8008b48:	4013      	ands	r3, r2
 8008b4a:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008b4c:	693b      	ldr	r3, [r7, #16]
 8008b4e:	015a      	lsls	r2, r3, #5
 8008b50:	697b      	ldr	r3, [r7, #20]
 8008b52:	4413      	add	r3, r2
 8008b54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b58:	691a      	ldr	r2, [r3, #16]
 8008b5a:	693b      	ldr	r3, [r7, #16]
 8008b5c:	0159      	lsls	r1, r3, #5
 8008b5e:	697b      	ldr	r3, [r7, #20]
 8008b60:	440b      	add	r3, r1
 8008b62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b66:	4619      	mov	r1, r3
 8008b68:	4b2c      	ldr	r3, [pc, #176]	; (8008c1c <USB_EP0StartXfer+0x2b0>)
 8008b6a:	4013      	ands	r3, r2
 8008b6c:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 8008b6e:	68bb      	ldr	r3, [r7, #8]
 8008b70:	699b      	ldr	r3, [r3, #24]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d003      	beq.n	8008b7e <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8008b76:	68bb      	ldr	r3, [r7, #8]
 8008b78:	68da      	ldr	r2, [r3, #12]
 8008b7a:	68bb      	ldr	r3, [r7, #8]
 8008b7c:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8008b7e:	68bb      	ldr	r3, [r7, #8]
 8008b80:	68da      	ldr	r2, [r3, #12]
 8008b82:	68bb      	ldr	r3, [r7, #8]
 8008b84:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008b86:	693b      	ldr	r3, [r7, #16]
 8008b88:	015a      	lsls	r2, r3, #5
 8008b8a:	697b      	ldr	r3, [r7, #20]
 8008b8c:	4413      	add	r3, r2
 8008b8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b92:	691b      	ldr	r3, [r3, #16]
 8008b94:	693a      	ldr	r2, [r7, #16]
 8008b96:	0151      	lsls	r1, r2, #5
 8008b98:	697a      	ldr	r2, [r7, #20]
 8008b9a:	440a      	add	r2, r1
 8008b9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008ba0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008ba4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8008ba6:	693b      	ldr	r3, [r7, #16]
 8008ba8:	015a      	lsls	r2, r3, #5
 8008baa:	697b      	ldr	r3, [r7, #20]
 8008bac:	4413      	add	r3, r2
 8008bae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bb2:	691a      	ldr	r2, [r3, #16]
 8008bb4:	68bb      	ldr	r3, [r7, #8]
 8008bb6:	69db      	ldr	r3, [r3, #28]
 8008bb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008bbc:	6939      	ldr	r1, [r7, #16]
 8008bbe:	0148      	lsls	r0, r1, #5
 8008bc0:	6979      	ldr	r1, [r7, #20]
 8008bc2:	4401      	add	r1, r0
 8008bc4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008bc8:	4313      	orrs	r3, r2
 8008bca:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8008bcc:	79fb      	ldrb	r3, [r7, #7]
 8008bce:	2b01      	cmp	r3, #1
 8008bd0:	d10d      	bne.n	8008bee <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008bd2:	68bb      	ldr	r3, [r7, #8]
 8008bd4:	691b      	ldr	r3, [r3, #16]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d009      	beq.n	8008bee <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008bda:	68bb      	ldr	r3, [r7, #8]
 8008bdc:	6919      	ldr	r1, [r3, #16]
 8008bde:	693b      	ldr	r3, [r7, #16]
 8008be0:	015a      	lsls	r2, r3, #5
 8008be2:	697b      	ldr	r3, [r7, #20]
 8008be4:	4413      	add	r3, r2
 8008be6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bea:	460a      	mov	r2, r1
 8008bec:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008bee:	693b      	ldr	r3, [r7, #16]
 8008bf0:	015a      	lsls	r2, r3, #5
 8008bf2:	697b      	ldr	r3, [r7, #20]
 8008bf4:	4413      	add	r3, r2
 8008bf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	693a      	ldr	r2, [r7, #16]
 8008bfe:	0151      	lsls	r1, r2, #5
 8008c00:	697a      	ldr	r2, [r7, #20]
 8008c02:	440a      	add	r2, r1
 8008c04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c08:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008c0c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008c0e:	2300      	movs	r3, #0
}
 8008c10:	4618      	mov	r0, r3
 8008c12:	371c      	adds	r7, #28
 8008c14:	46bd      	mov	sp, r7
 8008c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1a:	4770      	bx	lr
 8008c1c:	e007ffff 	.word	0xe007ffff
 8008c20:	fff80000 	.word	0xfff80000

08008c24 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008c24:	b480      	push	{r7}
 8008c26:	b087      	sub	sp, #28
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
 8008c2c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008c2e:	2300      	movs	r3, #0
 8008c30:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8008c32:	2300      	movs	r3, #0
 8008c34:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008c3a:	683b      	ldr	r3, [r7, #0]
 8008c3c:	785b      	ldrb	r3, [r3, #1]
 8008c3e:	2b01      	cmp	r3, #1
 8008c40:	d14a      	bne.n	8008cd8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008c42:	683b      	ldr	r3, [r7, #0]
 8008c44:	781b      	ldrb	r3, [r3, #0]
 8008c46:	015a      	lsls	r2, r3, #5
 8008c48:	693b      	ldr	r3, [r7, #16]
 8008c4a:	4413      	add	r3, r2
 8008c4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008c56:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008c5a:	f040 8086 	bne.w	8008d6a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8008c5e:	683b      	ldr	r3, [r7, #0]
 8008c60:	781b      	ldrb	r3, [r3, #0]
 8008c62:	015a      	lsls	r2, r3, #5
 8008c64:	693b      	ldr	r3, [r7, #16]
 8008c66:	4413      	add	r3, r2
 8008c68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	683a      	ldr	r2, [r7, #0]
 8008c70:	7812      	ldrb	r2, [r2, #0]
 8008c72:	0151      	lsls	r1, r2, #5
 8008c74:	693a      	ldr	r2, [r7, #16]
 8008c76:	440a      	add	r2, r1
 8008c78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c7c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008c80:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8008c82:	683b      	ldr	r3, [r7, #0]
 8008c84:	781b      	ldrb	r3, [r3, #0]
 8008c86:	015a      	lsls	r2, r3, #5
 8008c88:	693b      	ldr	r3, [r7, #16]
 8008c8a:	4413      	add	r3, r2
 8008c8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	683a      	ldr	r2, [r7, #0]
 8008c94:	7812      	ldrb	r2, [r2, #0]
 8008c96:	0151      	lsls	r1, r2, #5
 8008c98:	693a      	ldr	r2, [r7, #16]
 8008c9a:	440a      	add	r2, r1
 8008c9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ca0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008ca4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	3301      	adds	r3, #1
 8008caa:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	f242 7210 	movw	r2, #10000	; 0x2710
 8008cb2:	4293      	cmp	r3, r2
 8008cb4:	d902      	bls.n	8008cbc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8008cb6:	2301      	movs	r3, #1
 8008cb8:	75fb      	strb	r3, [r7, #23]
          break;
 8008cba:	e056      	b.n	8008d6a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8008cbc:	683b      	ldr	r3, [r7, #0]
 8008cbe:	781b      	ldrb	r3, [r3, #0]
 8008cc0:	015a      	lsls	r2, r3, #5
 8008cc2:	693b      	ldr	r3, [r7, #16]
 8008cc4:	4413      	add	r3, r2
 8008cc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008cd0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008cd4:	d0e7      	beq.n	8008ca6 <USB_EPStopXfer+0x82>
 8008cd6:	e048      	b.n	8008d6a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008cd8:	683b      	ldr	r3, [r7, #0]
 8008cda:	781b      	ldrb	r3, [r3, #0]
 8008cdc:	015a      	lsls	r2, r3, #5
 8008cde:	693b      	ldr	r3, [r7, #16]
 8008ce0:	4413      	add	r3, r2
 8008ce2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008cec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008cf0:	d13b      	bne.n	8008d6a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8008cf2:	683b      	ldr	r3, [r7, #0]
 8008cf4:	781b      	ldrb	r3, [r3, #0]
 8008cf6:	015a      	lsls	r2, r3, #5
 8008cf8:	693b      	ldr	r3, [r7, #16]
 8008cfa:	4413      	add	r3, r2
 8008cfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	683a      	ldr	r2, [r7, #0]
 8008d04:	7812      	ldrb	r2, [r2, #0]
 8008d06:	0151      	lsls	r1, r2, #5
 8008d08:	693a      	ldr	r2, [r7, #16]
 8008d0a:	440a      	add	r2, r1
 8008d0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008d10:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008d14:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8008d16:	683b      	ldr	r3, [r7, #0]
 8008d18:	781b      	ldrb	r3, [r3, #0]
 8008d1a:	015a      	lsls	r2, r3, #5
 8008d1c:	693b      	ldr	r3, [r7, #16]
 8008d1e:	4413      	add	r3, r2
 8008d20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	683a      	ldr	r2, [r7, #0]
 8008d28:	7812      	ldrb	r2, [r2, #0]
 8008d2a:	0151      	lsls	r1, r2, #5
 8008d2c:	693a      	ldr	r2, [r7, #16]
 8008d2e:	440a      	add	r2, r1
 8008d30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008d34:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008d38:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	3301      	adds	r3, #1
 8008d3e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	f242 7210 	movw	r2, #10000	; 0x2710
 8008d46:	4293      	cmp	r3, r2
 8008d48:	d902      	bls.n	8008d50 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8008d4a:	2301      	movs	r3, #1
 8008d4c:	75fb      	strb	r3, [r7, #23]
          break;
 8008d4e:	e00c      	b.n	8008d6a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8008d50:	683b      	ldr	r3, [r7, #0]
 8008d52:	781b      	ldrb	r3, [r3, #0]
 8008d54:	015a      	lsls	r2, r3, #5
 8008d56:	693b      	ldr	r3, [r7, #16]
 8008d58:	4413      	add	r3, r2
 8008d5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008d64:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008d68:	d0e7      	beq.n	8008d3a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8008d6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	371c      	adds	r7, #28
 8008d70:	46bd      	mov	sp, r7
 8008d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d76:	4770      	bx	lr

08008d78 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008d78:	b480      	push	{r7}
 8008d7a:	b089      	sub	sp, #36	; 0x24
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	60f8      	str	r0, [r7, #12]
 8008d80:	60b9      	str	r1, [r7, #8]
 8008d82:	4611      	mov	r1, r2
 8008d84:	461a      	mov	r2, r3
 8008d86:	460b      	mov	r3, r1
 8008d88:	71fb      	strb	r3, [r7, #7]
 8008d8a:	4613      	mov	r3, r2
 8008d8c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008d92:	68bb      	ldr	r3, [r7, #8]
 8008d94:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008d96:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d123      	bne.n	8008de6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008d9e:	88bb      	ldrh	r3, [r7, #4]
 8008da0:	3303      	adds	r3, #3
 8008da2:	089b      	lsrs	r3, r3, #2
 8008da4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008da6:	2300      	movs	r3, #0
 8008da8:	61bb      	str	r3, [r7, #24]
 8008daa:	e018      	b.n	8008dde <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008dac:	79fb      	ldrb	r3, [r7, #7]
 8008dae:	031a      	lsls	r2, r3, #12
 8008db0:	697b      	ldr	r3, [r7, #20]
 8008db2:	4413      	add	r3, r2
 8008db4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008db8:	461a      	mov	r2, r3
 8008dba:	69fb      	ldr	r3, [r7, #28]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008dc0:	69fb      	ldr	r3, [r7, #28]
 8008dc2:	3301      	adds	r3, #1
 8008dc4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008dc6:	69fb      	ldr	r3, [r7, #28]
 8008dc8:	3301      	adds	r3, #1
 8008dca:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008dcc:	69fb      	ldr	r3, [r7, #28]
 8008dce:	3301      	adds	r3, #1
 8008dd0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008dd2:	69fb      	ldr	r3, [r7, #28]
 8008dd4:	3301      	adds	r3, #1
 8008dd6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008dd8:	69bb      	ldr	r3, [r7, #24]
 8008dda:	3301      	adds	r3, #1
 8008ddc:	61bb      	str	r3, [r7, #24]
 8008dde:	69ba      	ldr	r2, [r7, #24]
 8008de0:	693b      	ldr	r3, [r7, #16]
 8008de2:	429a      	cmp	r2, r3
 8008de4:	d3e2      	bcc.n	8008dac <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008de6:	2300      	movs	r3, #0
}
 8008de8:	4618      	mov	r0, r3
 8008dea:	3724      	adds	r7, #36	; 0x24
 8008dec:	46bd      	mov	sp, r7
 8008dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df2:	4770      	bx	lr

08008df4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008df4:	b480      	push	{r7}
 8008df6:	b08b      	sub	sp, #44	; 0x2c
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	60f8      	str	r0, [r7, #12]
 8008dfc:	60b9      	str	r1, [r7, #8]
 8008dfe:	4613      	mov	r3, r2
 8008e00:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008e06:	68bb      	ldr	r3, [r7, #8]
 8008e08:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008e0a:	88fb      	ldrh	r3, [r7, #6]
 8008e0c:	089b      	lsrs	r3, r3, #2
 8008e0e:	b29b      	uxth	r3, r3
 8008e10:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008e12:	88fb      	ldrh	r3, [r7, #6]
 8008e14:	f003 0303 	and.w	r3, r3, #3
 8008e18:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	623b      	str	r3, [r7, #32]
 8008e1e:	e014      	b.n	8008e4a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008e20:	69bb      	ldr	r3, [r7, #24]
 8008e22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e26:	681a      	ldr	r2, [r3, #0]
 8008e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e2a:	601a      	str	r2, [r3, #0]
    pDest++;
 8008e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e2e:	3301      	adds	r3, #1
 8008e30:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e34:	3301      	adds	r3, #1
 8008e36:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e3a:	3301      	adds	r3, #1
 8008e3c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e40:	3301      	adds	r3, #1
 8008e42:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8008e44:	6a3b      	ldr	r3, [r7, #32]
 8008e46:	3301      	adds	r3, #1
 8008e48:	623b      	str	r3, [r7, #32]
 8008e4a:	6a3a      	ldr	r2, [r7, #32]
 8008e4c:	697b      	ldr	r3, [r7, #20]
 8008e4e:	429a      	cmp	r2, r3
 8008e50:	d3e6      	bcc.n	8008e20 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008e52:	8bfb      	ldrh	r3, [r7, #30]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d01e      	beq.n	8008e96 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008e58:	2300      	movs	r3, #0
 8008e5a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008e5c:	69bb      	ldr	r3, [r7, #24]
 8008e5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e62:	461a      	mov	r2, r3
 8008e64:	f107 0310 	add.w	r3, r7, #16
 8008e68:	6812      	ldr	r2, [r2, #0]
 8008e6a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008e6c:	693a      	ldr	r2, [r7, #16]
 8008e6e:	6a3b      	ldr	r3, [r7, #32]
 8008e70:	b2db      	uxtb	r3, r3
 8008e72:	00db      	lsls	r3, r3, #3
 8008e74:	fa22 f303 	lsr.w	r3, r2, r3
 8008e78:	b2da      	uxtb	r2, r3
 8008e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e7c:	701a      	strb	r2, [r3, #0]
      i++;
 8008e7e:	6a3b      	ldr	r3, [r7, #32]
 8008e80:	3301      	adds	r3, #1
 8008e82:	623b      	str	r3, [r7, #32]
      pDest++;
 8008e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e86:	3301      	adds	r3, #1
 8008e88:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8008e8a:	8bfb      	ldrh	r3, [r7, #30]
 8008e8c:	3b01      	subs	r3, #1
 8008e8e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008e90:	8bfb      	ldrh	r3, [r7, #30]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d1ea      	bne.n	8008e6c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008e98:	4618      	mov	r0, r3
 8008e9a:	372c      	adds	r7, #44	; 0x2c
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea2:	4770      	bx	lr

08008ea4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008ea4:	b480      	push	{r7}
 8008ea6:	b085      	sub	sp, #20
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
 8008eac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008eb2:	683b      	ldr	r3, [r7, #0]
 8008eb4:	781b      	ldrb	r3, [r3, #0]
 8008eb6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008eb8:	683b      	ldr	r3, [r7, #0]
 8008eba:	785b      	ldrb	r3, [r3, #1]
 8008ebc:	2b01      	cmp	r3, #1
 8008ebe:	d12c      	bne.n	8008f1a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008ec0:	68bb      	ldr	r3, [r7, #8]
 8008ec2:	015a      	lsls	r2, r3, #5
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	4413      	add	r3, r2
 8008ec8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	db12      	blt.n	8008ef8 <USB_EPSetStall+0x54>
 8008ed2:	68bb      	ldr	r3, [r7, #8]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d00f      	beq.n	8008ef8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008ed8:	68bb      	ldr	r3, [r7, #8]
 8008eda:	015a      	lsls	r2, r3, #5
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	4413      	add	r3, r2
 8008ee0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	68ba      	ldr	r2, [r7, #8]
 8008ee8:	0151      	lsls	r1, r2, #5
 8008eea:	68fa      	ldr	r2, [r7, #12]
 8008eec:	440a      	add	r2, r1
 8008eee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ef2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008ef6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008ef8:	68bb      	ldr	r3, [r7, #8]
 8008efa:	015a      	lsls	r2, r3, #5
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	4413      	add	r3, r2
 8008f00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	68ba      	ldr	r2, [r7, #8]
 8008f08:	0151      	lsls	r1, r2, #5
 8008f0a:	68fa      	ldr	r2, [r7, #12]
 8008f0c:	440a      	add	r2, r1
 8008f0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f12:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008f16:	6013      	str	r3, [r2, #0]
 8008f18:	e02b      	b.n	8008f72 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008f1a:	68bb      	ldr	r3, [r7, #8]
 8008f1c:	015a      	lsls	r2, r3, #5
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	4413      	add	r3, r2
 8008f22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	db12      	blt.n	8008f52 <USB_EPSetStall+0xae>
 8008f2c:	68bb      	ldr	r3, [r7, #8]
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d00f      	beq.n	8008f52 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008f32:	68bb      	ldr	r3, [r7, #8]
 8008f34:	015a      	lsls	r2, r3, #5
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	4413      	add	r3, r2
 8008f3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	68ba      	ldr	r2, [r7, #8]
 8008f42:	0151      	lsls	r1, r2, #5
 8008f44:	68fa      	ldr	r2, [r7, #12]
 8008f46:	440a      	add	r2, r1
 8008f48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f4c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008f50:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008f52:	68bb      	ldr	r3, [r7, #8]
 8008f54:	015a      	lsls	r2, r3, #5
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	4413      	add	r3, r2
 8008f5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	68ba      	ldr	r2, [r7, #8]
 8008f62:	0151      	lsls	r1, r2, #5
 8008f64:	68fa      	ldr	r2, [r7, #12]
 8008f66:	440a      	add	r2, r1
 8008f68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f6c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008f70:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008f72:	2300      	movs	r3, #0
}
 8008f74:	4618      	mov	r0, r3
 8008f76:	3714      	adds	r7, #20
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7e:	4770      	bx	lr

08008f80 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008f80:	b480      	push	{r7}
 8008f82:	b085      	sub	sp, #20
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]
 8008f88:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008f8e:	683b      	ldr	r3, [r7, #0]
 8008f90:	781b      	ldrb	r3, [r3, #0]
 8008f92:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008f94:	683b      	ldr	r3, [r7, #0]
 8008f96:	785b      	ldrb	r3, [r3, #1]
 8008f98:	2b01      	cmp	r3, #1
 8008f9a:	d128      	bne.n	8008fee <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008f9c:	68bb      	ldr	r3, [r7, #8]
 8008f9e:	015a      	lsls	r2, r3, #5
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	4413      	add	r3, r2
 8008fa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	68ba      	ldr	r2, [r7, #8]
 8008fac:	0151      	lsls	r1, r2, #5
 8008fae:	68fa      	ldr	r2, [r7, #12]
 8008fb0:	440a      	add	r2, r1
 8008fb2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008fb6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008fba:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008fbc:	683b      	ldr	r3, [r7, #0]
 8008fbe:	791b      	ldrb	r3, [r3, #4]
 8008fc0:	2b03      	cmp	r3, #3
 8008fc2:	d003      	beq.n	8008fcc <USB_EPClearStall+0x4c>
 8008fc4:	683b      	ldr	r3, [r7, #0]
 8008fc6:	791b      	ldrb	r3, [r3, #4]
 8008fc8:	2b02      	cmp	r3, #2
 8008fca:	d138      	bne.n	800903e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008fcc:	68bb      	ldr	r3, [r7, #8]
 8008fce:	015a      	lsls	r2, r3, #5
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	4413      	add	r3, r2
 8008fd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	68ba      	ldr	r2, [r7, #8]
 8008fdc:	0151      	lsls	r1, r2, #5
 8008fde:	68fa      	ldr	r2, [r7, #12]
 8008fe0:	440a      	add	r2, r1
 8008fe2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008fe6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008fea:	6013      	str	r3, [r2, #0]
 8008fec:	e027      	b.n	800903e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008fee:	68bb      	ldr	r3, [r7, #8]
 8008ff0:	015a      	lsls	r2, r3, #5
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	4413      	add	r3, r2
 8008ff6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	68ba      	ldr	r2, [r7, #8]
 8008ffe:	0151      	lsls	r1, r2, #5
 8009000:	68fa      	ldr	r2, [r7, #12]
 8009002:	440a      	add	r2, r1
 8009004:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009008:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800900c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800900e:	683b      	ldr	r3, [r7, #0]
 8009010:	791b      	ldrb	r3, [r3, #4]
 8009012:	2b03      	cmp	r3, #3
 8009014:	d003      	beq.n	800901e <USB_EPClearStall+0x9e>
 8009016:	683b      	ldr	r3, [r7, #0]
 8009018:	791b      	ldrb	r3, [r3, #4]
 800901a:	2b02      	cmp	r3, #2
 800901c:	d10f      	bne.n	800903e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800901e:	68bb      	ldr	r3, [r7, #8]
 8009020:	015a      	lsls	r2, r3, #5
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	4413      	add	r3, r2
 8009026:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	68ba      	ldr	r2, [r7, #8]
 800902e:	0151      	lsls	r1, r2, #5
 8009030:	68fa      	ldr	r2, [r7, #12]
 8009032:	440a      	add	r2, r1
 8009034:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009038:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800903c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800903e:	2300      	movs	r3, #0
}
 8009040:	4618      	mov	r0, r3
 8009042:	3714      	adds	r7, #20
 8009044:	46bd      	mov	sp, r7
 8009046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904a:	4770      	bx	lr

0800904c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800904c:	b480      	push	{r7}
 800904e:	b085      	sub	sp, #20
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
 8009054:	460b      	mov	r3, r1
 8009056:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	68fa      	ldr	r2, [r7, #12]
 8009066:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800906a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800906e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009076:	681a      	ldr	r2, [r3, #0]
 8009078:	78fb      	ldrb	r3, [r7, #3]
 800907a:	011b      	lsls	r3, r3, #4
 800907c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8009080:	68f9      	ldr	r1, [r7, #12]
 8009082:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009086:	4313      	orrs	r3, r2
 8009088:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800908a:	2300      	movs	r3, #0
}
 800908c:	4618      	mov	r0, r3
 800908e:	3714      	adds	r7, #20
 8009090:	46bd      	mov	sp, r7
 8009092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009096:	4770      	bx	lr

08009098 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009098:	b480      	push	{r7}
 800909a:	b085      	sub	sp, #20
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	68fa      	ldr	r2, [r7, #12]
 80090ae:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80090b2:	f023 0303 	bic.w	r3, r3, #3
 80090b6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090be:	685b      	ldr	r3, [r3, #4]
 80090c0:	68fa      	ldr	r2, [r7, #12]
 80090c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80090c6:	f023 0302 	bic.w	r3, r3, #2
 80090ca:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80090cc:	2300      	movs	r3, #0
}
 80090ce:	4618      	mov	r0, r3
 80090d0:	3714      	adds	r7, #20
 80090d2:	46bd      	mov	sp, r7
 80090d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d8:	4770      	bx	lr

080090da <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80090da:	b480      	push	{r7}
 80090dc:	b085      	sub	sp, #20
 80090de:	af00      	add	r7, sp, #0
 80090e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	68fa      	ldr	r2, [r7, #12]
 80090f0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80090f4:	f023 0303 	bic.w	r3, r3, #3
 80090f8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009100:	685b      	ldr	r3, [r3, #4]
 8009102:	68fa      	ldr	r2, [r7, #12]
 8009104:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009108:	f043 0302 	orr.w	r3, r3, #2
 800910c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800910e:	2300      	movs	r3, #0
}
 8009110:	4618      	mov	r0, r3
 8009112:	3714      	adds	r7, #20
 8009114:	46bd      	mov	sp, r7
 8009116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911a:	4770      	bx	lr

0800911c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800911c:	b480      	push	{r7}
 800911e:	b085      	sub	sp, #20
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	695b      	ldr	r3, [r3, #20]
 8009128:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	699b      	ldr	r3, [r3, #24]
 800912e:	68fa      	ldr	r2, [r7, #12]
 8009130:	4013      	ands	r3, r2
 8009132:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009134:	68fb      	ldr	r3, [r7, #12]
}
 8009136:	4618      	mov	r0, r3
 8009138:	3714      	adds	r7, #20
 800913a:	46bd      	mov	sp, r7
 800913c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009140:	4770      	bx	lr

08009142 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009142:	b480      	push	{r7}
 8009144:	b085      	sub	sp, #20
 8009146:	af00      	add	r7, sp, #0
 8009148:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009154:	699b      	ldr	r3, [r3, #24]
 8009156:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800915e:	69db      	ldr	r3, [r3, #28]
 8009160:	68ba      	ldr	r2, [r7, #8]
 8009162:	4013      	ands	r3, r2
 8009164:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009166:	68bb      	ldr	r3, [r7, #8]
 8009168:	0c1b      	lsrs	r3, r3, #16
}
 800916a:	4618      	mov	r0, r3
 800916c:	3714      	adds	r7, #20
 800916e:	46bd      	mov	sp, r7
 8009170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009174:	4770      	bx	lr

08009176 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009176:	b480      	push	{r7}
 8009178:	b085      	sub	sp, #20
 800917a:	af00      	add	r7, sp, #0
 800917c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009188:	699b      	ldr	r3, [r3, #24]
 800918a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009192:	69db      	ldr	r3, [r3, #28]
 8009194:	68ba      	ldr	r2, [r7, #8]
 8009196:	4013      	ands	r3, r2
 8009198:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800919a:	68bb      	ldr	r3, [r7, #8]
 800919c:	b29b      	uxth	r3, r3
}
 800919e:	4618      	mov	r0, r3
 80091a0:	3714      	adds	r7, #20
 80091a2:	46bd      	mov	sp, r7
 80091a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a8:	4770      	bx	lr

080091aa <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80091aa:	b480      	push	{r7}
 80091ac:	b085      	sub	sp, #20
 80091ae:	af00      	add	r7, sp, #0
 80091b0:	6078      	str	r0, [r7, #4]
 80091b2:	460b      	mov	r3, r1
 80091b4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80091ba:	78fb      	ldrb	r3, [r7, #3]
 80091bc:	015a      	lsls	r2, r3, #5
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	4413      	add	r3, r2
 80091c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091c6:	689b      	ldr	r3, [r3, #8]
 80091c8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091d0:	695b      	ldr	r3, [r3, #20]
 80091d2:	68ba      	ldr	r2, [r7, #8]
 80091d4:	4013      	ands	r3, r2
 80091d6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80091d8:	68bb      	ldr	r3, [r7, #8]
}
 80091da:	4618      	mov	r0, r3
 80091dc:	3714      	adds	r7, #20
 80091de:	46bd      	mov	sp, r7
 80091e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e4:	4770      	bx	lr

080091e6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80091e6:	b480      	push	{r7}
 80091e8:	b087      	sub	sp, #28
 80091ea:	af00      	add	r7, sp, #0
 80091ec:	6078      	str	r0, [r7, #4]
 80091ee:	460b      	mov	r3, r1
 80091f0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80091f6:	697b      	ldr	r3, [r7, #20]
 80091f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091fc:	691b      	ldr	r3, [r3, #16]
 80091fe:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009200:	697b      	ldr	r3, [r7, #20]
 8009202:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009206:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009208:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800920a:	78fb      	ldrb	r3, [r7, #3]
 800920c:	f003 030f 	and.w	r3, r3, #15
 8009210:	68fa      	ldr	r2, [r7, #12]
 8009212:	fa22 f303 	lsr.w	r3, r2, r3
 8009216:	01db      	lsls	r3, r3, #7
 8009218:	b2db      	uxtb	r3, r3
 800921a:	693a      	ldr	r2, [r7, #16]
 800921c:	4313      	orrs	r3, r2
 800921e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009220:	78fb      	ldrb	r3, [r7, #3]
 8009222:	015a      	lsls	r2, r3, #5
 8009224:	697b      	ldr	r3, [r7, #20]
 8009226:	4413      	add	r3, r2
 8009228:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800922c:	689b      	ldr	r3, [r3, #8]
 800922e:	693a      	ldr	r2, [r7, #16]
 8009230:	4013      	ands	r3, r2
 8009232:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009234:	68bb      	ldr	r3, [r7, #8]
}
 8009236:	4618      	mov	r0, r3
 8009238:	371c      	adds	r7, #28
 800923a:	46bd      	mov	sp, r7
 800923c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009240:	4770      	bx	lr

08009242 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009242:	b480      	push	{r7}
 8009244:	b083      	sub	sp, #12
 8009246:	af00      	add	r7, sp, #0
 8009248:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	695b      	ldr	r3, [r3, #20]
 800924e:	f003 0301 	and.w	r3, r3, #1
}
 8009252:	4618      	mov	r0, r3
 8009254:	370c      	adds	r7, #12
 8009256:	46bd      	mov	sp, r7
 8009258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925c:	4770      	bx	lr
	...

08009260 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8009260:	b480      	push	{r7}
 8009262:	b085      	sub	sp, #20
 8009264:	af00      	add	r7, sp, #0
 8009266:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009272:	681a      	ldr	r2, [r3, #0]
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800927a:	4619      	mov	r1, r3
 800927c:	4b09      	ldr	r3, [pc, #36]	; (80092a4 <USB_ActivateSetup+0x44>)
 800927e:	4013      	ands	r3, r2
 8009280:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009288:	685b      	ldr	r3, [r3, #4]
 800928a:	68fa      	ldr	r2, [r7, #12]
 800928c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009290:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009294:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009296:	2300      	movs	r3, #0
}
 8009298:	4618      	mov	r0, r3
 800929a:	3714      	adds	r7, #20
 800929c:	46bd      	mov	sp, r7
 800929e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a2:	4770      	bx	lr
 80092a4:	fffff800 	.word	0xfffff800

080092a8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80092a8:	b480      	push	{r7}
 80092aa:	b087      	sub	sp, #28
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	60f8      	str	r0, [r7, #12]
 80092b0:	460b      	mov	r3, r1
 80092b2:	607a      	str	r2, [r7, #4]
 80092b4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	333c      	adds	r3, #60	; 0x3c
 80092be:	3304      	adds	r3, #4
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80092c4:	693b      	ldr	r3, [r7, #16]
 80092c6:	4a26      	ldr	r2, [pc, #152]	; (8009360 <USB_EP0_OutStart+0xb8>)
 80092c8:	4293      	cmp	r3, r2
 80092ca:	d90a      	bls.n	80092e2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80092cc:	697b      	ldr	r3, [r7, #20]
 80092ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80092d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80092dc:	d101      	bne.n	80092e2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80092de:	2300      	movs	r3, #0
 80092e0:	e037      	b.n	8009352 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80092e2:	697b      	ldr	r3, [r7, #20]
 80092e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092e8:	461a      	mov	r2, r3
 80092ea:	2300      	movs	r3, #0
 80092ec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80092ee:	697b      	ldr	r3, [r7, #20]
 80092f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092f4:	691b      	ldr	r3, [r3, #16]
 80092f6:	697a      	ldr	r2, [r7, #20]
 80092f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80092fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009300:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009302:	697b      	ldr	r3, [r7, #20]
 8009304:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009308:	691b      	ldr	r3, [r3, #16]
 800930a:	697a      	ldr	r2, [r7, #20]
 800930c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009310:	f043 0318 	orr.w	r3, r3, #24
 8009314:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009316:	697b      	ldr	r3, [r7, #20]
 8009318:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800931c:	691b      	ldr	r3, [r3, #16]
 800931e:	697a      	ldr	r2, [r7, #20]
 8009320:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009324:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8009328:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800932a:	7afb      	ldrb	r3, [r7, #11]
 800932c:	2b01      	cmp	r3, #1
 800932e:	d10f      	bne.n	8009350 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009330:	697b      	ldr	r3, [r7, #20]
 8009332:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009336:	461a      	mov	r2, r3
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800933c:	697b      	ldr	r3, [r7, #20]
 800933e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	697a      	ldr	r2, [r7, #20]
 8009346:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800934a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800934e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009350:	2300      	movs	r3, #0
}
 8009352:	4618      	mov	r0, r3
 8009354:	371c      	adds	r7, #28
 8009356:	46bd      	mov	sp, r7
 8009358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935c:	4770      	bx	lr
 800935e:	bf00      	nop
 8009360:	4f54300a 	.word	0x4f54300a

08009364 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009364:	b480      	push	{r7}
 8009366:	b085      	sub	sp, #20
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800936c:	2300      	movs	r3, #0
 800936e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	3301      	adds	r3, #1
 8009374:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	4a13      	ldr	r2, [pc, #76]	; (80093c8 <USB_CoreReset+0x64>)
 800937a:	4293      	cmp	r3, r2
 800937c:	d901      	bls.n	8009382 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800937e:	2303      	movs	r3, #3
 8009380:	e01b      	b.n	80093ba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	691b      	ldr	r3, [r3, #16]
 8009386:	2b00      	cmp	r3, #0
 8009388:	daf2      	bge.n	8009370 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800938a:	2300      	movs	r3, #0
 800938c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	691b      	ldr	r3, [r3, #16]
 8009392:	f043 0201 	orr.w	r2, r3, #1
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	3301      	adds	r3, #1
 800939e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	4a09      	ldr	r2, [pc, #36]	; (80093c8 <USB_CoreReset+0x64>)
 80093a4:	4293      	cmp	r3, r2
 80093a6:	d901      	bls.n	80093ac <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80093a8:	2303      	movs	r3, #3
 80093aa:	e006      	b.n	80093ba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	691b      	ldr	r3, [r3, #16]
 80093b0:	f003 0301 	and.w	r3, r3, #1
 80093b4:	2b01      	cmp	r3, #1
 80093b6:	d0f0      	beq.n	800939a <USB_CoreReset+0x36>

  return HAL_OK;
 80093b8:	2300      	movs	r3, #0
}
 80093ba:	4618      	mov	r0, r3
 80093bc:	3714      	adds	r7, #20
 80093be:	46bd      	mov	sp, r7
 80093c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c4:	4770      	bx	lr
 80093c6:	bf00      	nop
 80093c8:	00030d40 	.word	0x00030d40

080093cc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b084      	sub	sp, #16
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
 80093d4:	460b      	mov	r3, r1
 80093d6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80093d8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80093dc:	f002 fea8 	bl	800c130 <malloc>
 80093e0:	4603      	mov	r3, r0
 80093e2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d109      	bne.n	80093fe <USBD_CDC_Init+0x32>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	32b0      	adds	r2, #176	; 0xb0
 80093f4:	2100      	movs	r1, #0
 80093f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80093fa:	2302      	movs	r3, #2
 80093fc:	e0d4      	b.n	80095a8 <USBD_CDC_Init+0x1dc>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80093fe:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8009402:	2100      	movs	r1, #0
 8009404:	68f8      	ldr	r0, [r7, #12]
 8009406:	f002 fea3 	bl	800c150 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	32b0      	adds	r2, #176	; 0xb0
 8009414:	68f9      	ldr	r1, [r7, #12]
 8009416:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	32b0      	adds	r2, #176	; 0xb0
 8009424:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	7c1b      	ldrb	r3, [r3, #16]
 8009432:	2b00      	cmp	r3, #0
 8009434:	d138      	bne.n	80094a8 <USBD_CDC_Init+0xdc>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009436:	4b5e      	ldr	r3, [pc, #376]	; (80095b0 <USBD_CDC_Init+0x1e4>)
 8009438:	7819      	ldrb	r1, [r3, #0]
 800943a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800943e:	2202      	movs	r2, #2
 8009440:	6878      	ldr	r0, [r7, #4]
 8009442:	f002 fc9c 	bl	800bd7e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009446:	4b5a      	ldr	r3, [pc, #360]	; (80095b0 <USBD_CDC_Init+0x1e4>)
 8009448:	781b      	ldrb	r3, [r3, #0]
 800944a:	f003 020f 	and.w	r2, r3, #15
 800944e:	6879      	ldr	r1, [r7, #4]
 8009450:	4613      	mov	r3, r2
 8009452:	009b      	lsls	r3, r3, #2
 8009454:	4413      	add	r3, r2
 8009456:	009b      	lsls	r3, r3, #2
 8009458:	440b      	add	r3, r1
 800945a:	3324      	adds	r3, #36	; 0x24
 800945c:	2201      	movs	r2, #1
 800945e:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009460:	4b54      	ldr	r3, [pc, #336]	; (80095b4 <USBD_CDC_Init+0x1e8>)
 8009462:	7819      	ldrb	r1, [r3, #0]
 8009464:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009468:	2202      	movs	r2, #2
 800946a:	6878      	ldr	r0, [r7, #4]
 800946c:	f002 fc87 	bl	800bd7e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009470:	4b50      	ldr	r3, [pc, #320]	; (80095b4 <USBD_CDC_Init+0x1e8>)
 8009472:	781b      	ldrb	r3, [r3, #0]
 8009474:	f003 020f 	and.w	r2, r3, #15
 8009478:	6879      	ldr	r1, [r7, #4]
 800947a:	4613      	mov	r3, r2
 800947c:	009b      	lsls	r3, r3, #2
 800947e:	4413      	add	r3, r2
 8009480:	009b      	lsls	r3, r3, #2
 8009482:	440b      	add	r3, r1
 8009484:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009488:	2201      	movs	r2, #1
 800948a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800948c:	4b4a      	ldr	r3, [pc, #296]	; (80095b8 <USBD_CDC_Init+0x1ec>)
 800948e:	781b      	ldrb	r3, [r3, #0]
 8009490:	f003 020f 	and.w	r2, r3, #15
 8009494:	6879      	ldr	r1, [r7, #4]
 8009496:	4613      	mov	r3, r2
 8009498:	009b      	lsls	r3, r3, #2
 800949a:	4413      	add	r3, r2
 800949c:	009b      	lsls	r3, r3, #2
 800949e:	440b      	add	r3, r1
 80094a0:	3326      	adds	r3, #38	; 0x26
 80094a2:	2210      	movs	r2, #16
 80094a4:	801a      	strh	r2, [r3, #0]
 80094a6:	e035      	b.n	8009514 <USBD_CDC_Init+0x148>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80094a8:	4b41      	ldr	r3, [pc, #260]	; (80095b0 <USBD_CDC_Init+0x1e4>)
 80094aa:	7819      	ldrb	r1, [r3, #0]
 80094ac:	2340      	movs	r3, #64	; 0x40
 80094ae:	2202      	movs	r2, #2
 80094b0:	6878      	ldr	r0, [r7, #4]
 80094b2:	f002 fc64 	bl	800bd7e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80094b6:	4b3e      	ldr	r3, [pc, #248]	; (80095b0 <USBD_CDC_Init+0x1e4>)
 80094b8:	781b      	ldrb	r3, [r3, #0]
 80094ba:	f003 020f 	and.w	r2, r3, #15
 80094be:	6879      	ldr	r1, [r7, #4]
 80094c0:	4613      	mov	r3, r2
 80094c2:	009b      	lsls	r3, r3, #2
 80094c4:	4413      	add	r3, r2
 80094c6:	009b      	lsls	r3, r3, #2
 80094c8:	440b      	add	r3, r1
 80094ca:	3324      	adds	r3, #36	; 0x24
 80094cc:	2201      	movs	r2, #1
 80094ce:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80094d0:	4b38      	ldr	r3, [pc, #224]	; (80095b4 <USBD_CDC_Init+0x1e8>)
 80094d2:	7819      	ldrb	r1, [r3, #0]
 80094d4:	2340      	movs	r3, #64	; 0x40
 80094d6:	2202      	movs	r2, #2
 80094d8:	6878      	ldr	r0, [r7, #4]
 80094da:	f002 fc50 	bl	800bd7e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80094de:	4b35      	ldr	r3, [pc, #212]	; (80095b4 <USBD_CDC_Init+0x1e8>)
 80094e0:	781b      	ldrb	r3, [r3, #0]
 80094e2:	f003 020f 	and.w	r2, r3, #15
 80094e6:	6879      	ldr	r1, [r7, #4]
 80094e8:	4613      	mov	r3, r2
 80094ea:	009b      	lsls	r3, r3, #2
 80094ec:	4413      	add	r3, r2
 80094ee:	009b      	lsls	r3, r3, #2
 80094f0:	440b      	add	r3, r1
 80094f2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80094f6:	2201      	movs	r2, #1
 80094f8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80094fa:	4b2f      	ldr	r3, [pc, #188]	; (80095b8 <USBD_CDC_Init+0x1ec>)
 80094fc:	781b      	ldrb	r3, [r3, #0]
 80094fe:	f003 020f 	and.w	r2, r3, #15
 8009502:	6879      	ldr	r1, [r7, #4]
 8009504:	4613      	mov	r3, r2
 8009506:	009b      	lsls	r3, r3, #2
 8009508:	4413      	add	r3, r2
 800950a:	009b      	lsls	r3, r3, #2
 800950c:	440b      	add	r3, r1
 800950e:	3326      	adds	r3, #38	; 0x26
 8009510:	2210      	movs	r2, #16
 8009512:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009514:	4b28      	ldr	r3, [pc, #160]	; (80095b8 <USBD_CDC_Init+0x1ec>)
 8009516:	7819      	ldrb	r1, [r3, #0]
 8009518:	2308      	movs	r3, #8
 800951a:	2203      	movs	r2, #3
 800951c:	6878      	ldr	r0, [r7, #4]
 800951e:	f002 fc2e 	bl	800bd7e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8009522:	4b25      	ldr	r3, [pc, #148]	; (80095b8 <USBD_CDC_Init+0x1ec>)
 8009524:	781b      	ldrb	r3, [r3, #0]
 8009526:	f003 020f 	and.w	r2, r3, #15
 800952a:	6879      	ldr	r1, [r7, #4]
 800952c:	4613      	mov	r3, r2
 800952e:	009b      	lsls	r3, r3, #2
 8009530:	4413      	add	r3, r2
 8009532:	009b      	lsls	r3, r3, #2
 8009534:	440b      	add	r3, r1
 8009536:	3324      	adds	r3, #36	; 0x24
 8009538:	2201      	movs	r2, #1
 800953a:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	2200      	movs	r2, #0
 8009540:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800954a:	687a      	ldr	r2, [r7, #4]
 800954c:	33b0      	adds	r3, #176	; 0xb0
 800954e:	009b      	lsls	r3, r3, #2
 8009550:	4413      	add	r3, r2
 8009552:	685b      	ldr	r3, [r3, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	2200      	movs	r2, #0
 800955c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	2200      	movs	r2, #0
 8009564:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800956e:	2b00      	cmp	r3, #0
 8009570:	d101      	bne.n	8009576 <USBD_CDC_Init+0x1aa>
  {
    return (uint8_t)USBD_EMEM;
 8009572:	2302      	movs	r3, #2
 8009574:	e018      	b.n	80095a8 <USBD_CDC_Init+0x1dc>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	7c1b      	ldrb	r3, [r3, #16]
 800957a:	2b00      	cmp	r3, #0
 800957c:	d10a      	bne.n	8009594 <USBD_CDC_Init+0x1c8>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800957e:	4b0d      	ldr	r3, [pc, #52]	; (80095b4 <USBD_CDC_Init+0x1e8>)
 8009580:	7819      	ldrb	r1, [r3, #0]
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009588:	f44f 7300 	mov.w	r3, #512	; 0x200
 800958c:	6878      	ldr	r0, [r7, #4]
 800958e:	f002 fce5 	bl	800bf5c <USBD_LL_PrepareReceive>
 8009592:	e008      	b.n	80095a6 <USBD_CDC_Init+0x1da>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009594:	4b07      	ldr	r3, [pc, #28]	; (80095b4 <USBD_CDC_Init+0x1e8>)
 8009596:	7819      	ldrb	r1, [r3, #0]
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800959e:	2340      	movs	r3, #64	; 0x40
 80095a0:	6878      	ldr	r0, [r7, #4]
 80095a2:	f002 fcdb 	bl	800bf5c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80095a6:	2300      	movs	r3, #0
}
 80095a8:	4618      	mov	r0, r3
 80095aa:	3710      	adds	r7, #16
 80095ac:	46bd      	mov	sp, r7
 80095ae:	bd80      	pop	{r7, pc}
 80095b0:	200000bb 	.word	0x200000bb
 80095b4:	200000bc 	.word	0x200000bc
 80095b8:	200000bd 	.word	0x200000bd

080095bc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80095bc:	b580      	push	{r7, lr}
 80095be:	b082      	sub	sp, #8
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
 80095c4:	460b      	mov	r3, r1
 80095c6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80095c8:	4b3a      	ldr	r3, [pc, #232]	; (80096b4 <USBD_CDC_DeInit+0xf8>)
 80095ca:	781b      	ldrb	r3, [r3, #0]
 80095cc:	4619      	mov	r1, r3
 80095ce:	6878      	ldr	r0, [r7, #4]
 80095d0:	f002 fbfb 	bl	800bdca <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80095d4:	4b37      	ldr	r3, [pc, #220]	; (80096b4 <USBD_CDC_DeInit+0xf8>)
 80095d6:	781b      	ldrb	r3, [r3, #0]
 80095d8:	f003 020f 	and.w	r2, r3, #15
 80095dc:	6879      	ldr	r1, [r7, #4]
 80095de:	4613      	mov	r3, r2
 80095e0:	009b      	lsls	r3, r3, #2
 80095e2:	4413      	add	r3, r2
 80095e4:	009b      	lsls	r3, r3, #2
 80095e6:	440b      	add	r3, r1
 80095e8:	3324      	adds	r3, #36	; 0x24
 80095ea:	2200      	movs	r2, #0
 80095ec:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80095ee:	4b32      	ldr	r3, [pc, #200]	; (80096b8 <USBD_CDC_DeInit+0xfc>)
 80095f0:	781b      	ldrb	r3, [r3, #0]
 80095f2:	4619      	mov	r1, r3
 80095f4:	6878      	ldr	r0, [r7, #4]
 80095f6:	f002 fbe8 	bl	800bdca <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80095fa:	4b2f      	ldr	r3, [pc, #188]	; (80096b8 <USBD_CDC_DeInit+0xfc>)
 80095fc:	781b      	ldrb	r3, [r3, #0]
 80095fe:	f003 020f 	and.w	r2, r3, #15
 8009602:	6879      	ldr	r1, [r7, #4]
 8009604:	4613      	mov	r3, r2
 8009606:	009b      	lsls	r3, r3, #2
 8009608:	4413      	add	r3, r2
 800960a:	009b      	lsls	r3, r3, #2
 800960c:	440b      	add	r3, r1
 800960e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009612:	2200      	movs	r2, #0
 8009614:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8009616:	4b29      	ldr	r3, [pc, #164]	; (80096bc <USBD_CDC_DeInit+0x100>)
 8009618:	781b      	ldrb	r3, [r3, #0]
 800961a:	4619      	mov	r1, r3
 800961c:	6878      	ldr	r0, [r7, #4]
 800961e:	f002 fbd4 	bl	800bdca <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8009622:	4b26      	ldr	r3, [pc, #152]	; (80096bc <USBD_CDC_DeInit+0x100>)
 8009624:	781b      	ldrb	r3, [r3, #0]
 8009626:	f003 020f 	and.w	r2, r3, #15
 800962a:	6879      	ldr	r1, [r7, #4]
 800962c:	4613      	mov	r3, r2
 800962e:	009b      	lsls	r3, r3, #2
 8009630:	4413      	add	r3, r2
 8009632:	009b      	lsls	r3, r3, #2
 8009634:	440b      	add	r3, r1
 8009636:	3324      	adds	r3, #36	; 0x24
 8009638:	2200      	movs	r2, #0
 800963a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800963c:	4b1f      	ldr	r3, [pc, #124]	; (80096bc <USBD_CDC_DeInit+0x100>)
 800963e:	781b      	ldrb	r3, [r3, #0]
 8009640:	f003 020f 	and.w	r2, r3, #15
 8009644:	6879      	ldr	r1, [r7, #4]
 8009646:	4613      	mov	r3, r2
 8009648:	009b      	lsls	r3, r3, #2
 800964a:	4413      	add	r3, r2
 800964c:	009b      	lsls	r3, r3, #2
 800964e:	440b      	add	r3, r1
 8009650:	3326      	adds	r3, #38	; 0x26
 8009652:	2200      	movs	r2, #0
 8009654:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	32b0      	adds	r2, #176	; 0xb0
 8009660:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009664:	2b00      	cmp	r3, #0
 8009666:	d01f      	beq.n	80096a8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800966e:	687a      	ldr	r2, [r7, #4]
 8009670:	33b0      	adds	r3, #176	; 0xb0
 8009672:	009b      	lsls	r3, r3, #2
 8009674:	4413      	add	r3, r2
 8009676:	685b      	ldr	r3, [r3, #4]
 8009678:	685b      	ldr	r3, [r3, #4]
 800967a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	32b0      	adds	r2, #176	; 0xb0
 8009686:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800968a:	4618      	mov	r0, r3
 800968c:	f002 fd58 	bl	800c140 <free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	32b0      	adds	r2, #176	; 0xb0
 800969a:	2100      	movs	r1, #0
 800969c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	2200      	movs	r2, #0
 80096a4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80096a8:	2300      	movs	r3, #0
}
 80096aa:	4618      	mov	r0, r3
 80096ac:	3708      	adds	r7, #8
 80096ae:	46bd      	mov	sp, r7
 80096b0:	bd80      	pop	{r7, pc}
 80096b2:	bf00      	nop
 80096b4:	200000bb 	.word	0x200000bb
 80096b8:	200000bc 	.word	0x200000bc
 80096bc:	200000bd 	.word	0x200000bd

080096c0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b086      	sub	sp, #24
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
 80096c8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	32b0      	adds	r2, #176	; 0xb0
 80096d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096d8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80096da:	2300      	movs	r3, #0
 80096dc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80096de:	2300      	movs	r3, #0
 80096e0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80096e2:	2300      	movs	r3, #0
 80096e4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80096e6:	693b      	ldr	r3, [r7, #16]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d101      	bne.n	80096f0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80096ec:	2303      	movs	r3, #3
 80096ee:	e0bf      	b.n	8009870 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80096f0:	683b      	ldr	r3, [r7, #0]
 80096f2:	781b      	ldrb	r3, [r3, #0]
 80096f4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d050      	beq.n	800979e <USBD_CDC_Setup+0xde>
 80096fc:	2b20      	cmp	r3, #32
 80096fe:	f040 80af 	bne.w	8009860 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009702:	683b      	ldr	r3, [r7, #0]
 8009704:	88db      	ldrh	r3, [r3, #6]
 8009706:	2b00      	cmp	r3, #0
 8009708:	d03a      	beq.n	8009780 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800970a:	683b      	ldr	r3, [r7, #0]
 800970c:	781b      	ldrb	r3, [r3, #0]
 800970e:	b25b      	sxtb	r3, r3
 8009710:	2b00      	cmp	r3, #0
 8009712:	da1b      	bge.n	800974c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800971a:	687a      	ldr	r2, [r7, #4]
 800971c:	33b0      	adds	r3, #176	; 0xb0
 800971e:	009b      	lsls	r3, r3, #2
 8009720:	4413      	add	r3, r2
 8009722:	685b      	ldr	r3, [r3, #4]
 8009724:	689b      	ldr	r3, [r3, #8]
 8009726:	683a      	ldr	r2, [r7, #0]
 8009728:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800972a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800972c:	683a      	ldr	r2, [r7, #0]
 800972e:	88d2      	ldrh	r2, [r2, #6]
 8009730:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009732:	683b      	ldr	r3, [r7, #0]
 8009734:	88db      	ldrh	r3, [r3, #6]
 8009736:	2b07      	cmp	r3, #7
 8009738:	bf28      	it	cs
 800973a:	2307      	movcs	r3, #7
 800973c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800973e:	693b      	ldr	r3, [r7, #16]
 8009740:	89fa      	ldrh	r2, [r7, #14]
 8009742:	4619      	mov	r1, r3
 8009744:	6878      	ldr	r0, [r7, #4]
 8009746:	f001 fdad 	bl	800b2a4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800974a:	e090      	b.n	800986e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800974c:	683b      	ldr	r3, [r7, #0]
 800974e:	785a      	ldrb	r2, [r3, #1]
 8009750:	693b      	ldr	r3, [r7, #16]
 8009752:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8009756:	683b      	ldr	r3, [r7, #0]
 8009758:	88db      	ldrh	r3, [r3, #6]
 800975a:	2b3f      	cmp	r3, #63	; 0x3f
 800975c:	d803      	bhi.n	8009766 <USBD_CDC_Setup+0xa6>
 800975e:	683b      	ldr	r3, [r7, #0]
 8009760:	88db      	ldrh	r3, [r3, #6]
 8009762:	b2da      	uxtb	r2, r3
 8009764:	e000      	b.n	8009768 <USBD_CDC_Setup+0xa8>
 8009766:	2240      	movs	r2, #64	; 0x40
 8009768:	693b      	ldr	r3, [r7, #16]
 800976a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800976e:	6939      	ldr	r1, [r7, #16]
 8009770:	693b      	ldr	r3, [r7, #16]
 8009772:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8009776:	461a      	mov	r2, r3
 8009778:	6878      	ldr	r0, [r7, #4]
 800977a:	f001 fdbf 	bl	800b2fc <USBD_CtlPrepareRx>
      break;
 800977e:	e076      	b.n	800986e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009786:	687a      	ldr	r2, [r7, #4]
 8009788:	33b0      	adds	r3, #176	; 0xb0
 800978a:	009b      	lsls	r3, r3, #2
 800978c:	4413      	add	r3, r2
 800978e:	685b      	ldr	r3, [r3, #4]
 8009790:	689b      	ldr	r3, [r3, #8]
 8009792:	683a      	ldr	r2, [r7, #0]
 8009794:	7850      	ldrb	r0, [r2, #1]
 8009796:	2200      	movs	r2, #0
 8009798:	6839      	ldr	r1, [r7, #0]
 800979a:	4798      	blx	r3
      break;
 800979c:	e067      	b.n	800986e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800979e:	683b      	ldr	r3, [r7, #0]
 80097a0:	785b      	ldrb	r3, [r3, #1]
 80097a2:	2b0b      	cmp	r3, #11
 80097a4:	d851      	bhi.n	800984a <USBD_CDC_Setup+0x18a>
 80097a6:	a201      	add	r2, pc, #4	; (adr r2, 80097ac <USBD_CDC_Setup+0xec>)
 80097a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097ac:	080097dd 	.word	0x080097dd
 80097b0:	08009859 	.word	0x08009859
 80097b4:	0800984b 	.word	0x0800984b
 80097b8:	0800984b 	.word	0x0800984b
 80097bc:	0800984b 	.word	0x0800984b
 80097c0:	0800984b 	.word	0x0800984b
 80097c4:	0800984b 	.word	0x0800984b
 80097c8:	0800984b 	.word	0x0800984b
 80097cc:	0800984b 	.word	0x0800984b
 80097d0:	0800984b 	.word	0x0800984b
 80097d4:	08009807 	.word	0x08009807
 80097d8:	08009831 	.word	0x08009831
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097e2:	b2db      	uxtb	r3, r3
 80097e4:	2b03      	cmp	r3, #3
 80097e6:	d107      	bne.n	80097f8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80097e8:	f107 030a 	add.w	r3, r7, #10
 80097ec:	2202      	movs	r2, #2
 80097ee:	4619      	mov	r1, r3
 80097f0:	6878      	ldr	r0, [r7, #4]
 80097f2:	f001 fd57 	bl	800b2a4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80097f6:	e032      	b.n	800985e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80097f8:	6839      	ldr	r1, [r7, #0]
 80097fa:	6878      	ldr	r0, [r7, #4]
 80097fc:	f001 fce1 	bl	800b1c2 <USBD_CtlError>
            ret = USBD_FAIL;
 8009800:	2303      	movs	r3, #3
 8009802:	75fb      	strb	r3, [r7, #23]
          break;
 8009804:	e02b      	b.n	800985e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800980c:	b2db      	uxtb	r3, r3
 800980e:	2b03      	cmp	r3, #3
 8009810:	d107      	bne.n	8009822 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009812:	f107 030d 	add.w	r3, r7, #13
 8009816:	2201      	movs	r2, #1
 8009818:	4619      	mov	r1, r3
 800981a:	6878      	ldr	r0, [r7, #4]
 800981c:	f001 fd42 	bl	800b2a4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009820:	e01d      	b.n	800985e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009822:	6839      	ldr	r1, [r7, #0]
 8009824:	6878      	ldr	r0, [r7, #4]
 8009826:	f001 fccc 	bl	800b1c2 <USBD_CtlError>
            ret = USBD_FAIL;
 800982a:	2303      	movs	r3, #3
 800982c:	75fb      	strb	r3, [r7, #23]
          break;
 800982e:	e016      	b.n	800985e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009836:	b2db      	uxtb	r3, r3
 8009838:	2b03      	cmp	r3, #3
 800983a:	d00f      	beq.n	800985c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800983c:	6839      	ldr	r1, [r7, #0]
 800983e:	6878      	ldr	r0, [r7, #4]
 8009840:	f001 fcbf 	bl	800b1c2 <USBD_CtlError>
            ret = USBD_FAIL;
 8009844:	2303      	movs	r3, #3
 8009846:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009848:	e008      	b.n	800985c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800984a:	6839      	ldr	r1, [r7, #0]
 800984c:	6878      	ldr	r0, [r7, #4]
 800984e:	f001 fcb8 	bl	800b1c2 <USBD_CtlError>
          ret = USBD_FAIL;
 8009852:	2303      	movs	r3, #3
 8009854:	75fb      	strb	r3, [r7, #23]
          break;
 8009856:	e002      	b.n	800985e <USBD_CDC_Setup+0x19e>
          break;
 8009858:	bf00      	nop
 800985a:	e008      	b.n	800986e <USBD_CDC_Setup+0x1ae>
          break;
 800985c:	bf00      	nop
      }
      break;
 800985e:	e006      	b.n	800986e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8009860:	6839      	ldr	r1, [r7, #0]
 8009862:	6878      	ldr	r0, [r7, #4]
 8009864:	f001 fcad 	bl	800b1c2 <USBD_CtlError>
      ret = USBD_FAIL;
 8009868:	2303      	movs	r3, #3
 800986a:	75fb      	strb	r3, [r7, #23]
      break;
 800986c:	bf00      	nop
  }

  return (uint8_t)ret;
 800986e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009870:	4618      	mov	r0, r3
 8009872:	3718      	adds	r7, #24
 8009874:	46bd      	mov	sp, r7
 8009876:	bd80      	pop	{r7, pc}

08009878 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009878:	b580      	push	{r7, lr}
 800987a:	b084      	sub	sp, #16
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
 8009880:	460b      	mov	r3, r1
 8009882:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800988a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	32b0      	adds	r2, #176	; 0xb0
 8009896:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800989a:	2b00      	cmp	r3, #0
 800989c:	d101      	bne.n	80098a2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800989e:	2303      	movs	r3, #3
 80098a0:	e065      	b.n	800996e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	32b0      	adds	r2, #176	; 0xb0
 80098ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098b0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80098b2:	78fb      	ldrb	r3, [r7, #3]
 80098b4:	f003 020f 	and.w	r2, r3, #15
 80098b8:	6879      	ldr	r1, [r7, #4]
 80098ba:	4613      	mov	r3, r2
 80098bc:	009b      	lsls	r3, r3, #2
 80098be:	4413      	add	r3, r2
 80098c0:	009b      	lsls	r3, r3, #2
 80098c2:	440b      	add	r3, r1
 80098c4:	3318      	adds	r3, #24
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d02f      	beq.n	800992c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80098cc:	78fb      	ldrb	r3, [r7, #3]
 80098ce:	f003 020f 	and.w	r2, r3, #15
 80098d2:	6879      	ldr	r1, [r7, #4]
 80098d4:	4613      	mov	r3, r2
 80098d6:	009b      	lsls	r3, r3, #2
 80098d8:	4413      	add	r3, r2
 80098da:	009b      	lsls	r3, r3, #2
 80098dc:	440b      	add	r3, r1
 80098de:	3318      	adds	r3, #24
 80098e0:	681a      	ldr	r2, [r3, #0]
 80098e2:	78fb      	ldrb	r3, [r7, #3]
 80098e4:	f003 010f 	and.w	r1, r3, #15
 80098e8:	68f8      	ldr	r0, [r7, #12]
 80098ea:	460b      	mov	r3, r1
 80098ec:	00db      	lsls	r3, r3, #3
 80098ee:	440b      	add	r3, r1
 80098f0:	009b      	lsls	r3, r3, #2
 80098f2:	4403      	add	r3, r0
 80098f4:	3348      	adds	r3, #72	; 0x48
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	fbb2 f1f3 	udiv	r1, r2, r3
 80098fc:	fb01 f303 	mul.w	r3, r1, r3
 8009900:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009902:	2b00      	cmp	r3, #0
 8009904:	d112      	bne.n	800992c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8009906:	78fb      	ldrb	r3, [r7, #3]
 8009908:	f003 020f 	and.w	r2, r3, #15
 800990c:	6879      	ldr	r1, [r7, #4]
 800990e:	4613      	mov	r3, r2
 8009910:	009b      	lsls	r3, r3, #2
 8009912:	4413      	add	r3, r2
 8009914:	009b      	lsls	r3, r3, #2
 8009916:	440b      	add	r3, r1
 8009918:	3318      	adds	r3, #24
 800991a:	2200      	movs	r2, #0
 800991c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800991e:	78f9      	ldrb	r1, [r7, #3]
 8009920:	2300      	movs	r3, #0
 8009922:	2200      	movs	r2, #0
 8009924:	6878      	ldr	r0, [r7, #4]
 8009926:	f002 faf8 	bl	800bf1a <USBD_LL_Transmit>
 800992a:	e01f      	b.n	800996c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800992c:	68bb      	ldr	r3, [r7, #8]
 800992e:	2200      	movs	r2, #0
 8009930:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800993a:	687a      	ldr	r2, [r7, #4]
 800993c:	33b0      	adds	r3, #176	; 0xb0
 800993e:	009b      	lsls	r3, r3, #2
 8009940:	4413      	add	r3, r2
 8009942:	685b      	ldr	r3, [r3, #4]
 8009944:	691b      	ldr	r3, [r3, #16]
 8009946:	2b00      	cmp	r3, #0
 8009948:	d010      	beq.n	800996c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009950:	687a      	ldr	r2, [r7, #4]
 8009952:	33b0      	adds	r3, #176	; 0xb0
 8009954:	009b      	lsls	r3, r3, #2
 8009956:	4413      	add	r3, r2
 8009958:	685b      	ldr	r3, [r3, #4]
 800995a:	691b      	ldr	r3, [r3, #16]
 800995c:	68ba      	ldr	r2, [r7, #8]
 800995e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8009962:	68ba      	ldr	r2, [r7, #8]
 8009964:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8009968:	78fa      	ldrb	r2, [r7, #3]
 800996a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800996c:	2300      	movs	r3, #0
}
 800996e:	4618      	mov	r0, r3
 8009970:	3710      	adds	r7, #16
 8009972:	46bd      	mov	sp, r7
 8009974:	bd80      	pop	{r7, pc}

08009976 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009976:	b580      	push	{r7, lr}
 8009978:	b084      	sub	sp, #16
 800997a:	af00      	add	r7, sp, #0
 800997c:	6078      	str	r0, [r7, #4]
 800997e:	460b      	mov	r3, r1
 8009980:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	32b0      	adds	r2, #176	; 0xb0
 800998c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009990:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	32b0      	adds	r2, #176	; 0xb0
 800999c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d101      	bne.n	80099a8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80099a4:	2303      	movs	r3, #3
 80099a6:	e01a      	b.n	80099de <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80099a8:	78fb      	ldrb	r3, [r7, #3]
 80099aa:	4619      	mov	r1, r3
 80099ac:	6878      	ldr	r0, [r7, #4]
 80099ae:	f002 faf6 	bl	800bf9e <USBD_LL_GetRxDataSize>
 80099b2:	4602      	mov	r2, r0
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80099c0:	687a      	ldr	r2, [r7, #4]
 80099c2:	33b0      	adds	r3, #176	; 0xb0
 80099c4:	009b      	lsls	r3, r3, #2
 80099c6:	4413      	add	r3, r2
 80099c8:	685b      	ldr	r3, [r3, #4]
 80099ca:	68db      	ldr	r3, [r3, #12]
 80099cc:	68fa      	ldr	r2, [r7, #12]
 80099ce:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80099d2:	68fa      	ldr	r2, [r7, #12]
 80099d4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80099d8:	4611      	mov	r1, r2
 80099da:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80099dc:	2300      	movs	r3, #0
}
 80099de:	4618      	mov	r0, r3
 80099e0:	3710      	adds	r7, #16
 80099e2:	46bd      	mov	sp, r7
 80099e4:	bd80      	pop	{r7, pc}

080099e6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80099e6:	b580      	push	{r7, lr}
 80099e8:	b084      	sub	sp, #16
 80099ea:	af00      	add	r7, sp, #0
 80099ec:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	32b0      	adds	r2, #176	; 0xb0
 80099f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099fc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d101      	bne.n	8009a08 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009a04:	2303      	movs	r3, #3
 8009a06:	e025      	b.n	8009a54 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009a0e:	687a      	ldr	r2, [r7, #4]
 8009a10:	33b0      	adds	r3, #176	; 0xb0
 8009a12:	009b      	lsls	r3, r3, #2
 8009a14:	4413      	add	r3, r2
 8009a16:	685b      	ldr	r3, [r3, #4]
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d01a      	beq.n	8009a52 <USBD_CDC_EP0_RxReady+0x6c>
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009a22:	2bff      	cmp	r3, #255	; 0xff
 8009a24:	d015      	beq.n	8009a52 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009a2c:	687a      	ldr	r2, [r7, #4]
 8009a2e:	33b0      	adds	r3, #176	; 0xb0
 8009a30:	009b      	lsls	r3, r3, #2
 8009a32:	4413      	add	r3, r2
 8009a34:	685b      	ldr	r3, [r3, #4]
 8009a36:	689b      	ldr	r3, [r3, #8]
 8009a38:	68fa      	ldr	r2, [r7, #12]
 8009a3a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8009a3e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8009a40:	68fa      	ldr	r2, [r7, #12]
 8009a42:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009a46:	b292      	uxth	r2, r2
 8009a48:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	22ff      	movs	r2, #255	; 0xff
 8009a4e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8009a52:	2300      	movs	r3, #0
}
 8009a54:	4618      	mov	r0, r3
 8009a56:	3710      	adds	r7, #16
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	bd80      	pop	{r7, pc}

08009a5c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b086      	sub	sp, #24
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009a64:	2182      	movs	r1, #130	; 0x82
 8009a66:	4818      	ldr	r0, [pc, #96]	; (8009ac8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009a68:	f000 fd49 	bl	800a4fe <USBD_GetEpDesc>
 8009a6c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009a6e:	2101      	movs	r1, #1
 8009a70:	4815      	ldr	r0, [pc, #84]	; (8009ac8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009a72:	f000 fd44 	bl	800a4fe <USBD_GetEpDesc>
 8009a76:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009a78:	2181      	movs	r1, #129	; 0x81
 8009a7a:	4813      	ldr	r0, [pc, #76]	; (8009ac8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009a7c:	f000 fd3f 	bl	800a4fe <USBD_GetEpDesc>
 8009a80:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009a82:	697b      	ldr	r3, [r7, #20]
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d002      	beq.n	8009a8e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009a88:	697b      	ldr	r3, [r7, #20]
 8009a8a:	2210      	movs	r2, #16
 8009a8c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009a8e:	693b      	ldr	r3, [r7, #16]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d006      	beq.n	8009aa2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009a94:	693b      	ldr	r3, [r7, #16]
 8009a96:	2200      	movs	r2, #0
 8009a98:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009a9c:	711a      	strb	r2, [r3, #4]
 8009a9e:	2200      	movs	r2, #0
 8009aa0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d006      	beq.n	8009ab6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	2200      	movs	r2, #0
 8009aac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009ab0:	711a      	strb	r2, [r3, #4]
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	2243      	movs	r2, #67	; 0x43
 8009aba:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009abc:	4b02      	ldr	r3, [pc, #8]	; (8009ac8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8009abe:	4618      	mov	r0, r3
 8009ac0:	3718      	adds	r7, #24
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	bd80      	pop	{r7, pc}
 8009ac6:	bf00      	nop
 8009ac8:	20000078 	.word	0x20000078

08009acc <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009acc:	b580      	push	{r7, lr}
 8009ace:	b086      	sub	sp, #24
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009ad4:	2182      	movs	r1, #130	; 0x82
 8009ad6:	4818      	ldr	r0, [pc, #96]	; (8009b38 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009ad8:	f000 fd11 	bl	800a4fe <USBD_GetEpDesc>
 8009adc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009ade:	2101      	movs	r1, #1
 8009ae0:	4815      	ldr	r0, [pc, #84]	; (8009b38 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009ae2:	f000 fd0c 	bl	800a4fe <USBD_GetEpDesc>
 8009ae6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009ae8:	2181      	movs	r1, #129	; 0x81
 8009aea:	4813      	ldr	r0, [pc, #76]	; (8009b38 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009aec:	f000 fd07 	bl	800a4fe <USBD_GetEpDesc>
 8009af0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009af2:	697b      	ldr	r3, [r7, #20]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d002      	beq.n	8009afe <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8009af8:	697b      	ldr	r3, [r7, #20]
 8009afa:	2210      	movs	r2, #16
 8009afc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009afe:	693b      	ldr	r3, [r7, #16]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d006      	beq.n	8009b12 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009b04:	693b      	ldr	r3, [r7, #16]
 8009b06:	2200      	movs	r2, #0
 8009b08:	711a      	strb	r2, [r3, #4]
 8009b0a:	2200      	movs	r2, #0
 8009b0c:	f042 0202 	orr.w	r2, r2, #2
 8009b10:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d006      	beq.n	8009b26 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	2200      	movs	r2, #0
 8009b1c:	711a      	strb	r2, [r3, #4]
 8009b1e:	2200      	movs	r2, #0
 8009b20:	f042 0202 	orr.w	r2, r2, #2
 8009b24:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	2243      	movs	r2, #67	; 0x43
 8009b2a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009b2c:	4b02      	ldr	r3, [pc, #8]	; (8009b38 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8009b2e:	4618      	mov	r0, r3
 8009b30:	3718      	adds	r7, #24
 8009b32:	46bd      	mov	sp, r7
 8009b34:	bd80      	pop	{r7, pc}
 8009b36:	bf00      	nop
 8009b38:	20000078 	.word	0x20000078

08009b3c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	b086      	sub	sp, #24
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009b44:	2182      	movs	r1, #130	; 0x82
 8009b46:	4818      	ldr	r0, [pc, #96]	; (8009ba8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009b48:	f000 fcd9 	bl	800a4fe <USBD_GetEpDesc>
 8009b4c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009b4e:	2101      	movs	r1, #1
 8009b50:	4815      	ldr	r0, [pc, #84]	; (8009ba8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009b52:	f000 fcd4 	bl	800a4fe <USBD_GetEpDesc>
 8009b56:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009b58:	2181      	movs	r1, #129	; 0x81
 8009b5a:	4813      	ldr	r0, [pc, #76]	; (8009ba8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009b5c:	f000 fccf 	bl	800a4fe <USBD_GetEpDesc>
 8009b60:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009b62:	697b      	ldr	r3, [r7, #20]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d002      	beq.n	8009b6e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009b68:	697b      	ldr	r3, [r7, #20]
 8009b6a:	2210      	movs	r2, #16
 8009b6c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009b6e:	693b      	ldr	r3, [r7, #16]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d006      	beq.n	8009b82 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009b74:	693b      	ldr	r3, [r7, #16]
 8009b76:	2200      	movs	r2, #0
 8009b78:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009b7c:	711a      	strb	r2, [r3, #4]
 8009b7e:	2200      	movs	r2, #0
 8009b80:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d006      	beq.n	8009b96 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	2200      	movs	r2, #0
 8009b8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009b90:	711a      	strb	r2, [r3, #4]
 8009b92:	2200      	movs	r2, #0
 8009b94:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	2243      	movs	r2, #67	; 0x43
 8009b9a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009b9c:	4b02      	ldr	r3, [pc, #8]	; (8009ba8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	3718      	adds	r7, #24
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	bd80      	pop	{r7, pc}
 8009ba6:	bf00      	nop
 8009ba8:	20000078 	.word	0x20000078

08009bac <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009bac:	b480      	push	{r7}
 8009bae:	b083      	sub	sp, #12
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	220a      	movs	r2, #10
 8009bb8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8009bba:	4b03      	ldr	r3, [pc, #12]	; (8009bc8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	370c      	adds	r7, #12
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc6:	4770      	bx	lr
 8009bc8:	20000034 	.word	0x20000034

08009bcc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009bcc:	b480      	push	{r7}
 8009bce:	b083      	sub	sp, #12
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	6078      	str	r0, [r7, #4]
 8009bd4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009bd6:	683b      	ldr	r3, [r7, #0]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d101      	bne.n	8009be0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009bdc:	2303      	movs	r3, #3
 8009bde:	e009      	b.n	8009bf4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009be6:	687a      	ldr	r2, [r7, #4]
 8009be8:	33b0      	adds	r3, #176	; 0xb0
 8009bea:	009b      	lsls	r3, r3, #2
 8009bec:	4413      	add	r3, r2
 8009bee:	683a      	ldr	r2, [r7, #0]
 8009bf0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8009bf2:	2300      	movs	r3, #0
}
 8009bf4:	4618      	mov	r0, r3
 8009bf6:	370c      	adds	r7, #12
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfe:	4770      	bx	lr

08009c00 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009c00:	b480      	push	{r7}
 8009c02:	b087      	sub	sp, #28
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	60f8      	str	r0, [r7, #12]
 8009c08:	60b9      	str	r1, [r7, #8]
 8009c0a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	32b0      	adds	r2, #176	; 0xb0
 8009c16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c1a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8009c1c:	697b      	ldr	r3, [r7, #20]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d101      	bne.n	8009c26 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8009c22:	2303      	movs	r3, #3
 8009c24:	e008      	b.n	8009c38 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8009c26:	697b      	ldr	r3, [r7, #20]
 8009c28:	68ba      	ldr	r2, [r7, #8]
 8009c2a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8009c2e:	697b      	ldr	r3, [r7, #20]
 8009c30:	687a      	ldr	r2, [r7, #4]
 8009c32:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8009c36:	2300      	movs	r3, #0
}
 8009c38:	4618      	mov	r0, r3
 8009c3a:	371c      	adds	r7, #28
 8009c3c:	46bd      	mov	sp, r7
 8009c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c42:	4770      	bx	lr

08009c44 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009c44:	b480      	push	{r7}
 8009c46:	b085      	sub	sp, #20
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	6078      	str	r0, [r7, #4]
 8009c4c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	32b0      	adds	r2, #176	; 0xb0
 8009c58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c5c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d101      	bne.n	8009c68 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8009c64:	2303      	movs	r3, #3
 8009c66:	e004      	b.n	8009c72 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	683a      	ldr	r2, [r7, #0]
 8009c6c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8009c70:	2300      	movs	r3, #0
}
 8009c72:	4618      	mov	r0, r3
 8009c74:	3714      	adds	r7, #20
 8009c76:	46bd      	mov	sp, r7
 8009c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c7c:	4770      	bx	lr
	...

08009c80 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009c80:	b580      	push	{r7, lr}
 8009c82:	b084      	sub	sp, #16
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	32b0      	adds	r2, #176	; 0xb0
 8009c92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c96:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8009c98:	2301      	movs	r3, #1
 8009c9a:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8009c9c:	68bb      	ldr	r3, [r7, #8]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d101      	bne.n	8009ca6 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8009ca2:	2303      	movs	r3, #3
 8009ca4:	e025      	b.n	8009cf2 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8009ca6:	68bb      	ldr	r3, [r7, #8]
 8009ca8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d11f      	bne.n	8009cf0 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8009cb0:	68bb      	ldr	r3, [r7, #8]
 8009cb2:	2201      	movs	r2, #1
 8009cb4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8009cb8:	4b10      	ldr	r3, [pc, #64]	; (8009cfc <USBD_CDC_TransmitPacket+0x7c>)
 8009cba:	781b      	ldrb	r3, [r3, #0]
 8009cbc:	f003 020f 	and.w	r2, r3, #15
 8009cc0:	68bb      	ldr	r3, [r7, #8]
 8009cc2:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8009cc6:	6878      	ldr	r0, [r7, #4]
 8009cc8:	4613      	mov	r3, r2
 8009cca:	009b      	lsls	r3, r3, #2
 8009ccc:	4413      	add	r3, r2
 8009cce:	009b      	lsls	r3, r3, #2
 8009cd0:	4403      	add	r3, r0
 8009cd2:	3318      	adds	r3, #24
 8009cd4:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8009cd6:	4b09      	ldr	r3, [pc, #36]	; (8009cfc <USBD_CDC_TransmitPacket+0x7c>)
 8009cd8:	7819      	ldrb	r1, [r3, #0]
 8009cda:	68bb      	ldr	r3, [r7, #8]
 8009cdc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8009ce0:	68bb      	ldr	r3, [r7, #8]
 8009ce2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8009ce6:	6878      	ldr	r0, [r7, #4]
 8009ce8:	f002 f917 	bl	800bf1a <USBD_LL_Transmit>

    ret = USBD_OK;
 8009cec:	2300      	movs	r3, #0
 8009cee:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8009cf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	3710      	adds	r7, #16
 8009cf6:	46bd      	mov	sp, r7
 8009cf8:	bd80      	pop	{r7, pc}
 8009cfa:	bf00      	nop
 8009cfc:	200000bb 	.word	0x200000bb

08009d00 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009d00:	b580      	push	{r7, lr}
 8009d02:	b084      	sub	sp, #16
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	32b0      	adds	r2, #176	; 0xb0
 8009d12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d16:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	32b0      	adds	r2, #176	; 0xb0
 8009d22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d101      	bne.n	8009d2e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8009d2a:	2303      	movs	r3, #3
 8009d2c:	e018      	b.n	8009d60 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	7c1b      	ldrb	r3, [r3, #16]
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d10a      	bne.n	8009d4c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009d36:	4b0c      	ldr	r3, [pc, #48]	; (8009d68 <USBD_CDC_ReceivePacket+0x68>)
 8009d38:	7819      	ldrb	r1, [r3, #0]
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009d40:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009d44:	6878      	ldr	r0, [r7, #4]
 8009d46:	f002 f909 	bl	800bf5c <USBD_LL_PrepareReceive>
 8009d4a:	e008      	b.n	8009d5e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009d4c:	4b06      	ldr	r3, [pc, #24]	; (8009d68 <USBD_CDC_ReceivePacket+0x68>)
 8009d4e:	7819      	ldrb	r1, [r3, #0]
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009d56:	2340      	movs	r3, #64	; 0x40
 8009d58:	6878      	ldr	r0, [r7, #4]
 8009d5a:	f002 f8ff 	bl	800bf5c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009d5e:	2300      	movs	r3, #0
}
 8009d60:	4618      	mov	r0, r3
 8009d62:	3710      	adds	r7, #16
 8009d64:	46bd      	mov	sp, r7
 8009d66:	bd80      	pop	{r7, pc}
 8009d68:	200000bc 	.word	0x200000bc

08009d6c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009d6c:	b580      	push	{r7, lr}
 8009d6e:	b086      	sub	sp, #24
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	60f8      	str	r0, [r7, #12]
 8009d74:	60b9      	str	r1, [r7, #8]
 8009d76:	4613      	mov	r3, r2
 8009d78:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d101      	bne.n	8009d84 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009d80:	2303      	movs	r3, #3
 8009d82:	e01f      	b.n	8009dc4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	2200      	movs	r2, #0
 8009d88:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	2200      	movs	r2, #0
 8009d90:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	2200      	movs	r2, #0
 8009d98:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009d9c:	68bb      	ldr	r3, [r7, #8]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d003      	beq.n	8009daa <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	68ba      	ldr	r2, [r7, #8]
 8009da6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	2201      	movs	r2, #1
 8009dae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	79fa      	ldrb	r2, [r7, #7]
 8009db6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009db8:	68f8      	ldr	r0, [r7, #12]
 8009dba:	f001 ff79 	bl	800bcb0 <USBD_LL_Init>
 8009dbe:	4603      	mov	r3, r0
 8009dc0:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009dc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8009dc4:	4618      	mov	r0, r3
 8009dc6:	3718      	adds	r7, #24
 8009dc8:	46bd      	mov	sp, r7
 8009dca:	bd80      	pop	{r7, pc}

08009dcc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009dcc:	b580      	push	{r7, lr}
 8009dce:	b084      	sub	sp, #16
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	6078      	str	r0, [r7, #4]
 8009dd4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009dd6:	2300      	movs	r3, #0
 8009dd8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009dda:	683b      	ldr	r3, [r7, #0]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d101      	bne.n	8009de4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009de0:	2303      	movs	r3, #3
 8009de2:	e025      	b.n	8009e30 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	683a      	ldr	r2, [r7, #0]
 8009de8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	32ae      	adds	r2, #174	; 0xae
 8009df6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d00f      	beq.n	8009e20 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	32ae      	adds	r2, #174	; 0xae
 8009e0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e10:	f107 020e 	add.w	r2, r7, #14
 8009e14:	4610      	mov	r0, r2
 8009e16:	4798      	blx	r3
 8009e18:	4602      	mov	r2, r0
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8009e26:	1c5a      	adds	r2, r3, #1
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8009e2e:	2300      	movs	r3, #0
}
 8009e30:	4618      	mov	r0, r3
 8009e32:	3710      	adds	r7, #16
 8009e34:	46bd      	mov	sp, r7
 8009e36:	bd80      	pop	{r7, pc}

08009e38 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009e38:	b580      	push	{r7, lr}
 8009e3a:	b082      	sub	sp, #8
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009e40:	6878      	ldr	r0, [r7, #4]
 8009e42:	f001 ff81 	bl	800bd48 <USBD_LL_Start>
 8009e46:	4603      	mov	r3, r0
}
 8009e48:	4618      	mov	r0, r3
 8009e4a:	3708      	adds	r7, #8
 8009e4c:	46bd      	mov	sp, r7
 8009e4e:	bd80      	pop	{r7, pc}

08009e50 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8009e50:	b480      	push	{r7}
 8009e52:	b083      	sub	sp, #12
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009e58:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	370c      	adds	r7, #12
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e64:	4770      	bx	lr

08009e66 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009e66:	b580      	push	{r7, lr}
 8009e68:	b084      	sub	sp, #16
 8009e6a:	af00      	add	r7, sp, #0
 8009e6c:	6078      	str	r0, [r7, #4]
 8009e6e:	460b      	mov	r3, r1
 8009e70:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009e72:	2300      	movs	r3, #0
 8009e74:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d009      	beq.n	8009e94 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	78fa      	ldrb	r2, [r7, #3]
 8009e8a:	4611      	mov	r1, r2
 8009e8c:	6878      	ldr	r0, [r7, #4]
 8009e8e:	4798      	blx	r3
 8009e90:	4603      	mov	r3, r0
 8009e92:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009e94:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e96:	4618      	mov	r0, r3
 8009e98:	3710      	adds	r7, #16
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	bd80      	pop	{r7, pc}

08009e9e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009e9e:	b580      	push	{r7, lr}
 8009ea0:	b084      	sub	sp, #16
 8009ea2:	af00      	add	r7, sp, #0
 8009ea4:	6078      	str	r0, [r7, #4]
 8009ea6:	460b      	mov	r3, r1
 8009ea8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009eaa:	2300      	movs	r3, #0
 8009eac:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009eb4:	685b      	ldr	r3, [r3, #4]
 8009eb6:	78fa      	ldrb	r2, [r7, #3]
 8009eb8:	4611      	mov	r1, r2
 8009eba:	6878      	ldr	r0, [r7, #4]
 8009ebc:	4798      	blx	r3
 8009ebe:	4603      	mov	r3, r0
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d001      	beq.n	8009ec8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8009ec4:	2303      	movs	r3, #3
 8009ec6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009ec8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009eca:	4618      	mov	r0, r3
 8009ecc:	3710      	adds	r7, #16
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	bd80      	pop	{r7, pc}

08009ed2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009ed2:	b580      	push	{r7, lr}
 8009ed4:	b084      	sub	sp, #16
 8009ed6:	af00      	add	r7, sp, #0
 8009ed8:	6078      	str	r0, [r7, #4]
 8009eda:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009ee2:	6839      	ldr	r1, [r7, #0]
 8009ee4:	4618      	mov	r0, r3
 8009ee6:	f001 f932 	bl	800b14e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	2201      	movs	r2, #1
 8009eee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8009ef8:	461a      	mov	r2, r3
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009f06:	f003 031f 	and.w	r3, r3, #31
 8009f0a:	2b02      	cmp	r3, #2
 8009f0c:	d01a      	beq.n	8009f44 <USBD_LL_SetupStage+0x72>
 8009f0e:	2b02      	cmp	r3, #2
 8009f10:	d822      	bhi.n	8009f58 <USBD_LL_SetupStage+0x86>
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d002      	beq.n	8009f1c <USBD_LL_SetupStage+0x4a>
 8009f16:	2b01      	cmp	r3, #1
 8009f18:	d00a      	beq.n	8009f30 <USBD_LL_SetupStage+0x5e>
 8009f1a:	e01d      	b.n	8009f58 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009f22:	4619      	mov	r1, r3
 8009f24:	6878      	ldr	r0, [r7, #4]
 8009f26:	f000 fb5f 	bl	800a5e8 <USBD_StdDevReq>
 8009f2a:	4603      	mov	r3, r0
 8009f2c:	73fb      	strb	r3, [r7, #15]
      break;
 8009f2e:	e020      	b.n	8009f72 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009f36:	4619      	mov	r1, r3
 8009f38:	6878      	ldr	r0, [r7, #4]
 8009f3a:	f000 fbc7 	bl	800a6cc <USBD_StdItfReq>
 8009f3e:	4603      	mov	r3, r0
 8009f40:	73fb      	strb	r3, [r7, #15]
      break;
 8009f42:	e016      	b.n	8009f72 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009f4a:	4619      	mov	r1, r3
 8009f4c:	6878      	ldr	r0, [r7, #4]
 8009f4e:	f000 fc29 	bl	800a7a4 <USBD_StdEPReq>
 8009f52:	4603      	mov	r3, r0
 8009f54:	73fb      	strb	r3, [r7, #15]
      break;
 8009f56:	e00c      	b.n	8009f72 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009f5e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009f62:	b2db      	uxtb	r3, r3
 8009f64:	4619      	mov	r1, r3
 8009f66:	6878      	ldr	r0, [r7, #4]
 8009f68:	f001 ff4e 	bl	800be08 <USBD_LL_StallEP>
 8009f6c:	4603      	mov	r3, r0
 8009f6e:	73fb      	strb	r3, [r7, #15]
      break;
 8009f70:	bf00      	nop
  }

  return ret;
 8009f72:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f74:	4618      	mov	r0, r3
 8009f76:	3710      	adds	r7, #16
 8009f78:	46bd      	mov	sp, r7
 8009f7a:	bd80      	pop	{r7, pc}

08009f7c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009f7c:	b580      	push	{r7, lr}
 8009f7e:	b086      	sub	sp, #24
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	60f8      	str	r0, [r7, #12]
 8009f84:	460b      	mov	r3, r1
 8009f86:	607a      	str	r2, [r7, #4]
 8009f88:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8009f8e:	7afb      	ldrb	r3, [r7, #11]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d16e      	bne.n	800a072 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009f9a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009fa2:	2b03      	cmp	r3, #3
 8009fa4:	f040 8098 	bne.w	800a0d8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8009fa8:	693b      	ldr	r3, [r7, #16]
 8009faa:	689a      	ldr	r2, [r3, #8]
 8009fac:	693b      	ldr	r3, [r7, #16]
 8009fae:	68db      	ldr	r3, [r3, #12]
 8009fb0:	429a      	cmp	r2, r3
 8009fb2:	d913      	bls.n	8009fdc <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8009fb4:	693b      	ldr	r3, [r7, #16]
 8009fb6:	689a      	ldr	r2, [r3, #8]
 8009fb8:	693b      	ldr	r3, [r7, #16]
 8009fba:	68db      	ldr	r3, [r3, #12]
 8009fbc:	1ad2      	subs	r2, r2, r3
 8009fbe:	693b      	ldr	r3, [r7, #16]
 8009fc0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009fc2:	693b      	ldr	r3, [r7, #16]
 8009fc4:	68da      	ldr	r2, [r3, #12]
 8009fc6:	693b      	ldr	r3, [r7, #16]
 8009fc8:	689b      	ldr	r3, [r3, #8]
 8009fca:	4293      	cmp	r3, r2
 8009fcc:	bf28      	it	cs
 8009fce:	4613      	movcs	r3, r2
 8009fd0:	461a      	mov	r2, r3
 8009fd2:	6879      	ldr	r1, [r7, #4]
 8009fd4:	68f8      	ldr	r0, [r7, #12]
 8009fd6:	f001 f9ae 	bl	800b336 <USBD_CtlContinueRx>
 8009fda:	e07d      	b.n	800a0d8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009fe2:	f003 031f 	and.w	r3, r3, #31
 8009fe6:	2b02      	cmp	r3, #2
 8009fe8:	d014      	beq.n	800a014 <USBD_LL_DataOutStage+0x98>
 8009fea:	2b02      	cmp	r3, #2
 8009fec:	d81d      	bhi.n	800a02a <USBD_LL_DataOutStage+0xae>
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d002      	beq.n	8009ff8 <USBD_LL_DataOutStage+0x7c>
 8009ff2:	2b01      	cmp	r3, #1
 8009ff4:	d003      	beq.n	8009ffe <USBD_LL_DataOutStage+0x82>
 8009ff6:	e018      	b.n	800a02a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8009ff8:	2300      	movs	r3, #0
 8009ffa:	75bb      	strb	r3, [r7, #22]
            break;
 8009ffc:	e018      	b.n	800a030 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a004:	b2db      	uxtb	r3, r3
 800a006:	4619      	mov	r1, r3
 800a008:	68f8      	ldr	r0, [r7, #12]
 800a00a:	f000 fa5e 	bl	800a4ca <USBD_CoreFindIF>
 800a00e:	4603      	mov	r3, r0
 800a010:	75bb      	strb	r3, [r7, #22]
            break;
 800a012:	e00d      	b.n	800a030 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a01a:	b2db      	uxtb	r3, r3
 800a01c:	4619      	mov	r1, r3
 800a01e:	68f8      	ldr	r0, [r7, #12]
 800a020:	f000 fa60 	bl	800a4e4 <USBD_CoreFindEP>
 800a024:	4603      	mov	r3, r0
 800a026:	75bb      	strb	r3, [r7, #22]
            break;
 800a028:	e002      	b.n	800a030 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800a02a:	2300      	movs	r3, #0
 800a02c:	75bb      	strb	r3, [r7, #22]
            break;
 800a02e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800a030:	7dbb      	ldrb	r3, [r7, #22]
 800a032:	2b00      	cmp	r3, #0
 800a034:	d119      	bne.n	800a06a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a03c:	b2db      	uxtb	r3, r3
 800a03e:	2b03      	cmp	r3, #3
 800a040:	d113      	bne.n	800a06a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a042:	7dba      	ldrb	r2, [r7, #22]
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	32ae      	adds	r2, #174	; 0xae
 800a048:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a04c:	691b      	ldr	r3, [r3, #16]
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d00b      	beq.n	800a06a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800a052:	7dba      	ldrb	r2, [r7, #22]
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a05a:	7dba      	ldrb	r2, [r7, #22]
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	32ae      	adds	r2, #174	; 0xae
 800a060:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a064:	691b      	ldr	r3, [r3, #16]
 800a066:	68f8      	ldr	r0, [r7, #12]
 800a068:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a06a:	68f8      	ldr	r0, [r7, #12]
 800a06c:	f001 f974 	bl	800b358 <USBD_CtlSendStatus>
 800a070:	e032      	b.n	800a0d8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800a072:	7afb      	ldrb	r3, [r7, #11]
 800a074:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a078:	b2db      	uxtb	r3, r3
 800a07a:	4619      	mov	r1, r3
 800a07c:	68f8      	ldr	r0, [r7, #12]
 800a07e:	f000 fa31 	bl	800a4e4 <USBD_CoreFindEP>
 800a082:	4603      	mov	r3, r0
 800a084:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a086:	7dbb      	ldrb	r3, [r7, #22]
 800a088:	2bff      	cmp	r3, #255	; 0xff
 800a08a:	d025      	beq.n	800a0d8 <USBD_LL_DataOutStage+0x15c>
 800a08c:	7dbb      	ldrb	r3, [r7, #22]
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d122      	bne.n	800a0d8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a098:	b2db      	uxtb	r3, r3
 800a09a:	2b03      	cmp	r3, #3
 800a09c:	d117      	bne.n	800a0ce <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800a09e:	7dba      	ldrb	r2, [r7, #22]
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	32ae      	adds	r2, #174	; 0xae
 800a0a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0a8:	699b      	ldr	r3, [r3, #24]
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d00f      	beq.n	800a0ce <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800a0ae:	7dba      	ldrb	r2, [r7, #22]
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a0b6:	7dba      	ldrb	r2, [r7, #22]
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	32ae      	adds	r2, #174	; 0xae
 800a0bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0c0:	699b      	ldr	r3, [r3, #24]
 800a0c2:	7afa      	ldrb	r2, [r7, #11]
 800a0c4:	4611      	mov	r1, r2
 800a0c6:	68f8      	ldr	r0, [r7, #12]
 800a0c8:	4798      	blx	r3
 800a0ca:	4603      	mov	r3, r0
 800a0cc:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800a0ce:	7dfb      	ldrb	r3, [r7, #23]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d001      	beq.n	800a0d8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800a0d4:	7dfb      	ldrb	r3, [r7, #23]
 800a0d6:	e000      	b.n	800a0da <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800a0d8:	2300      	movs	r3, #0
}
 800a0da:	4618      	mov	r0, r3
 800a0dc:	3718      	adds	r7, #24
 800a0de:	46bd      	mov	sp, r7
 800a0e0:	bd80      	pop	{r7, pc}

0800a0e2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a0e2:	b580      	push	{r7, lr}
 800a0e4:	b086      	sub	sp, #24
 800a0e6:	af00      	add	r7, sp, #0
 800a0e8:	60f8      	str	r0, [r7, #12]
 800a0ea:	460b      	mov	r3, r1
 800a0ec:	607a      	str	r2, [r7, #4]
 800a0ee:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800a0f0:	7afb      	ldrb	r3, [r7, #11]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d16f      	bne.n	800a1d6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	3314      	adds	r3, #20
 800a0fa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a102:	2b02      	cmp	r3, #2
 800a104:	d15a      	bne.n	800a1bc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800a106:	693b      	ldr	r3, [r7, #16]
 800a108:	689a      	ldr	r2, [r3, #8]
 800a10a:	693b      	ldr	r3, [r7, #16]
 800a10c:	68db      	ldr	r3, [r3, #12]
 800a10e:	429a      	cmp	r2, r3
 800a110:	d914      	bls.n	800a13c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a112:	693b      	ldr	r3, [r7, #16]
 800a114:	689a      	ldr	r2, [r3, #8]
 800a116:	693b      	ldr	r3, [r7, #16]
 800a118:	68db      	ldr	r3, [r3, #12]
 800a11a:	1ad2      	subs	r2, r2, r3
 800a11c:	693b      	ldr	r3, [r7, #16]
 800a11e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a120:	693b      	ldr	r3, [r7, #16]
 800a122:	689b      	ldr	r3, [r3, #8]
 800a124:	461a      	mov	r2, r3
 800a126:	6879      	ldr	r1, [r7, #4]
 800a128:	68f8      	ldr	r0, [r7, #12]
 800a12a:	f001 f8d6 	bl	800b2da <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a12e:	2300      	movs	r3, #0
 800a130:	2200      	movs	r2, #0
 800a132:	2100      	movs	r1, #0
 800a134:	68f8      	ldr	r0, [r7, #12]
 800a136:	f001 ff11 	bl	800bf5c <USBD_LL_PrepareReceive>
 800a13a:	e03f      	b.n	800a1bc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a13c:	693b      	ldr	r3, [r7, #16]
 800a13e:	68da      	ldr	r2, [r3, #12]
 800a140:	693b      	ldr	r3, [r7, #16]
 800a142:	689b      	ldr	r3, [r3, #8]
 800a144:	429a      	cmp	r2, r3
 800a146:	d11c      	bne.n	800a182 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a148:	693b      	ldr	r3, [r7, #16]
 800a14a:	685a      	ldr	r2, [r3, #4]
 800a14c:	693b      	ldr	r3, [r7, #16]
 800a14e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a150:	429a      	cmp	r2, r3
 800a152:	d316      	bcc.n	800a182 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a154:	693b      	ldr	r3, [r7, #16]
 800a156:	685a      	ldr	r2, [r3, #4]
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a15e:	429a      	cmp	r2, r3
 800a160:	d20f      	bcs.n	800a182 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a162:	2200      	movs	r2, #0
 800a164:	2100      	movs	r1, #0
 800a166:	68f8      	ldr	r0, [r7, #12]
 800a168:	f001 f8b7 	bl	800b2da <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	2200      	movs	r2, #0
 800a170:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a174:	2300      	movs	r3, #0
 800a176:	2200      	movs	r2, #0
 800a178:	2100      	movs	r1, #0
 800a17a:	68f8      	ldr	r0, [r7, #12]
 800a17c:	f001 feee 	bl	800bf5c <USBD_LL_PrepareReceive>
 800a180:	e01c      	b.n	800a1bc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a188:	b2db      	uxtb	r3, r3
 800a18a:	2b03      	cmp	r3, #3
 800a18c:	d10f      	bne.n	800a1ae <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a194:	68db      	ldr	r3, [r3, #12]
 800a196:	2b00      	cmp	r3, #0
 800a198:	d009      	beq.n	800a1ae <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	2200      	movs	r2, #0
 800a19e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a1a8:	68db      	ldr	r3, [r3, #12]
 800a1aa:	68f8      	ldr	r0, [r7, #12]
 800a1ac:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a1ae:	2180      	movs	r1, #128	; 0x80
 800a1b0:	68f8      	ldr	r0, [r7, #12]
 800a1b2:	f001 fe29 	bl	800be08 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a1b6:	68f8      	ldr	r0, [r7, #12]
 800a1b8:	f001 f8e1 	bl	800b37e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d03a      	beq.n	800a23c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800a1c6:	68f8      	ldr	r0, [r7, #12]
 800a1c8:	f7ff fe42 	bl	8009e50 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	2200      	movs	r2, #0
 800a1d0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a1d4:	e032      	b.n	800a23c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800a1d6:	7afb      	ldrb	r3, [r7, #11]
 800a1d8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a1dc:	b2db      	uxtb	r3, r3
 800a1de:	4619      	mov	r1, r3
 800a1e0:	68f8      	ldr	r0, [r7, #12]
 800a1e2:	f000 f97f 	bl	800a4e4 <USBD_CoreFindEP>
 800a1e6:	4603      	mov	r3, r0
 800a1e8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a1ea:	7dfb      	ldrb	r3, [r7, #23]
 800a1ec:	2bff      	cmp	r3, #255	; 0xff
 800a1ee:	d025      	beq.n	800a23c <USBD_LL_DataInStage+0x15a>
 800a1f0:	7dfb      	ldrb	r3, [r7, #23]
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d122      	bne.n	800a23c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a1fc:	b2db      	uxtb	r3, r3
 800a1fe:	2b03      	cmp	r3, #3
 800a200:	d11c      	bne.n	800a23c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800a202:	7dfa      	ldrb	r2, [r7, #23]
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	32ae      	adds	r2, #174	; 0xae
 800a208:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a20c:	695b      	ldr	r3, [r3, #20]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d014      	beq.n	800a23c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800a212:	7dfa      	ldrb	r2, [r7, #23]
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a21a:	7dfa      	ldrb	r2, [r7, #23]
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	32ae      	adds	r2, #174	; 0xae
 800a220:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a224:	695b      	ldr	r3, [r3, #20]
 800a226:	7afa      	ldrb	r2, [r7, #11]
 800a228:	4611      	mov	r1, r2
 800a22a:	68f8      	ldr	r0, [r7, #12]
 800a22c:	4798      	blx	r3
 800a22e:	4603      	mov	r3, r0
 800a230:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a232:	7dbb      	ldrb	r3, [r7, #22]
 800a234:	2b00      	cmp	r3, #0
 800a236:	d001      	beq.n	800a23c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800a238:	7dbb      	ldrb	r3, [r7, #22]
 800a23a:	e000      	b.n	800a23e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800a23c:	2300      	movs	r3, #0
}
 800a23e:	4618      	mov	r0, r3
 800a240:	3718      	adds	r7, #24
 800a242:	46bd      	mov	sp, r7
 800a244:	bd80      	pop	{r7, pc}

0800a246 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a246:	b580      	push	{r7, lr}
 800a248:	b084      	sub	sp, #16
 800a24a:	af00      	add	r7, sp, #0
 800a24c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800a24e:	2300      	movs	r3, #0
 800a250:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	2201      	movs	r2, #1
 800a256:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	2200      	movs	r2, #0
 800a25e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	2200      	movs	r2, #0
 800a266:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	2200      	movs	r2, #0
 800a26c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	2200      	movs	r2, #0
 800a274:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d014      	beq.n	800a2ac <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a288:	685b      	ldr	r3, [r3, #4]
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d00e      	beq.n	800a2ac <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a294:	685b      	ldr	r3, [r3, #4]
 800a296:	687a      	ldr	r2, [r7, #4]
 800a298:	6852      	ldr	r2, [r2, #4]
 800a29a:	b2d2      	uxtb	r2, r2
 800a29c:	4611      	mov	r1, r2
 800a29e:	6878      	ldr	r0, [r7, #4]
 800a2a0:	4798      	blx	r3
 800a2a2:	4603      	mov	r3, r0
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d001      	beq.n	800a2ac <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800a2a8:	2303      	movs	r3, #3
 800a2aa:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a2ac:	2340      	movs	r3, #64	; 0x40
 800a2ae:	2200      	movs	r2, #0
 800a2b0:	2100      	movs	r1, #0
 800a2b2:	6878      	ldr	r0, [r7, #4]
 800a2b4:	f001 fd63 	bl	800bd7e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	2201      	movs	r2, #1
 800a2bc:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	2240      	movs	r2, #64	; 0x40
 800a2c4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a2c8:	2340      	movs	r3, #64	; 0x40
 800a2ca:	2200      	movs	r2, #0
 800a2cc:	2180      	movs	r1, #128	; 0x80
 800a2ce:	6878      	ldr	r0, [r7, #4]
 800a2d0:	f001 fd55 	bl	800bd7e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	2201      	movs	r2, #1
 800a2d8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	2240      	movs	r2, #64	; 0x40
 800a2de:	621a      	str	r2, [r3, #32]

  return ret;
 800a2e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2e2:	4618      	mov	r0, r3
 800a2e4:	3710      	adds	r7, #16
 800a2e6:	46bd      	mov	sp, r7
 800a2e8:	bd80      	pop	{r7, pc}

0800a2ea <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a2ea:	b480      	push	{r7}
 800a2ec:	b083      	sub	sp, #12
 800a2ee:	af00      	add	r7, sp, #0
 800a2f0:	6078      	str	r0, [r7, #4]
 800a2f2:	460b      	mov	r3, r1
 800a2f4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	78fa      	ldrb	r2, [r7, #3]
 800a2fa:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a2fc:	2300      	movs	r3, #0
}
 800a2fe:	4618      	mov	r0, r3
 800a300:	370c      	adds	r7, #12
 800a302:	46bd      	mov	sp, r7
 800a304:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a308:	4770      	bx	lr

0800a30a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a30a:	b480      	push	{r7}
 800a30c:	b083      	sub	sp, #12
 800a30e:	af00      	add	r7, sp, #0
 800a310:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a318:	b2da      	uxtb	r2, r3
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	2204      	movs	r2, #4
 800a324:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a328:	2300      	movs	r3, #0
}
 800a32a:	4618      	mov	r0, r3
 800a32c:	370c      	adds	r7, #12
 800a32e:	46bd      	mov	sp, r7
 800a330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a334:	4770      	bx	lr

0800a336 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a336:	b480      	push	{r7}
 800a338:	b083      	sub	sp, #12
 800a33a:	af00      	add	r7, sp, #0
 800a33c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a344:	b2db      	uxtb	r3, r3
 800a346:	2b04      	cmp	r3, #4
 800a348:	d106      	bne.n	800a358 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800a350:	b2da      	uxtb	r2, r3
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a358:	2300      	movs	r3, #0
}
 800a35a:	4618      	mov	r0, r3
 800a35c:	370c      	adds	r7, #12
 800a35e:	46bd      	mov	sp, r7
 800a360:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a364:	4770      	bx	lr

0800a366 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a366:	b580      	push	{r7, lr}
 800a368:	b082      	sub	sp, #8
 800a36a:	af00      	add	r7, sp, #0
 800a36c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a374:	b2db      	uxtb	r3, r3
 800a376:	2b03      	cmp	r3, #3
 800a378:	d110      	bne.n	800a39c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a380:	2b00      	cmp	r3, #0
 800a382:	d00b      	beq.n	800a39c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a38a:	69db      	ldr	r3, [r3, #28]
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d005      	beq.n	800a39c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a396:	69db      	ldr	r3, [r3, #28]
 800a398:	6878      	ldr	r0, [r7, #4]
 800a39a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800a39c:	2300      	movs	r3, #0
}
 800a39e:	4618      	mov	r0, r3
 800a3a0:	3708      	adds	r7, #8
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	bd80      	pop	{r7, pc}

0800a3a6 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a3a6:	b580      	push	{r7, lr}
 800a3a8:	b082      	sub	sp, #8
 800a3aa:	af00      	add	r7, sp, #0
 800a3ac:	6078      	str	r0, [r7, #4]
 800a3ae:	460b      	mov	r3, r1
 800a3b0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	32ae      	adds	r2, #174	; 0xae
 800a3bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d101      	bne.n	800a3c8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800a3c4:	2303      	movs	r3, #3
 800a3c6:	e01c      	b.n	800a402 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a3ce:	b2db      	uxtb	r3, r3
 800a3d0:	2b03      	cmp	r3, #3
 800a3d2:	d115      	bne.n	800a400 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	32ae      	adds	r2, #174	; 0xae
 800a3de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3e2:	6a1b      	ldr	r3, [r3, #32]
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d00b      	beq.n	800a400 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	32ae      	adds	r2, #174	; 0xae
 800a3f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3f6:	6a1b      	ldr	r3, [r3, #32]
 800a3f8:	78fa      	ldrb	r2, [r7, #3]
 800a3fa:	4611      	mov	r1, r2
 800a3fc:	6878      	ldr	r0, [r7, #4]
 800a3fe:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a400:	2300      	movs	r3, #0
}
 800a402:	4618      	mov	r0, r3
 800a404:	3708      	adds	r7, #8
 800a406:	46bd      	mov	sp, r7
 800a408:	bd80      	pop	{r7, pc}

0800a40a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a40a:	b580      	push	{r7, lr}
 800a40c:	b082      	sub	sp, #8
 800a40e:	af00      	add	r7, sp, #0
 800a410:	6078      	str	r0, [r7, #4]
 800a412:	460b      	mov	r3, r1
 800a414:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	32ae      	adds	r2, #174	; 0xae
 800a420:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a424:	2b00      	cmp	r3, #0
 800a426:	d101      	bne.n	800a42c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800a428:	2303      	movs	r3, #3
 800a42a:	e01c      	b.n	800a466 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a432:	b2db      	uxtb	r3, r3
 800a434:	2b03      	cmp	r3, #3
 800a436:	d115      	bne.n	800a464 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	32ae      	adds	r2, #174	; 0xae
 800a442:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d00b      	beq.n	800a464 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	32ae      	adds	r2, #174	; 0xae
 800a456:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a45a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a45c:	78fa      	ldrb	r2, [r7, #3]
 800a45e:	4611      	mov	r1, r2
 800a460:	6878      	ldr	r0, [r7, #4]
 800a462:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a464:	2300      	movs	r3, #0
}
 800a466:	4618      	mov	r0, r3
 800a468:	3708      	adds	r7, #8
 800a46a:	46bd      	mov	sp, r7
 800a46c:	bd80      	pop	{r7, pc}

0800a46e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a46e:	b480      	push	{r7}
 800a470:	b083      	sub	sp, #12
 800a472:	af00      	add	r7, sp, #0
 800a474:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a476:	2300      	movs	r3, #0
}
 800a478:	4618      	mov	r0, r3
 800a47a:	370c      	adds	r7, #12
 800a47c:	46bd      	mov	sp, r7
 800a47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a482:	4770      	bx	lr

0800a484 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a484:	b580      	push	{r7, lr}
 800a486:	b084      	sub	sp, #16
 800a488:	af00      	add	r7, sp, #0
 800a48a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800a48c:	2300      	movs	r3, #0
 800a48e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	2201      	movs	r2, #1
 800a494:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d00e      	beq.n	800a4c0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a4a8:	685b      	ldr	r3, [r3, #4]
 800a4aa:	687a      	ldr	r2, [r7, #4]
 800a4ac:	6852      	ldr	r2, [r2, #4]
 800a4ae:	b2d2      	uxtb	r2, r2
 800a4b0:	4611      	mov	r1, r2
 800a4b2:	6878      	ldr	r0, [r7, #4]
 800a4b4:	4798      	blx	r3
 800a4b6:	4603      	mov	r3, r0
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d001      	beq.n	800a4c0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800a4bc:	2303      	movs	r3, #3
 800a4be:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a4c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	3710      	adds	r7, #16
 800a4c6:	46bd      	mov	sp, r7
 800a4c8:	bd80      	pop	{r7, pc}

0800a4ca <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a4ca:	b480      	push	{r7}
 800a4cc:	b083      	sub	sp, #12
 800a4ce:	af00      	add	r7, sp, #0
 800a4d0:	6078      	str	r0, [r7, #4]
 800a4d2:	460b      	mov	r3, r1
 800a4d4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a4d6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a4d8:	4618      	mov	r0, r3
 800a4da:	370c      	adds	r7, #12
 800a4dc:	46bd      	mov	sp, r7
 800a4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e2:	4770      	bx	lr

0800a4e4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a4e4:	b480      	push	{r7}
 800a4e6:	b083      	sub	sp, #12
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	6078      	str	r0, [r7, #4]
 800a4ec:	460b      	mov	r3, r1
 800a4ee:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a4f0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	370c      	adds	r7, #12
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fc:	4770      	bx	lr

0800a4fe <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800a4fe:	b580      	push	{r7, lr}
 800a500:	b086      	sub	sp, #24
 800a502:	af00      	add	r7, sp, #0
 800a504:	6078      	str	r0, [r7, #4]
 800a506:	460b      	mov	r3, r1
 800a508:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800a512:	2300      	movs	r3, #0
 800a514:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	885b      	ldrh	r3, [r3, #2]
 800a51a:	b29a      	uxth	r2, r3
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	781b      	ldrb	r3, [r3, #0]
 800a520:	b29b      	uxth	r3, r3
 800a522:	429a      	cmp	r2, r3
 800a524:	d920      	bls.n	800a568 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	781b      	ldrb	r3, [r3, #0]
 800a52a:	b29b      	uxth	r3, r3
 800a52c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800a52e:	e013      	b.n	800a558 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800a530:	f107 030a 	add.w	r3, r7, #10
 800a534:	4619      	mov	r1, r3
 800a536:	6978      	ldr	r0, [r7, #20]
 800a538:	f000 f81b 	bl	800a572 <USBD_GetNextDesc>
 800a53c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a53e:	697b      	ldr	r3, [r7, #20]
 800a540:	785b      	ldrb	r3, [r3, #1]
 800a542:	2b05      	cmp	r3, #5
 800a544:	d108      	bne.n	800a558 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800a546:	697b      	ldr	r3, [r7, #20]
 800a548:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800a54a:	693b      	ldr	r3, [r7, #16]
 800a54c:	789b      	ldrb	r3, [r3, #2]
 800a54e:	78fa      	ldrb	r2, [r7, #3]
 800a550:	429a      	cmp	r2, r3
 800a552:	d008      	beq.n	800a566 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800a554:	2300      	movs	r3, #0
 800a556:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	885b      	ldrh	r3, [r3, #2]
 800a55c:	b29a      	uxth	r2, r3
 800a55e:	897b      	ldrh	r3, [r7, #10]
 800a560:	429a      	cmp	r2, r3
 800a562:	d8e5      	bhi.n	800a530 <USBD_GetEpDesc+0x32>
 800a564:	e000      	b.n	800a568 <USBD_GetEpDesc+0x6a>
          break;
 800a566:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800a568:	693b      	ldr	r3, [r7, #16]
}
 800a56a:	4618      	mov	r0, r3
 800a56c:	3718      	adds	r7, #24
 800a56e:	46bd      	mov	sp, r7
 800a570:	bd80      	pop	{r7, pc}

0800a572 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a572:	b480      	push	{r7}
 800a574:	b085      	sub	sp, #20
 800a576:	af00      	add	r7, sp, #0
 800a578:	6078      	str	r0, [r7, #4]
 800a57a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800a580:	683b      	ldr	r3, [r7, #0]
 800a582:	881a      	ldrh	r2, [r3, #0]
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	781b      	ldrb	r3, [r3, #0]
 800a588:	b29b      	uxth	r3, r3
 800a58a:	4413      	add	r3, r2
 800a58c:	b29a      	uxth	r2, r3
 800a58e:	683b      	ldr	r3, [r7, #0]
 800a590:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	781b      	ldrb	r3, [r3, #0]
 800a596:	461a      	mov	r2, r3
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	4413      	add	r3, r2
 800a59c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a59e:	68fb      	ldr	r3, [r7, #12]
}
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	3714      	adds	r7, #20
 800a5a4:	46bd      	mov	sp, r7
 800a5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5aa:	4770      	bx	lr

0800a5ac <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a5ac:	b480      	push	{r7}
 800a5ae:	b087      	sub	sp, #28
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a5b8:	697b      	ldr	r3, [r7, #20]
 800a5ba:	781b      	ldrb	r3, [r3, #0]
 800a5bc:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a5be:	697b      	ldr	r3, [r7, #20]
 800a5c0:	3301      	adds	r3, #1
 800a5c2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a5c4:	697b      	ldr	r3, [r7, #20]
 800a5c6:	781b      	ldrb	r3, [r3, #0]
 800a5c8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a5ca:	8a3b      	ldrh	r3, [r7, #16]
 800a5cc:	021b      	lsls	r3, r3, #8
 800a5ce:	b21a      	sxth	r2, r3
 800a5d0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a5d4:	4313      	orrs	r3, r2
 800a5d6:	b21b      	sxth	r3, r3
 800a5d8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a5da:	89fb      	ldrh	r3, [r7, #14]
}
 800a5dc:	4618      	mov	r0, r3
 800a5de:	371c      	adds	r7, #28
 800a5e0:	46bd      	mov	sp, r7
 800a5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e6:	4770      	bx	lr

0800a5e8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a5e8:	b580      	push	{r7, lr}
 800a5ea:	b084      	sub	sp, #16
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	6078      	str	r0, [r7, #4]
 800a5f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a5f2:	2300      	movs	r3, #0
 800a5f4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a5f6:	683b      	ldr	r3, [r7, #0]
 800a5f8:	781b      	ldrb	r3, [r3, #0]
 800a5fa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a5fe:	2b40      	cmp	r3, #64	; 0x40
 800a600:	d005      	beq.n	800a60e <USBD_StdDevReq+0x26>
 800a602:	2b40      	cmp	r3, #64	; 0x40
 800a604:	d857      	bhi.n	800a6b6 <USBD_StdDevReq+0xce>
 800a606:	2b00      	cmp	r3, #0
 800a608:	d00f      	beq.n	800a62a <USBD_StdDevReq+0x42>
 800a60a:	2b20      	cmp	r3, #32
 800a60c:	d153      	bne.n	800a6b6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	32ae      	adds	r2, #174	; 0xae
 800a618:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a61c:	689b      	ldr	r3, [r3, #8]
 800a61e:	6839      	ldr	r1, [r7, #0]
 800a620:	6878      	ldr	r0, [r7, #4]
 800a622:	4798      	blx	r3
 800a624:	4603      	mov	r3, r0
 800a626:	73fb      	strb	r3, [r7, #15]
      break;
 800a628:	e04a      	b.n	800a6c0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a62a:	683b      	ldr	r3, [r7, #0]
 800a62c:	785b      	ldrb	r3, [r3, #1]
 800a62e:	2b09      	cmp	r3, #9
 800a630:	d83b      	bhi.n	800a6aa <USBD_StdDevReq+0xc2>
 800a632:	a201      	add	r2, pc, #4	; (adr r2, 800a638 <USBD_StdDevReq+0x50>)
 800a634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a638:	0800a68d 	.word	0x0800a68d
 800a63c:	0800a6a1 	.word	0x0800a6a1
 800a640:	0800a6ab 	.word	0x0800a6ab
 800a644:	0800a697 	.word	0x0800a697
 800a648:	0800a6ab 	.word	0x0800a6ab
 800a64c:	0800a66b 	.word	0x0800a66b
 800a650:	0800a661 	.word	0x0800a661
 800a654:	0800a6ab 	.word	0x0800a6ab
 800a658:	0800a683 	.word	0x0800a683
 800a65c:	0800a675 	.word	0x0800a675
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a660:	6839      	ldr	r1, [r7, #0]
 800a662:	6878      	ldr	r0, [r7, #4]
 800a664:	f000 fa3c 	bl	800aae0 <USBD_GetDescriptor>
          break;
 800a668:	e024      	b.n	800a6b4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a66a:	6839      	ldr	r1, [r7, #0]
 800a66c:	6878      	ldr	r0, [r7, #4]
 800a66e:	f000 fbcb 	bl	800ae08 <USBD_SetAddress>
          break;
 800a672:	e01f      	b.n	800a6b4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a674:	6839      	ldr	r1, [r7, #0]
 800a676:	6878      	ldr	r0, [r7, #4]
 800a678:	f000 fc0a 	bl	800ae90 <USBD_SetConfig>
 800a67c:	4603      	mov	r3, r0
 800a67e:	73fb      	strb	r3, [r7, #15]
          break;
 800a680:	e018      	b.n	800a6b4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a682:	6839      	ldr	r1, [r7, #0]
 800a684:	6878      	ldr	r0, [r7, #4]
 800a686:	f000 fcad 	bl	800afe4 <USBD_GetConfig>
          break;
 800a68a:	e013      	b.n	800a6b4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a68c:	6839      	ldr	r1, [r7, #0]
 800a68e:	6878      	ldr	r0, [r7, #4]
 800a690:	f000 fcde 	bl	800b050 <USBD_GetStatus>
          break;
 800a694:	e00e      	b.n	800a6b4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a696:	6839      	ldr	r1, [r7, #0]
 800a698:	6878      	ldr	r0, [r7, #4]
 800a69a:	f000 fd0d 	bl	800b0b8 <USBD_SetFeature>
          break;
 800a69e:	e009      	b.n	800a6b4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a6a0:	6839      	ldr	r1, [r7, #0]
 800a6a2:	6878      	ldr	r0, [r7, #4]
 800a6a4:	f000 fd31 	bl	800b10a <USBD_ClrFeature>
          break;
 800a6a8:	e004      	b.n	800a6b4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800a6aa:	6839      	ldr	r1, [r7, #0]
 800a6ac:	6878      	ldr	r0, [r7, #4]
 800a6ae:	f000 fd88 	bl	800b1c2 <USBD_CtlError>
          break;
 800a6b2:	bf00      	nop
      }
      break;
 800a6b4:	e004      	b.n	800a6c0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800a6b6:	6839      	ldr	r1, [r7, #0]
 800a6b8:	6878      	ldr	r0, [r7, #4]
 800a6ba:	f000 fd82 	bl	800b1c2 <USBD_CtlError>
      break;
 800a6be:	bf00      	nop
  }

  return ret;
 800a6c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	3710      	adds	r7, #16
 800a6c6:	46bd      	mov	sp, r7
 800a6c8:	bd80      	pop	{r7, pc}
 800a6ca:	bf00      	nop

0800a6cc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a6cc:	b580      	push	{r7, lr}
 800a6ce:	b084      	sub	sp, #16
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	6078      	str	r0, [r7, #4]
 800a6d4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a6d6:	2300      	movs	r3, #0
 800a6d8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a6da:	683b      	ldr	r3, [r7, #0]
 800a6dc:	781b      	ldrb	r3, [r3, #0]
 800a6de:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a6e2:	2b40      	cmp	r3, #64	; 0x40
 800a6e4:	d005      	beq.n	800a6f2 <USBD_StdItfReq+0x26>
 800a6e6:	2b40      	cmp	r3, #64	; 0x40
 800a6e8:	d852      	bhi.n	800a790 <USBD_StdItfReq+0xc4>
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d001      	beq.n	800a6f2 <USBD_StdItfReq+0x26>
 800a6ee:	2b20      	cmp	r3, #32
 800a6f0:	d14e      	bne.n	800a790 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a6f8:	b2db      	uxtb	r3, r3
 800a6fa:	3b01      	subs	r3, #1
 800a6fc:	2b02      	cmp	r3, #2
 800a6fe:	d840      	bhi.n	800a782 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a700:	683b      	ldr	r3, [r7, #0]
 800a702:	889b      	ldrh	r3, [r3, #4]
 800a704:	b2db      	uxtb	r3, r3
 800a706:	2b01      	cmp	r3, #1
 800a708:	d836      	bhi.n	800a778 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800a70a:	683b      	ldr	r3, [r7, #0]
 800a70c:	889b      	ldrh	r3, [r3, #4]
 800a70e:	b2db      	uxtb	r3, r3
 800a710:	4619      	mov	r1, r3
 800a712:	6878      	ldr	r0, [r7, #4]
 800a714:	f7ff fed9 	bl	800a4ca <USBD_CoreFindIF>
 800a718:	4603      	mov	r3, r0
 800a71a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a71c:	7bbb      	ldrb	r3, [r7, #14]
 800a71e:	2bff      	cmp	r3, #255	; 0xff
 800a720:	d01d      	beq.n	800a75e <USBD_StdItfReq+0x92>
 800a722:	7bbb      	ldrb	r3, [r7, #14]
 800a724:	2b00      	cmp	r3, #0
 800a726:	d11a      	bne.n	800a75e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800a728:	7bba      	ldrb	r2, [r7, #14]
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	32ae      	adds	r2, #174	; 0xae
 800a72e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a732:	689b      	ldr	r3, [r3, #8]
 800a734:	2b00      	cmp	r3, #0
 800a736:	d00f      	beq.n	800a758 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800a738:	7bba      	ldrb	r2, [r7, #14]
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a740:	7bba      	ldrb	r2, [r7, #14]
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	32ae      	adds	r2, #174	; 0xae
 800a746:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a74a:	689b      	ldr	r3, [r3, #8]
 800a74c:	6839      	ldr	r1, [r7, #0]
 800a74e:	6878      	ldr	r0, [r7, #4]
 800a750:	4798      	blx	r3
 800a752:	4603      	mov	r3, r0
 800a754:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a756:	e004      	b.n	800a762 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800a758:	2303      	movs	r3, #3
 800a75a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a75c:	e001      	b.n	800a762 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800a75e:	2303      	movs	r3, #3
 800a760:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a762:	683b      	ldr	r3, [r7, #0]
 800a764:	88db      	ldrh	r3, [r3, #6]
 800a766:	2b00      	cmp	r3, #0
 800a768:	d110      	bne.n	800a78c <USBD_StdItfReq+0xc0>
 800a76a:	7bfb      	ldrb	r3, [r7, #15]
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d10d      	bne.n	800a78c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a770:	6878      	ldr	r0, [r7, #4]
 800a772:	f000 fdf1 	bl	800b358 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a776:	e009      	b.n	800a78c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800a778:	6839      	ldr	r1, [r7, #0]
 800a77a:	6878      	ldr	r0, [r7, #4]
 800a77c:	f000 fd21 	bl	800b1c2 <USBD_CtlError>
          break;
 800a780:	e004      	b.n	800a78c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800a782:	6839      	ldr	r1, [r7, #0]
 800a784:	6878      	ldr	r0, [r7, #4]
 800a786:	f000 fd1c 	bl	800b1c2 <USBD_CtlError>
          break;
 800a78a:	e000      	b.n	800a78e <USBD_StdItfReq+0xc2>
          break;
 800a78c:	bf00      	nop
      }
      break;
 800a78e:	e004      	b.n	800a79a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800a790:	6839      	ldr	r1, [r7, #0]
 800a792:	6878      	ldr	r0, [r7, #4]
 800a794:	f000 fd15 	bl	800b1c2 <USBD_CtlError>
      break;
 800a798:	bf00      	nop
  }

  return ret;
 800a79a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a79c:	4618      	mov	r0, r3
 800a79e:	3710      	adds	r7, #16
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	bd80      	pop	{r7, pc}

0800a7a4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a7a4:	b580      	push	{r7, lr}
 800a7a6:	b084      	sub	sp, #16
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	6078      	str	r0, [r7, #4]
 800a7ac:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800a7ae:	2300      	movs	r3, #0
 800a7b0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800a7b2:	683b      	ldr	r3, [r7, #0]
 800a7b4:	889b      	ldrh	r3, [r3, #4]
 800a7b6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a7b8:	683b      	ldr	r3, [r7, #0]
 800a7ba:	781b      	ldrb	r3, [r3, #0]
 800a7bc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a7c0:	2b40      	cmp	r3, #64	; 0x40
 800a7c2:	d007      	beq.n	800a7d4 <USBD_StdEPReq+0x30>
 800a7c4:	2b40      	cmp	r3, #64	; 0x40
 800a7c6:	f200 817f 	bhi.w	800aac8 <USBD_StdEPReq+0x324>
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d02a      	beq.n	800a824 <USBD_StdEPReq+0x80>
 800a7ce:	2b20      	cmp	r3, #32
 800a7d0:	f040 817a 	bne.w	800aac8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800a7d4:	7bbb      	ldrb	r3, [r7, #14]
 800a7d6:	4619      	mov	r1, r3
 800a7d8:	6878      	ldr	r0, [r7, #4]
 800a7da:	f7ff fe83 	bl	800a4e4 <USBD_CoreFindEP>
 800a7de:	4603      	mov	r3, r0
 800a7e0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a7e2:	7b7b      	ldrb	r3, [r7, #13]
 800a7e4:	2bff      	cmp	r3, #255	; 0xff
 800a7e6:	f000 8174 	beq.w	800aad2 <USBD_StdEPReq+0x32e>
 800a7ea:	7b7b      	ldrb	r3, [r7, #13]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	f040 8170 	bne.w	800aad2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800a7f2:	7b7a      	ldrb	r2, [r7, #13]
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800a7fa:	7b7a      	ldrb	r2, [r7, #13]
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	32ae      	adds	r2, #174	; 0xae
 800a800:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a804:	689b      	ldr	r3, [r3, #8]
 800a806:	2b00      	cmp	r3, #0
 800a808:	f000 8163 	beq.w	800aad2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800a80c:	7b7a      	ldrb	r2, [r7, #13]
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	32ae      	adds	r2, #174	; 0xae
 800a812:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a816:	689b      	ldr	r3, [r3, #8]
 800a818:	6839      	ldr	r1, [r7, #0]
 800a81a:	6878      	ldr	r0, [r7, #4]
 800a81c:	4798      	blx	r3
 800a81e:	4603      	mov	r3, r0
 800a820:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a822:	e156      	b.n	800aad2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a824:	683b      	ldr	r3, [r7, #0]
 800a826:	785b      	ldrb	r3, [r3, #1]
 800a828:	2b03      	cmp	r3, #3
 800a82a:	d008      	beq.n	800a83e <USBD_StdEPReq+0x9a>
 800a82c:	2b03      	cmp	r3, #3
 800a82e:	f300 8145 	bgt.w	800aabc <USBD_StdEPReq+0x318>
 800a832:	2b00      	cmp	r3, #0
 800a834:	f000 809b 	beq.w	800a96e <USBD_StdEPReq+0x1ca>
 800a838:	2b01      	cmp	r3, #1
 800a83a:	d03c      	beq.n	800a8b6 <USBD_StdEPReq+0x112>
 800a83c:	e13e      	b.n	800aabc <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a844:	b2db      	uxtb	r3, r3
 800a846:	2b02      	cmp	r3, #2
 800a848:	d002      	beq.n	800a850 <USBD_StdEPReq+0xac>
 800a84a:	2b03      	cmp	r3, #3
 800a84c:	d016      	beq.n	800a87c <USBD_StdEPReq+0xd8>
 800a84e:	e02c      	b.n	800a8aa <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a850:	7bbb      	ldrb	r3, [r7, #14]
 800a852:	2b00      	cmp	r3, #0
 800a854:	d00d      	beq.n	800a872 <USBD_StdEPReq+0xce>
 800a856:	7bbb      	ldrb	r3, [r7, #14]
 800a858:	2b80      	cmp	r3, #128	; 0x80
 800a85a:	d00a      	beq.n	800a872 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a85c:	7bbb      	ldrb	r3, [r7, #14]
 800a85e:	4619      	mov	r1, r3
 800a860:	6878      	ldr	r0, [r7, #4]
 800a862:	f001 fad1 	bl	800be08 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a866:	2180      	movs	r1, #128	; 0x80
 800a868:	6878      	ldr	r0, [r7, #4]
 800a86a:	f001 facd 	bl	800be08 <USBD_LL_StallEP>
 800a86e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a870:	e020      	b.n	800a8b4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800a872:	6839      	ldr	r1, [r7, #0]
 800a874:	6878      	ldr	r0, [r7, #4]
 800a876:	f000 fca4 	bl	800b1c2 <USBD_CtlError>
              break;
 800a87a:	e01b      	b.n	800a8b4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a87c:	683b      	ldr	r3, [r7, #0]
 800a87e:	885b      	ldrh	r3, [r3, #2]
 800a880:	2b00      	cmp	r3, #0
 800a882:	d10e      	bne.n	800a8a2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a884:	7bbb      	ldrb	r3, [r7, #14]
 800a886:	2b00      	cmp	r3, #0
 800a888:	d00b      	beq.n	800a8a2 <USBD_StdEPReq+0xfe>
 800a88a:	7bbb      	ldrb	r3, [r7, #14]
 800a88c:	2b80      	cmp	r3, #128	; 0x80
 800a88e:	d008      	beq.n	800a8a2 <USBD_StdEPReq+0xfe>
 800a890:	683b      	ldr	r3, [r7, #0]
 800a892:	88db      	ldrh	r3, [r3, #6]
 800a894:	2b00      	cmp	r3, #0
 800a896:	d104      	bne.n	800a8a2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a898:	7bbb      	ldrb	r3, [r7, #14]
 800a89a:	4619      	mov	r1, r3
 800a89c:	6878      	ldr	r0, [r7, #4]
 800a89e:	f001 fab3 	bl	800be08 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a8a2:	6878      	ldr	r0, [r7, #4]
 800a8a4:	f000 fd58 	bl	800b358 <USBD_CtlSendStatus>

              break;
 800a8a8:	e004      	b.n	800a8b4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800a8aa:	6839      	ldr	r1, [r7, #0]
 800a8ac:	6878      	ldr	r0, [r7, #4]
 800a8ae:	f000 fc88 	bl	800b1c2 <USBD_CtlError>
              break;
 800a8b2:	bf00      	nop
          }
          break;
 800a8b4:	e107      	b.n	800aac6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a8bc:	b2db      	uxtb	r3, r3
 800a8be:	2b02      	cmp	r3, #2
 800a8c0:	d002      	beq.n	800a8c8 <USBD_StdEPReq+0x124>
 800a8c2:	2b03      	cmp	r3, #3
 800a8c4:	d016      	beq.n	800a8f4 <USBD_StdEPReq+0x150>
 800a8c6:	e04b      	b.n	800a960 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a8c8:	7bbb      	ldrb	r3, [r7, #14]
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d00d      	beq.n	800a8ea <USBD_StdEPReq+0x146>
 800a8ce:	7bbb      	ldrb	r3, [r7, #14]
 800a8d0:	2b80      	cmp	r3, #128	; 0x80
 800a8d2:	d00a      	beq.n	800a8ea <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a8d4:	7bbb      	ldrb	r3, [r7, #14]
 800a8d6:	4619      	mov	r1, r3
 800a8d8:	6878      	ldr	r0, [r7, #4]
 800a8da:	f001 fa95 	bl	800be08 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a8de:	2180      	movs	r1, #128	; 0x80
 800a8e0:	6878      	ldr	r0, [r7, #4]
 800a8e2:	f001 fa91 	bl	800be08 <USBD_LL_StallEP>
 800a8e6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a8e8:	e040      	b.n	800a96c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800a8ea:	6839      	ldr	r1, [r7, #0]
 800a8ec:	6878      	ldr	r0, [r7, #4]
 800a8ee:	f000 fc68 	bl	800b1c2 <USBD_CtlError>
              break;
 800a8f2:	e03b      	b.n	800a96c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a8f4:	683b      	ldr	r3, [r7, #0]
 800a8f6:	885b      	ldrh	r3, [r3, #2]
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d136      	bne.n	800a96a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a8fc:	7bbb      	ldrb	r3, [r7, #14]
 800a8fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a902:	2b00      	cmp	r3, #0
 800a904:	d004      	beq.n	800a910 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a906:	7bbb      	ldrb	r3, [r7, #14]
 800a908:	4619      	mov	r1, r3
 800a90a:	6878      	ldr	r0, [r7, #4]
 800a90c:	f001 fa9b 	bl	800be46 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a910:	6878      	ldr	r0, [r7, #4]
 800a912:	f000 fd21 	bl	800b358 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800a916:	7bbb      	ldrb	r3, [r7, #14]
 800a918:	4619      	mov	r1, r3
 800a91a:	6878      	ldr	r0, [r7, #4]
 800a91c:	f7ff fde2 	bl	800a4e4 <USBD_CoreFindEP>
 800a920:	4603      	mov	r3, r0
 800a922:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a924:	7b7b      	ldrb	r3, [r7, #13]
 800a926:	2bff      	cmp	r3, #255	; 0xff
 800a928:	d01f      	beq.n	800a96a <USBD_StdEPReq+0x1c6>
 800a92a:	7b7b      	ldrb	r3, [r7, #13]
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d11c      	bne.n	800a96a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800a930:	7b7a      	ldrb	r2, [r7, #13]
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800a938:	7b7a      	ldrb	r2, [r7, #13]
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	32ae      	adds	r2, #174	; 0xae
 800a93e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a942:	689b      	ldr	r3, [r3, #8]
 800a944:	2b00      	cmp	r3, #0
 800a946:	d010      	beq.n	800a96a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a948:	7b7a      	ldrb	r2, [r7, #13]
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	32ae      	adds	r2, #174	; 0xae
 800a94e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a952:	689b      	ldr	r3, [r3, #8]
 800a954:	6839      	ldr	r1, [r7, #0]
 800a956:	6878      	ldr	r0, [r7, #4]
 800a958:	4798      	blx	r3
 800a95a:	4603      	mov	r3, r0
 800a95c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800a95e:	e004      	b.n	800a96a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800a960:	6839      	ldr	r1, [r7, #0]
 800a962:	6878      	ldr	r0, [r7, #4]
 800a964:	f000 fc2d 	bl	800b1c2 <USBD_CtlError>
              break;
 800a968:	e000      	b.n	800a96c <USBD_StdEPReq+0x1c8>
              break;
 800a96a:	bf00      	nop
          }
          break;
 800a96c:	e0ab      	b.n	800aac6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a974:	b2db      	uxtb	r3, r3
 800a976:	2b02      	cmp	r3, #2
 800a978:	d002      	beq.n	800a980 <USBD_StdEPReq+0x1dc>
 800a97a:	2b03      	cmp	r3, #3
 800a97c:	d032      	beq.n	800a9e4 <USBD_StdEPReq+0x240>
 800a97e:	e097      	b.n	800aab0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a980:	7bbb      	ldrb	r3, [r7, #14]
 800a982:	2b00      	cmp	r3, #0
 800a984:	d007      	beq.n	800a996 <USBD_StdEPReq+0x1f2>
 800a986:	7bbb      	ldrb	r3, [r7, #14]
 800a988:	2b80      	cmp	r3, #128	; 0x80
 800a98a:	d004      	beq.n	800a996 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800a98c:	6839      	ldr	r1, [r7, #0]
 800a98e:	6878      	ldr	r0, [r7, #4]
 800a990:	f000 fc17 	bl	800b1c2 <USBD_CtlError>
                break;
 800a994:	e091      	b.n	800aaba <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a996:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	da0b      	bge.n	800a9b6 <USBD_StdEPReq+0x212>
 800a99e:	7bbb      	ldrb	r3, [r7, #14]
 800a9a0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a9a4:	4613      	mov	r3, r2
 800a9a6:	009b      	lsls	r3, r3, #2
 800a9a8:	4413      	add	r3, r2
 800a9aa:	009b      	lsls	r3, r3, #2
 800a9ac:	3310      	adds	r3, #16
 800a9ae:	687a      	ldr	r2, [r7, #4]
 800a9b0:	4413      	add	r3, r2
 800a9b2:	3304      	adds	r3, #4
 800a9b4:	e00b      	b.n	800a9ce <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a9b6:	7bbb      	ldrb	r3, [r7, #14]
 800a9b8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a9bc:	4613      	mov	r3, r2
 800a9be:	009b      	lsls	r3, r3, #2
 800a9c0:	4413      	add	r3, r2
 800a9c2:	009b      	lsls	r3, r3, #2
 800a9c4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a9c8:	687a      	ldr	r2, [r7, #4]
 800a9ca:	4413      	add	r3, r2
 800a9cc:	3304      	adds	r3, #4
 800a9ce:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a9d0:	68bb      	ldr	r3, [r7, #8]
 800a9d2:	2200      	movs	r2, #0
 800a9d4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a9d6:	68bb      	ldr	r3, [r7, #8]
 800a9d8:	2202      	movs	r2, #2
 800a9da:	4619      	mov	r1, r3
 800a9dc:	6878      	ldr	r0, [r7, #4]
 800a9de:	f000 fc61 	bl	800b2a4 <USBD_CtlSendData>
              break;
 800a9e2:	e06a      	b.n	800aaba <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a9e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	da11      	bge.n	800aa10 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a9ec:	7bbb      	ldrb	r3, [r7, #14]
 800a9ee:	f003 020f 	and.w	r2, r3, #15
 800a9f2:	6879      	ldr	r1, [r7, #4]
 800a9f4:	4613      	mov	r3, r2
 800a9f6:	009b      	lsls	r3, r3, #2
 800a9f8:	4413      	add	r3, r2
 800a9fa:	009b      	lsls	r3, r3, #2
 800a9fc:	440b      	add	r3, r1
 800a9fe:	3324      	adds	r3, #36	; 0x24
 800aa00:	881b      	ldrh	r3, [r3, #0]
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d117      	bne.n	800aa36 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800aa06:	6839      	ldr	r1, [r7, #0]
 800aa08:	6878      	ldr	r0, [r7, #4]
 800aa0a:	f000 fbda 	bl	800b1c2 <USBD_CtlError>
                  break;
 800aa0e:	e054      	b.n	800aaba <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800aa10:	7bbb      	ldrb	r3, [r7, #14]
 800aa12:	f003 020f 	and.w	r2, r3, #15
 800aa16:	6879      	ldr	r1, [r7, #4]
 800aa18:	4613      	mov	r3, r2
 800aa1a:	009b      	lsls	r3, r3, #2
 800aa1c:	4413      	add	r3, r2
 800aa1e:	009b      	lsls	r3, r3, #2
 800aa20:	440b      	add	r3, r1
 800aa22:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800aa26:	881b      	ldrh	r3, [r3, #0]
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d104      	bne.n	800aa36 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800aa2c:	6839      	ldr	r1, [r7, #0]
 800aa2e:	6878      	ldr	r0, [r7, #4]
 800aa30:	f000 fbc7 	bl	800b1c2 <USBD_CtlError>
                  break;
 800aa34:	e041      	b.n	800aaba <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aa36:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	da0b      	bge.n	800aa56 <USBD_StdEPReq+0x2b2>
 800aa3e:	7bbb      	ldrb	r3, [r7, #14]
 800aa40:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aa44:	4613      	mov	r3, r2
 800aa46:	009b      	lsls	r3, r3, #2
 800aa48:	4413      	add	r3, r2
 800aa4a:	009b      	lsls	r3, r3, #2
 800aa4c:	3310      	adds	r3, #16
 800aa4e:	687a      	ldr	r2, [r7, #4]
 800aa50:	4413      	add	r3, r2
 800aa52:	3304      	adds	r3, #4
 800aa54:	e00b      	b.n	800aa6e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800aa56:	7bbb      	ldrb	r3, [r7, #14]
 800aa58:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aa5c:	4613      	mov	r3, r2
 800aa5e:	009b      	lsls	r3, r3, #2
 800aa60:	4413      	add	r3, r2
 800aa62:	009b      	lsls	r3, r3, #2
 800aa64:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800aa68:	687a      	ldr	r2, [r7, #4]
 800aa6a:	4413      	add	r3, r2
 800aa6c:	3304      	adds	r3, #4
 800aa6e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800aa70:	7bbb      	ldrb	r3, [r7, #14]
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d002      	beq.n	800aa7c <USBD_StdEPReq+0x2d8>
 800aa76:	7bbb      	ldrb	r3, [r7, #14]
 800aa78:	2b80      	cmp	r3, #128	; 0x80
 800aa7a:	d103      	bne.n	800aa84 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800aa7c:	68bb      	ldr	r3, [r7, #8]
 800aa7e:	2200      	movs	r2, #0
 800aa80:	601a      	str	r2, [r3, #0]
 800aa82:	e00e      	b.n	800aaa2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800aa84:	7bbb      	ldrb	r3, [r7, #14]
 800aa86:	4619      	mov	r1, r3
 800aa88:	6878      	ldr	r0, [r7, #4]
 800aa8a:	f001 f9fb 	bl	800be84 <USBD_LL_IsStallEP>
 800aa8e:	4603      	mov	r3, r0
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d003      	beq.n	800aa9c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800aa94:	68bb      	ldr	r3, [r7, #8]
 800aa96:	2201      	movs	r2, #1
 800aa98:	601a      	str	r2, [r3, #0]
 800aa9a:	e002      	b.n	800aaa2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800aa9c:	68bb      	ldr	r3, [r7, #8]
 800aa9e:	2200      	movs	r2, #0
 800aaa0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800aaa2:	68bb      	ldr	r3, [r7, #8]
 800aaa4:	2202      	movs	r2, #2
 800aaa6:	4619      	mov	r1, r3
 800aaa8:	6878      	ldr	r0, [r7, #4]
 800aaaa:	f000 fbfb 	bl	800b2a4 <USBD_CtlSendData>
              break;
 800aaae:	e004      	b.n	800aaba <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800aab0:	6839      	ldr	r1, [r7, #0]
 800aab2:	6878      	ldr	r0, [r7, #4]
 800aab4:	f000 fb85 	bl	800b1c2 <USBD_CtlError>
              break;
 800aab8:	bf00      	nop
          }
          break;
 800aaba:	e004      	b.n	800aac6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800aabc:	6839      	ldr	r1, [r7, #0]
 800aabe:	6878      	ldr	r0, [r7, #4]
 800aac0:	f000 fb7f 	bl	800b1c2 <USBD_CtlError>
          break;
 800aac4:	bf00      	nop
      }
      break;
 800aac6:	e005      	b.n	800aad4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800aac8:	6839      	ldr	r1, [r7, #0]
 800aaca:	6878      	ldr	r0, [r7, #4]
 800aacc:	f000 fb79 	bl	800b1c2 <USBD_CtlError>
      break;
 800aad0:	e000      	b.n	800aad4 <USBD_StdEPReq+0x330>
      break;
 800aad2:	bf00      	nop
  }

  return ret;
 800aad4:	7bfb      	ldrb	r3, [r7, #15]
}
 800aad6:	4618      	mov	r0, r3
 800aad8:	3710      	adds	r7, #16
 800aada:	46bd      	mov	sp, r7
 800aadc:	bd80      	pop	{r7, pc}
	...

0800aae0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aae0:	b580      	push	{r7, lr}
 800aae2:	b084      	sub	sp, #16
 800aae4:	af00      	add	r7, sp, #0
 800aae6:	6078      	str	r0, [r7, #4]
 800aae8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800aaea:	2300      	movs	r3, #0
 800aaec:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800aaee:	2300      	movs	r3, #0
 800aaf0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800aaf2:	2300      	movs	r3, #0
 800aaf4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800aaf6:	683b      	ldr	r3, [r7, #0]
 800aaf8:	885b      	ldrh	r3, [r3, #2]
 800aafa:	0a1b      	lsrs	r3, r3, #8
 800aafc:	b29b      	uxth	r3, r3
 800aafe:	3b01      	subs	r3, #1
 800ab00:	2b0e      	cmp	r3, #14
 800ab02:	f200 8152 	bhi.w	800adaa <USBD_GetDescriptor+0x2ca>
 800ab06:	a201      	add	r2, pc, #4	; (adr r2, 800ab0c <USBD_GetDescriptor+0x2c>)
 800ab08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab0c:	0800ab7d 	.word	0x0800ab7d
 800ab10:	0800ab95 	.word	0x0800ab95
 800ab14:	0800abd5 	.word	0x0800abd5
 800ab18:	0800adab 	.word	0x0800adab
 800ab1c:	0800adab 	.word	0x0800adab
 800ab20:	0800ad4b 	.word	0x0800ad4b
 800ab24:	0800ad77 	.word	0x0800ad77
 800ab28:	0800adab 	.word	0x0800adab
 800ab2c:	0800adab 	.word	0x0800adab
 800ab30:	0800adab 	.word	0x0800adab
 800ab34:	0800adab 	.word	0x0800adab
 800ab38:	0800adab 	.word	0x0800adab
 800ab3c:	0800adab 	.word	0x0800adab
 800ab40:	0800adab 	.word	0x0800adab
 800ab44:	0800ab49 	.word	0x0800ab49
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab4e:	69db      	ldr	r3, [r3, #28]
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d00b      	beq.n	800ab6c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab5a:	69db      	ldr	r3, [r3, #28]
 800ab5c:	687a      	ldr	r2, [r7, #4]
 800ab5e:	7c12      	ldrb	r2, [r2, #16]
 800ab60:	f107 0108 	add.w	r1, r7, #8
 800ab64:	4610      	mov	r0, r2
 800ab66:	4798      	blx	r3
 800ab68:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ab6a:	e126      	b.n	800adba <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ab6c:	6839      	ldr	r1, [r7, #0]
 800ab6e:	6878      	ldr	r0, [r7, #4]
 800ab70:	f000 fb27 	bl	800b1c2 <USBD_CtlError>
        err++;
 800ab74:	7afb      	ldrb	r3, [r7, #11]
 800ab76:	3301      	adds	r3, #1
 800ab78:	72fb      	strb	r3, [r7, #11]
      break;
 800ab7a:	e11e      	b.n	800adba <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	687a      	ldr	r2, [r7, #4]
 800ab86:	7c12      	ldrb	r2, [r2, #16]
 800ab88:	f107 0108 	add.w	r1, r7, #8
 800ab8c:	4610      	mov	r0, r2
 800ab8e:	4798      	blx	r3
 800ab90:	60f8      	str	r0, [r7, #12]
      break;
 800ab92:	e112      	b.n	800adba <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	7c1b      	ldrb	r3, [r3, #16]
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d10d      	bne.n	800abb8 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aba4:	f107 0208 	add.w	r2, r7, #8
 800aba8:	4610      	mov	r0, r2
 800abaa:	4798      	blx	r3
 800abac:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	3301      	adds	r3, #1
 800abb2:	2202      	movs	r2, #2
 800abb4:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800abb6:	e100      	b.n	800adba <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800abbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abc0:	f107 0208 	add.w	r2, r7, #8
 800abc4:	4610      	mov	r0, r2
 800abc6:	4798      	blx	r3
 800abc8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	3301      	adds	r3, #1
 800abce:	2202      	movs	r2, #2
 800abd0:	701a      	strb	r2, [r3, #0]
      break;
 800abd2:	e0f2      	b.n	800adba <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800abd4:	683b      	ldr	r3, [r7, #0]
 800abd6:	885b      	ldrh	r3, [r3, #2]
 800abd8:	b2db      	uxtb	r3, r3
 800abda:	2b05      	cmp	r3, #5
 800abdc:	f200 80ac 	bhi.w	800ad38 <USBD_GetDescriptor+0x258>
 800abe0:	a201      	add	r2, pc, #4	; (adr r2, 800abe8 <USBD_GetDescriptor+0x108>)
 800abe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abe6:	bf00      	nop
 800abe8:	0800ac01 	.word	0x0800ac01
 800abec:	0800ac35 	.word	0x0800ac35
 800abf0:	0800ac69 	.word	0x0800ac69
 800abf4:	0800ac9d 	.word	0x0800ac9d
 800abf8:	0800acd1 	.word	0x0800acd1
 800abfc:	0800ad05 	.word	0x0800ad05
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac06:	685b      	ldr	r3, [r3, #4]
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d00b      	beq.n	800ac24 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac12:	685b      	ldr	r3, [r3, #4]
 800ac14:	687a      	ldr	r2, [r7, #4]
 800ac16:	7c12      	ldrb	r2, [r2, #16]
 800ac18:	f107 0108 	add.w	r1, r7, #8
 800ac1c:	4610      	mov	r0, r2
 800ac1e:	4798      	blx	r3
 800ac20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ac22:	e091      	b.n	800ad48 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ac24:	6839      	ldr	r1, [r7, #0]
 800ac26:	6878      	ldr	r0, [r7, #4]
 800ac28:	f000 facb 	bl	800b1c2 <USBD_CtlError>
            err++;
 800ac2c:	7afb      	ldrb	r3, [r7, #11]
 800ac2e:	3301      	adds	r3, #1
 800ac30:	72fb      	strb	r3, [r7, #11]
          break;
 800ac32:	e089      	b.n	800ad48 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac3a:	689b      	ldr	r3, [r3, #8]
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d00b      	beq.n	800ac58 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac46:	689b      	ldr	r3, [r3, #8]
 800ac48:	687a      	ldr	r2, [r7, #4]
 800ac4a:	7c12      	ldrb	r2, [r2, #16]
 800ac4c:	f107 0108 	add.w	r1, r7, #8
 800ac50:	4610      	mov	r0, r2
 800ac52:	4798      	blx	r3
 800ac54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ac56:	e077      	b.n	800ad48 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ac58:	6839      	ldr	r1, [r7, #0]
 800ac5a:	6878      	ldr	r0, [r7, #4]
 800ac5c:	f000 fab1 	bl	800b1c2 <USBD_CtlError>
            err++;
 800ac60:	7afb      	ldrb	r3, [r7, #11]
 800ac62:	3301      	adds	r3, #1
 800ac64:	72fb      	strb	r3, [r7, #11]
          break;
 800ac66:	e06f      	b.n	800ad48 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac6e:	68db      	ldr	r3, [r3, #12]
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d00b      	beq.n	800ac8c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac7a:	68db      	ldr	r3, [r3, #12]
 800ac7c:	687a      	ldr	r2, [r7, #4]
 800ac7e:	7c12      	ldrb	r2, [r2, #16]
 800ac80:	f107 0108 	add.w	r1, r7, #8
 800ac84:	4610      	mov	r0, r2
 800ac86:	4798      	blx	r3
 800ac88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ac8a:	e05d      	b.n	800ad48 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ac8c:	6839      	ldr	r1, [r7, #0]
 800ac8e:	6878      	ldr	r0, [r7, #4]
 800ac90:	f000 fa97 	bl	800b1c2 <USBD_CtlError>
            err++;
 800ac94:	7afb      	ldrb	r3, [r7, #11]
 800ac96:	3301      	adds	r3, #1
 800ac98:	72fb      	strb	r3, [r7, #11]
          break;
 800ac9a:	e055      	b.n	800ad48 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aca2:	691b      	ldr	r3, [r3, #16]
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d00b      	beq.n	800acc0 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800acae:	691b      	ldr	r3, [r3, #16]
 800acb0:	687a      	ldr	r2, [r7, #4]
 800acb2:	7c12      	ldrb	r2, [r2, #16]
 800acb4:	f107 0108 	add.w	r1, r7, #8
 800acb8:	4610      	mov	r0, r2
 800acba:	4798      	blx	r3
 800acbc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800acbe:	e043      	b.n	800ad48 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800acc0:	6839      	ldr	r1, [r7, #0]
 800acc2:	6878      	ldr	r0, [r7, #4]
 800acc4:	f000 fa7d 	bl	800b1c2 <USBD_CtlError>
            err++;
 800acc8:	7afb      	ldrb	r3, [r7, #11]
 800acca:	3301      	adds	r3, #1
 800accc:	72fb      	strb	r3, [r7, #11]
          break;
 800acce:	e03b      	b.n	800ad48 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800acd6:	695b      	ldr	r3, [r3, #20]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d00b      	beq.n	800acf4 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ace2:	695b      	ldr	r3, [r3, #20]
 800ace4:	687a      	ldr	r2, [r7, #4]
 800ace6:	7c12      	ldrb	r2, [r2, #16]
 800ace8:	f107 0108 	add.w	r1, r7, #8
 800acec:	4610      	mov	r0, r2
 800acee:	4798      	blx	r3
 800acf0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800acf2:	e029      	b.n	800ad48 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800acf4:	6839      	ldr	r1, [r7, #0]
 800acf6:	6878      	ldr	r0, [r7, #4]
 800acf8:	f000 fa63 	bl	800b1c2 <USBD_CtlError>
            err++;
 800acfc:	7afb      	ldrb	r3, [r7, #11]
 800acfe:	3301      	adds	r3, #1
 800ad00:	72fb      	strb	r3, [r7, #11]
          break;
 800ad02:	e021      	b.n	800ad48 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad0a:	699b      	ldr	r3, [r3, #24]
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d00b      	beq.n	800ad28 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad16:	699b      	ldr	r3, [r3, #24]
 800ad18:	687a      	ldr	r2, [r7, #4]
 800ad1a:	7c12      	ldrb	r2, [r2, #16]
 800ad1c:	f107 0108 	add.w	r1, r7, #8
 800ad20:	4610      	mov	r0, r2
 800ad22:	4798      	blx	r3
 800ad24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ad26:	e00f      	b.n	800ad48 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ad28:	6839      	ldr	r1, [r7, #0]
 800ad2a:	6878      	ldr	r0, [r7, #4]
 800ad2c:	f000 fa49 	bl	800b1c2 <USBD_CtlError>
            err++;
 800ad30:	7afb      	ldrb	r3, [r7, #11]
 800ad32:	3301      	adds	r3, #1
 800ad34:	72fb      	strb	r3, [r7, #11]
          break;
 800ad36:	e007      	b.n	800ad48 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800ad38:	6839      	ldr	r1, [r7, #0]
 800ad3a:	6878      	ldr	r0, [r7, #4]
 800ad3c:	f000 fa41 	bl	800b1c2 <USBD_CtlError>
          err++;
 800ad40:	7afb      	ldrb	r3, [r7, #11]
 800ad42:	3301      	adds	r3, #1
 800ad44:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800ad46:	bf00      	nop
      }
      break;
 800ad48:	e037      	b.n	800adba <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	7c1b      	ldrb	r3, [r3, #16]
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d109      	bne.n	800ad66 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad5a:	f107 0208 	add.w	r2, r7, #8
 800ad5e:	4610      	mov	r0, r2
 800ad60:	4798      	blx	r3
 800ad62:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ad64:	e029      	b.n	800adba <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ad66:	6839      	ldr	r1, [r7, #0]
 800ad68:	6878      	ldr	r0, [r7, #4]
 800ad6a:	f000 fa2a 	bl	800b1c2 <USBD_CtlError>
        err++;
 800ad6e:	7afb      	ldrb	r3, [r7, #11]
 800ad70:	3301      	adds	r3, #1
 800ad72:	72fb      	strb	r3, [r7, #11]
      break;
 800ad74:	e021      	b.n	800adba <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	7c1b      	ldrb	r3, [r3, #16]
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d10d      	bne.n	800ad9a <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad86:	f107 0208 	add.w	r2, r7, #8
 800ad8a:	4610      	mov	r0, r2
 800ad8c:	4798      	blx	r3
 800ad8e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	3301      	adds	r3, #1
 800ad94:	2207      	movs	r2, #7
 800ad96:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ad98:	e00f      	b.n	800adba <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ad9a:	6839      	ldr	r1, [r7, #0]
 800ad9c:	6878      	ldr	r0, [r7, #4]
 800ad9e:	f000 fa10 	bl	800b1c2 <USBD_CtlError>
        err++;
 800ada2:	7afb      	ldrb	r3, [r7, #11]
 800ada4:	3301      	adds	r3, #1
 800ada6:	72fb      	strb	r3, [r7, #11]
      break;
 800ada8:	e007      	b.n	800adba <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800adaa:	6839      	ldr	r1, [r7, #0]
 800adac:	6878      	ldr	r0, [r7, #4]
 800adae:	f000 fa08 	bl	800b1c2 <USBD_CtlError>
      err++;
 800adb2:	7afb      	ldrb	r3, [r7, #11]
 800adb4:	3301      	adds	r3, #1
 800adb6:	72fb      	strb	r3, [r7, #11]
      break;
 800adb8:	bf00      	nop
  }

  if (err != 0U)
 800adba:	7afb      	ldrb	r3, [r7, #11]
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d11e      	bne.n	800adfe <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800adc0:	683b      	ldr	r3, [r7, #0]
 800adc2:	88db      	ldrh	r3, [r3, #6]
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d016      	beq.n	800adf6 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800adc8:	893b      	ldrh	r3, [r7, #8]
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d00e      	beq.n	800adec <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800adce:	683b      	ldr	r3, [r7, #0]
 800add0:	88da      	ldrh	r2, [r3, #6]
 800add2:	893b      	ldrh	r3, [r7, #8]
 800add4:	4293      	cmp	r3, r2
 800add6:	bf28      	it	cs
 800add8:	4613      	movcs	r3, r2
 800adda:	b29b      	uxth	r3, r3
 800addc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800adde:	893b      	ldrh	r3, [r7, #8]
 800ade0:	461a      	mov	r2, r3
 800ade2:	68f9      	ldr	r1, [r7, #12]
 800ade4:	6878      	ldr	r0, [r7, #4]
 800ade6:	f000 fa5d 	bl	800b2a4 <USBD_CtlSendData>
 800adea:	e009      	b.n	800ae00 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800adec:	6839      	ldr	r1, [r7, #0]
 800adee:	6878      	ldr	r0, [r7, #4]
 800adf0:	f000 f9e7 	bl	800b1c2 <USBD_CtlError>
 800adf4:	e004      	b.n	800ae00 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800adf6:	6878      	ldr	r0, [r7, #4]
 800adf8:	f000 faae 	bl	800b358 <USBD_CtlSendStatus>
 800adfc:	e000      	b.n	800ae00 <USBD_GetDescriptor+0x320>
    return;
 800adfe:	bf00      	nop
  }
}
 800ae00:	3710      	adds	r7, #16
 800ae02:	46bd      	mov	sp, r7
 800ae04:	bd80      	pop	{r7, pc}
 800ae06:	bf00      	nop

0800ae08 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae08:	b580      	push	{r7, lr}
 800ae0a:	b084      	sub	sp, #16
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	6078      	str	r0, [r7, #4]
 800ae10:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ae12:	683b      	ldr	r3, [r7, #0]
 800ae14:	889b      	ldrh	r3, [r3, #4]
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d131      	bne.n	800ae7e <USBD_SetAddress+0x76>
 800ae1a:	683b      	ldr	r3, [r7, #0]
 800ae1c:	88db      	ldrh	r3, [r3, #6]
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d12d      	bne.n	800ae7e <USBD_SetAddress+0x76>
 800ae22:	683b      	ldr	r3, [r7, #0]
 800ae24:	885b      	ldrh	r3, [r3, #2]
 800ae26:	2b7f      	cmp	r3, #127	; 0x7f
 800ae28:	d829      	bhi.n	800ae7e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ae2a:	683b      	ldr	r3, [r7, #0]
 800ae2c:	885b      	ldrh	r3, [r3, #2]
 800ae2e:	b2db      	uxtb	r3, r3
 800ae30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae34:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae3c:	b2db      	uxtb	r3, r3
 800ae3e:	2b03      	cmp	r3, #3
 800ae40:	d104      	bne.n	800ae4c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800ae42:	6839      	ldr	r1, [r7, #0]
 800ae44:	6878      	ldr	r0, [r7, #4]
 800ae46:	f000 f9bc 	bl	800b1c2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae4a:	e01d      	b.n	800ae88 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	7bfa      	ldrb	r2, [r7, #15]
 800ae50:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ae54:	7bfb      	ldrb	r3, [r7, #15]
 800ae56:	4619      	mov	r1, r3
 800ae58:	6878      	ldr	r0, [r7, #4]
 800ae5a:	f001 f83f 	bl	800bedc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800ae5e:	6878      	ldr	r0, [r7, #4]
 800ae60:	f000 fa7a 	bl	800b358 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ae64:	7bfb      	ldrb	r3, [r7, #15]
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d004      	beq.n	800ae74 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	2202      	movs	r2, #2
 800ae6e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae72:	e009      	b.n	800ae88 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	2201      	movs	r2, #1
 800ae78:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae7c:	e004      	b.n	800ae88 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ae7e:	6839      	ldr	r1, [r7, #0]
 800ae80:	6878      	ldr	r0, [r7, #4]
 800ae82:	f000 f99e 	bl	800b1c2 <USBD_CtlError>
  }
}
 800ae86:	bf00      	nop
 800ae88:	bf00      	nop
 800ae8a:	3710      	adds	r7, #16
 800ae8c:	46bd      	mov	sp, r7
 800ae8e:	bd80      	pop	{r7, pc}

0800ae90 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae90:	b580      	push	{r7, lr}
 800ae92:	b084      	sub	sp, #16
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	6078      	str	r0, [r7, #4]
 800ae98:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ae9a:	2300      	movs	r3, #0
 800ae9c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ae9e:	683b      	ldr	r3, [r7, #0]
 800aea0:	885b      	ldrh	r3, [r3, #2]
 800aea2:	b2da      	uxtb	r2, r3
 800aea4:	4b4e      	ldr	r3, [pc, #312]	; (800afe0 <USBD_SetConfig+0x150>)
 800aea6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800aea8:	4b4d      	ldr	r3, [pc, #308]	; (800afe0 <USBD_SetConfig+0x150>)
 800aeaa:	781b      	ldrb	r3, [r3, #0]
 800aeac:	2b01      	cmp	r3, #1
 800aeae:	d905      	bls.n	800aebc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800aeb0:	6839      	ldr	r1, [r7, #0]
 800aeb2:	6878      	ldr	r0, [r7, #4]
 800aeb4:	f000 f985 	bl	800b1c2 <USBD_CtlError>
    return USBD_FAIL;
 800aeb8:	2303      	movs	r3, #3
 800aeba:	e08c      	b.n	800afd6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aec2:	b2db      	uxtb	r3, r3
 800aec4:	2b02      	cmp	r3, #2
 800aec6:	d002      	beq.n	800aece <USBD_SetConfig+0x3e>
 800aec8:	2b03      	cmp	r3, #3
 800aeca:	d029      	beq.n	800af20 <USBD_SetConfig+0x90>
 800aecc:	e075      	b.n	800afba <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800aece:	4b44      	ldr	r3, [pc, #272]	; (800afe0 <USBD_SetConfig+0x150>)
 800aed0:	781b      	ldrb	r3, [r3, #0]
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d020      	beq.n	800af18 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800aed6:	4b42      	ldr	r3, [pc, #264]	; (800afe0 <USBD_SetConfig+0x150>)
 800aed8:	781b      	ldrb	r3, [r3, #0]
 800aeda:	461a      	mov	r2, r3
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800aee0:	4b3f      	ldr	r3, [pc, #252]	; (800afe0 <USBD_SetConfig+0x150>)
 800aee2:	781b      	ldrb	r3, [r3, #0]
 800aee4:	4619      	mov	r1, r3
 800aee6:	6878      	ldr	r0, [r7, #4]
 800aee8:	f7fe ffbd 	bl	8009e66 <USBD_SetClassConfig>
 800aeec:	4603      	mov	r3, r0
 800aeee:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800aef0:	7bfb      	ldrb	r3, [r7, #15]
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d008      	beq.n	800af08 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800aef6:	6839      	ldr	r1, [r7, #0]
 800aef8:	6878      	ldr	r0, [r7, #4]
 800aefa:	f000 f962 	bl	800b1c2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	2202      	movs	r2, #2
 800af02:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800af06:	e065      	b.n	800afd4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800af08:	6878      	ldr	r0, [r7, #4]
 800af0a:	f000 fa25 	bl	800b358 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	2203      	movs	r2, #3
 800af12:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800af16:	e05d      	b.n	800afd4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800af18:	6878      	ldr	r0, [r7, #4]
 800af1a:	f000 fa1d 	bl	800b358 <USBD_CtlSendStatus>
      break;
 800af1e:	e059      	b.n	800afd4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800af20:	4b2f      	ldr	r3, [pc, #188]	; (800afe0 <USBD_SetConfig+0x150>)
 800af22:	781b      	ldrb	r3, [r3, #0]
 800af24:	2b00      	cmp	r3, #0
 800af26:	d112      	bne.n	800af4e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	2202      	movs	r2, #2
 800af2c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800af30:	4b2b      	ldr	r3, [pc, #172]	; (800afe0 <USBD_SetConfig+0x150>)
 800af32:	781b      	ldrb	r3, [r3, #0]
 800af34:	461a      	mov	r2, r3
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800af3a:	4b29      	ldr	r3, [pc, #164]	; (800afe0 <USBD_SetConfig+0x150>)
 800af3c:	781b      	ldrb	r3, [r3, #0]
 800af3e:	4619      	mov	r1, r3
 800af40:	6878      	ldr	r0, [r7, #4]
 800af42:	f7fe ffac 	bl	8009e9e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800af46:	6878      	ldr	r0, [r7, #4]
 800af48:	f000 fa06 	bl	800b358 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800af4c:	e042      	b.n	800afd4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800af4e:	4b24      	ldr	r3, [pc, #144]	; (800afe0 <USBD_SetConfig+0x150>)
 800af50:	781b      	ldrb	r3, [r3, #0]
 800af52:	461a      	mov	r2, r3
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	685b      	ldr	r3, [r3, #4]
 800af58:	429a      	cmp	r2, r3
 800af5a:	d02a      	beq.n	800afb2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	685b      	ldr	r3, [r3, #4]
 800af60:	b2db      	uxtb	r3, r3
 800af62:	4619      	mov	r1, r3
 800af64:	6878      	ldr	r0, [r7, #4]
 800af66:	f7fe ff9a 	bl	8009e9e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800af6a:	4b1d      	ldr	r3, [pc, #116]	; (800afe0 <USBD_SetConfig+0x150>)
 800af6c:	781b      	ldrb	r3, [r3, #0]
 800af6e:	461a      	mov	r2, r3
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800af74:	4b1a      	ldr	r3, [pc, #104]	; (800afe0 <USBD_SetConfig+0x150>)
 800af76:	781b      	ldrb	r3, [r3, #0]
 800af78:	4619      	mov	r1, r3
 800af7a:	6878      	ldr	r0, [r7, #4]
 800af7c:	f7fe ff73 	bl	8009e66 <USBD_SetClassConfig>
 800af80:	4603      	mov	r3, r0
 800af82:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800af84:	7bfb      	ldrb	r3, [r7, #15]
 800af86:	2b00      	cmp	r3, #0
 800af88:	d00f      	beq.n	800afaa <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800af8a:	6839      	ldr	r1, [r7, #0]
 800af8c:	6878      	ldr	r0, [r7, #4]
 800af8e:	f000 f918 	bl	800b1c2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	685b      	ldr	r3, [r3, #4]
 800af96:	b2db      	uxtb	r3, r3
 800af98:	4619      	mov	r1, r3
 800af9a:	6878      	ldr	r0, [r7, #4]
 800af9c:	f7fe ff7f 	bl	8009e9e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	2202      	movs	r2, #2
 800afa4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800afa8:	e014      	b.n	800afd4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800afaa:	6878      	ldr	r0, [r7, #4]
 800afac:	f000 f9d4 	bl	800b358 <USBD_CtlSendStatus>
      break;
 800afb0:	e010      	b.n	800afd4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800afb2:	6878      	ldr	r0, [r7, #4]
 800afb4:	f000 f9d0 	bl	800b358 <USBD_CtlSendStatus>
      break;
 800afb8:	e00c      	b.n	800afd4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800afba:	6839      	ldr	r1, [r7, #0]
 800afbc:	6878      	ldr	r0, [r7, #4]
 800afbe:	f000 f900 	bl	800b1c2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800afc2:	4b07      	ldr	r3, [pc, #28]	; (800afe0 <USBD_SetConfig+0x150>)
 800afc4:	781b      	ldrb	r3, [r3, #0]
 800afc6:	4619      	mov	r1, r3
 800afc8:	6878      	ldr	r0, [r7, #4]
 800afca:	f7fe ff68 	bl	8009e9e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800afce:	2303      	movs	r3, #3
 800afd0:	73fb      	strb	r3, [r7, #15]
      break;
 800afd2:	bf00      	nop
  }

  return ret;
 800afd4:	7bfb      	ldrb	r3, [r7, #15]
}
 800afd6:	4618      	mov	r0, r3
 800afd8:	3710      	adds	r7, #16
 800afda:	46bd      	mov	sp, r7
 800afdc:	bd80      	pop	{r7, pc}
 800afde:	bf00      	nop
 800afe0:	20000740 	.word	0x20000740

0800afe4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800afe4:	b580      	push	{r7, lr}
 800afe6:	b082      	sub	sp, #8
 800afe8:	af00      	add	r7, sp, #0
 800afea:	6078      	str	r0, [r7, #4]
 800afec:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800afee:	683b      	ldr	r3, [r7, #0]
 800aff0:	88db      	ldrh	r3, [r3, #6]
 800aff2:	2b01      	cmp	r3, #1
 800aff4:	d004      	beq.n	800b000 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800aff6:	6839      	ldr	r1, [r7, #0]
 800aff8:	6878      	ldr	r0, [r7, #4]
 800affa:	f000 f8e2 	bl	800b1c2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800affe:	e023      	b.n	800b048 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b006:	b2db      	uxtb	r3, r3
 800b008:	2b02      	cmp	r3, #2
 800b00a:	dc02      	bgt.n	800b012 <USBD_GetConfig+0x2e>
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	dc03      	bgt.n	800b018 <USBD_GetConfig+0x34>
 800b010:	e015      	b.n	800b03e <USBD_GetConfig+0x5a>
 800b012:	2b03      	cmp	r3, #3
 800b014:	d00b      	beq.n	800b02e <USBD_GetConfig+0x4a>
 800b016:	e012      	b.n	800b03e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	2200      	movs	r2, #0
 800b01c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	3308      	adds	r3, #8
 800b022:	2201      	movs	r2, #1
 800b024:	4619      	mov	r1, r3
 800b026:	6878      	ldr	r0, [r7, #4]
 800b028:	f000 f93c 	bl	800b2a4 <USBD_CtlSendData>
        break;
 800b02c:	e00c      	b.n	800b048 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	3304      	adds	r3, #4
 800b032:	2201      	movs	r2, #1
 800b034:	4619      	mov	r1, r3
 800b036:	6878      	ldr	r0, [r7, #4]
 800b038:	f000 f934 	bl	800b2a4 <USBD_CtlSendData>
        break;
 800b03c:	e004      	b.n	800b048 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b03e:	6839      	ldr	r1, [r7, #0]
 800b040:	6878      	ldr	r0, [r7, #4]
 800b042:	f000 f8be 	bl	800b1c2 <USBD_CtlError>
        break;
 800b046:	bf00      	nop
}
 800b048:	bf00      	nop
 800b04a:	3708      	adds	r7, #8
 800b04c:	46bd      	mov	sp, r7
 800b04e:	bd80      	pop	{r7, pc}

0800b050 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b050:	b580      	push	{r7, lr}
 800b052:	b082      	sub	sp, #8
 800b054:	af00      	add	r7, sp, #0
 800b056:	6078      	str	r0, [r7, #4]
 800b058:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b060:	b2db      	uxtb	r3, r3
 800b062:	3b01      	subs	r3, #1
 800b064:	2b02      	cmp	r3, #2
 800b066:	d81e      	bhi.n	800b0a6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b068:	683b      	ldr	r3, [r7, #0]
 800b06a:	88db      	ldrh	r3, [r3, #6]
 800b06c:	2b02      	cmp	r3, #2
 800b06e:	d004      	beq.n	800b07a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b070:	6839      	ldr	r1, [r7, #0]
 800b072:	6878      	ldr	r0, [r7, #4]
 800b074:	f000 f8a5 	bl	800b1c2 <USBD_CtlError>
        break;
 800b078:	e01a      	b.n	800b0b0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	2201      	movs	r2, #1
 800b07e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b086:	2b00      	cmp	r3, #0
 800b088:	d005      	beq.n	800b096 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	68db      	ldr	r3, [r3, #12]
 800b08e:	f043 0202 	orr.w	r2, r3, #2
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	330c      	adds	r3, #12
 800b09a:	2202      	movs	r2, #2
 800b09c:	4619      	mov	r1, r3
 800b09e:	6878      	ldr	r0, [r7, #4]
 800b0a0:	f000 f900 	bl	800b2a4 <USBD_CtlSendData>
      break;
 800b0a4:	e004      	b.n	800b0b0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b0a6:	6839      	ldr	r1, [r7, #0]
 800b0a8:	6878      	ldr	r0, [r7, #4]
 800b0aa:	f000 f88a 	bl	800b1c2 <USBD_CtlError>
      break;
 800b0ae:	bf00      	nop
  }
}
 800b0b0:	bf00      	nop
 800b0b2:	3708      	adds	r7, #8
 800b0b4:	46bd      	mov	sp, r7
 800b0b6:	bd80      	pop	{r7, pc}

0800b0b8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b0b8:	b580      	push	{r7, lr}
 800b0ba:	b082      	sub	sp, #8
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	6078      	str	r0, [r7, #4]
 800b0c0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b0c2:	683b      	ldr	r3, [r7, #0]
 800b0c4:	885b      	ldrh	r3, [r3, #2]
 800b0c6:	2b01      	cmp	r3, #1
 800b0c8:	d107      	bne.n	800b0da <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	2201      	movs	r2, #1
 800b0ce:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b0d2:	6878      	ldr	r0, [r7, #4]
 800b0d4:	f000 f940 	bl	800b358 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800b0d8:	e013      	b.n	800b102 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800b0da:	683b      	ldr	r3, [r7, #0]
 800b0dc:	885b      	ldrh	r3, [r3, #2]
 800b0de:	2b02      	cmp	r3, #2
 800b0e0:	d10b      	bne.n	800b0fa <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800b0e2:	683b      	ldr	r3, [r7, #0]
 800b0e4:	889b      	ldrh	r3, [r3, #4]
 800b0e6:	0a1b      	lsrs	r3, r3, #8
 800b0e8:	b29b      	uxth	r3, r3
 800b0ea:	b2da      	uxtb	r2, r3
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800b0f2:	6878      	ldr	r0, [r7, #4]
 800b0f4:	f000 f930 	bl	800b358 <USBD_CtlSendStatus>
}
 800b0f8:	e003      	b.n	800b102 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800b0fa:	6839      	ldr	r1, [r7, #0]
 800b0fc:	6878      	ldr	r0, [r7, #4]
 800b0fe:	f000 f860 	bl	800b1c2 <USBD_CtlError>
}
 800b102:	bf00      	nop
 800b104:	3708      	adds	r7, #8
 800b106:	46bd      	mov	sp, r7
 800b108:	bd80      	pop	{r7, pc}

0800b10a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b10a:	b580      	push	{r7, lr}
 800b10c:	b082      	sub	sp, #8
 800b10e:	af00      	add	r7, sp, #0
 800b110:	6078      	str	r0, [r7, #4]
 800b112:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b11a:	b2db      	uxtb	r3, r3
 800b11c:	3b01      	subs	r3, #1
 800b11e:	2b02      	cmp	r3, #2
 800b120:	d80b      	bhi.n	800b13a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b122:	683b      	ldr	r3, [r7, #0]
 800b124:	885b      	ldrh	r3, [r3, #2]
 800b126:	2b01      	cmp	r3, #1
 800b128:	d10c      	bne.n	800b144 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	2200      	movs	r2, #0
 800b12e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b132:	6878      	ldr	r0, [r7, #4]
 800b134:	f000 f910 	bl	800b358 <USBD_CtlSendStatus>
      }
      break;
 800b138:	e004      	b.n	800b144 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b13a:	6839      	ldr	r1, [r7, #0]
 800b13c:	6878      	ldr	r0, [r7, #4]
 800b13e:	f000 f840 	bl	800b1c2 <USBD_CtlError>
      break;
 800b142:	e000      	b.n	800b146 <USBD_ClrFeature+0x3c>
      break;
 800b144:	bf00      	nop
  }
}
 800b146:	bf00      	nop
 800b148:	3708      	adds	r7, #8
 800b14a:	46bd      	mov	sp, r7
 800b14c:	bd80      	pop	{r7, pc}

0800b14e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b14e:	b580      	push	{r7, lr}
 800b150:	b084      	sub	sp, #16
 800b152:	af00      	add	r7, sp, #0
 800b154:	6078      	str	r0, [r7, #4]
 800b156:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b158:	683b      	ldr	r3, [r7, #0]
 800b15a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	781a      	ldrb	r2, [r3, #0]
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	3301      	adds	r3, #1
 800b168:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	781a      	ldrb	r2, [r3, #0]
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	3301      	adds	r3, #1
 800b176:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b178:	68f8      	ldr	r0, [r7, #12]
 800b17a:	f7ff fa17 	bl	800a5ac <SWAPBYTE>
 800b17e:	4603      	mov	r3, r0
 800b180:	461a      	mov	r2, r3
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	3301      	adds	r3, #1
 800b18a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	3301      	adds	r3, #1
 800b190:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b192:	68f8      	ldr	r0, [r7, #12]
 800b194:	f7ff fa0a 	bl	800a5ac <SWAPBYTE>
 800b198:	4603      	mov	r3, r0
 800b19a:	461a      	mov	r2, r3
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	3301      	adds	r3, #1
 800b1a4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	3301      	adds	r3, #1
 800b1aa:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b1ac:	68f8      	ldr	r0, [r7, #12]
 800b1ae:	f7ff f9fd 	bl	800a5ac <SWAPBYTE>
 800b1b2:	4603      	mov	r3, r0
 800b1b4:	461a      	mov	r2, r3
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	80da      	strh	r2, [r3, #6]
}
 800b1ba:	bf00      	nop
 800b1bc:	3710      	adds	r7, #16
 800b1be:	46bd      	mov	sp, r7
 800b1c0:	bd80      	pop	{r7, pc}

0800b1c2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b1c2:	b580      	push	{r7, lr}
 800b1c4:	b082      	sub	sp, #8
 800b1c6:	af00      	add	r7, sp, #0
 800b1c8:	6078      	str	r0, [r7, #4]
 800b1ca:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b1cc:	2180      	movs	r1, #128	; 0x80
 800b1ce:	6878      	ldr	r0, [r7, #4]
 800b1d0:	f000 fe1a 	bl	800be08 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b1d4:	2100      	movs	r1, #0
 800b1d6:	6878      	ldr	r0, [r7, #4]
 800b1d8:	f000 fe16 	bl	800be08 <USBD_LL_StallEP>
}
 800b1dc:	bf00      	nop
 800b1de:	3708      	adds	r7, #8
 800b1e0:	46bd      	mov	sp, r7
 800b1e2:	bd80      	pop	{r7, pc}

0800b1e4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b1e4:	b580      	push	{r7, lr}
 800b1e6:	b086      	sub	sp, #24
 800b1e8:	af00      	add	r7, sp, #0
 800b1ea:	60f8      	str	r0, [r7, #12]
 800b1ec:	60b9      	str	r1, [r7, #8]
 800b1ee:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b1f0:	2300      	movs	r3, #0
 800b1f2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d036      	beq.n	800b268 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b1fe:	6938      	ldr	r0, [r7, #16]
 800b200:	f000 f836 	bl	800b270 <USBD_GetLen>
 800b204:	4603      	mov	r3, r0
 800b206:	3301      	adds	r3, #1
 800b208:	b29b      	uxth	r3, r3
 800b20a:	005b      	lsls	r3, r3, #1
 800b20c:	b29a      	uxth	r2, r3
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b212:	7dfb      	ldrb	r3, [r7, #23]
 800b214:	68ba      	ldr	r2, [r7, #8]
 800b216:	4413      	add	r3, r2
 800b218:	687a      	ldr	r2, [r7, #4]
 800b21a:	7812      	ldrb	r2, [r2, #0]
 800b21c:	701a      	strb	r2, [r3, #0]
  idx++;
 800b21e:	7dfb      	ldrb	r3, [r7, #23]
 800b220:	3301      	adds	r3, #1
 800b222:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b224:	7dfb      	ldrb	r3, [r7, #23]
 800b226:	68ba      	ldr	r2, [r7, #8]
 800b228:	4413      	add	r3, r2
 800b22a:	2203      	movs	r2, #3
 800b22c:	701a      	strb	r2, [r3, #0]
  idx++;
 800b22e:	7dfb      	ldrb	r3, [r7, #23]
 800b230:	3301      	adds	r3, #1
 800b232:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b234:	e013      	b.n	800b25e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b236:	7dfb      	ldrb	r3, [r7, #23]
 800b238:	68ba      	ldr	r2, [r7, #8]
 800b23a:	4413      	add	r3, r2
 800b23c:	693a      	ldr	r2, [r7, #16]
 800b23e:	7812      	ldrb	r2, [r2, #0]
 800b240:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b242:	693b      	ldr	r3, [r7, #16]
 800b244:	3301      	adds	r3, #1
 800b246:	613b      	str	r3, [r7, #16]
    idx++;
 800b248:	7dfb      	ldrb	r3, [r7, #23]
 800b24a:	3301      	adds	r3, #1
 800b24c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b24e:	7dfb      	ldrb	r3, [r7, #23]
 800b250:	68ba      	ldr	r2, [r7, #8]
 800b252:	4413      	add	r3, r2
 800b254:	2200      	movs	r2, #0
 800b256:	701a      	strb	r2, [r3, #0]
    idx++;
 800b258:	7dfb      	ldrb	r3, [r7, #23]
 800b25a:	3301      	adds	r3, #1
 800b25c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b25e:	693b      	ldr	r3, [r7, #16]
 800b260:	781b      	ldrb	r3, [r3, #0]
 800b262:	2b00      	cmp	r3, #0
 800b264:	d1e7      	bne.n	800b236 <USBD_GetString+0x52>
 800b266:	e000      	b.n	800b26a <USBD_GetString+0x86>
    return;
 800b268:	bf00      	nop
  }
}
 800b26a:	3718      	adds	r7, #24
 800b26c:	46bd      	mov	sp, r7
 800b26e:	bd80      	pop	{r7, pc}

0800b270 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b270:	b480      	push	{r7}
 800b272:	b085      	sub	sp, #20
 800b274:	af00      	add	r7, sp, #0
 800b276:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b278:	2300      	movs	r3, #0
 800b27a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b280:	e005      	b.n	800b28e <USBD_GetLen+0x1e>
  {
    len++;
 800b282:	7bfb      	ldrb	r3, [r7, #15]
 800b284:	3301      	adds	r3, #1
 800b286:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b288:	68bb      	ldr	r3, [r7, #8]
 800b28a:	3301      	adds	r3, #1
 800b28c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b28e:	68bb      	ldr	r3, [r7, #8]
 800b290:	781b      	ldrb	r3, [r3, #0]
 800b292:	2b00      	cmp	r3, #0
 800b294:	d1f5      	bne.n	800b282 <USBD_GetLen+0x12>
  }

  return len;
 800b296:	7bfb      	ldrb	r3, [r7, #15]
}
 800b298:	4618      	mov	r0, r3
 800b29a:	3714      	adds	r7, #20
 800b29c:	46bd      	mov	sp, r7
 800b29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a2:	4770      	bx	lr

0800b2a4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b2a4:	b580      	push	{r7, lr}
 800b2a6:	b084      	sub	sp, #16
 800b2a8:	af00      	add	r7, sp, #0
 800b2aa:	60f8      	str	r0, [r7, #12]
 800b2ac:	60b9      	str	r1, [r7, #8]
 800b2ae:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	2202      	movs	r2, #2
 800b2b4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	687a      	ldr	r2, [r7, #4]
 800b2bc:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	687a      	ldr	r2, [r7, #4]
 800b2c2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	68ba      	ldr	r2, [r7, #8]
 800b2c8:	2100      	movs	r1, #0
 800b2ca:	68f8      	ldr	r0, [r7, #12]
 800b2cc:	f000 fe25 	bl	800bf1a <USBD_LL_Transmit>

  return USBD_OK;
 800b2d0:	2300      	movs	r3, #0
}
 800b2d2:	4618      	mov	r0, r3
 800b2d4:	3710      	adds	r7, #16
 800b2d6:	46bd      	mov	sp, r7
 800b2d8:	bd80      	pop	{r7, pc}

0800b2da <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b2da:	b580      	push	{r7, lr}
 800b2dc:	b084      	sub	sp, #16
 800b2de:	af00      	add	r7, sp, #0
 800b2e0:	60f8      	str	r0, [r7, #12]
 800b2e2:	60b9      	str	r1, [r7, #8]
 800b2e4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	68ba      	ldr	r2, [r7, #8]
 800b2ea:	2100      	movs	r1, #0
 800b2ec:	68f8      	ldr	r0, [r7, #12]
 800b2ee:	f000 fe14 	bl	800bf1a <USBD_LL_Transmit>

  return USBD_OK;
 800b2f2:	2300      	movs	r3, #0
}
 800b2f4:	4618      	mov	r0, r3
 800b2f6:	3710      	adds	r7, #16
 800b2f8:	46bd      	mov	sp, r7
 800b2fa:	bd80      	pop	{r7, pc}

0800b2fc <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b2fc:	b580      	push	{r7, lr}
 800b2fe:	b084      	sub	sp, #16
 800b300:	af00      	add	r7, sp, #0
 800b302:	60f8      	str	r0, [r7, #12]
 800b304:	60b9      	str	r1, [r7, #8]
 800b306:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	2203      	movs	r2, #3
 800b30c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	687a      	ldr	r2, [r7, #4]
 800b314:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	687a      	ldr	r2, [r7, #4]
 800b31c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	68ba      	ldr	r2, [r7, #8]
 800b324:	2100      	movs	r1, #0
 800b326:	68f8      	ldr	r0, [r7, #12]
 800b328:	f000 fe18 	bl	800bf5c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b32c:	2300      	movs	r3, #0
}
 800b32e:	4618      	mov	r0, r3
 800b330:	3710      	adds	r7, #16
 800b332:	46bd      	mov	sp, r7
 800b334:	bd80      	pop	{r7, pc}

0800b336 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b336:	b580      	push	{r7, lr}
 800b338:	b084      	sub	sp, #16
 800b33a:	af00      	add	r7, sp, #0
 800b33c:	60f8      	str	r0, [r7, #12]
 800b33e:	60b9      	str	r1, [r7, #8]
 800b340:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	68ba      	ldr	r2, [r7, #8]
 800b346:	2100      	movs	r1, #0
 800b348:	68f8      	ldr	r0, [r7, #12]
 800b34a:	f000 fe07 	bl	800bf5c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b34e:	2300      	movs	r3, #0
}
 800b350:	4618      	mov	r0, r3
 800b352:	3710      	adds	r7, #16
 800b354:	46bd      	mov	sp, r7
 800b356:	bd80      	pop	{r7, pc}

0800b358 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b358:	b580      	push	{r7, lr}
 800b35a:	b082      	sub	sp, #8
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	2204      	movs	r2, #4
 800b364:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b368:	2300      	movs	r3, #0
 800b36a:	2200      	movs	r2, #0
 800b36c:	2100      	movs	r1, #0
 800b36e:	6878      	ldr	r0, [r7, #4]
 800b370:	f000 fdd3 	bl	800bf1a <USBD_LL_Transmit>

  return USBD_OK;
 800b374:	2300      	movs	r3, #0
}
 800b376:	4618      	mov	r0, r3
 800b378:	3708      	adds	r7, #8
 800b37a:	46bd      	mov	sp, r7
 800b37c:	bd80      	pop	{r7, pc}

0800b37e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b37e:	b580      	push	{r7, lr}
 800b380:	b082      	sub	sp, #8
 800b382:	af00      	add	r7, sp, #0
 800b384:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	2205      	movs	r2, #5
 800b38a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b38e:	2300      	movs	r3, #0
 800b390:	2200      	movs	r2, #0
 800b392:	2100      	movs	r1, #0
 800b394:	6878      	ldr	r0, [r7, #4]
 800b396:	f000 fde1 	bl	800bf5c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b39a:	2300      	movs	r3, #0
}
 800b39c:	4618      	mov	r0, r3
 800b39e:	3708      	adds	r7, #8
 800b3a0:	46bd      	mov	sp, r7
 800b3a2:	bd80      	pop	{r7, pc}

0800b3a4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b3a4:	b580      	push	{r7, lr}
 800b3a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b3a8:	2200      	movs	r2, #0
 800b3aa:	4912      	ldr	r1, [pc, #72]	; (800b3f4 <MX_USB_DEVICE_Init+0x50>)
 800b3ac:	4812      	ldr	r0, [pc, #72]	; (800b3f8 <MX_USB_DEVICE_Init+0x54>)
 800b3ae:	f7fe fcdd 	bl	8009d6c <USBD_Init>
 800b3b2:	4603      	mov	r3, r0
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d001      	beq.n	800b3bc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b3b8:	f7f5 ff76 	bl	80012a8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b3bc:	490f      	ldr	r1, [pc, #60]	; (800b3fc <MX_USB_DEVICE_Init+0x58>)
 800b3be:	480e      	ldr	r0, [pc, #56]	; (800b3f8 <MX_USB_DEVICE_Init+0x54>)
 800b3c0:	f7fe fd04 	bl	8009dcc <USBD_RegisterClass>
 800b3c4:	4603      	mov	r3, r0
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d001      	beq.n	800b3ce <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b3ca:	f7f5 ff6d 	bl	80012a8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b3ce:	490c      	ldr	r1, [pc, #48]	; (800b400 <MX_USB_DEVICE_Init+0x5c>)
 800b3d0:	4809      	ldr	r0, [pc, #36]	; (800b3f8 <MX_USB_DEVICE_Init+0x54>)
 800b3d2:	f7fe fbfb 	bl	8009bcc <USBD_CDC_RegisterInterface>
 800b3d6:	4603      	mov	r3, r0
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d001      	beq.n	800b3e0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b3dc:	f7f5 ff64 	bl	80012a8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b3e0:	4805      	ldr	r0, [pc, #20]	; (800b3f8 <MX_USB_DEVICE_Init+0x54>)
 800b3e2:	f7fe fd29 	bl	8009e38 <USBD_Start>
 800b3e6:	4603      	mov	r3, r0
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d001      	beq.n	800b3f0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b3ec:	f7f5 ff5c 	bl	80012a8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b3f0:	bf00      	nop
 800b3f2:	bd80      	pop	{r7, pc}
 800b3f4:	200000e0 	.word	0x200000e0
 800b3f8:	20000744 	.word	0x20000744
 800b3fc:	20000040 	.word	0x20000040
 800b400:	200000cc 	.word	0x200000cc

0800b404 <cdcAvailable>:
uint8_t  rx_buf[1024];



uint32_t cdcAvailable(void)
{
 800b404:	b480      	push	{r7}
 800b406:	b083      	sub	sp, #12
 800b408:	af00      	add	r7, sp, #0
  uint32_t ret;

  ret = (rx_in - rx_out) % rx_len;
 800b40a:	4b0a      	ldr	r3, [pc, #40]	; (800b434 <cdcAvailable+0x30>)
 800b40c:	681a      	ldr	r2, [r3, #0]
 800b40e:	4b0a      	ldr	r3, [pc, #40]	; (800b438 <cdcAvailable+0x34>)
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	1ad3      	subs	r3, r2, r3
 800b414:	4a09      	ldr	r2, [pc, #36]	; (800b43c <cdcAvailable+0x38>)
 800b416:	6812      	ldr	r2, [r2, #0]
 800b418:	fbb3 f1f2 	udiv	r1, r3, r2
 800b41c:	fb01 f202 	mul.w	r2, r1, r2
 800b420:	1a9b      	subs	r3, r3, r2
 800b422:	607b      	str	r3, [r7, #4]

  return ret;
 800b424:	687b      	ldr	r3, [r7, #4]
}
 800b426:	4618      	mov	r0, r3
 800b428:	370c      	adds	r7, #12
 800b42a:	46bd      	mov	sp, r7
 800b42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b430:	4770      	bx	lr
 800b432:	bf00      	nop
 800b434:	20000a20 	.word	0x20000a20
 800b438:	20000a24 	.word	0x20000a24
 800b43c:	200000c8 	.word	0x200000c8

0800b440 <cdcRead>:

uint8_t cdcRead(void)
{
 800b440:	b480      	push	{r7}
 800b442:	b083      	sub	sp, #12
 800b444:	af00      	add	r7, sp, #0
  uint8_t ret;

  ret = rx_buf[rx_out];
 800b446:	4b0f      	ldr	r3, [pc, #60]	; (800b484 <cdcRead+0x44>)
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	4a0f      	ldr	r2, [pc, #60]	; (800b488 <cdcRead+0x48>)
 800b44c:	5cd3      	ldrb	r3, [r2, r3]
 800b44e:	71fb      	strb	r3, [r7, #7]

  if(rx_out != rx_in)
 800b450:	4b0c      	ldr	r3, [pc, #48]	; (800b484 <cdcRead+0x44>)
 800b452:	681a      	ldr	r2, [r3, #0]
 800b454:	4b0d      	ldr	r3, [pc, #52]	; (800b48c <cdcRead+0x4c>)
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	429a      	cmp	r2, r3
 800b45a:	d00b      	beq.n	800b474 <cdcRead+0x34>
  {
    rx_out = (rx_out + 1) % rx_len;
 800b45c:	4b09      	ldr	r3, [pc, #36]	; (800b484 <cdcRead+0x44>)
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	3301      	adds	r3, #1
 800b462:	4a0b      	ldr	r2, [pc, #44]	; (800b490 <cdcRead+0x50>)
 800b464:	6812      	ldr	r2, [r2, #0]
 800b466:	fbb3 f1f2 	udiv	r1, r3, r2
 800b46a:	fb01 f202 	mul.w	r2, r1, r2
 800b46e:	1a9b      	subs	r3, r3, r2
 800b470:	4a04      	ldr	r2, [pc, #16]	; (800b484 <cdcRead+0x44>)
 800b472:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800b474:	79fb      	ldrb	r3, [r7, #7]
}
 800b476:	4618      	mov	r0, r3
 800b478:	370c      	adds	r7, #12
 800b47a:	46bd      	mov	sp, r7
 800b47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b480:	4770      	bx	lr
 800b482:	bf00      	nop
 800b484:	20000a24 	.word	0x20000a24
 800b488:	20000a28 	.word	0x20000a28
 800b48c:	20000a20 	.word	0x20000a20
 800b490:	200000c8 	.word	0x200000c8

0800b494 <cdcDataIn>:

void cdcDataIn(uint8_t rx_data)
{
 800b494:	b480      	push	{r7}
 800b496:	b085      	sub	sp, #20
 800b498:	af00      	add	r7, sp, #0
 800b49a:	4603      	mov	r3, r0
 800b49c:	71fb      	strb	r3, [r7, #7]
  uint32_t next_rx_in;

  rx_buf[rx_in] = rx_data;
 800b49e:	4b0f      	ldr	r3, [pc, #60]	; (800b4dc <cdcDataIn+0x48>)
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	490f      	ldr	r1, [pc, #60]	; (800b4e0 <cdcDataIn+0x4c>)
 800b4a4:	79fa      	ldrb	r2, [r7, #7]
 800b4a6:	54ca      	strb	r2, [r1, r3]

  next_rx_in = (rx_in + 1) % rx_len;
 800b4a8:	4b0c      	ldr	r3, [pc, #48]	; (800b4dc <cdcDataIn+0x48>)
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	3301      	adds	r3, #1
 800b4ae:	4a0d      	ldr	r2, [pc, #52]	; (800b4e4 <cdcDataIn+0x50>)
 800b4b0:	6812      	ldr	r2, [r2, #0]
 800b4b2:	fbb3 f1f2 	udiv	r1, r3, r2
 800b4b6:	fb01 f202 	mul.w	r2, r1, r2
 800b4ba:	1a9b      	subs	r3, r3, r2
 800b4bc:	60fb      	str	r3, [r7, #12]

  if(next_rx_in != rx_out)
 800b4be:	4b0a      	ldr	r3, [pc, #40]	; (800b4e8 <cdcDataIn+0x54>)
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	68fa      	ldr	r2, [r7, #12]
 800b4c4:	429a      	cmp	r2, r3
 800b4c6:	d002      	beq.n	800b4ce <cdcDataIn+0x3a>
  {
    rx_in = next_rx_in;
 800b4c8:	4a04      	ldr	r2, [pc, #16]	; (800b4dc <cdcDataIn+0x48>)
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	6013      	str	r3, [r2, #0]
  }
}
 800b4ce:	bf00      	nop
 800b4d0:	3714      	adds	r7, #20
 800b4d2:	46bd      	mov	sp, r7
 800b4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4d8:	4770      	bx	lr
 800b4da:	bf00      	nop
 800b4dc:	20000a20 	.word	0x20000a20
 800b4e0:	20000a28 	.word	0x20000a28
 800b4e4:	200000c8 	.word	0x200000c8
 800b4e8:	20000a24 	.word	0x20000a24

0800b4ec <cdcWrite>:

uint32_t cdcWrite(uint8_t *p_data, uint32_t length)
{
 800b4ec:	b580      	push	{r7, lr}
 800b4ee:	b084      	sub	sp, #16
 800b4f0:	af00      	add	r7, sp, #0
 800b4f2:	6078      	str	r0, [r7, #4]
 800b4f4:	6039      	str	r1, [r7, #0]
  uint32_t pre_time;
  uint8_t ret;

  pre_time = HAL_GetTick();
 800b4f6:	f7f7 fea9 	bl	800324c <HAL_GetTick>
 800b4fa:	60f8      	str	r0, [r7, #12]

  while(1)
  {
    ret = CDC_Transmit_FS(p_data, length);
 800b4fc:	683b      	ldr	r3, [r7, #0]
 800b4fe:	b29b      	uxth	r3, r3
 800b500:	4619      	mov	r1, r3
 800b502:	6878      	ldr	r0, [r7, #4]
 800b504:	f000 f916 	bl	800b734 <CDC_Transmit_FS>
 800b508:	4603      	mov	r3, r0
 800b50a:	72fb      	strb	r3, [r7, #11]

    if(ret == USBD_OK)
 800b50c:	7afb      	ldrb	r3, [r7, #11]
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d101      	bne.n	800b516 <cdcWrite+0x2a>
    {
      return length;
 800b512:	683b      	ldr	r3, [r7, #0]
 800b514:	e00e      	b.n	800b534 <cdcWrite+0x48>
    }
    else if(ret == USBD_FAIL)
 800b516:	7afb      	ldrb	r3, [r7, #11]
 800b518:	2b03      	cmp	r3, #3
 800b51a:	d101      	bne.n	800b520 <cdcWrite+0x34>
    {
      return 0;
 800b51c:	2300      	movs	r3, #0
 800b51e:	e009      	b.n	800b534 <cdcWrite+0x48>
    }

    if(HAL_GetTick() - pre_time >= 100)
 800b520:	f7f7 fe94 	bl	800324c <HAL_GetTick>
 800b524:	4602      	mov	r2, r0
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	1ad3      	subs	r3, r2, r3
 800b52a:	2b63      	cmp	r3, #99	; 0x63
 800b52c:	d800      	bhi.n	800b530 <cdcWrite+0x44>
    ret = CDC_Transmit_FS(p_data, length);
 800b52e:	e7e5      	b.n	800b4fc <cdcWrite+0x10>
    {
      break;
 800b530:	bf00      	nop
    }
  }

  return 0;
 800b532:	2300      	movs	r3, #0
}
 800b534:	4618      	mov	r0, r3
 800b536:	3710      	adds	r7, #16
 800b538:	46bd      	mov	sp, r7
 800b53a:	bd80      	pop	{r7, pc}

0800b53c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b53c:	b580      	push	{r7, lr}
 800b53e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b540:	2200      	movs	r2, #0
 800b542:	4905      	ldr	r1, [pc, #20]	; (800b558 <CDC_Init_FS+0x1c>)
 800b544:	4805      	ldr	r0, [pc, #20]	; (800b55c <CDC_Init_FS+0x20>)
 800b546:	f7fe fb5b 	bl	8009c00 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b54a:	4905      	ldr	r1, [pc, #20]	; (800b560 <CDC_Init_FS+0x24>)
 800b54c:	4803      	ldr	r0, [pc, #12]	; (800b55c <CDC_Init_FS+0x20>)
 800b54e:	f7fe fb79 	bl	8009c44 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b552:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b554:	4618      	mov	r0, r3
 800b556:	bd80      	pop	{r7, pc}
 800b558:	20001228 	.word	0x20001228
 800b55c:	20000744 	.word	0x20000744
 800b560:	20000e28 	.word	0x20000e28

0800b564 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b564:	b480      	push	{r7}
 800b566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b568:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b56a:	4618      	mov	r0, r3
 800b56c:	46bd      	mov	sp, r7
 800b56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b572:	4770      	bx	lr

0800b574 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b574:	b480      	push	{r7}
 800b576:	b083      	sub	sp, #12
 800b578:	af00      	add	r7, sp, #0
 800b57a:	4603      	mov	r3, r0
 800b57c:	6039      	str	r1, [r7, #0]
 800b57e:	71fb      	strb	r3, [r7, #7]
 800b580:	4613      	mov	r3, r2
 800b582:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b584:	79fb      	ldrb	r3, [r7, #7]
 800b586:	2b23      	cmp	r3, #35	; 0x23
 800b588:	f200 80a3 	bhi.w	800b6d2 <CDC_Control_FS+0x15e>
 800b58c:	a201      	add	r2, pc, #4	; (adr r2, 800b594 <CDC_Control_FS+0x20>)
 800b58e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b592:	bf00      	nop
 800b594:	0800b6d3 	.word	0x0800b6d3
 800b598:	0800b6d3 	.word	0x0800b6d3
 800b59c:	0800b6d3 	.word	0x0800b6d3
 800b5a0:	0800b6d3 	.word	0x0800b6d3
 800b5a4:	0800b6d3 	.word	0x0800b6d3
 800b5a8:	0800b6d3 	.word	0x0800b6d3
 800b5ac:	0800b6d3 	.word	0x0800b6d3
 800b5b0:	0800b6d3 	.word	0x0800b6d3
 800b5b4:	0800b6d3 	.word	0x0800b6d3
 800b5b8:	0800b6d3 	.word	0x0800b6d3
 800b5bc:	0800b6d3 	.word	0x0800b6d3
 800b5c0:	0800b6d3 	.word	0x0800b6d3
 800b5c4:	0800b6d3 	.word	0x0800b6d3
 800b5c8:	0800b6d3 	.word	0x0800b6d3
 800b5cc:	0800b6d3 	.word	0x0800b6d3
 800b5d0:	0800b6d3 	.word	0x0800b6d3
 800b5d4:	0800b6d3 	.word	0x0800b6d3
 800b5d8:	0800b6d3 	.word	0x0800b6d3
 800b5dc:	0800b6d3 	.word	0x0800b6d3
 800b5e0:	0800b6d3 	.word	0x0800b6d3
 800b5e4:	0800b6d3 	.word	0x0800b6d3
 800b5e8:	0800b6d3 	.word	0x0800b6d3
 800b5ec:	0800b6d3 	.word	0x0800b6d3
 800b5f0:	0800b6d3 	.word	0x0800b6d3
 800b5f4:	0800b6d3 	.word	0x0800b6d3
 800b5f8:	0800b6d3 	.word	0x0800b6d3
 800b5fc:	0800b6d3 	.word	0x0800b6d3
 800b600:	0800b6d3 	.word	0x0800b6d3
 800b604:	0800b6d3 	.word	0x0800b6d3
 800b608:	0800b6d3 	.word	0x0800b6d3
 800b60c:	0800b6d3 	.word	0x0800b6d3
 800b610:	0800b6d3 	.word	0x0800b6d3
 800b614:	0800b625 	.word	0x0800b625
 800b618:	0800b67f 	.word	0x0800b67f
 800b61c:	0800b6d3 	.word	0x0800b6d3
 800b620:	0800b6d3 	.word	0x0800b6d3
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
      LineCoding.bitrate    = (uint32_t)(pbuf[0]);
 800b624:	683b      	ldr	r3, [r7, #0]
 800b626:	781b      	ldrb	r3, [r3, #0]
 800b628:	461a      	mov	r2, r3
 800b62a:	4b2e      	ldr	r3, [pc, #184]	; (800b6e4 <CDC_Control_FS+0x170>)
 800b62c:	601a      	str	r2, [r3, #0]
      LineCoding.bitrate   |= (uint32_t)(pbuf[1] << 8);
 800b62e:	4b2d      	ldr	r3, [pc, #180]	; (800b6e4 <CDC_Control_FS+0x170>)
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	683a      	ldr	r2, [r7, #0]
 800b634:	3201      	adds	r2, #1
 800b636:	7812      	ldrb	r2, [r2, #0]
 800b638:	0212      	lsls	r2, r2, #8
 800b63a:	4313      	orrs	r3, r2
 800b63c:	4a29      	ldr	r2, [pc, #164]	; (800b6e4 <CDC_Control_FS+0x170>)
 800b63e:	6013      	str	r3, [r2, #0]
      LineCoding.bitrate   |= (uint32_t)(pbuf[2] << 16);
 800b640:	4b28      	ldr	r3, [pc, #160]	; (800b6e4 <CDC_Control_FS+0x170>)
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	683a      	ldr	r2, [r7, #0]
 800b646:	3202      	adds	r2, #2
 800b648:	7812      	ldrb	r2, [r2, #0]
 800b64a:	0412      	lsls	r2, r2, #16
 800b64c:	4313      	orrs	r3, r2
 800b64e:	4a25      	ldr	r2, [pc, #148]	; (800b6e4 <CDC_Control_FS+0x170>)
 800b650:	6013      	str	r3, [r2, #0]
      LineCoding.bitrate   |= (uint32_t)(pbuf[3] << 24);
 800b652:	4b24      	ldr	r3, [pc, #144]	; (800b6e4 <CDC_Control_FS+0x170>)
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	683a      	ldr	r2, [r7, #0]
 800b658:	3203      	adds	r2, #3
 800b65a:	7812      	ldrb	r2, [r2, #0]
 800b65c:	0612      	lsls	r2, r2, #24
 800b65e:	4313      	orrs	r3, r2
 800b660:	4a20      	ldr	r2, [pc, #128]	; (800b6e4 <CDC_Control_FS+0x170>)
 800b662:	6013      	str	r3, [r2, #0]
      LineCoding.format     = pbuf[4];
 800b664:	683b      	ldr	r3, [r7, #0]
 800b666:	791a      	ldrb	r2, [r3, #4]
 800b668:	4b1e      	ldr	r3, [pc, #120]	; (800b6e4 <CDC_Control_FS+0x170>)
 800b66a:	711a      	strb	r2, [r3, #4]
      LineCoding.paritytype = pbuf[5];
 800b66c:	683b      	ldr	r3, [r7, #0]
 800b66e:	795a      	ldrb	r2, [r3, #5]
 800b670:	4b1c      	ldr	r3, [pc, #112]	; (800b6e4 <CDC_Control_FS+0x170>)
 800b672:	715a      	strb	r2, [r3, #5]
      LineCoding.datatype   = pbuf[6];
 800b674:	683b      	ldr	r3, [r7, #0]
 800b676:	799a      	ldrb	r2, [r3, #6]
 800b678:	4b1a      	ldr	r3, [pc, #104]	; (800b6e4 <CDC_Control_FS+0x170>)
 800b67a:	719a      	strb	r2, [r3, #6]
    break;
 800b67c:	e02a      	b.n	800b6d4 <CDC_Control_FS+0x160>

    case CDC_GET_LINE_CODING:
      pbuf[0] = (uint8_t)(LineCoding.bitrate);
 800b67e:	4b19      	ldr	r3, [pc, #100]	; (800b6e4 <CDC_Control_FS+0x170>)
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	b2da      	uxtb	r2, r3
 800b684:	683b      	ldr	r3, [r7, #0]
 800b686:	701a      	strb	r2, [r3, #0]
      pbuf[1] = (uint8_t)(LineCoding.bitrate >> 8);
 800b688:	4b16      	ldr	r3, [pc, #88]	; (800b6e4 <CDC_Control_FS+0x170>)
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	0a1a      	lsrs	r2, r3, #8
 800b68e:	683b      	ldr	r3, [r7, #0]
 800b690:	3301      	adds	r3, #1
 800b692:	b2d2      	uxtb	r2, r2
 800b694:	701a      	strb	r2, [r3, #0]
      pbuf[2] = (uint8_t)(LineCoding.bitrate >> 16);
 800b696:	4b13      	ldr	r3, [pc, #76]	; (800b6e4 <CDC_Control_FS+0x170>)
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	0c1a      	lsrs	r2, r3, #16
 800b69c:	683b      	ldr	r3, [r7, #0]
 800b69e:	3302      	adds	r3, #2
 800b6a0:	b2d2      	uxtb	r2, r2
 800b6a2:	701a      	strb	r2, [r3, #0]
      pbuf[3] = (uint8_t)(LineCoding.bitrate >> 24);
 800b6a4:	4b0f      	ldr	r3, [pc, #60]	; (800b6e4 <CDC_Control_FS+0x170>)
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	0e1a      	lsrs	r2, r3, #24
 800b6aa:	683b      	ldr	r3, [r7, #0]
 800b6ac:	3303      	adds	r3, #3
 800b6ae:	b2d2      	uxtb	r2, r2
 800b6b0:	701a      	strb	r2, [r3, #0]
      pbuf[4] = LineCoding.format;
 800b6b2:	683b      	ldr	r3, [r7, #0]
 800b6b4:	3304      	adds	r3, #4
 800b6b6:	4a0b      	ldr	r2, [pc, #44]	; (800b6e4 <CDC_Control_FS+0x170>)
 800b6b8:	7912      	ldrb	r2, [r2, #4]
 800b6ba:	701a      	strb	r2, [r3, #0]
      pbuf[5] = LineCoding.paritytype;
 800b6bc:	683b      	ldr	r3, [r7, #0]
 800b6be:	3305      	adds	r3, #5
 800b6c0:	4a08      	ldr	r2, [pc, #32]	; (800b6e4 <CDC_Control_FS+0x170>)
 800b6c2:	7952      	ldrb	r2, [r2, #5]
 800b6c4:	701a      	strb	r2, [r3, #0]
      pbuf[6] = LineCoding.datatype;
 800b6c6:	683b      	ldr	r3, [r7, #0]
 800b6c8:	3306      	adds	r3, #6
 800b6ca:	4a06      	ldr	r2, [pc, #24]	; (800b6e4 <CDC_Control_FS+0x170>)
 800b6cc:	7992      	ldrb	r2, [r2, #6]
 800b6ce:	701a      	strb	r2, [r3, #0]
    break;
 800b6d0:	e000      	b.n	800b6d4 <CDC_Control_FS+0x160>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b6d2:	bf00      	nop
  }

  return (USBD_OK);
 800b6d4:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b6d6:	4618      	mov	r0, r3
 800b6d8:	370c      	adds	r7, #12
 800b6da:	46bd      	mov	sp, r7
 800b6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e0:	4770      	bx	lr
 800b6e2:	bf00      	nop
 800b6e4:	200000c0 	.word	0x200000c0

0800b6e8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b6e8:	b580      	push	{r7, lr}
 800b6ea:	b084      	sub	sp, #16
 800b6ec:	af00      	add	r7, sp, #0
 800b6ee:	6078      	str	r0, [r7, #4]
 800b6f0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b6f2:	6879      	ldr	r1, [r7, #4]
 800b6f4:	480e      	ldr	r0, [pc, #56]	; (800b730 <CDC_Receive_FS+0x48>)
 800b6f6:	f7fe faa5 	bl	8009c44 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b6fa:	480d      	ldr	r0, [pc, #52]	; (800b730 <CDC_Receive_FS+0x48>)
 800b6fc:	f7fe fb00 	bl	8009d00 <USBD_CDC_ReceivePacket>


  for(int i=0; i<*Len; i++)
 800b700:	2300      	movs	r3, #0
 800b702:	60fb      	str	r3, [r7, #12]
 800b704:	e009      	b.n	800b71a <CDC_Receive_FS+0x32>
  {
    cdcDataIn(Buf[i]);
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	687a      	ldr	r2, [r7, #4]
 800b70a:	4413      	add	r3, r2
 800b70c:	781b      	ldrb	r3, [r3, #0]
 800b70e:	4618      	mov	r0, r3
 800b710:	f7ff fec0 	bl	800b494 <cdcDataIn>
  for(int i=0; i<*Len; i++)
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	3301      	adds	r3, #1
 800b718:	60fb      	str	r3, [r7, #12]
 800b71a:	683b      	ldr	r3, [r7, #0]
 800b71c:	681a      	ldr	r2, [r3, #0]
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	429a      	cmp	r2, r3
 800b722:	d8f0      	bhi.n	800b706 <CDC_Receive_FS+0x1e>
  }



  return (USBD_OK);
 800b724:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b726:	4618      	mov	r0, r3
 800b728:	3710      	adds	r7, #16
 800b72a:	46bd      	mov	sp, r7
 800b72c:	bd80      	pop	{r7, pc}
 800b72e:	bf00      	nop
 800b730:	20000744 	.word	0x20000744

0800b734 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800b734:	b580      	push	{r7, lr}
 800b736:	b084      	sub	sp, #16
 800b738:	af00      	add	r7, sp, #0
 800b73a:	6078      	str	r0, [r7, #4]
 800b73c:	460b      	mov	r3, r1
 800b73e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800b740:	2300      	movs	r3, #0
 800b742:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800b744:	4b0d      	ldr	r3, [pc, #52]	; (800b77c <CDC_Transmit_FS+0x48>)
 800b746:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b74a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800b74c:	68bb      	ldr	r3, [r7, #8]
 800b74e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b752:	2b00      	cmp	r3, #0
 800b754:	d001      	beq.n	800b75a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800b756:	2301      	movs	r3, #1
 800b758:	e00b      	b.n	800b772 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800b75a:	887b      	ldrh	r3, [r7, #2]
 800b75c:	461a      	mov	r2, r3
 800b75e:	6879      	ldr	r1, [r7, #4]
 800b760:	4806      	ldr	r0, [pc, #24]	; (800b77c <CDC_Transmit_FS+0x48>)
 800b762:	f7fe fa4d 	bl	8009c00 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b766:	4805      	ldr	r0, [pc, #20]	; (800b77c <CDC_Transmit_FS+0x48>)
 800b768:	f7fe fa8a 	bl	8009c80 <USBD_CDC_TransmitPacket>
 800b76c:	4603      	mov	r3, r0
 800b76e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800b770:	7bfb      	ldrb	r3, [r7, #15]
}
 800b772:	4618      	mov	r0, r3
 800b774:	3710      	adds	r7, #16
 800b776:	46bd      	mov	sp, r7
 800b778:	bd80      	pop	{r7, pc}
 800b77a:	bf00      	nop
 800b77c:	20000744 	.word	0x20000744

0800b780 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800b780:	b480      	push	{r7}
 800b782:	b087      	sub	sp, #28
 800b784:	af00      	add	r7, sp, #0
 800b786:	60f8      	str	r0, [r7, #12]
 800b788:	60b9      	str	r1, [r7, #8]
 800b78a:	4613      	mov	r3, r2
 800b78c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800b78e:	2300      	movs	r3, #0
 800b790:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800b792:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b796:	4618      	mov	r0, r3
 800b798:	371c      	adds	r7, #28
 800b79a:	46bd      	mov	sp, r7
 800b79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a0:	4770      	bx	lr
	...

0800b7a4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b7a4:	b480      	push	{r7}
 800b7a6:	b083      	sub	sp, #12
 800b7a8:	af00      	add	r7, sp, #0
 800b7aa:	4603      	mov	r3, r0
 800b7ac:	6039      	str	r1, [r7, #0]
 800b7ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b7b0:	683b      	ldr	r3, [r7, #0]
 800b7b2:	2212      	movs	r2, #18
 800b7b4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b7b6:	4b03      	ldr	r3, [pc, #12]	; (800b7c4 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b7b8:	4618      	mov	r0, r3
 800b7ba:	370c      	adds	r7, #12
 800b7bc:	46bd      	mov	sp, r7
 800b7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c2:	4770      	bx	lr
 800b7c4:	20000100 	.word	0x20000100

0800b7c8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b7c8:	b480      	push	{r7}
 800b7ca:	b083      	sub	sp, #12
 800b7cc:	af00      	add	r7, sp, #0
 800b7ce:	4603      	mov	r3, r0
 800b7d0:	6039      	str	r1, [r7, #0]
 800b7d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b7d4:	683b      	ldr	r3, [r7, #0]
 800b7d6:	2204      	movs	r2, #4
 800b7d8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b7da:	4b03      	ldr	r3, [pc, #12]	; (800b7e8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b7dc:	4618      	mov	r0, r3
 800b7de:	370c      	adds	r7, #12
 800b7e0:	46bd      	mov	sp, r7
 800b7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e6:	4770      	bx	lr
 800b7e8:	20000120 	.word	0x20000120

0800b7ec <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b7ec:	b580      	push	{r7, lr}
 800b7ee:	b082      	sub	sp, #8
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	4603      	mov	r3, r0
 800b7f4:	6039      	str	r1, [r7, #0]
 800b7f6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b7f8:	79fb      	ldrb	r3, [r7, #7]
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d105      	bne.n	800b80a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b7fe:	683a      	ldr	r2, [r7, #0]
 800b800:	4907      	ldr	r1, [pc, #28]	; (800b820 <USBD_FS_ProductStrDescriptor+0x34>)
 800b802:	4808      	ldr	r0, [pc, #32]	; (800b824 <USBD_FS_ProductStrDescriptor+0x38>)
 800b804:	f7ff fcee 	bl	800b1e4 <USBD_GetString>
 800b808:	e004      	b.n	800b814 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b80a:	683a      	ldr	r2, [r7, #0]
 800b80c:	4904      	ldr	r1, [pc, #16]	; (800b820 <USBD_FS_ProductStrDescriptor+0x34>)
 800b80e:	4805      	ldr	r0, [pc, #20]	; (800b824 <USBD_FS_ProductStrDescriptor+0x38>)
 800b810:	f7ff fce8 	bl	800b1e4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b814:	4b02      	ldr	r3, [pc, #8]	; (800b820 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b816:	4618      	mov	r0, r3
 800b818:	3708      	adds	r7, #8
 800b81a:	46bd      	mov	sp, r7
 800b81c:	bd80      	pop	{r7, pc}
 800b81e:	bf00      	nop
 800b820:	20001628 	.word	0x20001628
 800b824:	0800f808 	.word	0x0800f808

0800b828 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b828:	b580      	push	{r7, lr}
 800b82a:	b082      	sub	sp, #8
 800b82c:	af00      	add	r7, sp, #0
 800b82e:	4603      	mov	r3, r0
 800b830:	6039      	str	r1, [r7, #0]
 800b832:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b834:	683a      	ldr	r2, [r7, #0]
 800b836:	4904      	ldr	r1, [pc, #16]	; (800b848 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b838:	4804      	ldr	r0, [pc, #16]	; (800b84c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b83a:	f7ff fcd3 	bl	800b1e4 <USBD_GetString>
  return USBD_StrDesc;
 800b83e:	4b02      	ldr	r3, [pc, #8]	; (800b848 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b840:	4618      	mov	r0, r3
 800b842:	3708      	adds	r7, #8
 800b844:	46bd      	mov	sp, r7
 800b846:	bd80      	pop	{r7, pc}
 800b848:	20001628 	.word	0x20001628
 800b84c:	0800f820 	.word	0x0800f820

0800b850 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b850:	b580      	push	{r7, lr}
 800b852:	b082      	sub	sp, #8
 800b854:	af00      	add	r7, sp, #0
 800b856:	4603      	mov	r3, r0
 800b858:	6039      	str	r1, [r7, #0]
 800b85a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b85c:	683b      	ldr	r3, [r7, #0]
 800b85e:	221a      	movs	r2, #26
 800b860:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b862:	f000 f855 	bl	800b910 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b866:	4b02      	ldr	r3, [pc, #8]	; (800b870 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b868:	4618      	mov	r0, r3
 800b86a:	3708      	adds	r7, #8
 800b86c:	46bd      	mov	sp, r7
 800b86e:	bd80      	pop	{r7, pc}
 800b870:	20000124 	.word	0x20000124

0800b874 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b874:	b580      	push	{r7, lr}
 800b876:	b082      	sub	sp, #8
 800b878:	af00      	add	r7, sp, #0
 800b87a:	4603      	mov	r3, r0
 800b87c:	6039      	str	r1, [r7, #0]
 800b87e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b880:	79fb      	ldrb	r3, [r7, #7]
 800b882:	2b00      	cmp	r3, #0
 800b884:	d105      	bne.n	800b892 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b886:	683a      	ldr	r2, [r7, #0]
 800b888:	4907      	ldr	r1, [pc, #28]	; (800b8a8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b88a:	4808      	ldr	r0, [pc, #32]	; (800b8ac <USBD_FS_ConfigStrDescriptor+0x38>)
 800b88c:	f7ff fcaa 	bl	800b1e4 <USBD_GetString>
 800b890:	e004      	b.n	800b89c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b892:	683a      	ldr	r2, [r7, #0]
 800b894:	4904      	ldr	r1, [pc, #16]	; (800b8a8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b896:	4805      	ldr	r0, [pc, #20]	; (800b8ac <USBD_FS_ConfigStrDescriptor+0x38>)
 800b898:	f7ff fca4 	bl	800b1e4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b89c:	4b02      	ldr	r3, [pc, #8]	; (800b8a8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b89e:	4618      	mov	r0, r3
 800b8a0:	3708      	adds	r7, #8
 800b8a2:	46bd      	mov	sp, r7
 800b8a4:	bd80      	pop	{r7, pc}
 800b8a6:	bf00      	nop
 800b8a8:	20001628 	.word	0x20001628
 800b8ac:	0800f834 	.word	0x0800f834

0800b8b0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b8b0:	b580      	push	{r7, lr}
 800b8b2:	b082      	sub	sp, #8
 800b8b4:	af00      	add	r7, sp, #0
 800b8b6:	4603      	mov	r3, r0
 800b8b8:	6039      	str	r1, [r7, #0]
 800b8ba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b8bc:	79fb      	ldrb	r3, [r7, #7]
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d105      	bne.n	800b8ce <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b8c2:	683a      	ldr	r2, [r7, #0]
 800b8c4:	4907      	ldr	r1, [pc, #28]	; (800b8e4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b8c6:	4808      	ldr	r0, [pc, #32]	; (800b8e8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b8c8:	f7ff fc8c 	bl	800b1e4 <USBD_GetString>
 800b8cc:	e004      	b.n	800b8d8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b8ce:	683a      	ldr	r2, [r7, #0]
 800b8d0:	4904      	ldr	r1, [pc, #16]	; (800b8e4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b8d2:	4805      	ldr	r0, [pc, #20]	; (800b8e8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b8d4:	f7ff fc86 	bl	800b1e4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b8d8:	4b02      	ldr	r3, [pc, #8]	; (800b8e4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b8da:	4618      	mov	r0, r3
 800b8dc:	3708      	adds	r7, #8
 800b8de:	46bd      	mov	sp, r7
 800b8e0:	bd80      	pop	{r7, pc}
 800b8e2:	bf00      	nop
 800b8e4:	20001628 	.word	0x20001628
 800b8e8:	0800f840 	.word	0x0800f840

0800b8ec <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b8ec:	b480      	push	{r7}
 800b8ee:	b083      	sub	sp, #12
 800b8f0:	af00      	add	r7, sp, #0
 800b8f2:	4603      	mov	r3, r0
 800b8f4:	6039      	str	r1, [r7, #0]
 800b8f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800b8f8:	683b      	ldr	r3, [r7, #0]
 800b8fa:	220c      	movs	r2, #12
 800b8fc:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800b8fe:	4b03      	ldr	r3, [pc, #12]	; (800b90c <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800b900:	4618      	mov	r0, r3
 800b902:	370c      	adds	r7, #12
 800b904:	46bd      	mov	sp, r7
 800b906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b90a:	4770      	bx	lr
 800b90c:	20000114 	.word	0x20000114

0800b910 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b910:	b580      	push	{r7, lr}
 800b912:	b084      	sub	sp, #16
 800b914:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b916:	4b0f      	ldr	r3, [pc, #60]	; (800b954 <Get_SerialNum+0x44>)
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b91c:	4b0e      	ldr	r3, [pc, #56]	; (800b958 <Get_SerialNum+0x48>)
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b922:	4b0e      	ldr	r3, [pc, #56]	; (800b95c <Get_SerialNum+0x4c>)
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b928:	68fa      	ldr	r2, [r7, #12]
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	4413      	add	r3, r2
 800b92e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	2b00      	cmp	r3, #0
 800b934:	d009      	beq.n	800b94a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b936:	2208      	movs	r2, #8
 800b938:	4909      	ldr	r1, [pc, #36]	; (800b960 <Get_SerialNum+0x50>)
 800b93a:	68f8      	ldr	r0, [r7, #12]
 800b93c:	f000 f814 	bl	800b968 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b940:	2204      	movs	r2, #4
 800b942:	4908      	ldr	r1, [pc, #32]	; (800b964 <Get_SerialNum+0x54>)
 800b944:	68b8      	ldr	r0, [r7, #8]
 800b946:	f000 f80f 	bl	800b968 <IntToUnicode>
  }
}
 800b94a:	bf00      	nop
 800b94c:	3710      	adds	r7, #16
 800b94e:	46bd      	mov	sp, r7
 800b950:	bd80      	pop	{r7, pc}
 800b952:	bf00      	nop
 800b954:	1ff0f420 	.word	0x1ff0f420
 800b958:	1ff0f424 	.word	0x1ff0f424
 800b95c:	1ff0f428 	.word	0x1ff0f428
 800b960:	20000126 	.word	0x20000126
 800b964:	20000136 	.word	0x20000136

0800b968 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b968:	b480      	push	{r7}
 800b96a:	b087      	sub	sp, #28
 800b96c:	af00      	add	r7, sp, #0
 800b96e:	60f8      	str	r0, [r7, #12]
 800b970:	60b9      	str	r1, [r7, #8]
 800b972:	4613      	mov	r3, r2
 800b974:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b976:	2300      	movs	r3, #0
 800b978:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b97a:	2300      	movs	r3, #0
 800b97c:	75fb      	strb	r3, [r7, #23]
 800b97e:	e027      	b.n	800b9d0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	0f1b      	lsrs	r3, r3, #28
 800b984:	2b09      	cmp	r3, #9
 800b986:	d80b      	bhi.n	800b9a0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	0f1b      	lsrs	r3, r3, #28
 800b98c:	b2da      	uxtb	r2, r3
 800b98e:	7dfb      	ldrb	r3, [r7, #23]
 800b990:	005b      	lsls	r3, r3, #1
 800b992:	4619      	mov	r1, r3
 800b994:	68bb      	ldr	r3, [r7, #8]
 800b996:	440b      	add	r3, r1
 800b998:	3230      	adds	r2, #48	; 0x30
 800b99a:	b2d2      	uxtb	r2, r2
 800b99c:	701a      	strb	r2, [r3, #0]
 800b99e:	e00a      	b.n	800b9b6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	0f1b      	lsrs	r3, r3, #28
 800b9a4:	b2da      	uxtb	r2, r3
 800b9a6:	7dfb      	ldrb	r3, [r7, #23]
 800b9a8:	005b      	lsls	r3, r3, #1
 800b9aa:	4619      	mov	r1, r3
 800b9ac:	68bb      	ldr	r3, [r7, #8]
 800b9ae:	440b      	add	r3, r1
 800b9b0:	3237      	adds	r2, #55	; 0x37
 800b9b2:	b2d2      	uxtb	r2, r2
 800b9b4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	011b      	lsls	r3, r3, #4
 800b9ba:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b9bc:	7dfb      	ldrb	r3, [r7, #23]
 800b9be:	005b      	lsls	r3, r3, #1
 800b9c0:	3301      	adds	r3, #1
 800b9c2:	68ba      	ldr	r2, [r7, #8]
 800b9c4:	4413      	add	r3, r2
 800b9c6:	2200      	movs	r2, #0
 800b9c8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b9ca:	7dfb      	ldrb	r3, [r7, #23]
 800b9cc:	3301      	adds	r3, #1
 800b9ce:	75fb      	strb	r3, [r7, #23]
 800b9d0:	7dfa      	ldrb	r2, [r7, #23]
 800b9d2:	79fb      	ldrb	r3, [r7, #7]
 800b9d4:	429a      	cmp	r2, r3
 800b9d6:	d3d3      	bcc.n	800b980 <IntToUnicode+0x18>
  }
}
 800b9d8:	bf00      	nop
 800b9da:	bf00      	nop
 800b9dc:	371c      	adds	r7, #28
 800b9de:	46bd      	mov	sp, r7
 800b9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e4:	4770      	bx	lr
	...

0800b9e8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b9e8:	b580      	push	{r7, lr}
 800b9ea:	b0ac      	sub	sp, #176	; 0xb0
 800b9ec:	af00      	add	r7, sp, #0
 800b9ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b9f0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800b9f4:	2200      	movs	r2, #0
 800b9f6:	601a      	str	r2, [r3, #0]
 800b9f8:	605a      	str	r2, [r3, #4]
 800b9fa:	609a      	str	r2, [r3, #8]
 800b9fc:	60da      	str	r2, [r3, #12]
 800b9fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800ba00:	f107 0318 	add.w	r3, r7, #24
 800ba04:	2284      	movs	r2, #132	; 0x84
 800ba06:	2100      	movs	r1, #0
 800ba08:	4618      	mov	r0, r3
 800ba0a:	f000 fba1 	bl	800c150 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ba16:	d151      	bne.n	800babc <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800ba18:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800ba1c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800ba1e:	2300      	movs	r3, #0
 800ba20:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800ba24:	f107 0318 	add.w	r3, r7, #24
 800ba28:	4618      	mov	r0, r3
 800ba2a:	f7fb fc93 	bl	8007354 <HAL_RCCEx_PeriphCLKConfig>
 800ba2e:	4603      	mov	r3, r0
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d001      	beq.n	800ba38 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800ba34:	f7f5 fc38 	bl	80012a8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ba38:	4b22      	ldr	r3, [pc, #136]	; (800bac4 <HAL_PCD_MspInit+0xdc>)
 800ba3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba3c:	4a21      	ldr	r2, [pc, #132]	; (800bac4 <HAL_PCD_MspInit+0xdc>)
 800ba3e:	f043 0301 	orr.w	r3, r3, #1
 800ba42:	6313      	str	r3, [r2, #48]	; 0x30
 800ba44:	4b1f      	ldr	r3, [pc, #124]	; (800bac4 <HAL_PCD_MspInit+0xdc>)
 800ba46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba48:	f003 0301 	and.w	r3, r3, #1
 800ba4c:	617b      	str	r3, [r7, #20]
 800ba4e:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 800ba50:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800ba54:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ba58:	2302      	movs	r3, #2
 800ba5a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ba5e:	2300      	movs	r3, #0
 800ba60:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ba64:	2303      	movs	r3, #3
 800ba66:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ba6a:	230a      	movs	r3, #10
 800ba6c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ba70:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800ba74:	4619      	mov	r1, r3
 800ba76:	4814      	ldr	r0, [pc, #80]	; (800bac8 <HAL_PCD_MspInit+0xe0>)
 800ba78:	f7f7 fdd6 	bl	8003628 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ba7c:	4b11      	ldr	r3, [pc, #68]	; (800bac4 <HAL_PCD_MspInit+0xdc>)
 800ba7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba80:	4a10      	ldr	r2, [pc, #64]	; (800bac4 <HAL_PCD_MspInit+0xdc>)
 800ba82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ba86:	6353      	str	r3, [r2, #52]	; 0x34
 800ba88:	4b0e      	ldr	r3, [pc, #56]	; (800bac4 <HAL_PCD_MspInit+0xdc>)
 800ba8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ba90:	613b      	str	r3, [r7, #16]
 800ba92:	693b      	ldr	r3, [r7, #16]
 800ba94:	4b0b      	ldr	r3, [pc, #44]	; (800bac4 <HAL_PCD_MspInit+0xdc>)
 800ba96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba98:	4a0a      	ldr	r2, [pc, #40]	; (800bac4 <HAL_PCD_MspInit+0xdc>)
 800ba9a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ba9e:	6453      	str	r3, [r2, #68]	; 0x44
 800baa0:	4b08      	ldr	r3, [pc, #32]	; (800bac4 <HAL_PCD_MspInit+0xdc>)
 800baa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800baa4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800baa8:	60fb      	str	r3, [r7, #12]
 800baaa:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800baac:	2200      	movs	r2, #0
 800baae:	2100      	movs	r1, #0
 800bab0:	2043      	movs	r0, #67	; 0x43
 800bab2:	f7f7 fcd6 	bl	8003462 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800bab6:	2043      	movs	r0, #67	; 0x43
 800bab8:	f7f7 fcef 	bl	800349a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800babc:	bf00      	nop
 800babe:	37b0      	adds	r7, #176	; 0xb0
 800bac0:	46bd      	mov	sp, r7
 800bac2:	bd80      	pop	{r7, pc}
 800bac4:	40023800 	.word	0x40023800
 800bac8:	40020000 	.word	0x40020000

0800bacc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bacc:	b580      	push	{r7, lr}
 800bace:	b082      	sub	sp, #8
 800bad0:	af00      	add	r7, sp, #0
 800bad2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800bae0:	4619      	mov	r1, r3
 800bae2:	4610      	mov	r0, r2
 800bae4:	f7fe f9f5 	bl	8009ed2 <USBD_LL_SetupStage>
}
 800bae8:	bf00      	nop
 800baea:	3708      	adds	r7, #8
 800baec:	46bd      	mov	sp, r7
 800baee:	bd80      	pop	{r7, pc}

0800baf0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800baf0:	b580      	push	{r7, lr}
 800baf2:	b082      	sub	sp, #8
 800baf4:	af00      	add	r7, sp, #0
 800baf6:	6078      	str	r0, [r7, #4]
 800baf8:	460b      	mov	r3, r1
 800bafa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 800bb02:	78fa      	ldrb	r2, [r7, #3]
 800bb04:	6879      	ldr	r1, [r7, #4]
 800bb06:	4613      	mov	r3, r2
 800bb08:	00db      	lsls	r3, r3, #3
 800bb0a:	4413      	add	r3, r2
 800bb0c:	009b      	lsls	r3, r3, #2
 800bb0e:	440b      	add	r3, r1
 800bb10:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800bb14:	681a      	ldr	r2, [r3, #0]
 800bb16:	78fb      	ldrb	r3, [r7, #3]
 800bb18:	4619      	mov	r1, r3
 800bb1a:	f7fe fa2f 	bl	8009f7c <USBD_LL_DataOutStage>
}
 800bb1e:	bf00      	nop
 800bb20:	3708      	adds	r7, #8
 800bb22:	46bd      	mov	sp, r7
 800bb24:	bd80      	pop	{r7, pc}

0800bb26 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb26:	b580      	push	{r7, lr}
 800bb28:	b082      	sub	sp, #8
 800bb2a:	af00      	add	r7, sp, #0
 800bb2c:	6078      	str	r0, [r7, #4]
 800bb2e:	460b      	mov	r3, r1
 800bb30:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 800bb38:	78fa      	ldrb	r2, [r7, #3]
 800bb3a:	6879      	ldr	r1, [r7, #4]
 800bb3c:	4613      	mov	r3, r2
 800bb3e:	00db      	lsls	r3, r3, #3
 800bb40:	4413      	add	r3, r2
 800bb42:	009b      	lsls	r3, r3, #2
 800bb44:	440b      	add	r3, r1
 800bb46:	334c      	adds	r3, #76	; 0x4c
 800bb48:	681a      	ldr	r2, [r3, #0]
 800bb4a:	78fb      	ldrb	r3, [r7, #3]
 800bb4c:	4619      	mov	r1, r3
 800bb4e:	f7fe fac8 	bl	800a0e2 <USBD_LL_DataInStage>
}
 800bb52:	bf00      	nop
 800bb54:	3708      	adds	r7, #8
 800bb56:	46bd      	mov	sp, r7
 800bb58:	bd80      	pop	{r7, pc}

0800bb5a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb5a:	b580      	push	{r7, lr}
 800bb5c:	b082      	sub	sp, #8
 800bb5e:	af00      	add	r7, sp, #0
 800bb60:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800bb68:	4618      	mov	r0, r3
 800bb6a:	f7fe fbfc 	bl	800a366 <USBD_LL_SOF>
}
 800bb6e:	bf00      	nop
 800bb70:	3708      	adds	r7, #8
 800bb72:	46bd      	mov	sp, r7
 800bb74:	bd80      	pop	{r7, pc}

0800bb76 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb76:	b580      	push	{r7, lr}
 800bb78:	b084      	sub	sp, #16
 800bb7a:	af00      	add	r7, sp, #0
 800bb7c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800bb7e:	2301      	movs	r3, #1
 800bb80:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	68db      	ldr	r3, [r3, #12]
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d102      	bne.n	800bb90 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800bb8a:	2300      	movs	r3, #0
 800bb8c:	73fb      	strb	r3, [r7, #15]
 800bb8e:	e008      	b.n	800bba2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	68db      	ldr	r3, [r3, #12]
 800bb94:	2b02      	cmp	r3, #2
 800bb96:	d102      	bne.n	800bb9e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800bb98:	2301      	movs	r3, #1
 800bb9a:	73fb      	strb	r3, [r7, #15]
 800bb9c:	e001      	b.n	800bba2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800bb9e:	f7f5 fb83 	bl	80012a8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800bba8:	7bfa      	ldrb	r2, [r7, #15]
 800bbaa:	4611      	mov	r1, r2
 800bbac:	4618      	mov	r0, r3
 800bbae:	f7fe fb9c 	bl	800a2ea <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800bbb8:	4618      	mov	r0, r3
 800bbba:	f7fe fb44 	bl	800a246 <USBD_LL_Reset>
}
 800bbbe:	bf00      	nop
 800bbc0:	3710      	adds	r7, #16
 800bbc2:	46bd      	mov	sp, r7
 800bbc4:	bd80      	pop	{r7, pc}
	...

0800bbc8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bbc8:	b580      	push	{r7, lr}
 800bbca:	b082      	sub	sp, #8
 800bbcc:	af00      	add	r7, sp, #0
 800bbce:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800bbd6:	4618      	mov	r0, r3
 800bbd8:	f7fe fb97 	bl	800a30a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	687a      	ldr	r2, [r7, #4]
 800bbe8:	6812      	ldr	r2, [r2, #0]
 800bbea:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800bbee:	f043 0301 	orr.w	r3, r3, #1
 800bbf2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	6a1b      	ldr	r3, [r3, #32]
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d005      	beq.n	800bc08 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bbfc:	4b04      	ldr	r3, [pc, #16]	; (800bc10 <HAL_PCD_SuspendCallback+0x48>)
 800bbfe:	691b      	ldr	r3, [r3, #16]
 800bc00:	4a03      	ldr	r2, [pc, #12]	; (800bc10 <HAL_PCD_SuspendCallback+0x48>)
 800bc02:	f043 0306 	orr.w	r3, r3, #6
 800bc06:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800bc08:	bf00      	nop
 800bc0a:	3708      	adds	r7, #8
 800bc0c:	46bd      	mov	sp, r7
 800bc0e:	bd80      	pop	{r7, pc}
 800bc10:	e000ed00 	.word	0xe000ed00

0800bc14 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bc14:	b580      	push	{r7, lr}
 800bc16:	b082      	sub	sp, #8
 800bc18:	af00      	add	r7, sp, #0
 800bc1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800bc22:	4618      	mov	r0, r3
 800bc24:	f7fe fb87 	bl	800a336 <USBD_LL_Resume>
}
 800bc28:	bf00      	nop
 800bc2a:	3708      	adds	r7, #8
 800bc2c:	46bd      	mov	sp, r7
 800bc2e:	bd80      	pop	{r7, pc}

0800bc30 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bc30:	b580      	push	{r7, lr}
 800bc32:	b082      	sub	sp, #8
 800bc34:	af00      	add	r7, sp, #0
 800bc36:	6078      	str	r0, [r7, #4]
 800bc38:	460b      	mov	r3, r1
 800bc3a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800bc42:	78fa      	ldrb	r2, [r7, #3]
 800bc44:	4611      	mov	r1, r2
 800bc46:	4618      	mov	r0, r3
 800bc48:	f7fe fbdf 	bl	800a40a <USBD_LL_IsoOUTIncomplete>
}
 800bc4c:	bf00      	nop
 800bc4e:	3708      	adds	r7, #8
 800bc50:	46bd      	mov	sp, r7
 800bc52:	bd80      	pop	{r7, pc}

0800bc54 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bc54:	b580      	push	{r7, lr}
 800bc56:	b082      	sub	sp, #8
 800bc58:	af00      	add	r7, sp, #0
 800bc5a:	6078      	str	r0, [r7, #4]
 800bc5c:	460b      	mov	r3, r1
 800bc5e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800bc66:	78fa      	ldrb	r2, [r7, #3]
 800bc68:	4611      	mov	r1, r2
 800bc6a:	4618      	mov	r0, r3
 800bc6c:	f7fe fb9b 	bl	800a3a6 <USBD_LL_IsoINIncomplete>
}
 800bc70:	bf00      	nop
 800bc72:	3708      	adds	r7, #8
 800bc74:	46bd      	mov	sp, r7
 800bc76:	bd80      	pop	{r7, pc}

0800bc78 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bc78:	b580      	push	{r7, lr}
 800bc7a:	b082      	sub	sp, #8
 800bc7c:	af00      	add	r7, sp, #0
 800bc7e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800bc86:	4618      	mov	r0, r3
 800bc88:	f7fe fbf1 	bl	800a46e <USBD_LL_DevConnected>
}
 800bc8c:	bf00      	nop
 800bc8e:	3708      	adds	r7, #8
 800bc90:	46bd      	mov	sp, r7
 800bc92:	bd80      	pop	{r7, pc}

0800bc94 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bc94:	b580      	push	{r7, lr}
 800bc96:	b082      	sub	sp, #8
 800bc98:	af00      	add	r7, sp, #0
 800bc9a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800bca2:	4618      	mov	r0, r3
 800bca4:	f7fe fbee 	bl	800a484 <USBD_LL_DevDisconnected>
}
 800bca8:	bf00      	nop
 800bcaa:	3708      	adds	r7, #8
 800bcac:	46bd      	mov	sp, r7
 800bcae:	bd80      	pop	{r7, pc}

0800bcb0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800bcb0:	b580      	push	{r7, lr}
 800bcb2:	b082      	sub	sp, #8
 800bcb4:	af00      	add	r7, sp, #0
 800bcb6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	781b      	ldrb	r3, [r3, #0]
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d13c      	bne.n	800bd3a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800bcc0:	4a20      	ldr	r2, [pc, #128]	; (800bd44 <USBD_LL_Init+0x94>)
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
  pdev->pData = &hpcd_USB_OTG_FS;
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	4a1e      	ldr	r2, [pc, #120]	; (800bd44 <USBD_LL_Init+0x94>)
 800bccc:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800bcd0:	4b1c      	ldr	r3, [pc, #112]	; (800bd44 <USBD_LL_Init+0x94>)
 800bcd2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800bcd6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800bcd8:	4b1a      	ldr	r3, [pc, #104]	; (800bd44 <USBD_LL_Init+0x94>)
 800bcda:	2206      	movs	r2, #6
 800bcdc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800bcde:	4b19      	ldr	r3, [pc, #100]	; (800bd44 <USBD_LL_Init+0x94>)
 800bce0:	2202      	movs	r2, #2
 800bce2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800bce4:	4b17      	ldr	r3, [pc, #92]	; (800bd44 <USBD_LL_Init+0x94>)
 800bce6:	2200      	movs	r2, #0
 800bce8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800bcea:	4b16      	ldr	r3, [pc, #88]	; (800bd44 <USBD_LL_Init+0x94>)
 800bcec:	2202      	movs	r2, #2
 800bcee:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800bcf0:	4b14      	ldr	r3, [pc, #80]	; (800bd44 <USBD_LL_Init+0x94>)
 800bcf2:	2200      	movs	r2, #0
 800bcf4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800bcf6:	4b13      	ldr	r3, [pc, #76]	; (800bd44 <USBD_LL_Init+0x94>)
 800bcf8:	2200      	movs	r2, #0
 800bcfa:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800bcfc:	4b11      	ldr	r3, [pc, #68]	; (800bd44 <USBD_LL_Init+0x94>)
 800bcfe:	2200      	movs	r2, #0
 800bd00:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800bd02:	4b10      	ldr	r3, [pc, #64]	; (800bd44 <USBD_LL_Init+0x94>)
 800bd04:	2200      	movs	r2, #0
 800bd06:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800bd08:	4b0e      	ldr	r3, [pc, #56]	; (800bd44 <USBD_LL_Init+0x94>)
 800bd0a:	2200      	movs	r2, #0
 800bd0c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800bd0e:	480d      	ldr	r0, [pc, #52]	; (800bd44 <USBD_LL_Init+0x94>)
 800bd10:	f7f9 fba5 	bl	800545e <HAL_PCD_Init>
 800bd14:	4603      	mov	r3, r0
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	d001      	beq.n	800bd1e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800bd1a:	f7f5 fac5 	bl	80012a8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800bd1e:	2180      	movs	r1, #128	; 0x80
 800bd20:	4808      	ldr	r0, [pc, #32]	; (800bd44 <USBD_LL_Init+0x94>)
 800bd22:	f7fa fe20 	bl	8006966 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800bd26:	2240      	movs	r2, #64	; 0x40
 800bd28:	2100      	movs	r1, #0
 800bd2a:	4806      	ldr	r0, [pc, #24]	; (800bd44 <USBD_LL_Init+0x94>)
 800bd2c:	f7fa fdd4 	bl	80068d8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800bd30:	2280      	movs	r2, #128	; 0x80
 800bd32:	2101      	movs	r1, #1
 800bd34:	4803      	ldr	r0, [pc, #12]	; (800bd44 <USBD_LL_Init+0x94>)
 800bd36:	f7fa fdcf 	bl	80068d8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800bd3a:	2300      	movs	r3, #0
}
 800bd3c:	4618      	mov	r0, r3
 800bd3e:	3708      	adds	r7, #8
 800bd40:	46bd      	mov	sp, r7
 800bd42:	bd80      	pop	{r7, pc}
 800bd44:	20001828 	.word	0x20001828

0800bd48 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800bd48:	b580      	push	{r7, lr}
 800bd4a:	b084      	sub	sp, #16
 800bd4c:	af00      	add	r7, sp, #0
 800bd4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd50:	2300      	movs	r3, #0
 800bd52:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd54:	2300      	movs	r3, #0
 800bd56:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bd5e:	4618      	mov	r0, r3
 800bd60:	f7f9 fca1 	bl	80056a6 <HAL_PCD_Start>
 800bd64:	4603      	mov	r3, r0
 800bd66:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bd68:	7bfb      	ldrb	r3, [r7, #15]
 800bd6a:	4618      	mov	r0, r3
 800bd6c:	f000 f97e 	bl	800c06c <USBD_Get_USB_Status>
 800bd70:	4603      	mov	r3, r0
 800bd72:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bd74:	7bbb      	ldrb	r3, [r7, #14]
}
 800bd76:	4618      	mov	r0, r3
 800bd78:	3710      	adds	r7, #16
 800bd7a:	46bd      	mov	sp, r7
 800bd7c:	bd80      	pop	{r7, pc}

0800bd7e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800bd7e:	b580      	push	{r7, lr}
 800bd80:	b084      	sub	sp, #16
 800bd82:	af00      	add	r7, sp, #0
 800bd84:	6078      	str	r0, [r7, #4]
 800bd86:	4608      	mov	r0, r1
 800bd88:	4611      	mov	r1, r2
 800bd8a:	461a      	mov	r2, r3
 800bd8c:	4603      	mov	r3, r0
 800bd8e:	70fb      	strb	r3, [r7, #3]
 800bd90:	460b      	mov	r3, r1
 800bd92:	70bb      	strb	r3, [r7, #2]
 800bd94:	4613      	mov	r3, r2
 800bd96:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd98:	2300      	movs	r3, #0
 800bd9a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd9c:	2300      	movs	r3, #0
 800bd9e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800bda6:	78bb      	ldrb	r3, [r7, #2]
 800bda8:	883a      	ldrh	r2, [r7, #0]
 800bdaa:	78f9      	ldrb	r1, [r7, #3]
 800bdac:	f7fa f98e 	bl	80060cc <HAL_PCD_EP_Open>
 800bdb0:	4603      	mov	r3, r0
 800bdb2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bdb4:	7bfb      	ldrb	r3, [r7, #15]
 800bdb6:	4618      	mov	r0, r3
 800bdb8:	f000 f958 	bl	800c06c <USBD_Get_USB_Status>
 800bdbc:	4603      	mov	r3, r0
 800bdbe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bdc0:	7bbb      	ldrb	r3, [r7, #14]
}
 800bdc2:	4618      	mov	r0, r3
 800bdc4:	3710      	adds	r7, #16
 800bdc6:	46bd      	mov	sp, r7
 800bdc8:	bd80      	pop	{r7, pc}

0800bdca <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bdca:	b580      	push	{r7, lr}
 800bdcc:	b084      	sub	sp, #16
 800bdce:	af00      	add	r7, sp, #0
 800bdd0:	6078      	str	r0, [r7, #4]
 800bdd2:	460b      	mov	r3, r1
 800bdd4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bdd6:	2300      	movs	r3, #0
 800bdd8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bdda:	2300      	movs	r3, #0
 800bddc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bde4:	78fa      	ldrb	r2, [r7, #3]
 800bde6:	4611      	mov	r1, r2
 800bde8:	4618      	mov	r0, r3
 800bdea:	f7fa f9d7 	bl	800619c <HAL_PCD_EP_Close>
 800bdee:	4603      	mov	r3, r0
 800bdf0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bdf2:	7bfb      	ldrb	r3, [r7, #15]
 800bdf4:	4618      	mov	r0, r3
 800bdf6:	f000 f939 	bl	800c06c <USBD_Get_USB_Status>
 800bdfa:	4603      	mov	r3, r0
 800bdfc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bdfe:	7bbb      	ldrb	r3, [r7, #14]
}
 800be00:	4618      	mov	r0, r3
 800be02:	3710      	adds	r7, #16
 800be04:	46bd      	mov	sp, r7
 800be06:	bd80      	pop	{r7, pc}

0800be08 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800be08:	b580      	push	{r7, lr}
 800be0a:	b084      	sub	sp, #16
 800be0c:	af00      	add	r7, sp, #0
 800be0e:	6078      	str	r0, [r7, #4]
 800be10:	460b      	mov	r3, r1
 800be12:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800be14:	2300      	movs	r3, #0
 800be16:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800be18:	2300      	movs	r3, #0
 800be1a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800be22:	78fa      	ldrb	r2, [r7, #3]
 800be24:	4611      	mov	r1, r2
 800be26:	4618      	mov	r0, r3
 800be28:	f7fa faaf 	bl	800638a <HAL_PCD_EP_SetStall>
 800be2c:	4603      	mov	r3, r0
 800be2e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800be30:	7bfb      	ldrb	r3, [r7, #15]
 800be32:	4618      	mov	r0, r3
 800be34:	f000 f91a 	bl	800c06c <USBD_Get_USB_Status>
 800be38:	4603      	mov	r3, r0
 800be3a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800be3c:	7bbb      	ldrb	r3, [r7, #14]
}
 800be3e:	4618      	mov	r0, r3
 800be40:	3710      	adds	r7, #16
 800be42:	46bd      	mov	sp, r7
 800be44:	bd80      	pop	{r7, pc}

0800be46 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800be46:	b580      	push	{r7, lr}
 800be48:	b084      	sub	sp, #16
 800be4a:	af00      	add	r7, sp, #0
 800be4c:	6078      	str	r0, [r7, #4]
 800be4e:	460b      	mov	r3, r1
 800be50:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800be52:	2300      	movs	r3, #0
 800be54:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800be56:	2300      	movs	r3, #0
 800be58:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800be60:	78fa      	ldrb	r2, [r7, #3]
 800be62:	4611      	mov	r1, r2
 800be64:	4618      	mov	r0, r3
 800be66:	f7fa faf4 	bl	8006452 <HAL_PCD_EP_ClrStall>
 800be6a:	4603      	mov	r3, r0
 800be6c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800be6e:	7bfb      	ldrb	r3, [r7, #15]
 800be70:	4618      	mov	r0, r3
 800be72:	f000 f8fb 	bl	800c06c <USBD_Get_USB_Status>
 800be76:	4603      	mov	r3, r0
 800be78:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800be7a:	7bbb      	ldrb	r3, [r7, #14]
}
 800be7c:	4618      	mov	r0, r3
 800be7e:	3710      	adds	r7, #16
 800be80:	46bd      	mov	sp, r7
 800be82:	bd80      	pop	{r7, pc}

0800be84 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800be84:	b480      	push	{r7}
 800be86:	b085      	sub	sp, #20
 800be88:	af00      	add	r7, sp, #0
 800be8a:	6078      	str	r0, [r7, #4]
 800be8c:	460b      	mov	r3, r1
 800be8e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800be96:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800be98:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	da0b      	bge.n	800beb8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800bea0:	78fb      	ldrb	r3, [r7, #3]
 800bea2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bea6:	68f9      	ldr	r1, [r7, #12]
 800bea8:	4613      	mov	r3, r2
 800beaa:	00db      	lsls	r3, r3, #3
 800beac:	4413      	add	r3, r2
 800beae:	009b      	lsls	r3, r3, #2
 800beb0:	440b      	add	r3, r1
 800beb2:	333e      	adds	r3, #62	; 0x3e
 800beb4:	781b      	ldrb	r3, [r3, #0]
 800beb6:	e00b      	b.n	800bed0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800beb8:	78fb      	ldrb	r3, [r7, #3]
 800beba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bebe:	68f9      	ldr	r1, [r7, #12]
 800bec0:	4613      	mov	r3, r2
 800bec2:	00db      	lsls	r3, r3, #3
 800bec4:	4413      	add	r3, r2
 800bec6:	009b      	lsls	r3, r3, #2
 800bec8:	440b      	add	r3, r1
 800beca:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800bece:	781b      	ldrb	r3, [r3, #0]
  }
}
 800bed0:	4618      	mov	r0, r3
 800bed2:	3714      	adds	r7, #20
 800bed4:	46bd      	mov	sp, r7
 800bed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beda:	4770      	bx	lr

0800bedc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800bedc:	b580      	push	{r7, lr}
 800bede:	b084      	sub	sp, #16
 800bee0:	af00      	add	r7, sp, #0
 800bee2:	6078      	str	r0, [r7, #4]
 800bee4:	460b      	mov	r3, r1
 800bee6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bee8:	2300      	movs	r3, #0
 800beea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800beec:	2300      	movs	r3, #0
 800beee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bef6:	78fa      	ldrb	r2, [r7, #3]
 800bef8:	4611      	mov	r1, r2
 800befa:	4618      	mov	r0, r3
 800befc:	f7fa f8c1 	bl	8006082 <HAL_PCD_SetAddress>
 800bf00:	4603      	mov	r3, r0
 800bf02:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bf04:	7bfb      	ldrb	r3, [r7, #15]
 800bf06:	4618      	mov	r0, r3
 800bf08:	f000 f8b0 	bl	800c06c <USBD_Get_USB_Status>
 800bf0c:	4603      	mov	r3, r0
 800bf0e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bf10:	7bbb      	ldrb	r3, [r7, #14]
}
 800bf12:	4618      	mov	r0, r3
 800bf14:	3710      	adds	r7, #16
 800bf16:	46bd      	mov	sp, r7
 800bf18:	bd80      	pop	{r7, pc}

0800bf1a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bf1a:	b580      	push	{r7, lr}
 800bf1c:	b086      	sub	sp, #24
 800bf1e:	af00      	add	r7, sp, #0
 800bf20:	60f8      	str	r0, [r7, #12]
 800bf22:	607a      	str	r2, [r7, #4]
 800bf24:	603b      	str	r3, [r7, #0]
 800bf26:	460b      	mov	r3, r1
 800bf28:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf2a:	2300      	movs	r3, #0
 800bf2c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bf2e:	2300      	movs	r3, #0
 800bf30:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800bf38:	7af9      	ldrb	r1, [r7, #11]
 800bf3a:	683b      	ldr	r3, [r7, #0]
 800bf3c:	687a      	ldr	r2, [r7, #4]
 800bf3e:	f7fa f9da 	bl	80062f6 <HAL_PCD_EP_Transmit>
 800bf42:	4603      	mov	r3, r0
 800bf44:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bf46:	7dfb      	ldrb	r3, [r7, #23]
 800bf48:	4618      	mov	r0, r3
 800bf4a:	f000 f88f 	bl	800c06c <USBD_Get_USB_Status>
 800bf4e:	4603      	mov	r3, r0
 800bf50:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bf52:	7dbb      	ldrb	r3, [r7, #22]
}
 800bf54:	4618      	mov	r0, r3
 800bf56:	3718      	adds	r7, #24
 800bf58:	46bd      	mov	sp, r7
 800bf5a:	bd80      	pop	{r7, pc}

0800bf5c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bf5c:	b580      	push	{r7, lr}
 800bf5e:	b086      	sub	sp, #24
 800bf60:	af00      	add	r7, sp, #0
 800bf62:	60f8      	str	r0, [r7, #12]
 800bf64:	607a      	str	r2, [r7, #4]
 800bf66:	603b      	str	r3, [r7, #0]
 800bf68:	460b      	mov	r3, r1
 800bf6a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf6c:	2300      	movs	r3, #0
 800bf6e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bf70:	2300      	movs	r3, #0
 800bf72:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800bf7a:	7af9      	ldrb	r1, [r7, #11]
 800bf7c:	683b      	ldr	r3, [r7, #0]
 800bf7e:	687a      	ldr	r2, [r7, #4]
 800bf80:	f7fa f956 	bl	8006230 <HAL_PCD_EP_Receive>
 800bf84:	4603      	mov	r3, r0
 800bf86:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bf88:	7dfb      	ldrb	r3, [r7, #23]
 800bf8a:	4618      	mov	r0, r3
 800bf8c:	f000 f86e 	bl	800c06c <USBD_Get_USB_Status>
 800bf90:	4603      	mov	r3, r0
 800bf92:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bf94:	7dbb      	ldrb	r3, [r7, #22]
}
 800bf96:	4618      	mov	r0, r3
 800bf98:	3718      	adds	r7, #24
 800bf9a:	46bd      	mov	sp, r7
 800bf9c:	bd80      	pop	{r7, pc}

0800bf9e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bf9e:	b580      	push	{r7, lr}
 800bfa0:	b082      	sub	sp, #8
 800bfa2:	af00      	add	r7, sp, #0
 800bfa4:	6078      	str	r0, [r7, #4]
 800bfa6:	460b      	mov	r3, r1
 800bfa8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bfb0:	78fa      	ldrb	r2, [r7, #3]
 800bfb2:	4611      	mov	r1, r2
 800bfb4:	4618      	mov	r0, r3
 800bfb6:	f7fa f986 	bl	80062c6 <HAL_PCD_EP_GetRxCount>
 800bfba:	4603      	mov	r3, r0
}
 800bfbc:	4618      	mov	r0, r3
 800bfbe:	3708      	adds	r7, #8
 800bfc0:	46bd      	mov	sp, r7
 800bfc2:	bd80      	pop	{r7, pc}

0800bfc4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800bfc4:	b580      	push	{r7, lr}
 800bfc6:	b082      	sub	sp, #8
 800bfc8:	af00      	add	r7, sp, #0
 800bfca:	6078      	str	r0, [r7, #4]
 800bfcc:	460b      	mov	r3, r1
 800bfce:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800bfd0:	78fb      	ldrb	r3, [r7, #3]
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d002      	beq.n	800bfdc <HAL_PCDEx_LPM_Callback+0x18>
 800bfd6:	2b01      	cmp	r3, #1
 800bfd8:	d01f      	beq.n	800c01a <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800bfda:	e03b      	b.n	800c054 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	6a1b      	ldr	r3, [r3, #32]
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d007      	beq.n	800bff4 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800bfe4:	f000 f83c 	bl	800c060 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bfe8:	4b1c      	ldr	r3, [pc, #112]	; (800c05c <HAL_PCDEx_LPM_Callback+0x98>)
 800bfea:	691b      	ldr	r3, [r3, #16]
 800bfec:	4a1b      	ldr	r2, [pc, #108]	; (800c05c <HAL_PCDEx_LPM_Callback+0x98>)
 800bfee:	f023 0306 	bic.w	r3, r3, #6
 800bff2:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	687a      	ldr	r2, [r7, #4]
 800c000:	6812      	ldr	r2, [r2, #0]
 800c002:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c006:	f023 0301 	bic.w	r3, r3, #1
 800c00a:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800c012:	4618      	mov	r0, r3
 800c014:	f7fe f98f 	bl	800a336 <USBD_LL_Resume>
    break;
 800c018:	e01c      	b.n	800c054 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	687a      	ldr	r2, [r7, #4]
 800c026:	6812      	ldr	r2, [r2, #0]
 800c028:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c02c:	f043 0301 	orr.w	r3, r3, #1
 800c030:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800c038:	4618      	mov	r0, r3
 800c03a:	f7fe f966 	bl	800a30a <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	6a1b      	ldr	r3, [r3, #32]
 800c042:	2b00      	cmp	r3, #0
 800c044:	d005      	beq.n	800c052 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c046:	4b05      	ldr	r3, [pc, #20]	; (800c05c <HAL_PCDEx_LPM_Callback+0x98>)
 800c048:	691b      	ldr	r3, [r3, #16]
 800c04a:	4a04      	ldr	r2, [pc, #16]	; (800c05c <HAL_PCDEx_LPM_Callback+0x98>)
 800c04c:	f043 0306 	orr.w	r3, r3, #6
 800c050:	6113      	str	r3, [r2, #16]
    break;
 800c052:	bf00      	nop
}
 800c054:	bf00      	nop
 800c056:	3708      	adds	r7, #8
 800c058:	46bd      	mov	sp, r7
 800c05a:	bd80      	pop	{r7, pc}
 800c05c:	e000ed00 	.word	0xe000ed00

0800c060 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800c060:	b580      	push	{r7, lr}
 800c062:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800c064:	f7f5 f884 	bl	8001170 <SystemClock_Config>
}
 800c068:	bf00      	nop
 800c06a:	bd80      	pop	{r7, pc}

0800c06c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c06c:	b480      	push	{r7}
 800c06e:	b085      	sub	sp, #20
 800c070:	af00      	add	r7, sp, #0
 800c072:	4603      	mov	r3, r0
 800c074:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c076:	2300      	movs	r3, #0
 800c078:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c07a:	79fb      	ldrb	r3, [r7, #7]
 800c07c:	2b03      	cmp	r3, #3
 800c07e:	d817      	bhi.n	800c0b0 <USBD_Get_USB_Status+0x44>
 800c080:	a201      	add	r2, pc, #4	; (adr r2, 800c088 <USBD_Get_USB_Status+0x1c>)
 800c082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c086:	bf00      	nop
 800c088:	0800c099 	.word	0x0800c099
 800c08c:	0800c09f 	.word	0x0800c09f
 800c090:	0800c0a5 	.word	0x0800c0a5
 800c094:	0800c0ab 	.word	0x0800c0ab
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c098:	2300      	movs	r3, #0
 800c09a:	73fb      	strb	r3, [r7, #15]
    break;
 800c09c:	e00b      	b.n	800c0b6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c09e:	2303      	movs	r3, #3
 800c0a0:	73fb      	strb	r3, [r7, #15]
    break;
 800c0a2:	e008      	b.n	800c0b6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c0a4:	2301      	movs	r3, #1
 800c0a6:	73fb      	strb	r3, [r7, #15]
    break;
 800c0a8:	e005      	b.n	800c0b6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c0aa:	2303      	movs	r3, #3
 800c0ac:	73fb      	strb	r3, [r7, #15]
    break;
 800c0ae:	e002      	b.n	800c0b6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c0b0:	2303      	movs	r3, #3
 800c0b2:	73fb      	strb	r3, [r7, #15]
    break;
 800c0b4:	bf00      	nop
  }
  return usb_status;
 800c0b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0b8:	4618      	mov	r0, r3
 800c0ba:	3714      	adds	r7, #20
 800c0bc:	46bd      	mov	sp, r7
 800c0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c2:	4770      	bx	lr

0800c0c4 <main>:

#include "main.h"


int main(void)
{
 800c0c4:	b580      	push	{r7, lr}
 800c0c6:	af00      	add	r7, sp, #0
  hwInit();
 800c0c8:	f7f7 f85e 	bl	8003188 <hwInit>
  apInit();
 800c0cc:	f7f4 ff9c 	bl	8001008 <apInit>
  apMain();
 800c0d0:	f7f4 ffa7 	bl	8001022 <apMain>

  return 0;
 800c0d4:	2300      	movs	r3, #0
}
 800c0d6:	4618      	mov	r0, r3
 800c0d8:	bd80      	pop	{r7, pc}
	...

0800c0dc <__errno>:
 800c0dc:	4b01      	ldr	r3, [pc, #4]	; (800c0e4 <__errno+0x8>)
 800c0de:	6818      	ldr	r0, [r3, #0]
 800c0e0:	4770      	bx	lr
 800c0e2:	bf00      	nop
 800c0e4:	20000140 	.word	0x20000140

0800c0e8 <__libc_init_array>:
 800c0e8:	b570      	push	{r4, r5, r6, lr}
 800c0ea:	4d0d      	ldr	r5, [pc, #52]	; (800c120 <__libc_init_array+0x38>)
 800c0ec:	4c0d      	ldr	r4, [pc, #52]	; (800c124 <__libc_init_array+0x3c>)
 800c0ee:	1b64      	subs	r4, r4, r5
 800c0f0:	10a4      	asrs	r4, r4, #2
 800c0f2:	2600      	movs	r6, #0
 800c0f4:	42a6      	cmp	r6, r4
 800c0f6:	d109      	bne.n	800c10c <__libc_init_array+0x24>
 800c0f8:	4d0b      	ldr	r5, [pc, #44]	; (800c128 <__libc_init_array+0x40>)
 800c0fa:	4c0c      	ldr	r4, [pc, #48]	; (800c12c <__libc_init_array+0x44>)
 800c0fc:	f003 f9ce 	bl	800f49c <_init>
 800c100:	1b64      	subs	r4, r4, r5
 800c102:	10a4      	asrs	r4, r4, #2
 800c104:	2600      	movs	r6, #0
 800c106:	42a6      	cmp	r6, r4
 800c108:	d105      	bne.n	800c116 <__libc_init_array+0x2e>
 800c10a:	bd70      	pop	{r4, r5, r6, pc}
 800c10c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c110:	4798      	blx	r3
 800c112:	3601      	adds	r6, #1
 800c114:	e7ee      	b.n	800c0f4 <__libc_init_array+0xc>
 800c116:	f855 3b04 	ldr.w	r3, [r5], #4
 800c11a:	4798      	blx	r3
 800c11c:	3601      	adds	r6, #1
 800c11e:	e7f2      	b.n	800c106 <__libc_init_array+0x1e>
 800c120:	0800fc9c 	.word	0x0800fc9c
 800c124:	0800fc9c 	.word	0x0800fc9c
 800c128:	0800fc9c 	.word	0x0800fc9c
 800c12c:	0800fca0 	.word	0x0800fca0

0800c130 <malloc>:
 800c130:	4b02      	ldr	r3, [pc, #8]	; (800c13c <malloc+0xc>)
 800c132:	4601      	mov	r1, r0
 800c134:	6818      	ldr	r0, [r3, #0]
 800c136:	f000 b87f 	b.w	800c238 <_malloc_r>
 800c13a:	bf00      	nop
 800c13c:	20000140 	.word	0x20000140

0800c140 <free>:
 800c140:	4b02      	ldr	r3, [pc, #8]	; (800c14c <free+0xc>)
 800c142:	4601      	mov	r1, r0
 800c144:	6818      	ldr	r0, [r3, #0]
 800c146:	f000 b80b 	b.w	800c160 <_free_r>
 800c14a:	bf00      	nop
 800c14c:	20000140 	.word	0x20000140

0800c150 <memset>:
 800c150:	4402      	add	r2, r0
 800c152:	4603      	mov	r3, r0
 800c154:	4293      	cmp	r3, r2
 800c156:	d100      	bne.n	800c15a <memset+0xa>
 800c158:	4770      	bx	lr
 800c15a:	f803 1b01 	strb.w	r1, [r3], #1
 800c15e:	e7f9      	b.n	800c154 <memset+0x4>

0800c160 <_free_r>:
 800c160:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c162:	2900      	cmp	r1, #0
 800c164:	d044      	beq.n	800c1f0 <_free_r+0x90>
 800c166:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c16a:	9001      	str	r0, [sp, #4]
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	f1a1 0404 	sub.w	r4, r1, #4
 800c172:	bfb8      	it	lt
 800c174:	18e4      	addlt	r4, r4, r3
 800c176:	f001 fbdb 	bl	800d930 <__malloc_lock>
 800c17a:	4a1e      	ldr	r2, [pc, #120]	; (800c1f4 <_free_r+0x94>)
 800c17c:	9801      	ldr	r0, [sp, #4]
 800c17e:	6813      	ldr	r3, [r2, #0]
 800c180:	b933      	cbnz	r3, 800c190 <_free_r+0x30>
 800c182:	6063      	str	r3, [r4, #4]
 800c184:	6014      	str	r4, [r2, #0]
 800c186:	b003      	add	sp, #12
 800c188:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c18c:	f001 bbd6 	b.w	800d93c <__malloc_unlock>
 800c190:	42a3      	cmp	r3, r4
 800c192:	d908      	bls.n	800c1a6 <_free_r+0x46>
 800c194:	6825      	ldr	r5, [r4, #0]
 800c196:	1961      	adds	r1, r4, r5
 800c198:	428b      	cmp	r3, r1
 800c19a:	bf01      	itttt	eq
 800c19c:	6819      	ldreq	r1, [r3, #0]
 800c19e:	685b      	ldreq	r3, [r3, #4]
 800c1a0:	1949      	addeq	r1, r1, r5
 800c1a2:	6021      	streq	r1, [r4, #0]
 800c1a4:	e7ed      	b.n	800c182 <_free_r+0x22>
 800c1a6:	461a      	mov	r2, r3
 800c1a8:	685b      	ldr	r3, [r3, #4]
 800c1aa:	b10b      	cbz	r3, 800c1b0 <_free_r+0x50>
 800c1ac:	42a3      	cmp	r3, r4
 800c1ae:	d9fa      	bls.n	800c1a6 <_free_r+0x46>
 800c1b0:	6811      	ldr	r1, [r2, #0]
 800c1b2:	1855      	adds	r5, r2, r1
 800c1b4:	42a5      	cmp	r5, r4
 800c1b6:	d10b      	bne.n	800c1d0 <_free_r+0x70>
 800c1b8:	6824      	ldr	r4, [r4, #0]
 800c1ba:	4421      	add	r1, r4
 800c1bc:	1854      	adds	r4, r2, r1
 800c1be:	42a3      	cmp	r3, r4
 800c1c0:	6011      	str	r1, [r2, #0]
 800c1c2:	d1e0      	bne.n	800c186 <_free_r+0x26>
 800c1c4:	681c      	ldr	r4, [r3, #0]
 800c1c6:	685b      	ldr	r3, [r3, #4]
 800c1c8:	6053      	str	r3, [r2, #4]
 800c1ca:	4421      	add	r1, r4
 800c1cc:	6011      	str	r1, [r2, #0]
 800c1ce:	e7da      	b.n	800c186 <_free_r+0x26>
 800c1d0:	d902      	bls.n	800c1d8 <_free_r+0x78>
 800c1d2:	230c      	movs	r3, #12
 800c1d4:	6003      	str	r3, [r0, #0]
 800c1d6:	e7d6      	b.n	800c186 <_free_r+0x26>
 800c1d8:	6825      	ldr	r5, [r4, #0]
 800c1da:	1961      	adds	r1, r4, r5
 800c1dc:	428b      	cmp	r3, r1
 800c1de:	bf04      	itt	eq
 800c1e0:	6819      	ldreq	r1, [r3, #0]
 800c1e2:	685b      	ldreq	r3, [r3, #4]
 800c1e4:	6063      	str	r3, [r4, #4]
 800c1e6:	bf04      	itt	eq
 800c1e8:	1949      	addeq	r1, r1, r5
 800c1ea:	6021      	streq	r1, [r4, #0]
 800c1ec:	6054      	str	r4, [r2, #4]
 800c1ee:	e7ca      	b.n	800c186 <_free_r+0x26>
 800c1f0:	b003      	add	sp, #12
 800c1f2:	bd30      	pop	{r4, r5, pc}
 800c1f4:	20001d30 	.word	0x20001d30

0800c1f8 <sbrk_aligned>:
 800c1f8:	b570      	push	{r4, r5, r6, lr}
 800c1fa:	4e0e      	ldr	r6, [pc, #56]	; (800c234 <sbrk_aligned+0x3c>)
 800c1fc:	460c      	mov	r4, r1
 800c1fe:	6831      	ldr	r1, [r6, #0]
 800c200:	4605      	mov	r5, r0
 800c202:	b911      	cbnz	r1, 800c20a <sbrk_aligned+0x12>
 800c204:	f000 f88c 	bl	800c320 <_sbrk_r>
 800c208:	6030      	str	r0, [r6, #0]
 800c20a:	4621      	mov	r1, r4
 800c20c:	4628      	mov	r0, r5
 800c20e:	f000 f887 	bl	800c320 <_sbrk_r>
 800c212:	1c43      	adds	r3, r0, #1
 800c214:	d00a      	beq.n	800c22c <sbrk_aligned+0x34>
 800c216:	1cc4      	adds	r4, r0, #3
 800c218:	f024 0403 	bic.w	r4, r4, #3
 800c21c:	42a0      	cmp	r0, r4
 800c21e:	d007      	beq.n	800c230 <sbrk_aligned+0x38>
 800c220:	1a21      	subs	r1, r4, r0
 800c222:	4628      	mov	r0, r5
 800c224:	f000 f87c 	bl	800c320 <_sbrk_r>
 800c228:	3001      	adds	r0, #1
 800c22a:	d101      	bne.n	800c230 <sbrk_aligned+0x38>
 800c22c:	f04f 34ff 	mov.w	r4, #4294967295
 800c230:	4620      	mov	r0, r4
 800c232:	bd70      	pop	{r4, r5, r6, pc}
 800c234:	20001d34 	.word	0x20001d34

0800c238 <_malloc_r>:
 800c238:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c23c:	1ccd      	adds	r5, r1, #3
 800c23e:	f025 0503 	bic.w	r5, r5, #3
 800c242:	3508      	adds	r5, #8
 800c244:	2d0c      	cmp	r5, #12
 800c246:	bf38      	it	cc
 800c248:	250c      	movcc	r5, #12
 800c24a:	2d00      	cmp	r5, #0
 800c24c:	4607      	mov	r7, r0
 800c24e:	db01      	blt.n	800c254 <_malloc_r+0x1c>
 800c250:	42a9      	cmp	r1, r5
 800c252:	d905      	bls.n	800c260 <_malloc_r+0x28>
 800c254:	230c      	movs	r3, #12
 800c256:	603b      	str	r3, [r7, #0]
 800c258:	2600      	movs	r6, #0
 800c25a:	4630      	mov	r0, r6
 800c25c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c260:	4e2e      	ldr	r6, [pc, #184]	; (800c31c <_malloc_r+0xe4>)
 800c262:	f001 fb65 	bl	800d930 <__malloc_lock>
 800c266:	6833      	ldr	r3, [r6, #0]
 800c268:	461c      	mov	r4, r3
 800c26a:	bb34      	cbnz	r4, 800c2ba <_malloc_r+0x82>
 800c26c:	4629      	mov	r1, r5
 800c26e:	4638      	mov	r0, r7
 800c270:	f7ff ffc2 	bl	800c1f8 <sbrk_aligned>
 800c274:	1c43      	adds	r3, r0, #1
 800c276:	4604      	mov	r4, r0
 800c278:	d14d      	bne.n	800c316 <_malloc_r+0xde>
 800c27a:	6834      	ldr	r4, [r6, #0]
 800c27c:	4626      	mov	r6, r4
 800c27e:	2e00      	cmp	r6, #0
 800c280:	d140      	bne.n	800c304 <_malloc_r+0xcc>
 800c282:	6823      	ldr	r3, [r4, #0]
 800c284:	4631      	mov	r1, r6
 800c286:	4638      	mov	r0, r7
 800c288:	eb04 0803 	add.w	r8, r4, r3
 800c28c:	f000 f848 	bl	800c320 <_sbrk_r>
 800c290:	4580      	cmp	r8, r0
 800c292:	d13a      	bne.n	800c30a <_malloc_r+0xd2>
 800c294:	6821      	ldr	r1, [r4, #0]
 800c296:	3503      	adds	r5, #3
 800c298:	1a6d      	subs	r5, r5, r1
 800c29a:	f025 0503 	bic.w	r5, r5, #3
 800c29e:	3508      	adds	r5, #8
 800c2a0:	2d0c      	cmp	r5, #12
 800c2a2:	bf38      	it	cc
 800c2a4:	250c      	movcc	r5, #12
 800c2a6:	4629      	mov	r1, r5
 800c2a8:	4638      	mov	r0, r7
 800c2aa:	f7ff ffa5 	bl	800c1f8 <sbrk_aligned>
 800c2ae:	3001      	adds	r0, #1
 800c2b0:	d02b      	beq.n	800c30a <_malloc_r+0xd2>
 800c2b2:	6823      	ldr	r3, [r4, #0]
 800c2b4:	442b      	add	r3, r5
 800c2b6:	6023      	str	r3, [r4, #0]
 800c2b8:	e00e      	b.n	800c2d8 <_malloc_r+0xa0>
 800c2ba:	6822      	ldr	r2, [r4, #0]
 800c2bc:	1b52      	subs	r2, r2, r5
 800c2be:	d41e      	bmi.n	800c2fe <_malloc_r+0xc6>
 800c2c0:	2a0b      	cmp	r2, #11
 800c2c2:	d916      	bls.n	800c2f2 <_malloc_r+0xba>
 800c2c4:	1961      	adds	r1, r4, r5
 800c2c6:	42a3      	cmp	r3, r4
 800c2c8:	6025      	str	r5, [r4, #0]
 800c2ca:	bf18      	it	ne
 800c2cc:	6059      	strne	r1, [r3, #4]
 800c2ce:	6863      	ldr	r3, [r4, #4]
 800c2d0:	bf08      	it	eq
 800c2d2:	6031      	streq	r1, [r6, #0]
 800c2d4:	5162      	str	r2, [r4, r5]
 800c2d6:	604b      	str	r3, [r1, #4]
 800c2d8:	4638      	mov	r0, r7
 800c2da:	f104 060b 	add.w	r6, r4, #11
 800c2de:	f001 fb2d 	bl	800d93c <__malloc_unlock>
 800c2e2:	f026 0607 	bic.w	r6, r6, #7
 800c2e6:	1d23      	adds	r3, r4, #4
 800c2e8:	1af2      	subs	r2, r6, r3
 800c2ea:	d0b6      	beq.n	800c25a <_malloc_r+0x22>
 800c2ec:	1b9b      	subs	r3, r3, r6
 800c2ee:	50a3      	str	r3, [r4, r2]
 800c2f0:	e7b3      	b.n	800c25a <_malloc_r+0x22>
 800c2f2:	6862      	ldr	r2, [r4, #4]
 800c2f4:	42a3      	cmp	r3, r4
 800c2f6:	bf0c      	ite	eq
 800c2f8:	6032      	streq	r2, [r6, #0]
 800c2fa:	605a      	strne	r2, [r3, #4]
 800c2fc:	e7ec      	b.n	800c2d8 <_malloc_r+0xa0>
 800c2fe:	4623      	mov	r3, r4
 800c300:	6864      	ldr	r4, [r4, #4]
 800c302:	e7b2      	b.n	800c26a <_malloc_r+0x32>
 800c304:	4634      	mov	r4, r6
 800c306:	6876      	ldr	r6, [r6, #4]
 800c308:	e7b9      	b.n	800c27e <_malloc_r+0x46>
 800c30a:	230c      	movs	r3, #12
 800c30c:	603b      	str	r3, [r7, #0]
 800c30e:	4638      	mov	r0, r7
 800c310:	f001 fb14 	bl	800d93c <__malloc_unlock>
 800c314:	e7a1      	b.n	800c25a <_malloc_r+0x22>
 800c316:	6025      	str	r5, [r4, #0]
 800c318:	e7de      	b.n	800c2d8 <_malloc_r+0xa0>
 800c31a:	bf00      	nop
 800c31c:	20001d30 	.word	0x20001d30

0800c320 <_sbrk_r>:
 800c320:	b538      	push	{r3, r4, r5, lr}
 800c322:	4d06      	ldr	r5, [pc, #24]	; (800c33c <_sbrk_r+0x1c>)
 800c324:	2300      	movs	r3, #0
 800c326:	4604      	mov	r4, r0
 800c328:	4608      	mov	r0, r1
 800c32a:	602b      	str	r3, [r5, #0]
 800c32c:	f7f5 f8aa 	bl	8001484 <_sbrk>
 800c330:	1c43      	adds	r3, r0, #1
 800c332:	d102      	bne.n	800c33a <_sbrk_r+0x1a>
 800c334:	682b      	ldr	r3, [r5, #0]
 800c336:	b103      	cbz	r3, 800c33a <_sbrk_r+0x1a>
 800c338:	6023      	str	r3, [r4, #0]
 800c33a:	bd38      	pop	{r3, r4, r5, pc}
 800c33c:	20001d38 	.word	0x20001d38

0800c340 <strcpy>:
 800c340:	4603      	mov	r3, r0
 800c342:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c346:	f803 2b01 	strb.w	r2, [r3], #1
 800c34a:	2a00      	cmp	r2, #0
 800c34c:	d1f9      	bne.n	800c342 <strcpy+0x2>
 800c34e:	4770      	bx	lr

0800c350 <sulp>:
 800c350:	b570      	push	{r4, r5, r6, lr}
 800c352:	4604      	mov	r4, r0
 800c354:	460d      	mov	r5, r1
 800c356:	ec45 4b10 	vmov	d0, r4, r5
 800c35a:	4616      	mov	r6, r2
 800c35c:	f001 fe66 	bl	800e02c <__ulp>
 800c360:	ec51 0b10 	vmov	r0, r1, d0
 800c364:	b17e      	cbz	r6, 800c386 <sulp+0x36>
 800c366:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800c36a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c36e:	2b00      	cmp	r3, #0
 800c370:	dd09      	ble.n	800c386 <sulp+0x36>
 800c372:	051b      	lsls	r3, r3, #20
 800c374:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800c378:	2400      	movs	r4, #0
 800c37a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800c37e:	4622      	mov	r2, r4
 800c380:	462b      	mov	r3, r5
 800c382:	f7f4 f969 	bl	8000658 <__aeabi_dmul>
 800c386:	bd70      	pop	{r4, r5, r6, pc}

0800c388 <_strtod_l>:
 800c388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c38c:	ed2d 8b02 	vpush	{d8}
 800c390:	b09d      	sub	sp, #116	; 0x74
 800c392:	461f      	mov	r7, r3
 800c394:	2300      	movs	r3, #0
 800c396:	9318      	str	r3, [sp, #96]	; 0x60
 800c398:	4ba2      	ldr	r3, [pc, #648]	; (800c624 <_strtod_l+0x29c>)
 800c39a:	9213      	str	r2, [sp, #76]	; 0x4c
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	9305      	str	r3, [sp, #20]
 800c3a0:	4604      	mov	r4, r0
 800c3a2:	4618      	mov	r0, r3
 800c3a4:	4688      	mov	r8, r1
 800c3a6:	f7f3 ff3d 	bl	8000224 <strlen>
 800c3aa:	f04f 0a00 	mov.w	sl, #0
 800c3ae:	4605      	mov	r5, r0
 800c3b0:	f04f 0b00 	mov.w	fp, #0
 800c3b4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800c3b8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c3ba:	781a      	ldrb	r2, [r3, #0]
 800c3bc:	2a2b      	cmp	r2, #43	; 0x2b
 800c3be:	d04e      	beq.n	800c45e <_strtod_l+0xd6>
 800c3c0:	d83b      	bhi.n	800c43a <_strtod_l+0xb2>
 800c3c2:	2a0d      	cmp	r2, #13
 800c3c4:	d834      	bhi.n	800c430 <_strtod_l+0xa8>
 800c3c6:	2a08      	cmp	r2, #8
 800c3c8:	d834      	bhi.n	800c434 <_strtod_l+0xac>
 800c3ca:	2a00      	cmp	r2, #0
 800c3cc:	d03e      	beq.n	800c44c <_strtod_l+0xc4>
 800c3ce:	2300      	movs	r3, #0
 800c3d0:	930a      	str	r3, [sp, #40]	; 0x28
 800c3d2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800c3d4:	7833      	ldrb	r3, [r6, #0]
 800c3d6:	2b30      	cmp	r3, #48	; 0x30
 800c3d8:	f040 80b0 	bne.w	800c53c <_strtod_l+0x1b4>
 800c3dc:	7873      	ldrb	r3, [r6, #1]
 800c3de:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c3e2:	2b58      	cmp	r3, #88	; 0x58
 800c3e4:	d168      	bne.n	800c4b8 <_strtod_l+0x130>
 800c3e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c3e8:	9301      	str	r3, [sp, #4]
 800c3ea:	ab18      	add	r3, sp, #96	; 0x60
 800c3ec:	9702      	str	r7, [sp, #8]
 800c3ee:	9300      	str	r3, [sp, #0]
 800c3f0:	4a8d      	ldr	r2, [pc, #564]	; (800c628 <_strtod_l+0x2a0>)
 800c3f2:	ab19      	add	r3, sp, #100	; 0x64
 800c3f4:	a917      	add	r1, sp, #92	; 0x5c
 800c3f6:	4620      	mov	r0, r4
 800c3f8:	f000 ff72 	bl	800d2e0 <__gethex>
 800c3fc:	f010 0707 	ands.w	r7, r0, #7
 800c400:	4605      	mov	r5, r0
 800c402:	d005      	beq.n	800c410 <_strtod_l+0x88>
 800c404:	2f06      	cmp	r7, #6
 800c406:	d12c      	bne.n	800c462 <_strtod_l+0xda>
 800c408:	3601      	adds	r6, #1
 800c40a:	2300      	movs	r3, #0
 800c40c:	9617      	str	r6, [sp, #92]	; 0x5c
 800c40e:	930a      	str	r3, [sp, #40]	; 0x28
 800c410:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c412:	2b00      	cmp	r3, #0
 800c414:	f040 8590 	bne.w	800cf38 <_strtod_l+0xbb0>
 800c418:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c41a:	b1eb      	cbz	r3, 800c458 <_strtod_l+0xd0>
 800c41c:	4652      	mov	r2, sl
 800c41e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800c422:	ec43 2b10 	vmov	d0, r2, r3
 800c426:	b01d      	add	sp, #116	; 0x74
 800c428:	ecbd 8b02 	vpop	{d8}
 800c42c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c430:	2a20      	cmp	r2, #32
 800c432:	d1cc      	bne.n	800c3ce <_strtod_l+0x46>
 800c434:	3301      	adds	r3, #1
 800c436:	9317      	str	r3, [sp, #92]	; 0x5c
 800c438:	e7be      	b.n	800c3b8 <_strtod_l+0x30>
 800c43a:	2a2d      	cmp	r2, #45	; 0x2d
 800c43c:	d1c7      	bne.n	800c3ce <_strtod_l+0x46>
 800c43e:	2201      	movs	r2, #1
 800c440:	920a      	str	r2, [sp, #40]	; 0x28
 800c442:	1c5a      	adds	r2, r3, #1
 800c444:	9217      	str	r2, [sp, #92]	; 0x5c
 800c446:	785b      	ldrb	r3, [r3, #1]
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d1c2      	bne.n	800c3d2 <_strtod_l+0x4a>
 800c44c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c44e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800c452:	2b00      	cmp	r3, #0
 800c454:	f040 856e 	bne.w	800cf34 <_strtod_l+0xbac>
 800c458:	4652      	mov	r2, sl
 800c45a:	465b      	mov	r3, fp
 800c45c:	e7e1      	b.n	800c422 <_strtod_l+0x9a>
 800c45e:	2200      	movs	r2, #0
 800c460:	e7ee      	b.n	800c440 <_strtod_l+0xb8>
 800c462:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c464:	b13a      	cbz	r2, 800c476 <_strtod_l+0xee>
 800c466:	2135      	movs	r1, #53	; 0x35
 800c468:	a81a      	add	r0, sp, #104	; 0x68
 800c46a:	f001 feea 	bl	800e242 <__copybits>
 800c46e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c470:	4620      	mov	r0, r4
 800c472:	f001 faa9 	bl	800d9c8 <_Bfree>
 800c476:	3f01      	subs	r7, #1
 800c478:	2f04      	cmp	r7, #4
 800c47a:	d806      	bhi.n	800c48a <_strtod_l+0x102>
 800c47c:	e8df f007 	tbb	[pc, r7]
 800c480:	1714030a 	.word	0x1714030a
 800c484:	0a          	.byte	0x0a
 800c485:	00          	.byte	0x00
 800c486:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800c48a:	0728      	lsls	r0, r5, #28
 800c48c:	d5c0      	bpl.n	800c410 <_strtod_l+0x88>
 800c48e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800c492:	e7bd      	b.n	800c410 <_strtod_l+0x88>
 800c494:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800c498:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800c49a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800c49e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800c4a2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800c4a6:	e7f0      	b.n	800c48a <_strtod_l+0x102>
 800c4a8:	f8df b180 	ldr.w	fp, [pc, #384]	; 800c62c <_strtod_l+0x2a4>
 800c4ac:	e7ed      	b.n	800c48a <_strtod_l+0x102>
 800c4ae:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800c4b2:	f04f 3aff 	mov.w	sl, #4294967295
 800c4b6:	e7e8      	b.n	800c48a <_strtod_l+0x102>
 800c4b8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c4ba:	1c5a      	adds	r2, r3, #1
 800c4bc:	9217      	str	r2, [sp, #92]	; 0x5c
 800c4be:	785b      	ldrb	r3, [r3, #1]
 800c4c0:	2b30      	cmp	r3, #48	; 0x30
 800c4c2:	d0f9      	beq.n	800c4b8 <_strtod_l+0x130>
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d0a3      	beq.n	800c410 <_strtod_l+0x88>
 800c4c8:	2301      	movs	r3, #1
 800c4ca:	f04f 0900 	mov.w	r9, #0
 800c4ce:	9304      	str	r3, [sp, #16]
 800c4d0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c4d2:	9308      	str	r3, [sp, #32]
 800c4d4:	f8cd 901c 	str.w	r9, [sp, #28]
 800c4d8:	464f      	mov	r7, r9
 800c4da:	220a      	movs	r2, #10
 800c4dc:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800c4de:	7806      	ldrb	r6, [r0, #0]
 800c4e0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800c4e4:	b2d9      	uxtb	r1, r3
 800c4e6:	2909      	cmp	r1, #9
 800c4e8:	d92a      	bls.n	800c540 <_strtod_l+0x1b8>
 800c4ea:	9905      	ldr	r1, [sp, #20]
 800c4ec:	462a      	mov	r2, r5
 800c4ee:	f002 fa01 	bl	800e8f4 <strncmp>
 800c4f2:	b398      	cbz	r0, 800c55c <_strtod_l+0x1d4>
 800c4f4:	2000      	movs	r0, #0
 800c4f6:	4632      	mov	r2, r6
 800c4f8:	463d      	mov	r5, r7
 800c4fa:	9005      	str	r0, [sp, #20]
 800c4fc:	4603      	mov	r3, r0
 800c4fe:	2a65      	cmp	r2, #101	; 0x65
 800c500:	d001      	beq.n	800c506 <_strtod_l+0x17e>
 800c502:	2a45      	cmp	r2, #69	; 0x45
 800c504:	d118      	bne.n	800c538 <_strtod_l+0x1b0>
 800c506:	b91d      	cbnz	r5, 800c510 <_strtod_l+0x188>
 800c508:	9a04      	ldr	r2, [sp, #16]
 800c50a:	4302      	orrs	r2, r0
 800c50c:	d09e      	beq.n	800c44c <_strtod_l+0xc4>
 800c50e:	2500      	movs	r5, #0
 800c510:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800c514:	f108 0201 	add.w	r2, r8, #1
 800c518:	9217      	str	r2, [sp, #92]	; 0x5c
 800c51a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800c51e:	2a2b      	cmp	r2, #43	; 0x2b
 800c520:	d075      	beq.n	800c60e <_strtod_l+0x286>
 800c522:	2a2d      	cmp	r2, #45	; 0x2d
 800c524:	d07b      	beq.n	800c61e <_strtod_l+0x296>
 800c526:	f04f 0c00 	mov.w	ip, #0
 800c52a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800c52e:	2909      	cmp	r1, #9
 800c530:	f240 8082 	bls.w	800c638 <_strtod_l+0x2b0>
 800c534:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800c538:	2600      	movs	r6, #0
 800c53a:	e09d      	b.n	800c678 <_strtod_l+0x2f0>
 800c53c:	2300      	movs	r3, #0
 800c53e:	e7c4      	b.n	800c4ca <_strtod_l+0x142>
 800c540:	2f08      	cmp	r7, #8
 800c542:	bfd8      	it	le
 800c544:	9907      	ldrle	r1, [sp, #28]
 800c546:	f100 0001 	add.w	r0, r0, #1
 800c54a:	bfda      	itte	le
 800c54c:	fb02 3301 	mlale	r3, r2, r1, r3
 800c550:	9307      	strle	r3, [sp, #28]
 800c552:	fb02 3909 	mlagt	r9, r2, r9, r3
 800c556:	3701      	adds	r7, #1
 800c558:	9017      	str	r0, [sp, #92]	; 0x5c
 800c55a:	e7bf      	b.n	800c4dc <_strtod_l+0x154>
 800c55c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c55e:	195a      	adds	r2, r3, r5
 800c560:	9217      	str	r2, [sp, #92]	; 0x5c
 800c562:	5d5a      	ldrb	r2, [r3, r5]
 800c564:	2f00      	cmp	r7, #0
 800c566:	d037      	beq.n	800c5d8 <_strtod_l+0x250>
 800c568:	9005      	str	r0, [sp, #20]
 800c56a:	463d      	mov	r5, r7
 800c56c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800c570:	2b09      	cmp	r3, #9
 800c572:	d912      	bls.n	800c59a <_strtod_l+0x212>
 800c574:	2301      	movs	r3, #1
 800c576:	e7c2      	b.n	800c4fe <_strtod_l+0x176>
 800c578:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c57a:	1c5a      	adds	r2, r3, #1
 800c57c:	9217      	str	r2, [sp, #92]	; 0x5c
 800c57e:	785a      	ldrb	r2, [r3, #1]
 800c580:	3001      	adds	r0, #1
 800c582:	2a30      	cmp	r2, #48	; 0x30
 800c584:	d0f8      	beq.n	800c578 <_strtod_l+0x1f0>
 800c586:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800c58a:	2b08      	cmp	r3, #8
 800c58c:	f200 84d9 	bhi.w	800cf42 <_strtod_l+0xbba>
 800c590:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c592:	9005      	str	r0, [sp, #20]
 800c594:	2000      	movs	r0, #0
 800c596:	9308      	str	r3, [sp, #32]
 800c598:	4605      	mov	r5, r0
 800c59a:	3a30      	subs	r2, #48	; 0x30
 800c59c:	f100 0301 	add.w	r3, r0, #1
 800c5a0:	d014      	beq.n	800c5cc <_strtod_l+0x244>
 800c5a2:	9905      	ldr	r1, [sp, #20]
 800c5a4:	4419      	add	r1, r3
 800c5a6:	9105      	str	r1, [sp, #20]
 800c5a8:	462b      	mov	r3, r5
 800c5aa:	eb00 0e05 	add.w	lr, r0, r5
 800c5ae:	210a      	movs	r1, #10
 800c5b0:	4573      	cmp	r3, lr
 800c5b2:	d113      	bne.n	800c5dc <_strtod_l+0x254>
 800c5b4:	182b      	adds	r3, r5, r0
 800c5b6:	2b08      	cmp	r3, #8
 800c5b8:	f105 0501 	add.w	r5, r5, #1
 800c5bc:	4405      	add	r5, r0
 800c5be:	dc1c      	bgt.n	800c5fa <_strtod_l+0x272>
 800c5c0:	9907      	ldr	r1, [sp, #28]
 800c5c2:	230a      	movs	r3, #10
 800c5c4:	fb03 2301 	mla	r3, r3, r1, r2
 800c5c8:	9307      	str	r3, [sp, #28]
 800c5ca:	2300      	movs	r3, #0
 800c5cc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c5ce:	1c51      	adds	r1, r2, #1
 800c5d0:	9117      	str	r1, [sp, #92]	; 0x5c
 800c5d2:	7852      	ldrb	r2, [r2, #1]
 800c5d4:	4618      	mov	r0, r3
 800c5d6:	e7c9      	b.n	800c56c <_strtod_l+0x1e4>
 800c5d8:	4638      	mov	r0, r7
 800c5da:	e7d2      	b.n	800c582 <_strtod_l+0x1fa>
 800c5dc:	2b08      	cmp	r3, #8
 800c5de:	dc04      	bgt.n	800c5ea <_strtod_l+0x262>
 800c5e0:	9e07      	ldr	r6, [sp, #28]
 800c5e2:	434e      	muls	r6, r1
 800c5e4:	9607      	str	r6, [sp, #28]
 800c5e6:	3301      	adds	r3, #1
 800c5e8:	e7e2      	b.n	800c5b0 <_strtod_l+0x228>
 800c5ea:	f103 0c01 	add.w	ip, r3, #1
 800c5ee:	f1bc 0f10 	cmp.w	ip, #16
 800c5f2:	bfd8      	it	le
 800c5f4:	fb01 f909 	mulle.w	r9, r1, r9
 800c5f8:	e7f5      	b.n	800c5e6 <_strtod_l+0x25e>
 800c5fa:	2d10      	cmp	r5, #16
 800c5fc:	bfdc      	itt	le
 800c5fe:	230a      	movle	r3, #10
 800c600:	fb03 2909 	mlale	r9, r3, r9, r2
 800c604:	e7e1      	b.n	800c5ca <_strtod_l+0x242>
 800c606:	2300      	movs	r3, #0
 800c608:	9305      	str	r3, [sp, #20]
 800c60a:	2301      	movs	r3, #1
 800c60c:	e77c      	b.n	800c508 <_strtod_l+0x180>
 800c60e:	f04f 0c00 	mov.w	ip, #0
 800c612:	f108 0202 	add.w	r2, r8, #2
 800c616:	9217      	str	r2, [sp, #92]	; 0x5c
 800c618:	f898 2002 	ldrb.w	r2, [r8, #2]
 800c61c:	e785      	b.n	800c52a <_strtod_l+0x1a2>
 800c61e:	f04f 0c01 	mov.w	ip, #1
 800c622:	e7f6      	b.n	800c612 <_strtod_l+0x28a>
 800c624:	0800fa40 	.word	0x0800fa40
 800c628:	0800f878 	.word	0x0800f878
 800c62c:	7ff00000 	.word	0x7ff00000
 800c630:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c632:	1c51      	adds	r1, r2, #1
 800c634:	9117      	str	r1, [sp, #92]	; 0x5c
 800c636:	7852      	ldrb	r2, [r2, #1]
 800c638:	2a30      	cmp	r2, #48	; 0x30
 800c63a:	d0f9      	beq.n	800c630 <_strtod_l+0x2a8>
 800c63c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800c640:	2908      	cmp	r1, #8
 800c642:	f63f af79 	bhi.w	800c538 <_strtod_l+0x1b0>
 800c646:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800c64a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c64c:	9206      	str	r2, [sp, #24]
 800c64e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c650:	1c51      	adds	r1, r2, #1
 800c652:	9117      	str	r1, [sp, #92]	; 0x5c
 800c654:	7852      	ldrb	r2, [r2, #1]
 800c656:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800c65a:	2e09      	cmp	r6, #9
 800c65c:	d937      	bls.n	800c6ce <_strtod_l+0x346>
 800c65e:	9e06      	ldr	r6, [sp, #24]
 800c660:	1b89      	subs	r1, r1, r6
 800c662:	2908      	cmp	r1, #8
 800c664:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800c668:	dc02      	bgt.n	800c670 <_strtod_l+0x2e8>
 800c66a:	4576      	cmp	r6, lr
 800c66c:	bfa8      	it	ge
 800c66e:	4676      	movge	r6, lr
 800c670:	f1bc 0f00 	cmp.w	ip, #0
 800c674:	d000      	beq.n	800c678 <_strtod_l+0x2f0>
 800c676:	4276      	negs	r6, r6
 800c678:	2d00      	cmp	r5, #0
 800c67a:	d14d      	bne.n	800c718 <_strtod_l+0x390>
 800c67c:	9904      	ldr	r1, [sp, #16]
 800c67e:	4301      	orrs	r1, r0
 800c680:	f47f aec6 	bne.w	800c410 <_strtod_l+0x88>
 800c684:	2b00      	cmp	r3, #0
 800c686:	f47f aee1 	bne.w	800c44c <_strtod_l+0xc4>
 800c68a:	2a69      	cmp	r2, #105	; 0x69
 800c68c:	d027      	beq.n	800c6de <_strtod_l+0x356>
 800c68e:	dc24      	bgt.n	800c6da <_strtod_l+0x352>
 800c690:	2a49      	cmp	r2, #73	; 0x49
 800c692:	d024      	beq.n	800c6de <_strtod_l+0x356>
 800c694:	2a4e      	cmp	r2, #78	; 0x4e
 800c696:	f47f aed9 	bne.w	800c44c <_strtod_l+0xc4>
 800c69a:	499f      	ldr	r1, [pc, #636]	; (800c918 <_strtod_l+0x590>)
 800c69c:	a817      	add	r0, sp, #92	; 0x5c
 800c69e:	f001 f877 	bl	800d790 <__match>
 800c6a2:	2800      	cmp	r0, #0
 800c6a4:	f43f aed2 	beq.w	800c44c <_strtod_l+0xc4>
 800c6a8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c6aa:	781b      	ldrb	r3, [r3, #0]
 800c6ac:	2b28      	cmp	r3, #40	; 0x28
 800c6ae:	d12d      	bne.n	800c70c <_strtod_l+0x384>
 800c6b0:	499a      	ldr	r1, [pc, #616]	; (800c91c <_strtod_l+0x594>)
 800c6b2:	aa1a      	add	r2, sp, #104	; 0x68
 800c6b4:	a817      	add	r0, sp, #92	; 0x5c
 800c6b6:	f001 f87f 	bl	800d7b8 <__hexnan>
 800c6ba:	2805      	cmp	r0, #5
 800c6bc:	d126      	bne.n	800c70c <_strtod_l+0x384>
 800c6be:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c6c0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800c6c4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800c6c8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800c6cc:	e6a0      	b.n	800c410 <_strtod_l+0x88>
 800c6ce:	210a      	movs	r1, #10
 800c6d0:	fb01 2e0e 	mla	lr, r1, lr, r2
 800c6d4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800c6d8:	e7b9      	b.n	800c64e <_strtod_l+0x2c6>
 800c6da:	2a6e      	cmp	r2, #110	; 0x6e
 800c6dc:	e7db      	b.n	800c696 <_strtod_l+0x30e>
 800c6de:	4990      	ldr	r1, [pc, #576]	; (800c920 <_strtod_l+0x598>)
 800c6e0:	a817      	add	r0, sp, #92	; 0x5c
 800c6e2:	f001 f855 	bl	800d790 <__match>
 800c6e6:	2800      	cmp	r0, #0
 800c6e8:	f43f aeb0 	beq.w	800c44c <_strtod_l+0xc4>
 800c6ec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c6ee:	498d      	ldr	r1, [pc, #564]	; (800c924 <_strtod_l+0x59c>)
 800c6f0:	3b01      	subs	r3, #1
 800c6f2:	a817      	add	r0, sp, #92	; 0x5c
 800c6f4:	9317      	str	r3, [sp, #92]	; 0x5c
 800c6f6:	f001 f84b 	bl	800d790 <__match>
 800c6fa:	b910      	cbnz	r0, 800c702 <_strtod_l+0x37a>
 800c6fc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c6fe:	3301      	adds	r3, #1
 800c700:	9317      	str	r3, [sp, #92]	; 0x5c
 800c702:	f8df b230 	ldr.w	fp, [pc, #560]	; 800c934 <_strtod_l+0x5ac>
 800c706:	f04f 0a00 	mov.w	sl, #0
 800c70a:	e681      	b.n	800c410 <_strtod_l+0x88>
 800c70c:	4886      	ldr	r0, [pc, #536]	; (800c928 <_strtod_l+0x5a0>)
 800c70e:	f002 f8e3 	bl	800e8d8 <nan>
 800c712:	ec5b ab10 	vmov	sl, fp, d0
 800c716:	e67b      	b.n	800c410 <_strtod_l+0x88>
 800c718:	9b05      	ldr	r3, [sp, #20]
 800c71a:	9807      	ldr	r0, [sp, #28]
 800c71c:	1af3      	subs	r3, r6, r3
 800c71e:	2f00      	cmp	r7, #0
 800c720:	bf08      	it	eq
 800c722:	462f      	moveq	r7, r5
 800c724:	2d10      	cmp	r5, #16
 800c726:	9306      	str	r3, [sp, #24]
 800c728:	46a8      	mov	r8, r5
 800c72a:	bfa8      	it	ge
 800c72c:	f04f 0810 	movge.w	r8, #16
 800c730:	f7f3 ff18 	bl	8000564 <__aeabi_ui2d>
 800c734:	2d09      	cmp	r5, #9
 800c736:	4682      	mov	sl, r0
 800c738:	468b      	mov	fp, r1
 800c73a:	dd13      	ble.n	800c764 <_strtod_l+0x3dc>
 800c73c:	4b7b      	ldr	r3, [pc, #492]	; (800c92c <_strtod_l+0x5a4>)
 800c73e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800c742:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800c746:	f7f3 ff87 	bl	8000658 <__aeabi_dmul>
 800c74a:	4682      	mov	sl, r0
 800c74c:	4648      	mov	r0, r9
 800c74e:	468b      	mov	fp, r1
 800c750:	f7f3 ff08 	bl	8000564 <__aeabi_ui2d>
 800c754:	4602      	mov	r2, r0
 800c756:	460b      	mov	r3, r1
 800c758:	4650      	mov	r0, sl
 800c75a:	4659      	mov	r1, fp
 800c75c:	f7f3 fdc6 	bl	80002ec <__adddf3>
 800c760:	4682      	mov	sl, r0
 800c762:	468b      	mov	fp, r1
 800c764:	2d0f      	cmp	r5, #15
 800c766:	dc38      	bgt.n	800c7da <_strtod_l+0x452>
 800c768:	9b06      	ldr	r3, [sp, #24]
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	f43f ae50 	beq.w	800c410 <_strtod_l+0x88>
 800c770:	dd24      	ble.n	800c7bc <_strtod_l+0x434>
 800c772:	2b16      	cmp	r3, #22
 800c774:	dc0b      	bgt.n	800c78e <_strtod_l+0x406>
 800c776:	496d      	ldr	r1, [pc, #436]	; (800c92c <_strtod_l+0x5a4>)
 800c778:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c77c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c780:	4652      	mov	r2, sl
 800c782:	465b      	mov	r3, fp
 800c784:	f7f3 ff68 	bl	8000658 <__aeabi_dmul>
 800c788:	4682      	mov	sl, r0
 800c78a:	468b      	mov	fp, r1
 800c78c:	e640      	b.n	800c410 <_strtod_l+0x88>
 800c78e:	9a06      	ldr	r2, [sp, #24]
 800c790:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800c794:	4293      	cmp	r3, r2
 800c796:	db20      	blt.n	800c7da <_strtod_l+0x452>
 800c798:	4c64      	ldr	r4, [pc, #400]	; (800c92c <_strtod_l+0x5a4>)
 800c79a:	f1c5 050f 	rsb	r5, r5, #15
 800c79e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800c7a2:	4652      	mov	r2, sl
 800c7a4:	465b      	mov	r3, fp
 800c7a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c7aa:	f7f3 ff55 	bl	8000658 <__aeabi_dmul>
 800c7ae:	9b06      	ldr	r3, [sp, #24]
 800c7b0:	1b5d      	subs	r5, r3, r5
 800c7b2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800c7b6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800c7ba:	e7e3      	b.n	800c784 <_strtod_l+0x3fc>
 800c7bc:	9b06      	ldr	r3, [sp, #24]
 800c7be:	3316      	adds	r3, #22
 800c7c0:	db0b      	blt.n	800c7da <_strtod_l+0x452>
 800c7c2:	9b05      	ldr	r3, [sp, #20]
 800c7c4:	1b9e      	subs	r6, r3, r6
 800c7c6:	4b59      	ldr	r3, [pc, #356]	; (800c92c <_strtod_l+0x5a4>)
 800c7c8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800c7cc:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c7d0:	4650      	mov	r0, sl
 800c7d2:	4659      	mov	r1, fp
 800c7d4:	f7f4 f86a 	bl	80008ac <__aeabi_ddiv>
 800c7d8:	e7d6      	b.n	800c788 <_strtod_l+0x400>
 800c7da:	9b06      	ldr	r3, [sp, #24]
 800c7dc:	eba5 0808 	sub.w	r8, r5, r8
 800c7e0:	4498      	add	r8, r3
 800c7e2:	f1b8 0f00 	cmp.w	r8, #0
 800c7e6:	dd74      	ble.n	800c8d2 <_strtod_l+0x54a>
 800c7e8:	f018 030f 	ands.w	r3, r8, #15
 800c7ec:	d00a      	beq.n	800c804 <_strtod_l+0x47c>
 800c7ee:	494f      	ldr	r1, [pc, #316]	; (800c92c <_strtod_l+0x5a4>)
 800c7f0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800c7f4:	4652      	mov	r2, sl
 800c7f6:	465b      	mov	r3, fp
 800c7f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c7fc:	f7f3 ff2c 	bl	8000658 <__aeabi_dmul>
 800c800:	4682      	mov	sl, r0
 800c802:	468b      	mov	fp, r1
 800c804:	f038 080f 	bics.w	r8, r8, #15
 800c808:	d04f      	beq.n	800c8aa <_strtod_l+0x522>
 800c80a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800c80e:	dd22      	ble.n	800c856 <_strtod_l+0x4ce>
 800c810:	2500      	movs	r5, #0
 800c812:	462e      	mov	r6, r5
 800c814:	9507      	str	r5, [sp, #28]
 800c816:	9505      	str	r5, [sp, #20]
 800c818:	2322      	movs	r3, #34	; 0x22
 800c81a:	f8df b118 	ldr.w	fp, [pc, #280]	; 800c934 <_strtod_l+0x5ac>
 800c81e:	6023      	str	r3, [r4, #0]
 800c820:	f04f 0a00 	mov.w	sl, #0
 800c824:	9b07      	ldr	r3, [sp, #28]
 800c826:	2b00      	cmp	r3, #0
 800c828:	f43f adf2 	beq.w	800c410 <_strtod_l+0x88>
 800c82c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c82e:	4620      	mov	r0, r4
 800c830:	f001 f8ca 	bl	800d9c8 <_Bfree>
 800c834:	9905      	ldr	r1, [sp, #20]
 800c836:	4620      	mov	r0, r4
 800c838:	f001 f8c6 	bl	800d9c8 <_Bfree>
 800c83c:	4631      	mov	r1, r6
 800c83e:	4620      	mov	r0, r4
 800c840:	f001 f8c2 	bl	800d9c8 <_Bfree>
 800c844:	9907      	ldr	r1, [sp, #28]
 800c846:	4620      	mov	r0, r4
 800c848:	f001 f8be 	bl	800d9c8 <_Bfree>
 800c84c:	4629      	mov	r1, r5
 800c84e:	4620      	mov	r0, r4
 800c850:	f001 f8ba 	bl	800d9c8 <_Bfree>
 800c854:	e5dc      	b.n	800c410 <_strtod_l+0x88>
 800c856:	4b36      	ldr	r3, [pc, #216]	; (800c930 <_strtod_l+0x5a8>)
 800c858:	9304      	str	r3, [sp, #16]
 800c85a:	2300      	movs	r3, #0
 800c85c:	ea4f 1828 	mov.w	r8, r8, asr #4
 800c860:	4650      	mov	r0, sl
 800c862:	4659      	mov	r1, fp
 800c864:	4699      	mov	r9, r3
 800c866:	f1b8 0f01 	cmp.w	r8, #1
 800c86a:	dc21      	bgt.n	800c8b0 <_strtod_l+0x528>
 800c86c:	b10b      	cbz	r3, 800c872 <_strtod_l+0x4ea>
 800c86e:	4682      	mov	sl, r0
 800c870:	468b      	mov	fp, r1
 800c872:	4b2f      	ldr	r3, [pc, #188]	; (800c930 <_strtod_l+0x5a8>)
 800c874:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800c878:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800c87c:	4652      	mov	r2, sl
 800c87e:	465b      	mov	r3, fp
 800c880:	e9d9 0100 	ldrd	r0, r1, [r9]
 800c884:	f7f3 fee8 	bl	8000658 <__aeabi_dmul>
 800c888:	4b2a      	ldr	r3, [pc, #168]	; (800c934 <_strtod_l+0x5ac>)
 800c88a:	460a      	mov	r2, r1
 800c88c:	400b      	ands	r3, r1
 800c88e:	492a      	ldr	r1, [pc, #168]	; (800c938 <_strtod_l+0x5b0>)
 800c890:	428b      	cmp	r3, r1
 800c892:	4682      	mov	sl, r0
 800c894:	d8bc      	bhi.n	800c810 <_strtod_l+0x488>
 800c896:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800c89a:	428b      	cmp	r3, r1
 800c89c:	bf86      	itte	hi
 800c89e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800c93c <_strtod_l+0x5b4>
 800c8a2:	f04f 3aff 	movhi.w	sl, #4294967295
 800c8a6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800c8aa:	2300      	movs	r3, #0
 800c8ac:	9304      	str	r3, [sp, #16]
 800c8ae:	e084      	b.n	800c9ba <_strtod_l+0x632>
 800c8b0:	f018 0f01 	tst.w	r8, #1
 800c8b4:	d005      	beq.n	800c8c2 <_strtod_l+0x53a>
 800c8b6:	9b04      	ldr	r3, [sp, #16]
 800c8b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8bc:	f7f3 fecc 	bl	8000658 <__aeabi_dmul>
 800c8c0:	2301      	movs	r3, #1
 800c8c2:	9a04      	ldr	r2, [sp, #16]
 800c8c4:	3208      	adds	r2, #8
 800c8c6:	f109 0901 	add.w	r9, r9, #1
 800c8ca:	ea4f 0868 	mov.w	r8, r8, asr #1
 800c8ce:	9204      	str	r2, [sp, #16]
 800c8d0:	e7c9      	b.n	800c866 <_strtod_l+0x4de>
 800c8d2:	d0ea      	beq.n	800c8aa <_strtod_l+0x522>
 800c8d4:	f1c8 0800 	rsb	r8, r8, #0
 800c8d8:	f018 020f 	ands.w	r2, r8, #15
 800c8dc:	d00a      	beq.n	800c8f4 <_strtod_l+0x56c>
 800c8de:	4b13      	ldr	r3, [pc, #76]	; (800c92c <_strtod_l+0x5a4>)
 800c8e0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c8e4:	4650      	mov	r0, sl
 800c8e6:	4659      	mov	r1, fp
 800c8e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8ec:	f7f3 ffde 	bl	80008ac <__aeabi_ddiv>
 800c8f0:	4682      	mov	sl, r0
 800c8f2:	468b      	mov	fp, r1
 800c8f4:	ea5f 1828 	movs.w	r8, r8, asr #4
 800c8f8:	d0d7      	beq.n	800c8aa <_strtod_l+0x522>
 800c8fa:	f1b8 0f1f 	cmp.w	r8, #31
 800c8fe:	dd1f      	ble.n	800c940 <_strtod_l+0x5b8>
 800c900:	2500      	movs	r5, #0
 800c902:	462e      	mov	r6, r5
 800c904:	9507      	str	r5, [sp, #28]
 800c906:	9505      	str	r5, [sp, #20]
 800c908:	2322      	movs	r3, #34	; 0x22
 800c90a:	f04f 0a00 	mov.w	sl, #0
 800c90e:	f04f 0b00 	mov.w	fp, #0
 800c912:	6023      	str	r3, [r4, #0]
 800c914:	e786      	b.n	800c824 <_strtod_l+0x49c>
 800c916:	bf00      	nop
 800c918:	0800f875 	.word	0x0800f875
 800c91c:	0800f88c 	.word	0x0800f88c
 800c920:	0800f86c 	.word	0x0800f86c
 800c924:	0800f86f 	.word	0x0800f86f
 800c928:	0800fc32 	.word	0x0800fc32
 800c92c:	0800faf0 	.word	0x0800faf0
 800c930:	0800fac8 	.word	0x0800fac8
 800c934:	7ff00000 	.word	0x7ff00000
 800c938:	7ca00000 	.word	0x7ca00000
 800c93c:	7fefffff 	.word	0x7fefffff
 800c940:	f018 0310 	ands.w	r3, r8, #16
 800c944:	bf18      	it	ne
 800c946:	236a      	movne	r3, #106	; 0x6a
 800c948:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800ccf8 <_strtod_l+0x970>
 800c94c:	9304      	str	r3, [sp, #16]
 800c94e:	4650      	mov	r0, sl
 800c950:	4659      	mov	r1, fp
 800c952:	2300      	movs	r3, #0
 800c954:	f018 0f01 	tst.w	r8, #1
 800c958:	d004      	beq.n	800c964 <_strtod_l+0x5dc>
 800c95a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800c95e:	f7f3 fe7b 	bl	8000658 <__aeabi_dmul>
 800c962:	2301      	movs	r3, #1
 800c964:	ea5f 0868 	movs.w	r8, r8, asr #1
 800c968:	f109 0908 	add.w	r9, r9, #8
 800c96c:	d1f2      	bne.n	800c954 <_strtod_l+0x5cc>
 800c96e:	b10b      	cbz	r3, 800c974 <_strtod_l+0x5ec>
 800c970:	4682      	mov	sl, r0
 800c972:	468b      	mov	fp, r1
 800c974:	9b04      	ldr	r3, [sp, #16]
 800c976:	b1c3      	cbz	r3, 800c9aa <_strtod_l+0x622>
 800c978:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800c97c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800c980:	2b00      	cmp	r3, #0
 800c982:	4659      	mov	r1, fp
 800c984:	dd11      	ble.n	800c9aa <_strtod_l+0x622>
 800c986:	2b1f      	cmp	r3, #31
 800c988:	f340 8124 	ble.w	800cbd4 <_strtod_l+0x84c>
 800c98c:	2b34      	cmp	r3, #52	; 0x34
 800c98e:	bfde      	ittt	le
 800c990:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800c994:	f04f 33ff 	movle.w	r3, #4294967295
 800c998:	fa03 f202 	lslle.w	r2, r3, r2
 800c99c:	f04f 0a00 	mov.w	sl, #0
 800c9a0:	bfcc      	ite	gt
 800c9a2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800c9a6:	ea02 0b01 	andle.w	fp, r2, r1
 800c9aa:	2200      	movs	r2, #0
 800c9ac:	2300      	movs	r3, #0
 800c9ae:	4650      	mov	r0, sl
 800c9b0:	4659      	mov	r1, fp
 800c9b2:	f7f4 f8b9 	bl	8000b28 <__aeabi_dcmpeq>
 800c9b6:	2800      	cmp	r0, #0
 800c9b8:	d1a2      	bne.n	800c900 <_strtod_l+0x578>
 800c9ba:	9b07      	ldr	r3, [sp, #28]
 800c9bc:	9300      	str	r3, [sp, #0]
 800c9be:	9908      	ldr	r1, [sp, #32]
 800c9c0:	462b      	mov	r3, r5
 800c9c2:	463a      	mov	r2, r7
 800c9c4:	4620      	mov	r0, r4
 800c9c6:	f001 f867 	bl	800da98 <__s2b>
 800c9ca:	9007      	str	r0, [sp, #28]
 800c9cc:	2800      	cmp	r0, #0
 800c9ce:	f43f af1f 	beq.w	800c810 <_strtod_l+0x488>
 800c9d2:	9b05      	ldr	r3, [sp, #20]
 800c9d4:	1b9e      	subs	r6, r3, r6
 800c9d6:	9b06      	ldr	r3, [sp, #24]
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	bfb4      	ite	lt
 800c9dc:	4633      	movlt	r3, r6
 800c9de:	2300      	movge	r3, #0
 800c9e0:	930c      	str	r3, [sp, #48]	; 0x30
 800c9e2:	9b06      	ldr	r3, [sp, #24]
 800c9e4:	2500      	movs	r5, #0
 800c9e6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800c9ea:	9312      	str	r3, [sp, #72]	; 0x48
 800c9ec:	462e      	mov	r6, r5
 800c9ee:	9b07      	ldr	r3, [sp, #28]
 800c9f0:	4620      	mov	r0, r4
 800c9f2:	6859      	ldr	r1, [r3, #4]
 800c9f4:	f000 ffa8 	bl	800d948 <_Balloc>
 800c9f8:	9005      	str	r0, [sp, #20]
 800c9fa:	2800      	cmp	r0, #0
 800c9fc:	f43f af0c 	beq.w	800c818 <_strtod_l+0x490>
 800ca00:	9b07      	ldr	r3, [sp, #28]
 800ca02:	691a      	ldr	r2, [r3, #16]
 800ca04:	3202      	adds	r2, #2
 800ca06:	f103 010c 	add.w	r1, r3, #12
 800ca0a:	0092      	lsls	r2, r2, #2
 800ca0c:	300c      	adds	r0, #12
 800ca0e:	f000 ff81 	bl	800d914 <memcpy>
 800ca12:	ec4b ab10 	vmov	d0, sl, fp
 800ca16:	aa1a      	add	r2, sp, #104	; 0x68
 800ca18:	a919      	add	r1, sp, #100	; 0x64
 800ca1a:	4620      	mov	r0, r4
 800ca1c:	f001 fb82 	bl	800e124 <__d2b>
 800ca20:	ec4b ab18 	vmov	d8, sl, fp
 800ca24:	9018      	str	r0, [sp, #96]	; 0x60
 800ca26:	2800      	cmp	r0, #0
 800ca28:	f43f aef6 	beq.w	800c818 <_strtod_l+0x490>
 800ca2c:	2101      	movs	r1, #1
 800ca2e:	4620      	mov	r0, r4
 800ca30:	f001 f8cc 	bl	800dbcc <__i2b>
 800ca34:	4606      	mov	r6, r0
 800ca36:	2800      	cmp	r0, #0
 800ca38:	f43f aeee 	beq.w	800c818 <_strtod_l+0x490>
 800ca3c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ca3e:	9904      	ldr	r1, [sp, #16]
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	bfab      	itete	ge
 800ca44:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800ca46:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800ca48:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800ca4a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800ca4e:	bfac      	ite	ge
 800ca50:	eb03 0902 	addge.w	r9, r3, r2
 800ca54:	1ad7      	sublt	r7, r2, r3
 800ca56:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800ca58:	eba3 0801 	sub.w	r8, r3, r1
 800ca5c:	4490      	add	r8, r2
 800ca5e:	4ba1      	ldr	r3, [pc, #644]	; (800cce4 <_strtod_l+0x95c>)
 800ca60:	f108 38ff 	add.w	r8, r8, #4294967295
 800ca64:	4598      	cmp	r8, r3
 800ca66:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800ca6a:	f280 80c7 	bge.w	800cbfc <_strtod_l+0x874>
 800ca6e:	eba3 0308 	sub.w	r3, r3, r8
 800ca72:	2b1f      	cmp	r3, #31
 800ca74:	eba2 0203 	sub.w	r2, r2, r3
 800ca78:	f04f 0101 	mov.w	r1, #1
 800ca7c:	f300 80b1 	bgt.w	800cbe2 <_strtod_l+0x85a>
 800ca80:	fa01 f303 	lsl.w	r3, r1, r3
 800ca84:	930d      	str	r3, [sp, #52]	; 0x34
 800ca86:	2300      	movs	r3, #0
 800ca88:	9308      	str	r3, [sp, #32]
 800ca8a:	eb09 0802 	add.w	r8, r9, r2
 800ca8e:	9b04      	ldr	r3, [sp, #16]
 800ca90:	45c1      	cmp	r9, r8
 800ca92:	4417      	add	r7, r2
 800ca94:	441f      	add	r7, r3
 800ca96:	464b      	mov	r3, r9
 800ca98:	bfa8      	it	ge
 800ca9a:	4643      	movge	r3, r8
 800ca9c:	42bb      	cmp	r3, r7
 800ca9e:	bfa8      	it	ge
 800caa0:	463b      	movge	r3, r7
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	bfc2      	ittt	gt
 800caa6:	eba8 0803 	subgt.w	r8, r8, r3
 800caaa:	1aff      	subgt	r7, r7, r3
 800caac:	eba9 0903 	subgt.w	r9, r9, r3
 800cab0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	dd17      	ble.n	800cae6 <_strtod_l+0x75e>
 800cab6:	4631      	mov	r1, r6
 800cab8:	461a      	mov	r2, r3
 800caba:	4620      	mov	r0, r4
 800cabc:	f001 f946 	bl	800dd4c <__pow5mult>
 800cac0:	4606      	mov	r6, r0
 800cac2:	2800      	cmp	r0, #0
 800cac4:	f43f aea8 	beq.w	800c818 <_strtod_l+0x490>
 800cac8:	4601      	mov	r1, r0
 800caca:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800cacc:	4620      	mov	r0, r4
 800cace:	f001 f893 	bl	800dbf8 <__multiply>
 800cad2:	900b      	str	r0, [sp, #44]	; 0x2c
 800cad4:	2800      	cmp	r0, #0
 800cad6:	f43f ae9f 	beq.w	800c818 <_strtod_l+0x490>
 800cada:	9918      	ldr	r1, [sp, #96]	; 0x60
 800cadc:	4620      	mov	r0, r4
 800cade:	f000 ff73 	bl	800d9c8 <_Bfree>
 800cae2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cae4:	9318      	str	r3, [sp, #96]	; 0x60
 800cae6:	f1b8 0f00 	cmp.w	r8, #0
 800caea:	f300 808c 	bgt.w	800cc06 <_strtod_l+0x87e>
 800caee:	9b06      	ldr	r3, [sp, #24]
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	dd08      	ble.n	800cb06 <_strtod_l+0x77e>
 800caf4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800caf6:	9905      	ldr	r1, [sp, #20]
 800caf8:	4620      	mov	r0, r4
 800cafa:	f001 f927 	bl	800dd4c <__pow5mult>
 800cafe:	9005      	str	r0, [sp, #20]
 800cb00:	2800      	cmp	r0, #0
 800cb02:	f43f ae89 	beq.w	800c818 <_strtod_l+0x490>
 800cb06:	2f00      	cmp	r7, #0
 800cb08:	dd08      	ble.n	800cb1c <_strtod_l+0x794>
 800cb0a:	9905      	ldr	r1, [sp, #20]
 800cb0c:	463a      	mov	r2, r7
 800cb0e:	4620      	mov	r0, r4
 800cb10:	f001 f976 	bl	800de00 <__lshift>
 800cb14:	9005      	str	r0, [sp, #20]
 800cb16:	2800      	cmp	r0, #0
 800cb18:	f43f ae7e 	beq.w	800c818 <_strtod_l+0x490>
 800cb1c:	f1b9 0f00 	cmp.w	r9, #0
 800cb20:	dd08      	ble.n	800cb34 <_strtod_l+0x7ac>
 800cb22:	4631      	mov	r1, r6
 800cb24:	464a      	mov	r2, r9
 800cb26:	4620      	mov	r0, r4
 800cb28:	f001 f96a 	bl	800de00 <__lshift>
 800cb2c:	4606      	mov	r6, r0
 800cb2e:	2800      	cmp	r0, #0
 800cb30:	f43f ae72 	beq.w	800c818 <_strtod_l+0x490>
 800cb34:	9a05      	ldr	r2, [sp, #20]
 800cb36:	9918      	ldr	r1, [sp, #96]	; 0x60
 800cb38:	4620      	mov	r0, r4
 800cb3a:	f001 f9ed 	bl	800df18 <__mdiff>
 800cb3e:	4605      	mov	r5, r0
 800cb40:	2800      	cmp	r0, #0
 800cb42:	f43f ae69 	beq.w	800c818 <_strtod_l+0x490>
 800cb46:	68c3      	ldr	r3, [r0, #12]
 800cb48:	930b      	str	r3, [sp, #44]	; 0x2c
 800cb4a:	2300      	movs	r3, #0
 800cb4c:	60c3      	str	r3, [r0, #12]
 800cb4e:	4631      	mov	r1, r6
 800cb50:	f001 f9c6 	bl	800dee0 <__mcmp>
 800cb54:	2800      	cmp	r0, #0
 800cb56:	da60      	bge.n	800cc1a <_strtod_l+0x892>
 800cb58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cb5a:	ea53 030a 	orrs.w	r3, r3, sl
 800cb5e:	f040 8082 	bne.w	800cc66 <_strtod_l+0x8de>
 800cb62:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d17d      	bne.n	800cc66 <_strtod_l+0x8de>
 800cb6a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800cb6e:	0d1b      	lsrs	r3, r3, #20
 800cb70:	051b      	lsls	r3, r3, #20
 800cb72:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800cb76:	d976      	bls.n	800cc66 <_strtod_l+0x8de>
 800cb78:	696b      	ldr	r3, [r5, #20]
 800cb7a:	b913      	cbnz	r3, 800cb82 <_strtod_l+0x7fa>
 800cb7c:	692b      	ldr	r3, [r5, #16]
 800cb7e:	2b01      	cmp	r3, #1
 800cb80:	dd71      	ble.n	800cc66 <_strtod_l+0x8de>
 800cb82:	4629      	mov	r1, r5
 800cb84:	2201      	movs	r2, #1
 800cb86:	4620      	mov	r0, r4
 800cb88:	f001 f93a 	bl	800de00 <__lshift>
 800cb8c:	4631      	mov	r1, r6
 800cb8e:	4605      	mov	r5, r0
 800cb90:	f001 f9a6 	bl	800dee0 <__mcmp>
 800cb94:	2800      	cmp	r0, #0
 800cb96:	dd66      	ble.n	800cc66 <_strtod_l+0x8de>
 800cb98:	9904      	ldr	r1, [sp, #16]
 800cb9a:	4a53      	ldr	r2, [pc, #332]	; (800cce8 <_strtod_l+0x960>)
 800cb9c:	465b      	mov	r3, fp
 800cb9e:	2900      	cmp	r1, #0
 800cba0:	f000 8081 	beq.w	800cca6 <_strtod_l+0x91e>
 800cba4:	ea02 010b 	and.w	r1, r2, fp
 800cba8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800cbac:	dc7b      	bgt.n	800cca6 <_strtod_l+0x91e>
 800cbae:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800cbb2:	f77f aea9 	ble.w	800c908 <_strtod_l+0x580>
 800cbb6:	4b4d      	ldr	r3, [pc, #308]	; (800ccec <_strtod_l+0x964>)
 800cbb8:	4650      	mov	r0, sl
 800cbba:	4659      	mov	r1, fp
 800cbbc:	2200      	movs	r2, #0
 800cbbe:	f7f3 fd4b 	bl	8000658 <__aeabi_dmul>
 800cbc2:	460b      	mov	r3, r1
 800cbc4:	4303      	orrs	r3, r0
 800cbc6:	bf08      	it	eq
 800cbc8:	2322      	moveq	r3, #34	; 0x22
 800cbca:	4682      	mov	sl, r0
 800cbcc:	468b      	mov	fp, r1
 800cbce:	bf08      	it	eq
 800cbd0:	6023      	streq	r3, [r4, #0]
 800cbd2:	e62b      	b.n	800c82c <_strtod_l+0x4a4>
 800cbd4:	f04f 32ff 	mov.w	r2, #4294967295
 800cbd8:	fa02 f303 	lsl.w	r3, r2, r3
 800cbdc:	ea03 0a0a 	and.w	sl, r3, sl
 800cbe0:	e6e3      	b.n	800c9aa <_strtod_l+0x622>
 800cbe2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800cbe6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800cbea:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800cbee:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800cbf2:	fa01 f308 	lsl.w	r3, r1, r8
 800cbf6:	9308      	str	r3, [sp, #32]
 800cbf8:	910d      	str	r1, [sp, #52]	; 0x34
 800cbfa:	e746      	b.n	800ca8a <_strtod_l+0x702>
 800cbfc:	2300      	movs	r3, #0
 800cbfe:	9308      	str	r3, [sp, #32]
 800cc00:	2301      	movs	r3, #1
 800cc02:	930d      	str	r3, [sp, #52]	; 0x34
 800cc04:	e741      	b.n	800ca8a <_strtod_l+0x702>
 800cc06:	9918      	ldr	r1, [sp, #96]	; 0x60
 800cc08:	4642      	mov	r2, r8
 800cc0a:	4620      	mov	r0, r4
 800cc0c:	f001 f8f8 	bl	800de00 <__lshift>
 800cc10:	9018      	str	r0, [sp, #96]	; 0x60
 800cc12:	2800      	cmp	r0, #0
 800cc14:	f47f af6b 	bne.w	800caee <_strtod_l+0x766>
 800cc18:	e5fe      	b.n	800c818 <_strtod_l+0x490>
 800cc1a:	465f      	mov	r7, fp
 800cc1c:	d16e      	bne.n	800ccfc <_strtod_l+0x974>
 800cc1e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800cc20:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cc24:	b342      	cbz	r2, 800cc78 <_strtod_l+0x8f0>
 800cc26:	4a32      	ldr	r2, [pc, #200]	; (800ccf0 <_strtod_l+0x968>)
 800cc28:	4293      	cmp	r3, r2
 800cc2a:	d128      	bne.n	800cc7e <_strtod_l+0x8f6>
 800cc2c:	9b04      	ldr	r3, [sp, #16]
 800cc2e:	4651      	mov	r1, sl
 800cc30:	b1eb      	cbz	r3, 800cc6e <_strtod_l+0x8e6>
 800cc32:	4b2d      	ldr	r3, [pc, #180]	; (800cce8 <_strtod_l+0x960>)
 800cc34:	403b      	ands	r3, r7
 800cc36:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800cc3a:	f04f 32ff 	mov.w	r2, #4294967295
 800cc3e:	d819      	bhi.n	800cc74 <_strtod_l+0x8ec>
 800cc40:	0d1b      	lsrs	r3, r3, #20
 800cc42:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800cc46:	fa02 f303 	lsl.w	r3, r2, r3
 800cc4a:	4299      	cmp	r1, r3
 800cc4c:	d117      	bne.n	800cc7e <_strtod_l+0x8f6>
 800cc4e:	4b29      	ldr	r3, [pc, #164]	; (800ccf4 <_strtod_l+0x96c>)
 800cc50:	429f      	cmp	r7, r3
 800cc52:	d102      	bne.n	800cc5a <_strtod_l+0x8d2>
 800cc54:	3101      	adds	r1, #1
 800cc56:	f43f addf 	beq.w	800c818 <_strtod_l+0x490>
 800cc5a:	4b23      	ldr	r3, [pc, #140]	; (800cce8 <_strtod_l+0x960>)
 800cc5c:	403b      	ands	r3, r7
 800cc5e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800cc62:	f04f 0a00 	mov.w	sl, #0
 800cc66:	9b04      	ldr	r3, [sp, #16]
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d1a4      	bne.n	800cbb6 <_strtod_l+0x82e>
 800cc6c:	e5de      	b.n	800c82c <_strtod_l+0x4a4>
 800cc6e:	f04f 33ff 	mov.w	r3, #4294967295
 800cc72:	e7ea      	b.n	800cc4a <_strtod_l+0x8c2>
 800cc74:	4613      	mov	r3, r2
 800cc76:	e7e8      	b.n	800cc4a <_strtod_l+0x8c2>
 800cc78:	ea53 030a 	orrs.w	r3, r3, sl
 800cc7c:	d08c      	beq.n	800cb98 <_strtod_l+0x810>
 800cc7e:	9b08      	ldr	r3, [sp, #32]
 800cc80:	b1db      	cbz	r3, 800ccba <_strtod_l+0x932>
 800cc82:	423b      	tst	r3, r7
 800cc84:	d0ef      	beq.n	800cc66 <_strtod_l+0x8de>
 800cc86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cc88:	9a04      	ldr	r2, [sp, #16]
 800cc8a:	4650      	mov	r0, sl
 800cc8c:	4659      	mov	r1, fp
 800cc8e:	b1c3      	cbz	r3, 800ccc2 <_strtod_l+0x93a>
 800cc90:	f7ff fb5e 	bl	800c350 <sulp>
 800cc94:	4602      	mov	r2, r0
 800cc96:	460b      	mov	r3, r1
 800cc98:	ec51 0b18 	vmov	r0, r1, d8
 800cc9c:	f7f3 fb26 	bl	80002ec <__adddf3>
 800cca0:	4682      	mov	sl, r0
 800cca2:	468b      	mov	fp, r1
 800cca4:	e7df      	b.n	800cc66 <_strtod_l+0x8de>
 800cca6:	4013      	ands	r3, r2
 800cca8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800ccac:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800ccb0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800ccb4:	f04f 3aff 	mov.w	sl, #4294967295
 800ccb8:	e7d5      	b.n	800cc66 <_strtod_l+0x8de>
 800ccba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ccbc:	ea13 0f0a 	tst.w	r3, sl
 800ccc0:	e7e0      	b.n	800cc84 <_strtod_l+0x8fc>
 800ccc2:	f7ff fb45 	bl	800c350 <sulp>
 800ccc6:	4602      	mov	r2, r0
 800ccc8:	460b      	mov	r3, r1
 800ccca:	ec51 0b18 	vmov	r0, r1, d8
 800ccce:	f7f3 fb0b 	bl	80002e8 <__aeabi_dsub>
 800ccd2:	2200      	movs	r2, #0
 800ccd4:	2300      	movs	r3, #0
 800ccd6:	4682      	mov	sl, r0
 800ccd8:	468b      	mov	fp, r1
 800ccda:	f7f3 ff25 	bl	8000b28 <__aeabi_dcmpeq>
 800ccde:	2800      	cmp	r0, #0
 800cce0:	d0c1      	beq.n	800cc66 <_strtod_l+0x8de>
 800cce2:	e611      	b.n	800c908 <_strtod_l+0x580>
 800cce4:	fffffc02 	.word	0xfffffc02
 800cce8:	7ff00000 	.word	0x7ff00000
 800ccec:	39500000 	.word	0x39500000
 800ccf0:	000fffff 	.word	0x000fffff
 800ccf4:	7fefffff 	.word	0x7fefffff
 800ccf8:	0800f8a0 	.word	0x0800f8a0
 800ccfc:	4631      	mov	r1, r6
 800ccfe:	4628      	mov	r0, r5
 800cd00:	f001 fa6c 	bl	800e1dc <__ratio>
 800cd04:	ec59 8b10 	vmov	r8, r9, d0
 800cd08:	ee10 0a10 	vmov	r0, s0
 800cd0c:	2200      	movs	r2, #0
 800cd0e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800cd12:	4649      	mov	r1, r9
 800cd14:	f7f3 ff1c 	bl	8000b50 <__aeabi_dcmple>
 800cd18:	2800      	cmp	r0, #0
 800cd1a:	d07a      	beq.n	800ce12 <_strtod_l+0xa8a>
 800cd1c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d04a      	beq.n	800cdb8 <_strtod_l+0xa30>
 800cd22:	4b95      	ldr	r3, [pc, #596]	; (800cf78 <_strtod_l+0xbf0>)
 800cd24:	2200      	movs	r2, #0
 800cd26:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800cd2a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800cf78 <_strtod_l+0xbf0>
 800cd2e:	f04f 0800 	mov.w	r8, #0
 800cd32:	4b92      	ldr	r3, [pc, #584]	; (800cf7c <_strtod_l+0xbf4>)
 800cd34:	403b      	ands	r3, r7
 800cd36:	930d      	str	r3, [sp, #52]	; 0x34
 800cd38:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800cd3a:	4b91      	ldr	r3, [pc, #580]	; (800cf80 <_strtod_l+0xbf8>)
 800cd3c:	429a      	cmp	r2, r3
 800cd3e:	f040 80b0 	bne.w	800cea2 <_strtod_l+0xb1a>
 800cd42:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800cd46:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800cd4a:	ec4b ab10 	vmov	d0, sl, fp
 800cd4e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800cd52:	f001 f96b 	bl	800e02c <__ulp>
 800cd56:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800cd5a:	ec53 2b10 	vmov	r2, r3, d0
 800cd5e:	f7f3 fc7b 	bl	8000658 <__aeabi_dmul>
 800cd62:	4652      	mov	r2, sl
 800cd64:	465b      	mov	r3, fp
 800cd66:	f7f3 fac1 	bl	80002ec <__adddf3>
 800cd6a:	460b      	mov	r3, r1
 800cd6c:	4983      	ldr	r1, [pc, #524]	; (800cf7c <_strtod_l+0xbf4>)
 800cd6e:	4a85      	ldr	r2, [pc, #532]	; (800cf84 <_strtod_l+0xbfc>)
 800cd70:	4019      	ands	r1, r3
 800cd72:	4291      	cmp	r1, r2
 800cd74:	4682      	mov	sl, r0
 800cd76:	d960      	bls.n	800ce3a <_strtod_l+0xab2>
 800cd78:	ee18 3a90 	vmov	r3, s17
 800cd7c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800cd80:	4293      	cmp	r3, r2
 800cd82:	d104      	bne.n	800cd8e <_strtod_l+0xa06>
 800cd84:	ee18 3a10 	vmov	r3, s16
 800cd88:	3301      	adds	r3, #1
 800cd8a:	f43f ad45 	beq.w	800c818 <_strtod_l+0x490>
 800cd8e:	f8df b200 	ldr.w	fp, [pc, #512]	; 800cf90 <_strtod_l+0xc08>
 800cd92:	f04f 3aff 	mov.w	sl, #4294967295
 800cd96:	9918      	ldr	r1, [sp, #96]	; 0x60
 800cd98:	4620      	mov	r0, r4
 800cd9a:	f000 fe15 	bl	800d9c8 <_Bfree>
 800cd9e:	9905      	ldr	r1, [sp, #20]
 800cda0:	4620      	mov	r0, r4
 800cda2:	f000 fe11 	bl	800d9c8 <_Bfree>
 800cda6:	4631      	mov	r1, r6
 800cda8:	4620      	mov	r0, r4
 800cdaa:	f000 fe0d 	bl	800d9c8 <_Bfree>
 800cdae:	4629      	mov	r1, r5
 800cdb0:	4620      	mov	r0, r4
 800cdb2:	f000 fe09 	bl	800d9c8 <_Bfree>
 800cdb6:	e61a      	b.n	800c9ee <_strtod_l+0x666>
 800cdb8:	f1ba 0f00 	cmp.w	sl, #0
 800cdbc:	d11b      	bne.n	800cdf6 <_strtod_l+0xa6e>
 800cdbe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cdc2:	b9f3      	cbnz	r3, 800ce02 <_strtod_l+0xa7a>
 800cdc4:	4b6c      	ldr	r3, [pc, #432]	; (800cf78 <_strtod_l+0xbf0>)
 800cdc6:	2200      	movs	r2, #0
 800cdc8:	4640      	mov	r0, r8
 800cdca:	4649      	mov	r1, r9
 800cdcc:	f7f3 feb6 	bl	8000b3c <__aeabi_dcmplt>
 800cdd0:	b9d0      	cbnz	r0, 800ce08 <_strtod_l+0xa80>
 800cdd2:	4640      	mov	r0, r8
 800cdd4:	4649      	mov	r1, r9
 800cdd6:	4b6c      	ldr	r3, [pc, #432]	; (800cf88 <_strtod_l+0xc00>)
 800cdd8:	2200      	movs	r2, #0
 800cdda:	f7f3 fc3d 	bl	8000658 <__aeabi_dmul>
 800cdde:	4680      	mov	r8, r0
 800cde0:	4689      	mov	r9, r1
 800cde2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800cde6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800cdea:	9315      	str	r3, [sp, #84]	; 0x54
 800cdec:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800cdf0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800cdf4:	e79d      	b.n	800cd32 <_strtod_l+0x9aa>
 800cdf6:	f1ba 0f01 	cmp.w	sl, #1
 800cdfa:	d102      	bne.n	800ce02 <_strtod_l+0xa7a>
 800cdfc:	2f00      	cmp	r7, #0
 800cdfe:	f43f ad83 	beq.w	800c908 <_strtod_l+0x580>
 800ce02:	4b62      	ldr	r3, [pc, #392]	; (800cf8c <_strtod_l+0xc04>)
 800ce04:	2200      	movs	r2, #0
 800ce06:	e78e      	b.n	800cd26 <_strtod_l+0x99e>
 800ce08:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800cf88 <_strtod_l+0xc00>
 800ce0c:	f04f 0800 	mov.w	r8, #0
 800ce10:	e7e7      	b.n	800cde2 <_strtod_l+0xa5a>
 800ce12:	4b5d      	ldr	r3, [pc, #372]	; (800cf88 <_strtod_l+0xc00>)
 800ce14:	4640      	mov	r0, r8
 800ce16:	4649      	mov	r1, r9
 800ce18:	2200      	movs	r2, #0
 800ce1a:	f7f3 fc1d 	bl	8000658 <__aeabi_dmul>
 800ce1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ce20:	4680      	mov	r8, r0
 800ce22:	4689      	mov	r9, r1
 800ce24:	b933      	cbnz	r3, 800ce34 <_strtod_l+0xaac>
 800ce26:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ce2a:	900e      	str	r0, [sp, #56]	; 0x38
 800ce2c:	930f      	str	r3, [sp, #60]	; 0x3c
 800ce2e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800ce32:	e7dd      	b.n	800cdf0 <_strtod_l+0xa68>
 800ce34:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800ce38:	e7f9      	b.n	800ce2e <_strtod_l+0xaa6>
 800ce3a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800ce3e:	9b04      	ldr	r3, [sp, #16]
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d1a8      	bne.n	800cd96 <_strtod_l+0xa0e>
 800ce44:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ce48:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ce4a:	0d1b      	lsrs	r3, r3, #20
 800ce4c:	051b      	lsls	r3, r3, #20
 800ce4e:	429a      	cmp	r2, r3
 800ce50:	d1a1      	bne.n	800cd96 <_strtod_l+0xa0e>
 800ce52:	4640      	mov	r0, r8
 800ce54:	4649      	mov	r1, r9
 800ce56:	f7f3 ff37 	bl	8000cc8 <__aeabi_d2lz>
 800ce5a:	f7f3 fbcf 	bl	80005fc <__aeabi_l2d>
 800ce5e:	4602      	mov	r2, r0
 800ce60:	460b      	mov	r3, r1
 800ce62:	4640      	mov	r0, r8
 800ce64:	4649      	mov	r1, r9
 800ce66:	f7f3 fa3f 	bl	80002e8 <__aeabi_dsub>
 800ce6a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ce6c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ce70:	ea43 030a 	orr.w	r3, r3, sl
 800ce74:	4313      	orrs	r3, r2
 800ce76:	4680      	mov	r8, r0
 800ce78:	4689      	mov	r9, r1
 800ce7a:	d055      	beq.n	800cf28 <_strtod_l+0xba0>
 800ce7c:	a336      	add	r3, pc, #216	; (adr r3, 800cf58 <_strtod_l+0xbd0>)
 800ce7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce82:	f7f3 fe5b 	bl	8000b3c <__aeabi_dcmplt>
 800ce86:	2800      	cmp	r0, #0
 800ce88:	f47f acd0 	bne.w	800c82c <_strtod_l+0x4a4>
 800ce8c:	a334      	add	r3, pc, #208	; (adr r3, 800cf60 <_strtod_l+0xbd8>)
 800ce8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce92:	4640      	mov	r0, r8
 800ce94:	4649      	mov	r1, r9
 800ce96:	f7f3 fe6f 	bl	8000b78 <__aeabi_dcmpgt>
 800ce9a:	2800      	cmp	r0, #0
 800ce9c:	f43f af7b 	beq.w	800cd96 <_strtod_l+0xa0e>
 800cea0:	e4c4      	b.n	800c82c <_strtod_l+0x4a4>
 800cea2:	9b04      	ldr	r3, [sp, #16]
 800cea4:	b333      	cbz	r3, 800cef4 <_strtod_l+0xb6c>
 800cea6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cea8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800ceac:	d822      	bhi.n	800cef4 <_strtod_l+0xb6c>
 800ceae:	a32e      	add	r3, pc, #184	; (adr r3, 800cf68 <_strtod_l+0xbe0>)
 800ceb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ceb4:	4640      	mov	r0, r8
 800ceb6:	4649      	mov	r1, r9
 800ceb8:	f7f3 fe4a 	bl	8000b50 <__aeabi_dcmple>
 800cebc:	b1a0      	cbz	r0, 800cee8 <_strtod_l+0xb60>
 800cebe:	4649      	mov	r1, r9
 800cec0:	4640      	mov	r0, r8
 800cec2:	f7f3 fe79 	bl	8000bb8 <__aeabi_d2uiz>
 800cec6:	2801      	cmp	r0, #1
 800cec8:	bf38      	it	cc
 800ceca:	2001      	movcc	r0, #1
 800cecc:	f7f3 fb4a 	bl	8000564 <__aeabi_ui2d>
 800ced0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ced2:	4680      	mov	r8, r0
 800ced4:	4689      	mov	r9, r1
 800ced6:	bb23      	cbnz	r3, 800cf22 <_strtod_l+0xb9a>
 800ced8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cedc:	9010      	str	r0, [sp, #64]	; 0x40
 800cede:	9311      	str	r3, [sp, #68]	; 0x44
 800cee0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800cee4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800cee8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ceea:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ceec:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800cef0:	1a9b      	subs	r3, r3, r2
 800cef2:	9309      	str	r3, [sp, #36]	; 0x24
 800cef4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800cef8:	eeb0 0a48 	vmov.f32	s0, s16
 800cefc:	eef0 0a68 	vmov.f32	s1, s17
 800cf00:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800cf04:	f001 f892 	bl	800e02c <__ulp>
 800cf08:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800cf0c:	ec53 2b10 	vmov	r2, r3, d0
 800cf10:	f7f3 fba2 	bl	8000658 <__aeabi_dmul>
 800cf14:	ec53 2b18 	vmov	r2, r3, d8
 800cf18:	f7f3 f9e8 	bl	80002ec <__adddf3>
 800cf1c:	4682      	mov	sl, r0
 800cf1e:	468b      	mov	fp, r1
 800cf20:	e78d      	b.n	800ce3e <_strtod_l+0xab6>
 800cf22:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800cf26:	e7db      	b.n	800cee0 <_strtod_l+0xb58>
 800cf28:	a311      	add	r3, pc, #68	; (adr r3, 800cf70 <_strtod_l+0xbe8>)
 800cf2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf2e:	f7f3 fe05 	bl	8000b3c <__aeabi_dcmplt>
 800cf32:	e7b2      	b.n	800ce9a <_strtod_l+0xb12>
 800cf34:	2300      	movs	r3, #0
 800cf36:	930a      	str	r3, [sp, #40]	; 0x28
 800cf38:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800cf3a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cf3c:	6013      	str	r3, [r2, #0]
 800cf3e:	f7ff ba6b 	b.w	800c418 <_strtod_l+0x90>
 800cf42:	2a65      	cmp	r2, #101	; 0x65
 800cf44:	f43f ab5f 	beq.w	800c606 <_strtod_l+0x27e>
 800cf48:	2a45      	cmp	r2, #69	; 0x45
 800cf4a:	f43f ab5c 	beq.w	800c606 <_strtod_l+0x27e>
 800cf4e:	2301      	movs	r3, #1
 800cf50:	f7ff bb94 	b.w	800c67c <_strtod_l+0x2f4>
 800cf54:	f3af 8000 	nop.w
 800cf58:	94a03595 	.word	0x94a03595
 800cf5c:	3fdfffff 	.word	0x3fdfffff
 800cf60:	35afe535 	.word	0x35afe535
 800cf64:	3fe00000 	.word	0x3fe00000
 800cf68:	ffc00000 	.word	0xffc00000
 800cf6c:	41dfffff 	.word	0x41dfffff
 800cf70:	94a03595 	.word	0x94a03595
 800cf74:	3fcfffff 	.word	0x3fcfffff
 800cf78:	3ff00000 	.word	0x3ff00000
 800cf7c:	7ff00000 	.word	0x7ff00000
 800cf80:	7fe00000 	.word	0x7fe00000
 800cf84:	7c9fffff 	.word	0x7c9fffff
 800cf88:	3fe00000 	.word	0x3fe00000
 800cf8c:	bff00000 	.word	0xbff00000
 800cf90:	7fefffff 	.word	0x7fefffff

0800cf94 <strtof>:
 800cf94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf98:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 800d048 <strtof+0xb4>
 800cf9c:	4b26      	ldr	r3, [pc, #152]	; (800d038 <strtof+0xa4>)
 800cf9e:	460a      	mov	r2, r1
 800cfa0:	ed2d 8b02 	vpush	{d8}
 800cfa4:	4601      	mov	r1, r0
 800cfa6:	f8d8 0000 	ldr.w	r0, [r8]
 800cfaa:	f7ff f9ed 	bl	800c388 <_strtod_l>
 800cfae:	ec55 4b10 	vmov	r4, r5, d0
 800cfb2:	ee10 2a10 	vmov	r2, s0
 800cfb6:	ee10 0a10 	vmov	r0, s0
 800cfba:	462b      	mov	r3, r5
 800cfbc:	4629      	mov	r1, r5
 800cfbe:	f7f3 fde5 	bl	8000b8c <__aeabi_dcmpun>
 800cfc2:	b190      	cbz	r0, 800cfea <strtof+0x56>
 800cfc4:	2d00      	cmp	r5, #0
 800cfc6:	481d      	ldr	r0, [pc, #116]	; (800d03c <strtof+0xa8>)
 800cfc8:	da09      	bge.n	800cfde <strtof+0x4a>
 800cfca:	f001 fc8d 	bl	800e8e8 <nanf>
 800cfce:	eeb1 8a40 	vneg.f32	s16, s0
 800cfd2:	eeb0 0a48 	vmov.f32	s0, s16
 800cfd6:	ecbd 8b02 	vpop	{d8}
 800cfda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cfde:	ecbd 8b02 	vpop	{d8}
 800cfe2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cfe6:	f001 bc7f 	b.w	800e8e8 <nanf>
 800cfea:	4620      	mov	r0, r4
 800cfec:	4629      	mov	r1, r5
 800cfee:	f7f3 fe03 	bl	8000bf8 <__aeabi_d2f>
 800cff2:	ee08 0a10 	vmov	s16, r0
 800cff6:	eddf 7a12 	vldr	s15, [pc, #72]	; 800d040 <strtof+0xac>
 800cffa:	eeb0 7ac8 	vabs.f32	s14, s16
 800cffe:	eeb4 7a67 	vcmp.f32	s14, s15
 800d002:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d006:	dde4      	ble.n	800cfd2 <strtof+0x3e>
 800d008:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 800d00c:	4b0d      	ldr	r3, [pc, #52]	; (800d044 <strtof+0xb0>)
 800d00e:	f04f 32ff 	mov.w	r2, #4294967295
 800d012:	4620      	mov	r0, r4
 800d014:	4639      	mov	r1, r7
 800d016:	f7f3 fdb9 	bl	8000b8c <__aeabi_dcmpun>
 800d01a:	b940      	cbnz	r0, 800d02e <strtof+0x9a>
 800d01c:	4b09      	ldr	r3, [pc, #36]	; (800d044 <strtof+0xb0>)
 800d01e:	f04f 32ff 	mov.w	r2, #4294967295
 800d022:	4620      	mov	r0, r4
 800d024:	4639      	mov	r1, r7
 800d026:	f7f3 fd93 	bl	8000b50 <__aeabi_dcmple>
 800d02a:	2800      	cmp	r0, #0
 800d02c:	d0d1      	beq.n	800cfd2 <strtof+0x3e>
 800d02e:	f8d8 3000 	ldr.w	r3, [r8]
 800d032:	2222      	movs	r2, #34	; 0x22
 800d034:	601a      	str	r2, [r3, #0]
 800d036:	e7cc      	b.n	800cfd2 <strtof+0x3e>
 800d038:	200001a8 	.word	0x200001a8
 800d03c:	0800fc32 	.word	0x0800fc32
 800d040:	7f7fffff 	.word	0x7f7fffff
 800d044:	7fefffff 	.word	0x7fefffff
 800d048:	20000140 	.word	0x20000140

0800d04c <__strtok_r>:
 800d04c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d04e:	b908      	cbnz	r0, 800d054 <__strtok_r+0x8>
 800d050:	6810      	ldr	r0, [r2, #0]
 800d052:	b188      	cbz	r0, 800d078 <__strtok_r+0x2c>
 800d054:	4604      	mov	r4, r0
 800d056:	4620      	mov	r0, r4
 800d058:	f814 5b01 	ldrb.w	r5, [r4], #1
 800d05c:	460f      	mov	r7, r1
 800d05e:	f817 6b01 	ldrb.w	r6, [r7], #1
 800d062:	b91e      	cbnz	r6, 800d06c <__strtok_r+0x20>
 800d064:	b965      	cbnz	r5, 800d080 <__strtok_r+0x34>
 800d066:	6015      	str	r5, [r2, #0]
 800d068:	4628      	mov	r0, r5
 800d06a:	e005      	b.n	800d078 <__strtok_r+0x2c>
 800d06c:	42b5      	cmp	r5, r6
 800d06e:	d1f6      	bne.n	800d05e <__strtok_r+0x12>
 800d070:	2b00      	cmp	r3, #0
 800d072:	d1f0      	bne.n	800d056 <__strtok_r+0xa>
 800d074:	6014      	str	r4, [r2, #0]
 800d076:	7003      	strb	r3, [r0, #0]
 800d078:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d07a:	461c      	mov	r4, r3
 800d07c:	e00c      	b.n	800d098 <__strtok_r+0x4c>
 800d07e:	b915      	cbnz	r5, 800d086 <__strtok_r+0x3a>
 800d080:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d084:	460e      	mov	r6, r1
 800d086:	f816 5b01 	ldrb.w	r5, [r6], #1
 800d08a:	42ab      	cmp	r3, r5
 800d08c:	d1f7      	bne.n	800d07e <__strtok_r+0x32>
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d0f3      	beq.n	800d07a <__strtok_r+0x2e>
 800d092:	2300      	movs	r3, #0
 800d094:	f804 3c01 	strb.w	r3, [r4, #-1]
 800d098:	6014      	str	r4, [r2, #0]
 800d09a:	e7ed      	b.n	800d078 <__strtok_r+0x2c>

0800d09c <strtok_r>:
 800d09c:	2301      	movs	r3, #1
 800d09e:	f7ff bfd5 	b.w	800d04c <__strtok_r>
	...

0800d0a4 <_strtoul_l.constprop.0>:
 800d0a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d0a8:	4f36      	ldr	r7, [pc, #216]	; (800d184 <_strtoul_l.constprop.0+0xe0>)
 800d0aa:	4686      	mov	lr, r0
 800d0ac:	460d      	mov	r5, r1
 800d0ae:	4628      	mov	r0, r5
 800d0b0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d0b4:	5de6      	ldrb	r6, [r4, r7]
 800d0b6:	f016 0608 	ands.w	r6, r6, #8
 800d0ba:	d1f8      	bne.n	800d0ae <_strtoul_l.constprop.0+0xa>
 800d0bc:	2c2d      	cmp	r4, #45	; 0x2d
 800d0be:	d12f      	bne.n	800d120 <_strtoul_l.constprop.0+0x7c>
 800d0c0:	782c      	ldrb	r4, [r5, #0]
 800d0c2:	2601      	movs	r6, #1
 800d0c4:	1c85      	adds	r5, r0, #2
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d057      	beq.n	800d17a <_strtoul_l.constprop.0+0xd6>
 800d0ca:	2b10      	cmp	r3, #16
 800d0cc:	d109      	bne.n	800d0e2 <_strtoul_l.constprop.0+0x3e>
 800d0ce:	2c30      	cmp	r4, #48	; 0x30
 800d0d0:	d107      	bne.n	800d0e2 <_strtoul_l.constprop.0+0x3e>
 800d0d2:	7828      	ldrb	r0, [r5, #0]
 800d0d4:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800d0d8:	2858      	cmp	r0, #88	; 0x58
 800d0da:	d149      	bne.n	800d170 <_strtoul_l.constprop.0+0xcc>
 800d0dc:	786c      	ldrb	r4, [r5, #1]
 800d0de:	2310      	movs	r3, #16
 800d0e0:	3502      	adds	r5, #2
 800d0e2:	f04f 38ff 	mov.w	r8, #4294967295
 800d0e6:	2700      	movs	r7, #0
 800d0e8:	fbb8 f8f3 	udiv	r8, r8, r3
 800d0ec:	fb03 f908 	mul.w	r9, r3, r8
 800d0f0:	ea6f 0909 	mvn.w	r9, r9
 800d0f4:	4638      	mov	r0, r7
 800d0f6:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800d0fa:	f1bc 0f09 	cmp.w	ip, #9
 800d0fe:	d814      	bhi.n	800d12a <_strtoul_l.constprop.0+0x86>
 800d100:	4664      	mov	r4, ip
 800d102:	42a3      	cmp	r3, r4
 800d104:	dd22      	ble.n	800d14c <_strtoul_l.constprop.0+0xa8>
 800d106:	2f00      	cmp	r7, #0
 800d108:	db1d      	blt.n	800d146 <_strtoul_l.constprop.0+0xa2>
 800d10a:	4580      	cmp	r8, r0
 800d10c:	d31b      	bcc.n	800d146 <_strtoul_l.constprop.0+0xa2>
 800d10e:	d101      	bne.n	800d114 <_strtoul_l.constprop.0+0x70>
 800d110:	45a1      	cmp	r9, r4
 800d112:	db18      	blt.n	800d146 <_strtoul_l.constprop.0+0xa2>
 800d114:	fb00 4003 	mla	r0, r0, r3, r4
 800d118:	2701      	movs	r7, #1
 800d11a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d11e:	e7ea      	b.n	800d0f6 <_strtoul_l.constprop.0+0x52>
 800d120:	2c2b      	cmp	r4, #43	; 0x2b
 800d122:	bf04      	itt	eq
 800d124:	782c      	ldrbeq	r4, [r5, #0]
 800d126:	1c85      	addeq	r5, r0, #2
 800d128:	e7cd      	b.n	800d0c6 <_strtoul_l.constprop.0+0x22>
 800d12a:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800d12e:	f1bc 0f19 	cmp.w	ip, #25
 800d132:	d801      	bhi.n	800d138 <_strtoul_l.constprop.0+0x94>
 800d134:	3c37      	subs	r4, #55	; 0x37
 800d136:	e7e4      	b.n	800d102 <_strtoul_l.constprop.0+0x5e>
 800d138:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800d13c:	f1bc 0f19 	cmp.w	ip, #25
 800d140:	d804      	bhi.n	800d14c <_strtoul_l.constprop.0+0xa8>
 800d142:	3c57      	subs	r4, #87	; 0x57
 800d144:	e7dd      	b.n	800d102 <_strtoul_l.constprop.0+0x5e>
 800d146:	f04f 37ff 	mov.w	r7, #4294967295
 800d14a:	e7e6      	b.n	800d11a <_strtoul_l.constprop.0+0x76>
 800d14c:	2f00      	cmp	r7, #0
 800d14e:	da07      	bge.n	800d160 <_strtoul_l.constprop.0+0xbc>
 800d150:	2322      	movs	r3, #34	; 0x22
 800d152:	f8ce 3000 	str.w	r3, [lr]
 800d156:	f04f 30ff 	mov.w	r0, #4294967295
 800d15a:	b932      	cbnz	r2, 800d16a <_strtoul_l.constprop.0+0xc6>
 800d15c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d160:	b106      	cbz	r6, 800d164 <_strtoul_l.constprop.0+0xc0>
 800d162:	4240      	negs	r0, r0
 800d164:	2a00      	cmp	r2, #0
 800d166:	d0f9      	beq.n	800d15c <_strtoul_l.constprop.0+0xb8>
 800d168:	b107      	cbz	r7, 800d16c <_strtoul_l.constprop.0+0xc8>
 800d16a:	1e69      	subs	r1, r5, #1
 800d16c:	6011      	str	r1, [r2, #0]
 800d16e:	e7f5      	b.n	800d15c <_strtoul_l.constprop.0+0xb8>
 800d170:	2430      	movs	r4, #48	; 0x30
 800d172:	2b00      	cmp	r3, #0
 800d174:	d1b5      	bne.n	800d0e2 <_strtoul_l.constprop.0+0x3e>
 800d176:	2308      	movs	r3, #8
 800d178:	e7b3      	b.n	800d0e2 <_strtoul_l.constprop.0+0x3e>
 800d17a:	2c30      	cmp	r4, #48	; 0x30
 800d17c:	d0a9      	beq.n	800d0d2 <_strtoul_l.constprop.0+0x2e>
 800d17e:	230a      	movs	r3, #10
 800d180:	e7af      	b.n	800d0e2 <_strtoul_l.constprop.0+0x3e>
 800d182:	bf00      	nop
 800d184:	0800f8c9 	.word	0x0800f8c9

0800d188 <strtoul>:
 800d188:	4613      	mov	r3, r2
 800d18a:	460a      	mov	r2, r1
 800d18c:	4601      	mov	r1, r0
 800d18e:	4802      	ldr	r0, [pc, #8]	; (800d198 <strtoul+0x10>)
 800d190:	6800      	ldr	r0, [r0, #0]
 800d192:	f7ff bf87 	b.w	800d0a4 <_strtoul_l.constprop.0>
 800d196:	bf00      	nop
 800d198:	20000140 	.word	0x20000140

0800d19c <_vsniprintf_r>:
 800d19c:	b530      	push	{r4, r5, lr}
 800d19e:	4614      	mov	r4, r2
 800d1a0:	2c00      	cmp	r4, #0
 800d1a2:	b09b      	sub	sp, #108	; 0x6c
 800d1a4:	4605      	mov	r5, r0
 800d1a6:	461a      	mov	r2, r3
 800d1a8:	da05      	bge.n	800d1b6 <_vsniprintf_r+0x1a>
 800d1aa:	238b      	movs	r3, #139	; 0x8b
 800d1ac:	6003      	str	r3, [r0, #0]
 800d1ae:	f04f 30ff 	mov.w	r0, #4294967295
 800d1b2:	b01b      	add	sp, #108	; 0x6c
 800d1b4:	bd30      	pop	{r4, r5, pc}
 800d1b6:	f44f 7302 	mov.w	r3, #520	; 0x208
 800d1ba:	f8ad 300c 	strh.w	r3, [sp, #12]
 800d1be:	bf14      	ite	ne
 800d1c0:	f104 33ff 	addne.w	r3, r4, #4294967295
 800d1c4:	4623      	moveq	r3, r4
 800d1c6:	9302      	str	r3, [sp, #8]
 800d1c8:	9305      	str	r3, [sp, #20]
 800d1ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d1ce:	9100      	str	r1, [sp, #0]
 800d1d0:	9104      	str	r1, [sp, #16]
 800d1d2:	f8ad 300e 	strh.w	r3, [sp, #14]
 800d1d6:	4669      	mov	r1, sp
 800d1d8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800d1da:	f001 f8e7 	bl	800e3ac <_svfiprintf_r>
 800d1de:	1c43      	adds	r3, r0, #1
 800d1e0:	bfbc      	itt	lt
 800d1e2:	238b      	movlt	r3, #139	; 0x8b
 800d1e4:	602b      	strlt	r3, [r5, #0]
 800d1e6:	2c00      	cmp	r4, #0
 800d1e8:	d0e3      	beq.n	800d1b2 <_vsniprintf_r+0x16>
 800d1ea:	9b00      	ldr	r3, [sp, #0]
 800d1ec:	2200      	movs	r2, #0
 800d1ee:	701a      	strb	r2, [r3, #0]
 800d1f0:	e7df      	b.n	800d1b2 <_vsniprintf_r+0x16>
	...

0800d1f4 <vsniprintf>:
 800d1f4:	b507      	push	{r0, r1, r2, lr}
 800d1f6:	9300      	str	r3, [sp, #0]
 800d1f8:	4613      	mov	r3, r2
 800d1fa:	460a      	mov	r2, r1
 800d1fc:	4601      	mov	r1, r0
 800d1fe:	4803      	ldr	r0, [pc, #12]	; (800d20c <vsniprintf+0x18>)
 800d200:	6800      	ldr	r0, [r0, #0]
 800d202:	f7ff ffcb 	bl	800d19c <_vsniprintf_r>
 800d206:	b003      	add	sp, #12
 800d208:	f85d fb04 	ldr.w	pc, [sp], #4
 800d20c:	20000140 	.word	0x20000140

0800d210 <rshift>:
 800d210:	6903      	ldr	r3, [r0, #16]
 800d212:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d216:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d21a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d21e:	f100 0414 	add.w	r4, r0, #20
 800d222:	dd45      	ble.n	800d2b0 <rshift+0xa0>
 800d224:	f011 011f 	ands.w	r1, r1, #31
 800d228:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d22c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d230:	d10c      	bne.n	800d24c <rshift+0x3c>
 800d232:	f100 0710 	add.w	r7, r0, #16
 800d236:	4629      	mov	r1, r5
 800d238:	42b1      	cmp	r1, r6
 800d23a:	d334      	bcc.n	800d2a6 <rshift+0x96>
 800d23c:	1a9b      	subs	r3, r3, r2
 800d23e:	009b      	lsls	r3, r3, #2
 800d240:	1eea      	subs	r2, r5, #3
 800d242:	4296      	cmp	r6, r2
 800d244:	bf38      	it	cc
 800d246:	2300      	movcc	r3, #0
 800d248:	4423      	add	r3, r4
 800d24a:	e015      	b.n	800d278 <rshift+0x68>
 800d24c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d250:	f1c1 0820 	rsb	r8, r1, #32
 800d254:	40cf      	lsrs	r7, r1
 800d256:	f105 0e04 	add.w	lr, r5, #4
 800d25a:	46a1      	mov	r9, r4
 800d25c:	4576      	cmp	r6, lr
 800d25e:	46f4      	mov	ip, lr
 800d260:	d815      	bhi.n	800d28e <rshift+0x7e>
 800d262:	1a9a      	subs	r2, r3, r2
 800d264:	0092      	lsls	r2, r2, #2
 800d266:	3a04      	subs	r2, #4
 800d268:	3501      	adds	r5, #1
 800d26a:	42ae      	cmp	r6, r5
 800d26c:	bf38      	it	cc
 800d26e:	2200      	movcc	r2, #0
 800d270:	18a3      	adds	r3, r4, r2
 800d272:	50a7      	str	r7, [r4, r2]
 800d274:	b107      	cbz	r7, 800d278 <rshift+0x68>
 800d276:	3304      	adds	r3, #4
 800d278:	1b1a      	subs	r2, r3, r4
 800d27a:	42a3      	cmp	r3, r4
 800d27c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d280:	bf08      	it	eq
 800d282:	2300      	moveq	r3, #0
 800d284:	6102      	str	r2, [r0, #16]
 800d286:	bf08      	it	eq
 800d288:	6143      	streq	r3, [r0, #20]
 800d28a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d28e:	f8dc c000 	ldr.w	ip, [ip]
 800d292:	fa0c fc08 	lsl.w	ip, ip, r8
 800d296:	ea4c 0707 	orr.w	r7, ip, r7
 800d29a:	f849 7b04 	str.w	r7, [r9], #4
 800d29e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d2a2:	40cf      	lsrs	r7, r1
 800d2a4:	e7da      	b.n	800d25c <rshift+0x4c>
 800d2a6:	f851 cb04 	ldr.w	ip, [r1], #4
 800d2aa:	f847 cf04 	str.w	ip, [r7, #4]!
 800d2ae:	e7c3      	b.n	800d238 <rshift+0x28>
 800d2b0:	4623      	mov	r3, r4
 800d2b2:	e7e1      	b.n	800d278 <rshift+0x68>

0800d2b4 <__hexdig_fun>:
 800d2b4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800d2b8:	2b09      	cmp	r3, #9
 800d2ba:	d802      	bhi.n	800d2c2 <__hexdig_fun+0xe>
 800d2bc:	3820      	subs	r0, #32
 800d2be:	b2c0      	uxtb	r0, r0
 800d2c0:	4770      	bx	lr
 800d2c2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800d2c6:	2b05      	cmp	r3, #5
 800d2c8:	d801      	bhi.n	800d2ce <__hexdig_fun+0x1a>
 800d2ca:	3847      	subs	r0, #71	; 0x47
 800d2cc:	e7f7      	b.n	800d2be <__hexdig_fun+0xa>
 800d2ce:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800d2d2:	2b05      	cmp	r3, #5
 800d2d4:	d801      	bhi.n	800d2da <__hexdig_fun+0x26>
 800d2d6:	3827      	subs	r0, #39	; 0x27
 800d2d8:	e7f1      	b.n	800d2be <__hexdig_fun+0xa>
 800d2da:	2000      	movs	r0, #0
 800d2dc:	4770      	bx	lr
	...

0800d2e0 <__gethex>:
 800d2e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2e4:	ed2d 8b02 	vpush	{d8}
 800d2e8:	b089      	sub	sp, #36	; 0x24
 800d2ea:	ee08 0a10 	vmov	s16, r0
 800d2ee:	9304      	str	r3, [sp, #16]
 800d2f0:	4bb4      	ldr	r3, [pc, #720]	; (800d5c4 <__gethex+0x2e4>)
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	9301      	str	r3, [sp, #4]
 800d2f6:	4618      	mov	r0, r3
 800d2f8:	468b      	mov	fp, r1
 800d2fa:	4690      	mov	r8, r2
 800d2fc:	f7f2 ff92 	bl	8000224 <strlen>
 800d300:	9b01      	ldr	r3, [sp, #4]
 800d302:	f8db 2000 	ldr.w	r2, [fp]
 800d306:	4403      	add	r3, r0
 800d308:	4682      	mov	sl, r0
 800d30a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800d30e:	9305      	str	r3, [sp, #20]
 800d310:	1c93      	adds	r3, r2, #2
 800d312:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800d316:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800d31a:	32fe      	adds	r2, #254	; 0xfe
 800d31c:	18d1      	adds	r1, r2, r3
 800d31e:	461f      	mov	r7, r3
 800d320:	f813 0b01 	ldrb.w	r0, [r3], #1
 800d324:	9100      	str	r1, [sp, #0]
 800d326:	2830      	cmp	r0, #48	; 0x30
 800d328:	d0f8      	beq.n	800d31c <__gethex+0x3c>
 800d32a:	f7ff ffc3 	bl	800d2b4 <__hexdig_fun>
 800d32e:	4604      	mov	r4, r0
 800d330:	2800      	cmp	r0, #0
 800d332:	d13a      	bne.n	800d3aa <__gethex+0xca>
 800d334:	9901      	ldr	r1, [sp, #4]
 800d336:	4652      	mov	r2, sl
 800d338:	4638      	mov	r0, r7
 800d33a:	f001 fadb 	bl	800e8f4 <strncmp>
 800d33e:	4605      	mov	r5, r0
 800d340:	2800      	cmp	r0, #0
 800d342:	d168      	bne.n	800d416 <__gethex+0x136>
 800d344:	f817 000a 	ldrb.w	r0, [r7, sl]
 800d348:	eb07 060a 	add.w	r6, r7, sl
 800d34c:	f7ff ffb2 	bl	800d2b4 <__hexdig_fun>
 800d350:	2800      	cmp	r0, #0
 800d352:	d062      	beq.n	800d41a <__gethex+0x13a>
 800d354:	4633      	mov	r3, r6
 800d356:	7818      	ldrb	r0, [r3, #0]
 800d358:	2830      	cmp	r0, #48	; 0x30
 800d35a:	461f      	mov	r7, r3
 800d35c:	f103 0301 	add.w	r3, r3, #1
 800d360:	d0f9      	beq.n	800d356 <__gethex+0x76>
 800d362:	f7ff ffa7 	bl	800d2b4 <__hexdig_fun>
 800d366:	2301      	movs	r3, #1
 800d368:	fab0 f480 	clz	r4, r0
 800d36c:	0964      	lsrs	r4, r4, #5
 800d36e:	4635      	mov	r5, r6
 800d370:	9300      	str	r3, [sp, #0]
 800d372:	463a      	mov	r2, r7
 800d374:	4616      	mov	r6, r2
 800d376:	3201      	adds	r2, #1
 800d378:	7830      	ldrb	r0, [r6, #0]
 800d37a:	f7ff ff9b 	bl	800d2b4 <__hexdig_fun>
 800d37e:	2800      	cmp	r0, #0
 800d380:	d1f8      	bne.n	800d374 <__gethex+0x94>
 800d382:	9901      	ldr	r1, [sp, #4]
 800d384:	4652      	mov	r2, sl
 800d386:	4630      	mov	r0, r6
 800d388:	f001 fab4 	bl	800e8f4 <strncmp>
 800d38c:	b980      	cbnz	r0, 800d3b0 <__gethex+0xd0>
 800d38e:	b94d      	cbnz	r5, 800d3a4 <__gethex+0xc4>
 800d390:	eb06 050a 	add.w	r5, r6, sl
 800d394:	462a      	mov	r2, r5
 800d396:	4616      	mov	r6, r2
 800d398:	3201      	adds	r2, #1
 800d39a:	7830      	ldrb	r0, [r6, #0]
 800d39c:	f7ff ff8a 	bl	800d2b4 <__hexdig_fun>
 800d3a0:	2800      	cmp	r0, #0
 800d3a2:	d1f8      	bne.n	800d396 <__gethex+0xb6>
 800d3a4:	1bad      	subs	r5, r5, r6
 800d3a6:	00ad      	lsls	r5, r5, #2
 800d3a8:	e004      	b.n	800d3b4 <__gethex+0xd4>
 800d3aa:	2400      	movs	r4, #0
 800d3ac:	4625      	mov	r5, r4
 800d3ae:	e7e0      	b.n	800d372 <__gethex+0x92>
 800d3b0:	2d00      	cmp	r5, #0
 800d3b2:	d1f7      	bne.n	800d3a4 <__gethex+0xc4>
 800d3b4:	7833      	ldrb	r3, [r6, #0]
 800d3b6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d3ba:	2b50      	cmp	r3, #80	; 0x50
 800d3bc:	d13b      	bne.n	800d436 <__gethex+0x156>
 800d3be:	7873      	ldrb	r3, [r6, #1]
 800d3c0:	2b2b      	cmp	r3, #43	; 0x2b
 800d3c2:	d02c      	beq.n	800d41e <__gethex+0x13e>
 800d3c4:	2b2d      	cmp	r3, #45	; 0x2d
 800d3c6:	d02e      	beq.n	800d426 <__gethex+0x146>
 800d3c8:	1c71      	adds	r1, r6, #1
 800d3ca:	f04f 0900 	mov.w	r9, #0
 800d3ce:	7808      	ldrb	r0, [r1, #0]
 800d3d0:	f7ff ff70 	bl	800d2b4 <__hexdig_fun>
 800d3d4:	1e43      	subs	r3, r0, #1
 800d3d6:	b2db      	uxtb	r3, r3
 800d3d8:	2b18      	cmp	r3, #24
 800d3da:	d82c      	bhi.n	800d436 <__gethex+0x156>
 800d3dc:	f1a0 0210 	sub.w	r2, r0, #16
 800d3e0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d3e4:	f7ff ff66 	bl	800d2b4 <__hexdig_fun>
 800d3e8:	1e43      	subs	r3, r0, #1
 800d3ea:	b2db      	uxtb	r3, r3
 800d3ec:	2b18      	cmp	r3, #24
 800d3ee:	d91d      	bls.n	800d42c <__gethex+0x14c>
 800d3f0:	f1b9 0f00 	cmp.w	r9, #0
 800d3f4:	d000      	beq.n	800d3f8 <__gethex+0x118>
 800d3f6:	4252      	negs	r2, r2
 800d3f8:	4415      	add	r5, r2
 800d3fa:	f8cb 1000 	str.w	r1, [fp]
 800d3fe:	b1e4      	cbz	r4, 800d43a <__gethex+0x15a>
 800d400:	9b00      	ldr	r3, [sp, #0]
 800d402:	2b00      	cmp	r3, #0
 800d404:	bf14      	ite	ne
 800d406:	2700      	movne	r7, #0
 800d408:	2706      	moveq	r7, #6
 800d40a:	4638      	mov	r0, r7
 800d40c:	b009      	add	sp, #36	; 0x24
 800d40e:	ecbd 8b02 	vpop	{d8}
 800d412:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d416:	463e      	mov	r6, r7
 800d418:	4625      	mov	r5, r4
 800d41a:	2401      	movs	r4, #1
 800d41c:	e7ca      	b.n	800d3b4 <__gethex+0xd4>
 800d41e:	f04f 0900 	mov.w	r9, #0
 800d422:	1cb1      	adds	r1, r6, #2
 800d424:	e7d3      	b.n	800d3ce <__gethex+0xee>
 800d426:	f04f 0901 	mov.w	r9, #1
 800d42a:	e7fa      	b.n	800d422 <__gethex+0x142>
 800d42c:	230a      	movs	r3, #10
 800d42e:	fb03 0202 	mla	r2, r3, r2, r0
 800d432:	3a10      	subs	r2, #16
 800d434:	e7d4      	b.n	800d3e0 <__gethex+0x100>
 800d436:	4631      	mov	r1, r6
 800d438:	e7df      	b.n	800d3fa <__gethex+0x11a>
 800d43a:	1bf3      	subs	r3, r6, r7
 800d43c:	3b01      	subs	r3, #1
 800d43e:	4621      	mov	r1, r4
 800d440:	2b07      	cmp	r3, #7
 800d442:	dc0b      	bgt.n	800d45c <__gethex+0x17c>
 800d444:	ee18 0a10 	vmov	r0, s16
 800d448:	f000 fa7e 	bl	800d948 <_Balloc>
 800d44c:	4604      	mov	r4, r0
 800d44e:	b940      	cbnz	r0, 800d462 <__gethex+0x182>
 800d450:	4b5d      	ldr	r3, [pc, #372]	; (800d5c8 <__gethex+0x2e8>)
 800d452:	4602      	mov	r2, r0
 800d454:	21de      	movs	r1, #222	; 0xde
 800d456:	485d      	ldr	r0, [pc, #372]	; (800d5cc <__gethex+0x2ec>)
 800d458:	f001 fa6e 	bl	800e938 <__assert_func>
 800d45c:	3101      	adds	r1, #1
 800d45e:	105b      	asrs	r3, r3, #1
 800d460:	e7ee      	b.n	800d440 <__gethex+0x160>
 800d462:	f100 0914 	add.w	r9, r0, #20
 800d466:	f04f 0b00 	mov.w	fp, #0
 800d46a:	f1ca 0301 	rsb	r3, sl, #1
 800d46e:	f8cd 9008 	str.w	r9, [sp, #8]
 800d472:	f8cd b000 	str.w	fp, [sp]
 800d476:	9306      	str	r3, [sp, #24]
 800d478:	42b7      	cmp	r7, r6
 800d47a:	d340      	bcc.n	800d4fe <__gethex+0x21e>
 800d47c:	9802      	ldr	r0, [sp, #8]
 800d47e:	9b00      	ldr	r3, [sp, #0]
 800d480:	f840 3b04 	str.w	r3, [r0], #4
 800d484:	eba0 0009 	sub.w	r0, r0, r9
 800d488:	1080      	asrs	r0, r0, #2
 800d48a:	0146      	lsls	r6, r0, #5
 800d48c:	6120      	str	r0, [r4, #16]
 800d48e:	4618      	mov	r0, r3
 800d490:	f000 fb4c 	bl	800db2c <__hi0bits>
 800d494:	1a30      	subs	r0, r6, r0
 800d496:	f8d8 6000 	ldr.w	r6, [r8]
 800d49a:	42b0      	cmp	r0, r6
 800d49c:	dd63      	ble.n	800d566 <__gethex+0x286>
 800d49e:	1b87      	subs	r7, r0, r6
 800d4a0:	4639      	mov	r1, r7
 800d4a2:	4620      	mov	r0, r4
 800d4a4:	f000 fef0 	bl	800e288 <__any_on>
 800d4a8:	4682      	mov	sl, r0
 800d4aa:	b1a8      	cbz	r0, 800d4d8 <__gethex+0x1f8>
 800d4ac:	1e7b      	subs	r3, r7, #1
 800d4ae:	1159      	asrs	r1, r3, #5
 800d4b0:	f003 021f 	and.w	r2, r3, #31
 800d4b4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800d4b8:	f04f 0a01 	mov.w	sl, #1
 800d4bc:	fa0a f202 	lsl.w	r2, sl, r2
 800d4c0:	420a      	tst	r2, r1
 800d4c2:	d009      	beq.n	800d4d8 <__gethex+0x1f8>
 800d4c4:	4553      	cmp	r3, sl
 800d4c6:	dd05      	ble.n	800d4d4 <__gethex+0x1f4>
 800d4c8:	1eb9      	subs	r1, r7, #2
 800d4ca:	4620      	mov	r0, r4
 800d4cc:	f000 fedc 	bl	800e288 <__any_on>
 800d4d0:	2800      	cmp	r0, #0
 800d4d2:	d145      	bne.n	800d560 <__gethex+0x280>
 800d4d4:	f04f 0a02 	mov.w	sl, #2
 800d4d8:	4639      	mov	r1, r7
 800d4da:	4620      	mov	r0, r4
 800d4dc:	f7ff fe98 	bl	800d210 <rshift>
 800d4e0:	443d      	add	r5, r7
 800d4e2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d4e6:	42ab      	cmp	r3, r5
 800d4e8:	da4c      	bge.n	800d584 <__gethex+0x2a4>
 800d4ea:	ee18 0a10 	vmov	r0, s16
 800d4ee:	4621      	mov	r1, r4
 800d4f0:	f000 fa6a 	bl	800d9c8 <_Bfree>
 800d4f4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d4f6:	2300      	movs	r3, #0
 800d4f8:	6013      	str	r3, [r2, #0]
 800d4fa:	27a3      	movs	r7, #163	; 0xa3
 800d4fc:	e785      	b.n	800d40a <__gethex+0x12a>
 800d4fe:	1e73      	subs	r3, r6, #1
 800d500:	9a05      	ldr	r2, [sp, #20]
 800d502:	9303      	str	r3, [sp, #12]
 800d504:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d508:	4293      	cmp	r3, r2
 800d50a:	d019      	beq.n	800d540 <__gethex+0x260>
 800d50c:	f1bb 0f20 	cmp.w	fp, #32
 800d510:	d107      	bne.n	800d522 <__gethex+0x242>
 800d512:	9b02      	ldr	r3, [sp, #8]
 800d514:	9a00      	ldr	r2, [sp, #0]
 800d516:	f843 2b04 	str.w	r2, [r3], #4
 800d51a:	9302      	str	r3, [sp, #8]
 800d51c:	2300      	movs	r3, #0
 800d51e:	9300      	str	r3, [sp, #0]
 800d520:	469b      	mov	fp, r3
 800d522:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800d526:	f7ff fec5 	bl	800d2b4 <__hexdig_fun>
 800d52a:	9b00      	ldr	r3, [sp, #0]
 800d52c:	f000 000f 	and.w	r0, r0, #15
 800d530:	fa00 f00b 	lsl.w	r0, r0, fp
 800d534:	4303      	orrs	r3, r0
 800d536:	9300      	str	r3, [sp, #0]
 800d538:	f10b 0b04 	add.w	fp, fp, #4
 800d53c:	9b03      	ldr	r3, [sp, #12]
 800d53e:	e00d      	b.n	800d55c <__gethex+0x27c>
 800d540:	9b03      	ldr	r3, [sp, #12]
 800d542:	9a06      	ldr	r2, [sp, #24]
 800d544:	4413      	add	r3, r2
 800d546:	42bb      	cmp	r3, r7
 800d548:	d3e0      	bcc.n	800d50c <__gethex+0x22c>
 800d54a:	4618      	mov	r0, r3
 800d54c:	9901      	ldr	r1, [sp, #4]
 800d54e:	9307      	str	r3, [sp, #28]
 800d550:	4652      	mov	r2, sl
 800d552:	f001 f9cf 	bl	800e8f4 <strncmp>
 800d556:	9b07      	ldr	r3, [sp, #28]
 800d558:	2800      	cmp	r0, #0
 800d55a:	d1d7      	bne.n	800d50c <__gethex+0x22c>
 800d55c:	461e      	mov	r6, r3
 800d55e:	e78b      	b.n	800d478 <__gethex+0x198>
 800d560:	f04f 0a03 	mov.w	sl, #3
 800d564:	e7b8      	b.n	800d4d8 <__gethex+0x1f8>
 800d566:	da0a      	bge.n	800d57e <__gethex+0x29e>
 800d568:	1a37      	subs	r7, r6, r0
 800d56a:	4621      	mov	r1, r4
 800d56c:	ee18 0a10 	vmov	r0, s16
 800d570:	463a      	mov	r2, r7
 800d572:	f000 fc45 	bl	800de00 <__lshift>
 800d576:	1bed      	subs	r5, r5, r7
 800d578:	4604      	mov	r4, r0
 800d57a:	f100 0914 	add.w	r9, r0, #20
 800d57e:	f04f 0a00 	mov.w	sl, #0
 800d582:	e7ae      	b.n	800d4e2 <__gethex+0x202>
 800d584:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800d588:	42a8      	cmp	r0, r5
 800d58a:	dd72      	ble.n	800d672 <__gethex+0x392>
 800d58c:	1b45      	subs	r5, r0, r5
 800d58e:	42ae      	cmp	r6, r5
 800d590:	dc36      	bgt.n	800d600 <__gethex+0x320>
 800d592:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d596:	2b02      	cmp	r3, #2
 800d598:	d02a      	beq.n	800d5f0 <__gethex+0x310>
 800d59a:	2b03      	cmp	r3, #3
 800d59c:	d02c      	beq.n	800d5f8 <__gethex+0x318>
 800d59e:	2b01      	cmp	r3, #1
 800d5a0:	d11c      	bne.n	800d5dc <__gethex+0x2fc>
 800d5a2:	42ae      	cmp	r6, r5
 800d5a4:	d11a      	bne.n	800d5dc <__gethex+0x2fc>
 800d5a6:	2e01      	cmp	r6, #1
 800d5a8:	d112      	bne.n	800d5d0 <__gethex+0x2f0>
 800d5aa:	9a04      	ldr	r2, [sp, #16]
 800d5ac:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d5b0:	6013      	str	r3, [r2, #0]
 800d5b2:	2301      	movs	r3, #1
 800d5b4:	6123      	str	r3, [r4, #16]
 800d5b6:	f8c9 3000 	str.w	r3, [r9]
 800d5ba:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d5bc:	2762      	movs	r7, #98	; 0x62
 800d5be:	601c      	str	r4, [r3, #0]
 800d5c0:	e723      	b.n	800d40a <__gethex+0x12a>
 800d5c2:	bf00      	nop
 800d5c4:	0800fa40 	.word	0x0800fa40
 800d5c8:	0800f9c9 	.word	0x0800f9c9
 800d5cc:	0800f9da 	.word	0x0800f9da
 800d5d0:	1e71      	subs	r1, r6, #1
 800d5d2:	4620      	mov	r0, r4
 800d5d4:	f000 fe58 	bl	800e288 <__any_on>
 800d5d8:	2800      	cmp	r0, #0
 800d5da:	d1e6      	bne.n	800d5aa <__gethex+0x2ca>
 800d5dc:	ee18 0a10 	vmov	r0, s16
 800d5e0:	4621      	mov	r1, r4
 800d5e2:	f000 f9f1 	bl	800d9c8 <_Bfree>
 800d5e6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d5e8:	2300      	movs	r3, #0
 800d5ea:	6013      	str	r3, [r2, #0]
 800d5ec:	2750      	movs	r7, #80	; 0x50
 800d5ee:	e70c      	b.n	800d40a <__gethex+0x12a>
 800d5f0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	d1f2      	bne.n	800d5dc <__gethex+0x2fc>
 800d5f6:	e7d8      	b.n	800d5aa <__gethex+0x2ca>
 800d5f8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d1d5      	bne.n	800d5aa <__gethex+0x2ca>
 800d5fe:	e7ed      	b.n	800d5dc <__gethex+0x2fc>
 800d600:	1e6f      	subs	r7, r5, #1
 800d602:	f1ba 0f00 	cmp.w	sl, #0
 800d606:	d131      	bne.n	800d66c <__gethex+0x38c>
 800d608:	b127      	cbz	r7, 800d614 <__gethex+0x334>
 800d60a:	4639      	mov	r1, r7
 800d60c:	4620      	mov	r0, r4
 800d60e:	f000 fe3b 	bl	800e288 <__any_on>
 800d612:	4682      	mov	sl, r0
 800d614:	117b      	asrs	r3, r7, #5
 800d616:	2101      	movs	r1, #1
 800d618:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800d61c:	f007 071f 	and.w	r7, r7, #31
 800d620:	fa01 f707 	lsl.w	r7, r1, r7
 800d624:	421f      	tst	r7, r3
 800d626:	4629      	mov	r1, r5
 800d628:	4620      	mov	r0, r4
 800d62a:	bf18      	it	ne
 800d62c:	f04a 0a02 	orrne.w	sl, sl, #2
 800d630:	1b76      	subs	r6, r6, r5
 800d632:	f7ff fded 	bl	800d210 <rshift>
 800d636:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800d63a:	2702      	movs	r7, #2
 800d63c:	f1ba 0f00 	cmp.w	sl, #0
 800d640:	d048      	beq.n	800d6d4 <__gethex+0x3f4>
 800d642:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d646:	2b02      	cmp	r3, #2
 800d648:	d015      	beq.n	800d676 <__gethex+0x396>
 800d64a:	2b03      	cmp	r3, #3
 800d64c:	d017      	beq.n	800d67e <__gethex+0x39e>
 800d64e:	2b01      	cmp	r3, #1
 800d650:	d109      	bne.n	800d666 <__gethex+0x386>
 800d652:	f01a 0f02 	tst.w	sl, #2
 800d656:	d006      	beq.n	800d666 <__gethex+0x386>
 800d658:	f8d9 0000 	ldr.w	r0, [r9]
 800d65c:	ea4a 0a00 	orr.w	sl, sl, r0
 800d660:	f01a 0f01 	tst.w	sl, #1
 800d664:	d10e      	bne.n	800d684 <__gethex+0x3a4>
 800d666:	f047 0710 	orr.w	r7, r7, #16
 800d66a:	e033      	b.n	800d6d4 <__gethex+0x3f4>
 800d66c:	f04f 0a01 	mov.w	sl, #1
 800d670:	e7d0      	b.n	800d614 <__gethex+0x334>
 800d672:	2701      	movs	r7, #1
 800d674:	e7e2      	b.n	800d63c <__gethex+0x35c>
 800d676:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d678:	f1c3 0301 	rsb	r3, r3, #1
 800d67c:	9315      	str	r3, [sp, #84]	; 0x54
 800d67e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d680:	2b00      	cmp	r3, #0
 800d682:	d0f0      	beq.n	800d666 <__gethex+0x386>
 800d684:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d688:	f104 0314 	add.w	r3, r4, #20
 800d68c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800d690:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800d694:	f04f 0c00 	mov.w	ip, #0
 800d698:	4618      	mov	r0, r3
 800d69a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d69e:	f1b2 3fff 	cmp.w	r2, #4294967295
 800d6a2:	d01c      	beq.n	800d6de <__gethex+0x3fe>
 800d6a4:	3201      	adds	r2, #1
 800d6a6:	6002      	str	r2, [r0, #0]
 800d6a8:	2f02      	cmp	r7, #2
 800d6aa:	f104 0314 	add.w	r3, r4, #20
 800d6ae:	d13f      	bne.n	800d730 <__gethex+0x450>
 800d6b0:	f8d8 2000 	ldr.w	r2, [r8]
 800d6b4:	3a01      	subs	r2, #1
 800d6b6:	42b2      	cmp	r2, r6
 800d6b8:	d10a      	bne.n	800d6d0 <__gethex+0x3f0>
 800d6ba:	1171      	asrs	r1, r6, #5
 800d6bc:	2201      	movs	r2, #1
 800d6be:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d6c2:	f006 061f 	and.w	r6, r6, #31
 800d6c6:	fa02 f606 	lsl.w	r6, r2, r6
 800d6ca:	421e      	tst	r6, r3
 800d6cc:	bf18      	it	ne
 800d6ce:	4617      	movne	r7, r2
 800d6d0:	f047 0720 	orr.w	r7, r7, #32
 800d6d4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d6d6:	601c      	str	r4, [r3, #0]
 800d6d8:	9b04      	ldr	r3, [sp, #16]
 800d6da:	601d      	str	r5, [r3, #0]
 800d6dc:	e695      	b.n	800d40a <__gethex+0x12a>
 800d6de:	4299      	cmp	r1, r3
 800d6e0:	f843 cc04 	str.w	ip, [r3, #-4]
 800d6e4:	d8d8      	bhi.n	800d698 <__gethex+0x3b8>
 800d6e6:	68a3      	ldr	r3, [r4, #8]
 800d6e8:	459b      	cmp	fp, r3
 800d6ea:	db19      	blt.n	800d720 <__gethex+0x440>
 800d6ec:	6861      	ldr	r1, [r4, #4]
 800d6ee:	ee18 0a10 	vmov	r0, s16
 800d6f2:	3101      	adds	r1, #1
 800d6f4:	f000 f928 	bl	800d948 <_Balloc>
 800d6f8:	4681      	mov	r9, r0
 800d6fa:	b918      	cbnz	r0, 800d704 <__gethex+0x424>
 800d6fc:	4b1a      	ldr	r3, [pc, #104]	; (800d768 <__gethex+0x488>)
 800d6fe:	4602      	mov	r2, r0
 800d700:	2184      	movs	r1, #132	; 0x84
 800d702:	e6a8      	b.n	800d456 <__gethex+0x176>
 800d704:	6922      	ldr	r2, [r4, #16]
 800d706:	3202      	adds	r2, #2
 800d708:	f104 010c 	add.w	r1, r4, #12
 800d70c:	0092      	lsls	r2, r2, #2
 800d70e:	300c      	adds	r0, #12
 800d710:	f000 f900 	bl	800d914 <memcpy>
 800d714:	4621      	mov	r1, r4
 800d716:	ee18 0a10 	vmov	r0, s16
 800d71a:	f000 f955 	bl	800d9c8 <_Bfree>
 800d71e:	464c      	mov	r4, r9
 800d720:	6923      	ldr	r3, [r4, #16]
 800d722:	1c5a      	adds	r2, r3, #1
 800d724:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d728:	6122      	str	r2, [r4, #16]
 800d72a:	2201      	movs	r2, #1
 800d72c:	615a      	str	r2, [r3, #20]
 800d72e:	e7bb      	b.n	800d6a8 <__gethex+0x3c8>
 800d730:	6922      	ldr	r2, [r4, #16]
 800d732:	455a      	cmp	r2, fp
 800d734:	dd0b      	ble.n	800d74e <__gethex+0x46e>
 800d736:	2101      	movs	r1, #1
 800d738:	4620      	mov	r0, r4
 800d73a:	f7ff fd69 	bl	800d210 <rshift>
 800d73e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d742:	3501      	adds	r5, #1
 800d744:	42ab      	cmp	r3, r5
 800d746:	f6ff aed0 	blt.w	800d4ea <__gethex+0x20a>
 800d74a:	2701      	movs	r7, #1
 800d74c:	e7c0      	b.n	800d6d0 <__gethex+0x3f0>
 800d74e:	f016 061f 	ands.w	r6, r6, #31
 800d752:	d0fa      	beq.n	800d74a <__gethex+0x46a>
 800d754:	4453      	add	r3, sl
 800d756:	f1c6 0620 	rsb	r6, r6, #32
 800d75a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800d75e:	f000 f9e5 	bl	800db2c <__hi0bits>
 800d762:	42b0      	cmp	r0, r6
 800d764:	dbe7      	blt.n	800d736 <__gethex+0x456>
 800d766:	e7f0      	b.n	800d74a <__gethex+0x46a>
 800d768:	0800f9c9 	.word	0x0800f9c9

0800d76c <L_shift>:
 800d76c:	f1c2 0208 	rsb	r2, r2, #8
 800d770:	0092      	lsls	r2, r2, #2
 800d772:	b570      	push	{r4, r5, r6, lr}
 800d774:	f1c2 0620 	rsb	r6, r2, #32
 800d778:	6843      	ldr	r3, [r0, #4]
 800d77a:	6804      	ldr	r4, [r0, #0]
 800d77c:	fa03 f506 	lsl.w	r5, r3, r6
 800d780:	432c      	orrs	r4, r5
 800d782:	40d3      	lsrs	r3, r2
 800d784:	6004      	str	r4, [r0, #0]
 800d786:	f840 3f04 	str.w	r3, [r0, #4]!
 800d78a:	4288      	cmp	r0, r1
 800d78c:	d3f4      	bcc.n	800d778 <L_shift+0xc>
 800d78e:	bd70      	pop	{r4, r5, r6, pc}

0800d790 <__match>:
 800d790:	b530      	push	{r4, r5, lr}
 800d792:	6803      	ldr	r3, [r0, #0]
 800d794:	3301      	adds	r3, #1
 800d796:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d79a:	b914      	cbnz	r4, 800d7a2 <__match+0x12>
 800d79c:	6003      	str	r3, [r0, #0]
 800d79e:	2001      	movs	r0, #1
 800d7a0:	bd30      	pop	{r4, r5, pc}
 800d7a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d7a6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800d7aa:	2d19      	cmp	r5, #25
 800d7ac:	bf98      	it	ls
 800d7ae:	3220      	addls	r2, #32
 800d7b0:	42a2      	cmp	r2, r4
 800d7b2:	d0f0      	beq.n	800d796 <__match+0x6>
 800d7b4:	2000      	movs	r0, #0
 800d7b6:	e7f3      	b.n	800d7a0 <__match+0x10>

0800d7b8 <__hexnan>:
 800d7b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7bc:	680b      	ldr	r3, [r1, #0]
 800d7be:	115e      	asrs	r6, r3, #5
 800d7c0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d7c4:	f013 031f 	ands.w	r3, r3, #31
 800d7c8:	b087      	sub	sp, #28
 800d7ca:	bf18      	it	ne
 800d7cc:	3604      	addne	r6, #4
 800d7ce:	2500      	movs	r5, #0
 800d7d0:	1f37      	subs	r7, r6, #4
 800d7d2:	4690      	mov	r8, r2
 800d7d4:	6802      	ldr	r2, [r0, #0]
 800d7d6:	9301      	str	r3, [sp, #4]
 800d7d8:	4682      	mov	sl, r0
 800d7da:	f846 5c04 	str.w	r5, [r6, #-4]
 800d7de:	46b9      	mov	r9, r7
 800d7e0:	463c      	mov	r4, r7
 800d7e2:	9502      	str	r5, [sp, #8]
 800d7e4:	46ab      	mov	fp, r5
 800d7e6:	7851      	ldrb	r1, [r2, #1]
 800d7e8:	1c53      	adds	r3, r2, #1
 800d7ea:	9303      	str	r3, [sp, #12]
 800d7ec:	b341      	cbz	r1, 800d840 <__hexnan+0x88>
 800d7ee:	4608      	mov	r0, r1
 800d7f0:	9205      	str	r2, [sp, #20]
 800d7f2:	9104      	str	r1, [sp, #16]
 800d7f4:	f7ff fd5e 	bl	800d2b4 <__hexdig_fun>
 800d7f8:	2800      	cmp	r0, #0
 800d7fa:	d14f      	bne.n	800d89c <__hexnan+0xe4>
 800d7fc:	9904      	ldr	r1, [sp, #16]
 800d7fe:	9a05      	ldr	r2, [sp, #20]
 800d800:	2920      	cmp	r1, #32
 800d802:	d818      	bhi.n	800d836 <__hexnan+0x7e>
 800d804:	9b02      	ldr	r3, [sp, #8]
 800d806:	459b      	cmp	fp, r3
 800d808:	dd13      	ble.n	800d832 <__hexnan+0x7a>
 800d80a:	454c      	cmp	r4, r9
 800d80c:	d206      	bcs.n	800d81c <__hexnan+0x64>
 800d80e:	2d07      	cmp	r5, #7
 800d810:	dc04      	bgt.n	800d81c <__hexnan+0x64>
 800d812:	462a      	mov	r2, r5
 800d814:	4649      	mov	r1, r9
 800d816:	4620      	mov	r0, r4
 800d818:	f7ff ffa8 	bl	800d76c <L_shift>
 800d81c:	4544      	cmp	r4, r8
 800d81e:	d950      	bls.n	800d8c2 <__hexnan+0x10a>
 800d820:	2300      	movs	r3, #0
 800d822:	f1a4 0904 	sub.w	r9, r4, #4
 800d826:	f844 3c04 	str.w	r3, [r4, #-4]
 800d82a:	f8cd b008 	str.w	fp, [sp, #8]
 800d82e:	464c      	mov	r4, r9
 800d830:	461d      	mov	r5, r3
 800d832:	9a03      	ldr	r2, [sp, #12]
 800d834:	e7d7      	b.n	800d7e6 <__hexnan+0x2e>
 800d836:	2929      	cmp	r1, #41	; 0x29
 800d838:	d156      	bne.n	800d8e8 <__hexnan+0x130>
 800d83a:	3202      	adds	r2, #2
 800d83c:	f8ca 2000 	str.w	r2, [sl]
 800d840:	f1bb 0f00 	cmp.w	fp, #0
 800d844:	d050      	beq.n	800d8e8 <__hexnan+0x130>
 800d846:	454c      	cmp	r4, r9
 800d848:	d206      	bcs.n	800d858 <__hexnan+0xa0>
 800d84a:	2d07      	cmp	r5, #7
 800d84c:	dc04      	bgt.n	800d858 <__hexnan+0xa0>
 800d84e:	462a      	mov	r2, r5
 800d850:	4649      	mov	r1, r9
 800d852:	4620      	mov	r0, r4
 800d854:	f7ff ff8a 	bl	800d76c <L_shift>
 800d858:	4544      	cmp	r4, r8
 800d85a:	d934      	bls.n	800d8c6 <__hexnan+0x10e>
 800d85c:	f1a8 0204 	sub.w	r2, r8, #4
 800d860:	4623      	mov	r3, r4
 800d862:	f853 1b04 	ldr.w	r1, [r3], #4
 800d866:	f842 1f04 	str.w	r1, [r2, #4]!
 800d86a:	429f      	cmp	r7, r3
 800d86c:	d2f9      	bcs.n	800d862 <__hexnan+0xaa>
 800d86e:	1b3b      	subs	r3, r7, r4
 800d870:	f023 0303 	bic.w	r3, r3, #3
 800d874:	3304      	adds	r3, #4
 800d876:	3401      	adds	r4, #1
 800d878:	3e03      	subs	r6, #3
 800d87a:	42b4      	cmp	r4, r6
 800d87c:	bf88      	it	hi
 800d87e:	2304      	movhi	r3, #4
 800d880:	4443      	add	r3, r8
 800d882:	2200      	movs	r2, #0
 800d884:	f843 2b04 	str.w	r2, [r3], #4
 800d888:	429f      	cmp	r7, r3
 800d88a:	d2fb      	bcs.n	800d884 <__hexnan+0xcc>
 800d88c:	683b      	ldr	r3, [r7, #0]
 800d88e:	b91b      	cbnz	r3, 800d898 <__hexnan+0xe0>
 800d890:	4547      	cmp	r7, r8
 800d892:	d127      	bne.n	800d8e4 <__hexnan+0x12c>
 800d894:	2301      	movs	r3, #1
 800d896:	603b      	str	r3, [r7, #0]
 800d898:	2005      	movs	r0, #5
 800d89a:	e026      	b.n	800d8ea <__hexnan+0x132>
 800d89c:	3501      	adds	r5, #1
 800d89e:	2d08      	cmp	r5, #8
 800d8a0:	f10b 0b01 	add.w	fp, fp, #1
 800d8a4:	dd06      	ble.n	800d8b4 <__hexnan+0xfc>
 800d8a6:	4544      	cmp	r4, r8
 800d8a8:	d9c3      	bls.n	800d832 <__hexnan+0x7a>
 800d8aa:	2300      	movs	r3, #0
 800d8ac:	f844 3c04 	str.w	r3, [r4, #-4]
 800d8b0:	2501      	movs	r5, #1
 800d8b2:	3c04      	subs	r4, #4
 800d8b4:	6822      	ldr	r2, [r4, #0]
 800d8b6:	f000 000f 	and.w	r0, r0, #15
 800d8ba:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800d8be:	6022      	str	r2, [r4, #0]
 800d8c0:	e7b7      	b.n	800d832 <__hexnan+0x7a>
 800d8c2:	2508      	movs	r5, #8
 800d8c4:	e7b5      	b.n	800d832 <__hexnan+0x7a>
 800d8c6:	9b01      	ldr	r3, [sp, #4]
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d0df      	beq.n	800d88c <__hexnan+0xd4>
 800d8cc:	f04f 32ff 	mov.w	r2, #4294967295
 800d8d0:	f1c3 0320 	rsb	r3, r3, #32
 800d8d4:	fa22 f303 	lsr.w	r3, r2, r3
 800d8d8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d8dc:	401a      	ands	r2, r3
 800d8de:	f846 2c04 	str.w	r2, [r6, #-4]
 800d8e2:	e7d3      	b.n	800d88c <__hexnan+0xd4>
 800d8e4:	3f04      	subs	r7, #4
 800d8e6:	e7d1      	b.n	800d88c <__hexnan+0xd4>
 800d8e8:	2004      	movs	r0, #4
 800d8ea:	b007      	add	sp, #28
 800d8ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d8f0 <__ascii_mbtowc>:
 800d8f0:	b082      	sub	sp, #8
 800d8f2:	b901      	cbnz	r1, 800d8f6 <__ascii_mbtowc+0x6>
 800d8f4:	a901      	add	r1, sp, #4
 800d8f6:	b142      	cbz	r2, 800d90a <__ascii_mbtowc+0x1a>
 800d8f8:	b14b      	cbz	r3, 800d90e <__ascii_mbtowc+0x1e>
 800d8fa:	7813      	ldrb	r3, [r2, #0]
 800d8fc:	600b      	str	r3, [r1, #0]
 800d8fe:	7812      	ldrb	r2, [r2, #0]
 800d900:	1e10      	subs	r0, r2, #0
 800d902:	bf18      	it	ne
 800d904:	2001      	movne	r0, #1
 800d906:	b002      	add	sp, #8
 800d908:	4770      	bx	lr
 800d90a:	4610      	mov	r0, r2
 800d90c:	e7fb      	b.n	800d906 <__ascii_mbtowc+0x16>
 800d90e:	f06f 0001 	mvn.w	r0, #1
 800d912:	e7f8      	b.n	800d906 <__ascii_mbtowc+0x16>

0800d914 <memcpy>:
 800d914:	440a      	add	r2, r1
 800d916:	4291      	cmp	r1, r2
 800d918:	f100 33ff 	add.w	r3, r0, #4294967295
 800d91c:	d100      	bne.n	800d920 <memcpy+0xc>
 800d91e:	4770      	bx	lr
 800d920:	b510      	push	{r4, lr}
 800d922:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d926:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d92a:	4291      	cmp	r1, r2
 800d92c:	d1f9      	bne.n	800d922 <memcpy+0xe>
 800d92e:	bd10      	pop	{r4, pc}

0800d930 <__malloc_lock>:
 800d930:	4801      	ldr	r0, [pc, #4]	; (800d938 <__malloc_lock+0x8>)
 800d932:	f001 b832 	b.w	800e99a <__retarget_lock_acquire_recursive>
 800d936:	bf00      	nop
 800d938:	20001d3c 	.word	0x20001d3c

0800d93c <__malloc_unlock>:
 800d93c:	4801      	ldr	r0, [pc, #4]	; (800d944 <__malloc_unlock+0x8>)
 800d93e:	f001 b82d 	b.w	800e99c <__retarget_lock_release_recursive>
 800d942:	bf00      	nop
 800d944:	20001d3c 	.word	0x20001d3c

0800d948 <_Balloc>:
 800d948:	b570      	push	{r4, r5, r6, lr}
 800d94a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d94c:	4604      	mov	r4, r0
 800d94e:	460d      	mov	r5, r1
 800d950:	b976      	cbnz	r6, 800d970 <_Balloc+0x28>
 800d952:	2010      	movs	r0, #16
 800d954:	f7fe fbec 	bl	800c130 <malloc>
 800d958:	4602      	mov	r2, r0
 800d95a:	6260      	str	r0, [r4, #36]	; 0x24
 800d95c:	b920      	cbnz	r0, 800d968 <_Balloc+0x20>
 800d95e:	4b18      	ldr	r3, [pc, #96]	; (800d9c0 <_Balloc+0x78>)
 800d960:	4818      	ldr	r0, [pc, #96]	; (800d9c4 <_Balloc+0x7c>)
 800d962:	2166      	movs	r1, #102	; 0x66
 800d964:	f000 ffe8 	bl	800e938 <__assert_func>
 800d968:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d96c:	6006      	str	r6, [r0, #0]
 800d96e:	60c6      	str	r6, [r0, #12]
 800d970:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d972:	68f3      	ldr	r3, [r6, #12]
 800d974:	b183      	cbz	r3, 800d998 <_Balloc+0x50>
 800d976:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d978:	68db      	ldr	r3, [r3, #12]
 800d97a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d97e:	b9b8      	cbnz	r0, 800d9b0 <_Balloc+0x68>
 800d980:	2101      	movs	r1, #1
 800d982:	fa01 f605 	lsl.w	r6, r1, r5
 800d986:	1d72      	adds	r2, r6, #5
 800d988:	0092      	lsls	r2, r2, #2
 800d98a:	4620      	mov	r0, r4
 800d98c:	f000 fc9d 	bl	800e2ca <_calloc_r>
 800d990:	b160      	cbz	r0, 800d9ac <_Balloc+0x64>
 800d992:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d996:	e00e      	b.n	800d9b6 <_Balloc+0x6e>
 800d998:	2221      	movs	r2, #33	; 0x21
 800d99a:	2104      	movs	r1, #4
 800d99c:	4620      	mov	r0, r4
 800d99e:	f000 fc94 	bl	800e2ca <_calloc_r>
 800d9a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d9a4:	60f0      	str	r0, [r6, #12]
 800d9a6:	68db      	ldr	r3, [r3, #12]
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d1e4      	bne.n	800d976 <_Balloc+0x2e>
 800d9ac:	2000      	movs	r0, #0
 800d9ae:	bd70      	pop	{r4, r5, r6, pc}
 800d9b0:	6802      	ldr	r2, [r0, #0]
 800d9b2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d9b6:	2300      	movs	r3, #0
 800d9b8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d9bc:	e7f7      	b.n	800d9ae <_Balloc+0x66>
 800d9be:	bf00      	nop
 800d9c0:	0800fa54 	.word	0x0800fa54
 800d9c4:	0800fa6b 	.word	0x0800fa6b

0800d9c8 <_Bfree>:
 800d9c8:	b570      	push	{r4, r5, r6, lr}
 800d9ca:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d9cc:	4605      	mov	r5, r0
 800d9ce:	460c      	mov	r4, r1
 800d9d0:	b976      	cbnz	r6, 800d9f0 <_Bfree+0x28>
 800d9d2:	2010      	movs	r0, #16
 800d9d4:	f7fe fbac 	bl	800c130 <malloc>
 800d9d8:	4602      	mov	r2, r0
 800d9da:	6268      	str	r0, [r5, #36]	; 0x24
 800d9dc:	b920      	cbnz	r0, 800d9e8 <_Bfree+0x20>
 800d9de:	4b09      	ldr	r3, [pc, #36]	; (800da04 <_Bfree+0x3c>)
 800d9e0:	4809      	ldr	r0, [pc, #36]	; (800da08 <_Bfree+0x40>)
 800d9e2:	218a      	movs	r1, #138	; 0x8a
 800d9e4:	f000 ffa8 	bl	800e938 <__assert_func>
 800d9e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d9ec:	6006      	str	r6, [r0, #0]
 800d9ee:	60c6      	str	r6, [r0, #12]
 800d9f0:	b13c      	cbz	r4, 800da02 <_Bfree+0x3a>
 800d9f2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d9f4:	6862      	ldr	r2, [r4, #4]
 800d9f6:	68db      	ldr	r3, [r3, #12]
 800d9f8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d9fc:	6021      	str	r1, [r4, #0]
 800d9fe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800da02:	bd70      	pop	{r4, r5, r6, pc}
 800da04:	0800fa54 	.word	0x0800fa54
 800da08:	0800fa6b 	.word	0x0800fa6b

0800da0c <__multadd>:
 800da0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da10:	690d      	ldr	r5, [r1, #16]
 800da12:	4607      	mov	r7, r0
 800da14:	460c      	mov	r4, r1
 800da16:	461e      	mov	r6, r3
 800da18:	f101 0c14 	add.w	ip, r1, #20
 800da1c:	2000      	movs	r0, #0
 800da1e:	f8dc 3000 	ldr.w	r3, [ip]
 800da22:	b299      	uxth	r1, r3
 800da24:	fb02 6101 	mla	r1, r2, r1, r6
 800da28:	0c1e      	lsrs	r6, r3, #16
 800da2a:	0c0b      	lsrs	r3, r1, #16
 800da2c:	fb02 3306 	mla	r3, r2, r6, r3
 800da30:	b289      	uxth	r1, r1
 800da32:	3001      	adds	r0, #1
 800da34:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800da38:	4285      	cmp	r5, r0
 800da3a:	f84c 1b04 	str.w	r1, [ip], #4
 800da3e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800da42:	dcec      	bgt.n	800da1e <__multadd+0x12>
 800da44:	b30e      	cbz	r6, 800da8a <__multadd+0x7e>
 800da46:	68a3      	ldr	r3, [r4, #8]
 800da48:	42ab      	cmp	r3, r5
 800da4a:	dc19      	bgt.n	800da80 <__multadd+0x74>
 800da4c:	6861      	ldr	r1, [r4, #4]
 800da4e:	4638      	mov	r0, r7
 800da50:	3101      	adds	r1, #1
 800da52:	f7ff ff79 	bl	800d948 <_Balloc>
 800da56:	4680      	mov	r8, r0
 800da58:	b928      	cbnz	r0, 800da66 <__multadd+0x5a>
 800da5a:	4602      	mov	r2, r0
 800da5c:	4b0c      	ldr	r3, [pc, #48]	; (800da90 <__multadd+0x84>)
 800da5e:	480d      	ldr	r0, [pc, #52]	; (800da94 <__multadd+0x88>)
 800da60:	21b5      	movs	r1, #181	; 0xb5
 800da62:	f000 ff69 	bl	800e938 <__assert_func>
 800da66:	6922      	ldr	r2, [r4, #16]
 800da68:	3202      	adds	r2, #2
 800da6a:	f104 010c 	add.w	r1, r4, #12
 800da6e:	0092      	lsls	r2, r2, #2
 800da70:	300c      	adds	r0, #12
 800da72:	f7ff ff4f 	bl	800d914 <memcpy>
 800da76:	4621      	mov	r1, r4
 800da78:	4638      	mov	r0, r7
 800da7a:	f7ff ffa5 	bl	800d9c8 <_Bfree>
 800da7e:	4644      	mov	r4, r8
 800da80:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800da84:	3501      	adds	r5, #1
 800da86:	615e      	str	r6, [r3, #20]
 800da88:	6125      	str	r5, [r4, #16]
 800da8a:	4620      	mov	r0, r4
 800da8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da90:	0800f9c9 	.word	0x0800f9c9
 800da94:	0800fa6b 	.word	0x0800fa6b

0800da98 <__s2b>:
 800da98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800da9c:	460c      	mov	r4, r1
 800da9e:	4615      	mov	r5, r2
 800daa0:	461f      	mov	r7, r3
 800daa2:	2209      	movs	r2, #9
 800daa4:	3308      	adds	r3, #8
 800daa6:	4606      	mov	r6, r0
 800daa8:	fb93 f3f2 	sdiv	r3, r3, r2
 800daac:	2100      	movs	r1, #0
 800daae:	2201      	movs	r2, #1
 800dab0:	429a      	cmp	r2, r3
 800dab2:	db09      	blt.n	800dac8 <__s2b+0x30>
 800dab4:	4630      	mov	r0, r6
 800dab6:	f7ff ff47 	bl	800d948 <_Balloc>
 800daba:	b940      	cbnz	r0, 800dace <__s2b+0x36>
 800dabc:	4602      	mov	r2, r0
 800dabe:	4b19      	ldr	r3, [pc, #100]	; (800db24 <__s2b+0x8c>)
 800dac0:	4819      	ldr	r0, [pc, #100]	; (800db28 <__s2b+0x90>)
 800dac2:	21ce      	movs	r1, #206	; 0xce
 800dac4:	f000 ff38 	bl	800e938 <__assert_func>
 800dac8:	0052      	lsls	r2, r2, #1
 800daca:	3101      	adds	r1, #1
 800dacc:	e7f0      	b.n	800dab0 <__s2b+0x18>
 800dace:	9b08      	ldr	r3, [sp, #32]
 800dad0:	6143      	str	r3, [r0, #20]
 800dad2:	2d09      	cmp	r5, #9
 800dad4:	f04f 0301 	mov.w	r3, #1
 800dad8:	6103      	str	r3, [r0, #16]
 800dada:	dd16      	ble.n	800db0a <__s2b+0x72>
 800dadc:	f104 0909 	add.w	r9, r4, #9
 800dae0:	46c8      	mov	r8, r9
 800dae2:	442c      	add	r4, r5
 800dae4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800dae8:	4601      	mov	r1, r0
 800daea:	3b30      	subs	r3, #48	; 0x30
 800daec:	220a      	movs	r2, #10
 800daee:	4630      	mov	r0, r6
 800daf0:	f7ff ff8c 	bl	800da0c <__multadd>
 800daf4:	45a0      	cmp	r8, r4
 800daf6:	d1f5      	bne.n	800dae4 <__s2b+0x4c>
 800daf8:	f1a5 0408 	sub.w	r4, r5, #8
 800dafc:	444c      	add	r4, r9
 800dafe:	1b2d      	subs	r5, r5, r4
 800db00:	1963      	adds	r3, r4, r5
 800db02:	42bb      	cmp	r3, r7
 800db04:	db04      	blt.n	800db10 <__s2b+0x78>
 800db06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800db0a:	340a      	adds	r4, #10
 800db0c:	2509      	movs	r5, #9
 800db0e:	e7f6      	b.n	800dafe <__s2b+0x66>
 800db10:	f814 3b01 	ldrb.w	r3, [r4], #1
 800db14:	4601      	mov	r1, r0
 800db16:	3b30      	subs	r3, #48	; 0x30
 800db18:	220a      	movs	r2, #10
 800db1a:	4630      	mov	r0, r6
 800db1c:	f7ff ff76 	bl	800da0c <__multadd>
 800db20:	e7ee      	b.n	800db00 <__s2b+0x68>
 800db22:	bf00      	nop
 800db24:	0800f9c9 	.word	0x0800f9c9
 800db28:	0800fa6b 	.word	0x0800fa6b

0800db2c <__hi0bits>:
 800db2c:	0c03      	lsrs	r3, r0, #16
 800db2e:	041b      	lsls	r3, r3, #16
 800db30:	b9d3      	cbnz	r3, 800db68 <__hi0bits+0x3c>
 800db32:	0400      	lsls	r0, r0, #16
 800db34:	2310      	movs	r3, #16
 800db36:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800db3a:	bf04      	itt	eq
 800db3c:	0200      	lsleq	r0, r0, #8
 800db3e:	3308      	addeq	r3, #8
 800db40:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800db44:	bf04      	itt	eq
 800db46:	0100      	lsleq	r0, r0, #4
 800db48:	3304      	addeq	r3, #4
 800db4a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800db4e:	bf04      	itt	eq
 800db50:	0080      	lsleq	r0, r0, #2
 800db52:	3302      	addeq	r3, #2
 800db54:	2800      	cmp	r0, #0
 800db56:	db05      	blt.n	800db64 <__hi0bits+0x38>
 800db58:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800db5c:	f103 0301 	add.w	r3, r3, #1
 800db60:	bf08      	it	eq
 800db62:	2320      	moveq	r3, #32
 800db64:	4618      	mov	r0, r3
 800db66:	4770      	bx	lr
 800db68:	2300      	movs	r3, #0
 800db6a:	e7e4      	b.n	800db36 <__hi0bits+0xa>

0800db6c <__lo0bits>:
 800db6c:	6803      	ldr	r3, [r0, #0]
 800db6e:	f013 0207 	ands.w	r2, r3, #7
 800db72:	4601      	mov	r1, r0
 800db74:	d00b      	beq.n	800db8e <__lo0bits+0x22>
 800db76:	07da      	lsls	r2, r3, #31
 800db78:	d423      	bmi.n	800dbc2 <__lo0bits+0x56>
 800db7a:	0798      	lsls	r0, r3, #30
 800db7c:	bf49      	itett	mi
 800db7e:	085b      	lsrmi	r3, r3, #1
 800db80:	089b      	lsrpl	r3, r3, #2
 800db82:	2001      	movmi	r0, #1
 800db84:	600b      	strmi	r3, [r1, #0]
 800db86:	bf5c      	itt	pl
 800db88:	600b      	strpl	r3, [r1, #0]
 800db8a:	2002      	movpl	r0, #2
 800db8c:	4770      	bx	lr
 800db8e:	b298      	uxth	r0, r3
 800db90:	b9a8      	cbnz	r0, 800dbbe <__lo0bits+0x52>
 800db92:	0c1b      	lsrs	r3, r3, #16
 800db94:	2010      	movs	r0, #16
 800db96:	b2da      	uxtb	r2, r3
 800db98:	b90a      	cbnz	r2, 800db9e <__lo0bits+0x32>
 800db9a:	3008      	adds	r0, #8
 800db9c:	0a1b      	lsrs	r3, r3, #8
 800db9e:	071a      	lsls	r2, r3, #28
 800dba0:	bf04      	itt	eq
 800dba2:	091b      	lsreq	r3, r3, #4
 800dba4:	3004      	addeq	r0, #4
 800dba6:	079a      	lsls	r2, r3, #30
 800dba8:	bf04      	itt	eq
 800dbaa:	089b      	lsreq	r3, r3, #2
 800dbac:	3002      	addeq	r0, #2
 800dbae:	07da      	lsls	r2, r3, #31
 800dbb0:	d403      	bmi.n	800dbba <__lo0bits+0x4e>
 800dbb2:	085b      	lsrs	r3, r3, #1
 800dbb4:	f100 0001 	add.w	r0, r0, #1
 800dbb8:	d005      	beq.n	800dbc6 <__lo0bits+0x5a>
 800dbba:	600b      	str	r3, [r1, #0]
 800dbbc:	4770      	bx	lr
 800dbbe:	4610      	mov	r0, r2
 800dbc0:	e7e9      	b.n	800db96 <__lo0bits+0x2a>
 800dbc2:	2000      	movs	r0, #0
 800dbc4:	4770      	bx	lr
 800dbc6:	2020      	movs	r0, #32
 800dbc8:	4770      	bx	lr
	...

0800dbcc <__i2b>:
 800dbcc:	b510      	push	{r4, lr}
 800dbce:	460c      	mov	r4, r1
 800dbd0:	2101      	movs	r1, #1
 800dbd2:	f7ff feb9 	bl	800d948 <_Balloc>
 800dbd6:	4602      	mov	r2, r0
 800dbd8:	b928      	cbnz	r0, 800dbe6 <__i2b+0x1a>
 800dbda:	4b05      	ldr	r3, [pc, #20]	; (800dbf0 <__i2b+0x24>)
 800dbdc:	4805      	ldr	r0, [pc, #20]	; (800dbf4 <__i2b+0x28>)
 800dbde:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800dbe2:	f000 fea9 	bl	800e938 <__assert_func>
 800dbe6:	2301      	movs	r3, #1
 800dbe8:	6144      	str	r4, [r0, #20]
 800dbea:	6103      	str	r3, [r0, #16]
 800dbec:	bd10      	pop	{r4, pc}
 800dbee:	bf00      	nop
 800dbf0:	0800f9c9 	.word	0x0800f9c9
 800dbf4:	0800fa6b 	.word	0x0800fa6b

0800dbf8 <__multiply>:
 800dbf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbfc:	4691      	mov	r9, r2
 800dbfe:	690a      	ldr	r2, [r1, #16]
 800dc00:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800dc04:	429a      	cmp	r2, r3
 800dc06:	bfb8      	it	lt
 800dc08:	460b      	movlt	r3, r1
 800dc0a:	460c      	mov	r4, r1
 800dc0c:	bfbc      	itt	lt
 800dc0e:	464c      	movlt	r4, r9
 800dc10:	4699      	movlt	r9, r3
 800dc12:	6927      	ldr	r7, [r4, #16]
 800dc14:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800dc18:	68a3      	ldr	r3, [r4, #8]
 800dc1a:	6861      	ldr	r1, [r4, #4]
 800dc1c:	eb07 060a 	add.w	r6, r7, sl
 800dc20:	42b3      	cmp	r3, r6
 800dc22:	b085      	sub	sp, #20
 800dc24:	bfb8      	it	lt
 800dc26:	3101      	addlt	r1, #1
 800dc28:	f7ff fe8e 	bl	800d948 <_Balloc>
 800dc2c:	b930      	cbnz	r0, 800dc3c <__multiply+0x44>
 800dc2e:	4602      	mov	r2, r0
 800dc30:	4b44      	ldr	r3, [pc, #272]	; (800dd44 <__multiply+0x14c>)
 800dc32:	4845      	ldr	r0, [pc, #276]	; (800dd48 <__multiply+0x150>)
 800dc34:	f240 115d 	movw	r1, #349	; 0x15d
 800dc38:	f000 fe7e 	bl	800e938 <__assert_func>
 800dc3c:	f100 0514 	add.w	r5, r0, #20
 800dc40:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800dc44:	462b      	mov	r3, r5
 800dc46:	2200      	movs	r2, #0
 800dc48:	4543      	cmp	r3, r8
 800dc4a:	d321      	bcc.n	800dc90 <__multiply+0x98>
 800dc4c:	f104 0314 	add.w	r3, r4, #20
 800dc50:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800dc54:	f109 0314 	add.w	r3, r9, #20
 800dc58:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800dc5c:	9202      	str	r2, [sp, #8]
 800dc5e:	1b3a      	subs	r2, r7, r4
 800dc60:	3a15      	subs	r2, #21
 800dc62:	f022 0203 	bic.w	r2, r2, #3
 800dc66:	3204      	adds	r2, #4
 800dc68:	f104 0115 	add.w	r1, r4, #21
 800dc6c:	428f      	cmp	r7, r1
 800dc6e:	bf38      	it	cc
 800dc70:	2204      	movcc	r2, #4
 800dc72:	9201      	str	r2, [sp, #4]
 800dc74:	9a02      	ldr	r2, [sp, #8]
 800dc76:	9303      	str	r3, [sp, #12]
 800dc78:	429a      	cmp	r2, r3
 800dc7a:	d80c      	bhi.n	800dc96 <__multiply+0x9e>
 800dc7c:	2e00      	cmp	r6, #0
 800dc7e:	dd03      	ble.n	800dc88 <__multiply+0x90>
 800dc80:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d05a      	beq.n	800dd3e <__multiply+0x146>
 800dc88:	6106      	str	r6, [r0, #16]
 800dc8a:	b005      	add	sp, #20
 800dc8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc90:	f843 2b04 	str.w	r2, [r3], #4
 800dc94:	e7d8      	b.n	800dc48 <__multiply+0x50>
 800dc96:	f8b3 a000 	ldrh.w	sl, [r3]
 800dc9a:	f1ba 0f00 	cmp.w	sl, #0
 800dc9e:	d024      	beq.n	800dcea <__multiply+0xf2>
 800dca0:	f104 0e14 	add.w	lr, r4, #20
 800dca4:	46a9      	mov	r9, r5
 800dca6:	f04f 0c00 	mov.w	ip, #0
 800dcaa:	f85e 2b04 	ldr.w	r2, [lr], #4
 800dcae:	f8d9 1000 	ldr.w	r1, [r9]
 800dcb2:	fa1f fb82 	uxth.w	fp, r2
 800dcb6:	b289      	uxth	r1, r1
 800dcb8:	fb0a 110b 	mla	r1, sl, fp, r1
 800dcbc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800dcc0:	f8d9 2000 	ldr.w	r2, [r9]
 800dcc4:	4461      	add	r1, ip
 800dcc6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800dcca:	fb0a c20b 	mla	r2, sl, fp, ip
 800dcce:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800dcd2:	b289      	uxth	r1, r1
 800dcd4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800dcd8:	4577      	cmp	r7, lr
 800dcda:	f849 1b04 	str.w	r1, [r9], #4
 800dcde:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800dce2:	d8e2      	bhi.n	800dcaa <__multiply+0xb2>
 800dce4:	9a01      	ldr	r2, [sp, #4]
 800dce6:	f845 c002 	str.w	ip, [r5, r2]
 800dcea:	9a03      	ldr	r2, [sp, #12]
 800dcec:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800dcf0:	3304      	adds	r3, #4
 800dcf2:	f1b9 0f00 	cmp.w	r9, #0
 800dcf6:	d020      	beq.n	800dd3a <__multiply+0x142>
 800dcf8:	6829      	ldr	r1, [r5, #0]
 800dcfa:	f104 0c14 	add.w	ip, r4, #20
 800dcfe:	46ae      	mov	lr, r5
 800dd00:	f04f 0a00 	mov.w	sl, #0
 800dd04:	f8bc b000 	ldrh.w	fp, [ip]
 800dd08:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800dd0c:	fb09 220b 	mla	r2, r9, fp, r2
 800dd10:	4492      	add	sl, r2
 800dd12:	b289      	uxth	r1, r1
 800dd14:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800dd18:	f84e 1b04 	str.w	r1, [lr], #4
 800dd1c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800dd20:	f8be 1000 	ldrh.w	r1, [lr]
 800dd24:	0c12      	lsrs	r2, r2, #16
 800dd26:	fb09 1102 	mla	r1, r9, r2, r1
 800dd2a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800dd2e:	4567      	cmp	r7, ip
 800dd30:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800dd34:	d8e6      	bhi.n	800dd04 <__multiply+0x10c>
 800dd36:	9a01      	ldr	r2, [sp, #4]
 800dd38:	50a9      	str	r1, [r5, r2]
 800dd3a:	3504      	adds	r5, #4
 800dd3c:	e79a      	b.n	800dc74 <__multiply+0x7c>
 800dd3e:	3e01      	subs	r6, #1
 800dd40:	e79c      	b.n	800dc7c <__multiply+0x84>
 800dd42:	bf00      	nop
 800dd44:	0800f9c9 	.word	0x0800f9c9
 800dd48:	0800fa6b 	.word	0x0800fa6b

0800dd4c <__pow5mult>:
 800dd4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dd50:	4615      	mov	r5, r2
 800dd52:	f012 0203 	ands.w	r2, r2, #3
 800dd56:	4606      	mov	r6, r0
 800dd58:	460f      	mov	r7, r1
 800dd5a:	d007      	beq.n	800dd6c <__pow5mult+0x20>
 800dd5c:	4c25      	ldr	r4, [pc, #148]	; (800ddf4 <__pow5mult+0xa8>)
 800dd5e:	3a01      	subs	r2, #1
 800dd60:	2300      	movs	r3, #0
 800dd62:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800dd66:	f7ff fe51 	bl	800da0c <__multadd>
 800dd6a:	4607      	mov	r7, r0
 800dd6c:	10ad      	asrs	r5, r5, #2
 800dd6e:	d03d      	beq.n	800ddec <__pow5mult+0xa0>
 800dd70:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800dd72:	b97c      	cbnz	r4, 800dd94 <__pow5mult+0x48>
 800dd74:	2010      	movs	r0, #16
 800dd76:	f7fe f9db 	bl	800c130 <malloc>
 800dd7a:	4602      	mov	r2, r0
 800dd7c:	6270      	str	r0, [r6, #36]	; 0x24
 800dd7e:	b928      	cbnz	r0, 800dd8c <__pow5mult+0x40>
 800dd80:	4b1d      	ldr	r3, [pc, #116]	; (800ddf8 <__pow5mult+0xac>)
 800dd82:	481e      	ldr	r0, [pc, #120]	; (800ddfc <__pow5mult+0xb0>)
 800dd84:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800dd88:	f000 fdd6 	bl	800e938 <__assert_func>
 800dd8c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800dd90:	6004      	str	r4, [r0, #0]
 800dd92:	60c4      	str	r4, [r0, #12]
 800dd94:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800dd98:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800dd9c:	b94c      	cbnz	r4, 800ddb2 <__pow5mult+0x66>
 800dd9e:	f240 2171 	movw	r1, #625	; 0x271
 800dda2:	4630      	mov	r0, r6
 800dda4:	f7ff ff12 	bl	800dbcc <__i2b>
 800dda8:	2300      	movs	r3, #0
 800ddaa:	f8c8 0008 	str.w	r0, [r8, #8]
 800ddae:	4604      	mov	r4, r0
 800ddb0:	6003      	str	r3, [r0, #0]
 800ddb2:	f04f 0900 	mov.w	r9, #0
 800ddb6:	07eb      	lsls	r3, r5, #31
 800ddb8:	d50a      	bpl.n	800ddd0 <__pow5mult+0x84>
 800ddba:	4639      	mov	r1, r7
 800ddbc:	4622      	mov	r2, r4
 800ddbe:	4630      	mov	r0, r6
 800ddc0:	f7ff ff1a 	bl	800dbf8 <__multiply>
 800ddc4:	4639      	mov	r1, r7
 800ddc6:	4680      	mov	r8, r0
 800ddc8:	4630      	mov	r0, r6
 800ddca:	f7ff fdfd 	bl	800d9c8 <_Bfree>
 800ddce:	4647      	mov	r7, r8
 800ddd0:	106d      	asrs	r5, r5, #1
 800ddd2:	d00b      	beq.n	800ddec <__pow5mult+0xa0>
 800ddd4:	6820      	ldr	r0, [r4, #0]
 800ddd6:	b938      	cbnz	r0, 800dde8 <__pow5mult+0x9c>
 800ddd8:	4622      	mov	r2, r4
 800ddda:	4621      	mov	r1, r4
 800dddc:	4630      	mov	r0, r6
 800ddde:	f7ff ff0b 	bl	800dbf8 <__multiply>
 800dde2:	6020      	str	r0, [r4, #0]
 800dde4:	f8c0 9000 	str.w	r9, [r0]
 800dde8:	4604      	mov	r4, r0
 800ddea:	e7e4      	b.n	800ddb6 <__pow5mult+0x6a>
 800ddec:	4638      	mov	r0, r7
 800ddee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ddf2:	bf00      	nop
 800ddf4:	0800fbb8 	.word	0x0800fbb8
 800ddf8:	0800fa54 	.word	0x0800fa54
 800ddfc:	0800fa6b 	.word	0x0800fa6b

0800de00 <__lshift>:
 800de00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800de04:	460c      	mov	r4, r1
 800de06:	6849      	ldr	r1, [r1, #4]
 800de08:	6923      	ldr	r3, [r4, #16]
 800de0a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800de0e:	68a3      	ldr	r3, [r4, #8]
 800de10:	4607      	mov	r7, r0
 800de12:	4691      	mov	r9, r2
 800de14:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800de18:	f108 0601 	add.w	r6, r8, #1
 800de1c:	42b3      	cmp	r3, r6
 800de1e:	db0b      	blt.n	800de38 <__lshift+0x38>
 800de20:	4638      	mov	r0, r7
 800de22:	f7ff fd91 	bl	800d948 <_Balloc>
 800de26:	4605      	mov	r5, r0
 800de28:	b948      	cbnz	r0, 800de3e <__lshift+0x3e>
 800de2a:	4602      	mov	r2, r0
 800de2c:	4b2a      	ldr	r3, [pc, #168]	; (800ded8 <__lshift+0xd8>)
 800de2e:	482b      	ldr	r0, [pc, #172]	; (800dedc <__lshift+0xdc>)
 800de30:	f240 11d9 	movw	r1, #473	; 0x1d9
 800de34:	f000 fd80 	bl	800e938 <__assert_func>
 800de38:	3101      	adds	r1, #1
 800de3a:	005b      	lsls	r3, r3, #1
 800de3c:	e7ee      	b.n	800de1c <__lshift+0x1c>
 800de3e:	2300      	movs	r3, #0
 800de40:	f100 0114 	add.w	r1, r0, #20
 800de44:	f100 0210 	add.w	r2, r0, #16
 800de48:	4618      	mov	r0, r3
 800de4a:	4553      	cmp	r3, sl
 800de4c:	db37      	blt.n	800debe <__lshift+0xbe>
 800de4e:	6920      	ldr	r0, [r4, #16]
 800de50:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800de54:	f104 0314 	add.w	r3, r4, #20
 800de58:	f019 091f 	ands.w	r9, r9, #31
 800de5c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800de60:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800de64:	d02f      	beq.n	800dec6 <__lshift+0xc6>
 800de66:	f1c9 0e20 	rsb	lr, r9, #32
 800de6a:	468a      	mov	sl, r1
 800de6c:	f04f 0c00 	mov.w	ip, #0
 800de70:	681a      	ldr	r2, [r3, #0]
 800de72:	fa02 f209 	lsl.w	r2, r2, r9
 800de76:	ea42 020c 	orr.w	r2, r2, ip
 800de7a:	f84a 2b04 	str.w	r2, [sl], #4
 800de7e:	f853 2b04 	ldr.w	r2, [r3], #4
 800de82:	4298      	cmp	r0, r3
 800de84:	fa22 fc0e 	lsr.w	ip, r2, lr
 800de88:	d8f2      	bhi.n	800de70 <__lshift+0x70>
 800de8a:	1b03      	subs	r3, r0, r4
 800de8c:	3b15      	subs	r3, #21
 800de8e:	f023 0303 	bic.w	r3, r3, #3
 800de92:	3304      	adds	r3, #4
 800de94:	f104 0215 	add.w	r2, r4, #21
 800de98:	4290      	cmp	r0, r2
 800de9a:	bf38      	it	cc
 800de9c:	2304      	movcc	r3, #4
 800de9e:	f841 c003 	str.w	ip, [r1, r3]
 800dea2:	f1bc 0f00 	cmp.w	ip, #0
 800dea6:	d001      	beq.n	800deac <__lshift+0xac>
 800dea8:	f108 0602 	add.w	r6, r8, #2
 800deac:	3e01      	subs	r6, #1
 800deae:	4638      	mov	r0, r7
 800deb0:	612e      	str	r6, [r5, #16]
 800deb2:	4621      	mov	r1, r4
 800deb4:	f7ff fd88 	bl	800d9c8 <_Bfree>
 800deb8:	4628      	mov	r0, r5
 800deba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800debe:	f842 0f04 	str.w	r0, [r2, #4]!
 800dec2:	3301      	adds	r3, #1
 800dec4:	e7c1      	b.n	800de4a <__lshift+0x4a>
 800dec6:	3904      	subs	r1, #4
 800dec8:	f853 2b04 	ldr.w	r2, [r3], #4
 800decc:	f841 2f04 	str.w	r2, [r1, #4]!
 800ded0:	4298      	cmp	r0, r3
 800ded2:	d8f9      	bhi.n	800dec8 <__lshift+0xc8>
 800ded4:	e7ea      	b.n	800deac <__lshift+0xac>
 800ded6:	bf00      	nop
 800ded8:	0800f9c9 	.word	0x0800f9c9
 800dedc:	0800fa6b 	.word	0x0800fa6b

0800dee0 <__mcmp>:
 800dee0:	b530      	push	{r4, r5, lr}
 800dee2:	6902      	ldr	r2, [r0, #16]
 800dee4:	690c      	ldr	r4, [r1, #16]
 800dee6:	1b12      	subs	r2, r2, r4
 800dee8:	d10e      	bne.n	800df08 <__mcmp+0x28>
 800deea:	f100 0314 	add.w	r3, r0, #20
 800deee:	3114      	adds	r1, #20
 800def0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800def4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800def8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800defc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800df00:	42a5      	cmp	r5, r4
 800df02:	d003      	beq.n	800df0c <__mcmp+0x2c>
 800df04:	d305      	bcc.n	800df12 <__mcmp+0x32>
 800df06:	2201      	movs	r2, #1
 800df08:	4610      	mov	r0, r2
 800df0a:	bd30      	pop	{r4, r5, pc}
 800df0c:	4283      	cmp	r3, r0
 800df0e:	d3f3      	bcc.n	800def8 <__mcmp+0x18>
 800df10:	e7fa      	b.n	800df08 <__mcmp+0x28>
 800df12:	f04f 32ff 	mov.w	r2, #4294967295
 800df16:	e7f7      	b.n	800df08 <__mcmp+0x28>

0800df18 <__mdiff>:
 800df18:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df1c:	460c      	mov	r4, r1
 800df1e:	4606      	mov	r6, r0
 800df20:	4611      	mov	r1, r2
 800df22:	4620      	mov	r0, r4
 800df24:	4690      	mov	r8, r2
 800df26:	f7ff ffdb 	bl	800dee0 <__mcmp>
 800df2a:	1e05      	subs	r5, r0, #0
 800df2c:	d110      	bne.n	800df50 <__mdiff+0x38>
 800df2e:	4629      	mov	r1, r5
 800df30:	4630      	mov	r0, r6
 800df32:	f7ff fd09 	bl	800d948 <_Balloc>
 800df36:	b930      	cbnz	r0, 800df46 <__mdiff+0x2e>
 800df38:	4b3a      	ldr	r3, [pc, #232]	; (800e024 <__mdiff+0x10c>)
 800df3a:	4602      	mov	r2, r0
 800df3c:	f240 2132 	movw	r1, #562	; 0x232
 800df40:	4839      	ldr	r0, [pc, #228]	; (800e028 <__mdiff+0x110>)
 800df42:	f000 fcf9 	bl	800e938 <__assert_func>
 800df46:	2301      	movs	r3, #1
 800df48:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800df4c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df50:	bfa4      	itt	ge
 800df52:	4643      	movge	r3, r8
 800df54:	46a0      	movge	r8, r4
 800df56:	4630      	mov	r0, r6
 800df58:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800df5c:	bfa6      	itte	ge
 800df5e:	461c      	movge	r4, r3
 800df60:	2500      	movge	r5, #0
 800df62:	2501      	movlt	r5, #1
 800df64:	f7ff fcf0 	bl	800d948 <_Balloc>
 800df68:	b920      	cbnz	r0, 800df74 <__mdiff+0x5c>
 800df6a:	4b2e      	ldr	r3, [pc, #184]	; (800e024 <__mdiff+0x10c>)
 800df6c:	4602      	mov	r2, r0
 800df6e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800df72:	e7e5      	b.n	800df40 <__mdiff+0x28>
 800df74:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800df78:	6926      	ldr	r6, [r4, #16]
 800df7a:	60c5      	str	r5, [r0, #12]
 800df7c:	f104 0914 	add.w	r9, r4, #20
 800df80:	f108 0514 	add.w	r5, r8, #20
 800df84:	f100 0e14 	add.w	lr, r0, #20
 800df88:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800df8c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800df90:	f108 0210 	add.w	r2, r8, #16
 800df94:	46f2      	mov	sl, lr
 800df96:	2100      	movs	r1, #0
 800df98:	f859 3b04 	ldr.w	r3, [r9], #4
 800df9c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800dfa0:	fa1f f883 	uxth.w	r8, r3
 800dfa4:	fa11 f18b 	uxtah	r1, r1, fp
 800dfa8:	0c1b      	lsrs	r3, r3, #16
 800dfaa:	eba1 0808 	sub.w	r8, r1, r8
 800dfae:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800dfb2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800dfb6:	fa1f f888 	uxth.w	r8, r8
 800dfba:	1419      	asrs	r1, r3, #16
 800dfbc:	454e      	cmp	r6, r9
 800dfbe:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800dfc2:	f84a 3b04 	str.w	r3, [sl], #4
 800dfc6:	d8e7      	bhi.n	800df98 <__mdiff+0x80>
 800dfc8:	1b33      	subs	r3, r6, r4
 800dfca:	3b15      	subs	r3, #21
 800dfcc:	f023 0303 	bic.w	r3, r3, #3
 800dfd0:	3304      	adds	r3, #4
 800dfd2:	3415      	adds	r4, #21
 800dfd4:	42a6      	cmp	r6, r4
 800dfd6:	bf38      	it	cc
 800dfd8:	2304      	movcc	r3, #4
 800dfda:	441d      	add	r5, r3
 800dfdc:	4473      	add	r3, lr
 800dfde:	469e      	mov	lr, r3
 800dfe0:	462e      	mov	r6, r5
 800dfe2:	4566      	cmp	r6, ip
 800dfe4:	d30e      	bcc.n	800e004 <__mdiff+0xec>
 800dfe6:	f10c 0203 	add.w	r2, ip, #3
 800dfea:	1b52      	subs	r2, r2, r5
 800dfec:	f022 0203 	bic.w	r2, r2, #3
 800dff0:	3d03      	subs	r5, #3
 800dff2:	45ac      	cmp	ip, r5
 800dff4:	bf38      	it	cc
 800dff6:	2200      	movcc	r2, #0
 800dff8:	441a      	add	r2, r3
 800dffa:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800dffe:	b17b      	cbz	r3, 800e020 <__mdiff+0x108>
 800e000:	6107      	str	r7, [r0, #16]
 800e002:	e7a3      	b.n	800df4c <__mdiff+0x34>
 800e004:	f856 8b04 	ldr.w	r8, [r6], #4
 800e008:	fa11 f288 	uxtah	r2, r1, r8
 800e00c:	1414      	asrs	r4, r2, #16
 800e00e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800e012:	b292      	uxth	r2, r2
 800e014:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800e018:	f84e 2b04 	str.w	r2, [lr], #4
 800e01c:	1421      	asrs	r1, r4, #16
 800e01e:	e7e0      	b.n	800dfe2 <__mdiff+0xca>
 800e020:	3f01      	subs	r7, #1
 800e022:	e7ea      	b.n	800dffa <__mdiff+0xe2>
 800e024:	0800f9c9 	.word	0x0800f9c9
 800e028:	0800fa6b 	.word	0x0800fa6b

0800e02c <__ulp>:
 800e02c:	b082      	sub	sp, #8
 800e02e:	ed8d 0b00 	vstr	d0, [sp]
 800e032:	9b01      	ldr	r3, [sp, #4]
 800e034:	4912      	ldr	r1, [pc, #72]	; (800e080 <__ulp+0x54>)
 800e036:	4019      	ands	r1, r3
 800e038:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800e03c:	2900      	cmp	r1, #0
 800e03e:	dd05      	ble.n	800e04c <__ulp+0x20>
 800e040:	2200      	movs	r2, #0
 800e042:	460b      	mov	r3, r1
 800e044:	ec43 2b10 	vmov	d0, r2, r3
 800e048:	b002      	add	sp, #8
 800e04a:	4770      	bx	lr
 800e04c:	4249      	negs	r1, r1
 800e04e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800e052:	ea4f 5021 	mov.w	r0, r1, asr #20
 800e056:	f04f 0200 	mov.w	r2, #0
 800e05a:	f04f 0300 	mov.w	r3, #0
 800e05e:	da04      	bge.n	800e06a <__ulp+0x3e>
 800e060:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800e064:	fa41 f300 	asr.w	r3, r1, r0
 800e068:	e7ec      	b.n	800e044 <__ulp+0x18>
 800e06a:	f1a0 0114 	sub.w	r1, r0, #20
 800e06e:	291e      	cmp	r1, #30
 800e070:	bfda      	itte	le
 800e072:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800e076:	fa20 f101 	lsrle.w	r1, r0, r1
 800e07a:	2101      	movgt	r1, #1
 800e07c:	460a      	mov	r2, r1
 800e07e:	e7e1      	b.n	800e044 <__ulp+0x18>
 800e080:	7ff00000 	.word	0x7ff00000

0800e084 <__b2d>:
 800e084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e086:	6905      	ldr	r5, [r0, #16]
 800e088:	f100 0714 	add.w	r7, r0, #20
 800e08c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800e090:	1f2e      	subs	r6, r5, #4
 800e092:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800e096:	4620      	mov	r0, r4
 800e098:	f7ff fd48 	bl	800db2c <__hi0bits>
 800e09c:	f1c0 0320 	rsb	r3, r0, #32
 800e0a0:	280a      	cmp	r0, #10
 800e0a2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800e120 <__b2d+0x9c>
 800e0a6:	600b      	str	r3, [r1, #0]
 800e0a8:	dc14      	bgt.n	800e0d4 <__b2d+0x50>
 800e0aa:	f1c0 0e0b 	rsb	lr, r0, #11
 800e0ae:	fa24 f10e 	lsr.w	r1, r4, lr
 800e0b2:	42b7      	cmp	r7, r6
 800e0b4:	ea41 030c 	orr.w	r3, r1, ip
 800e0b8:	bf34      	ite	cc
 800e0ba:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800e0be:	2100      	movcs	r1, #0
 800e0c0:	3015      	adds	r0, #21
 800e0c2:	fa04 f000 	lsl.w	r0, r4, r0
 800e0c6:	fa21 f10e 	lsr.w	r1, r1, lr
 800e0ca:	ea40 0201 	orr.w	r2, r0, r1
 800e0ce:	ec43 2b10 	vmov	d0, r2, r3
 800e0d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e0d4:	42b7      	cmp	r7, r6
 800e0d6:	bf3a      	itte	cc
 800e0d8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800e0dc:	f1a5 0608 	subcc.w	r6, r5, #8
 800e0e0:	2100      	movcs	r1, #0
 800e0e2:	380b      	subs	r0, #11
 800e0e4:	d017      	beq.n	800e116 <__b2d+0x92>
 800e0e6:	f1c0 0c20 	rsb	ip, r0, #32
 800e0ea:	fa04 f500 	lsl.w	r5, r4, r0
 800e0ee:	42be      	cmp	r6, r7
 800e0f0:	fa21 f40c 	lsr.w	r4, r1, ip
 800e0f4:	ea45 0504 	orr.w	r5, r5, r4
 800e0f8:	bf8c      	ite	hi
 800e0fa:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800e0fe:	2400      	movls	r4, #0
 800e100:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800e104:	fa01 f000 	lsl.w	r0, r1, r0
 800e108:	fa24 f40c 	lsr.w	r4, r4, ip
 800e10c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800e110:	ea40 0204 	orr.w	r2, r0, r4
 800e114:	e7db      	b.n	800e0ce <__b2d+0x4a>
 800e116:	ea44 030c 	orr.w	r3, r4, ip
 800e11a:	460a      	mov	r2, r1
 800e11c:	e7d7      	b.n	800e0ce <__b2d+0x4a>
 800e11e:	bf00      	nop
 800e120:	3ff00000 	.word	0x3ff00000

0800e124 <__d2b>:
 800e124:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e128:	4689      	mov	r9, r1
 800e12a:	2101      	movs	r1, #1
 800e12c:	ec57 6b10 	vmov	r6, r7, d0
 800e130:	4690      	mov	r8, r2
 800e132:	f7ff fc09 	bl	800d948 <_Balloc>
 800e136:	4604      	mov	r4, r0
 800e138:	b930      	cbnz	r0, 800e148 <__d2b+0x24>
 800e13a:	4602      	mov	r2, r0
 800e13c:	4b25      	ldr	r3, [pc, #148]	; (800e1d4 <__d2b+0xb0>)
 800e13e:	4826      	ldr	r0, [pc, #152]	; (800e1d8 <__d2b+0xb4>)
 800e140:	f240 310a 	movw	r1, #778	; 0x30a
 800e144:	f000 fbf8 	bl	800e938 <__assert_func>
 800e148:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800e14c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e150:	bb35      	cbnz	r5, 800e1a0 <__d2b+0x7c>
 800e152:	2e00      	cmp	r6, #0
 800e154:	9301      	str	r3, [sp, #4]
 800e156:	d028      	beq.n	800e1aa <__d2b+0x86>
 800e158:	4668      	mov	r0, sp
 800e15a:	9600      	str	r6, [sp, #0]
 800e15c:	f7ff fd06 	bl	800db6c <__lo0bits>
 800e160:	9900      	ldr	r1, [sp, #0]
 800e162:	b300      	cbz	r0, 800e1a6 <__d2b+0x82>
 800e164:	9a01      	ldr	r2, [sp, #4]
 800e166:	f1c0 0320 	rsb	r3, r0, #32
 800e16a:	fa02 f303 	lsl.w	r3, r2, r3
 800e16e:	430b      	orrs	r3, r1
 800e170:	40c2      	lsrs	r2, r0
 800e172:	6163      	str	r3, [r4, #20]
 800e174:	9201      	str	r2, [sp, #4]
 800e176:	9b01      	ldr	r3, [sp, #4]
 800e178:	61a3      	str	r3, [r4, #24]
 800e17a:	2b00      	cmp	r3, #0
 800e17c:	bf14      	ite	ne
 800e17e:	2202      	movne	r2, #2
 800e180:	2201      	moveq	r2, #1
 800e182:	6122      	str	r2, [r4, #16]
 800e184:	b1d5      	cbz	r5, 800e1bc <__d2b+0x98>
 800e186:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e18a:	4405      	add	r5, r0
 800e18c:	f8c9 5000 	str.w	r5, [r9]
 800e190:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e194:	f8c8 0000 	str.w	r0, [r8]
 800e198:	4620      	mov	r0, r4
 800e19a:	b003      	add	sp, #12
 800e19c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e1a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e1a4:	e7d5      	b.n	800e152 <__d2b+0x2e>
 800e1a6:	6161      	str	r1, [r4, #20]
 800e1a8:	e7e5      	b.n	800e176 <__d2b+0x52>
 800e1aa:	a801      	add	r0, sp, #4
 800e1ac:	f7ff fcde 	bl	800db6c <__lo0bits>
 800e1b0:	9b01      	ldr	r3, [sp, #4]
 800e1b2:	6163      	str	r3, [r4, #20]
 800e1b4:	2201      	movs	r2, #1
 800e1b6:	6122      	str	r2, [r4, #16]
 800e1b8:	3020      	adds	r0, #32
 800e1ba:	e7e3      	b.n	800e184 <__d2b+0x60>
 800e1bc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e1c0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e1c4:	f8c9 0000 	str.w	r0, [r9]
 800e1c8:	6918      	ldr	r0, [r3, #16]
 800e1ca:	f7ff fcaf 	bl	800db2c <__hi0bits>
 800e1ce:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e1d2:	e7df      	b.n	800e194 <__d2b+0x70>
 800e1d4:	0800f9c9 	.word	0x0800f9c9
 800e1d8:	0800fa6b 	.word	0x0800fa6b

0800e1dc <__ratio>:
 800e1dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1e0:	4688      	mov	r8, r1
 800e1e2:	4669      	mov	r1, sp
 800e1e4:	4681      	mov	r9, r0
 800e1e6:	f7ff ff4d 	bl	800e084 <__b2d>
 800e1ea:	a901      	add	r1, sp, #4
 800e1ec:	4640      	mov	r0, r8
 800e1ee:	ec55 4b10 	vmov	r4, r5, d0
 800e1f2:	f7ff ff47 	bl	800e084 <__b2d>
 800e1f6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e1fa:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800e1fe:	eba3 0c02 	sub.w	ip, r3, r2
 800e202:	e9dd 3200 	ldrd	r3, r2, [sp]
 800e206:	1a9b      	subs	r3, r3, r2
 800e208:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800e20c:	ec51 0b10 	vmov	r0, r1, d0
 800e210:	2b00      	cmp	r3, #0
 800e212:	bfd6      	itet	le
 800e214:	460a      	movle	r2, r1
 800e216:	462a      	movgt	r2, r5
 800e218:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800e21c:	468b      	mov	fp, r1
 800e21e:	462f      	mov	r7, r5
 800e220:	bfd4      	ite	le
 800e222:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800e226:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800e22a:	4620      	mov	r0, r4
 800e22c:	ee10 2a10 	vmov	r2, s0
 800e230:	465b      	mov	r3, fp
 800e232:	4639      	mov	r1, r7
 800e234:	f7f2 fb3a 	bl	80008ac <__aeabi_ddiv>
 800e238:	ec41 0b10 	vmov	d0, r0, r1
 800e23c:	b003      	add	sp, #12
 800e23e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e242 <__copybits>:
 800e242:	3901      	subs	r1, #1
 800e244:	b570      	push	{r4, r5, r6, lr}
 800e246:	1149      	asrs	r1, r1, #5
 800e248:	6914      	ldr	r4, [r2, #16]
 800e24a:	3101      	adds	r1, #1
 800e24c:	f102 0314 	add.w	r3, r2, #20
 800e250:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e254:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e258:	1f05      	subs	r5, r0, #4
 800e25a:	42a3      	cmp	r3, r4
 800e25c:	d30c      	bcc.n	800e278 <__copybits+0x36>
 800e25e:	1aa3      	subs	r3, r4, r2
 800e260:	3b11      	subs	r3, #17
 800e262:	f023 0303 	bic.w	r3, r3, #3
 800e266:	3211      	adds	r2, #17
 800e268:	42a2      	cmp	r2, r4
 800e26a:	bf88      	it	hi
 800e26c:	2300      	movhi	r3, #0
 800e26e:	4418      	add	r0, r3
 800e270:	2300      	movs	r3, #0
 800e272:	4288      	cmp	r0, r1
 800e274:	d305      	bcc.n	800e282 <__copybits+0x40>
 800e276:	bd70      	pop	{r4, r5, r6, pc}
 800e278:	f853 6b04 	ldr.w	r6, [r3], #4
 800e27c:	f845 6f04 	str.w	r6, [r5, #4]!
 800e280:	e7eb      	b.n	800e25a <__copybits+0x18>
 800e282:	f840 3b04 	str.w	r3, [r0], #4
 800e286:	e7f4      	b.n	800e272 <__copybits+0x30>

0800e288 <__any_on>:
 800e288:	f100 0214 	add.w	r2, r0, #20
 800e28c:	6900      	ldr	r0, [r0, #16]
 800e28e:	114b      	asrs	r3, r1, #5
 800e290:	4298      	cmp	r0, r3
 800e292:	b510      	push	{r4, lr}
 800e294:	db11      	blt.n	800e2ba <__any_on+0x32>
 800e296:	dd0a      	ble.n	800e2ae <__any_on+0x26>
 800e298:	f011 011f 	ands.w	r1, r1, #31
 800e29c:	d007      	beq.n	800e2ae <__any_on+0x26>
 800e29e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e2a2:	fa24 f001 	lsr.w	r0, r4, r1
 800e2a6:	fa00 f101 	lsl.w	r1, r0, r1
 800e2aa:	428c      	cmp	r4, r1
 800e2ac:	d10b      	bne.n	800e2c6 <__any_on+0x3e>
 800e2ae:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e2b2:	4293      	cmp	r3, r2
 800e2b4:	d803      	bhi.n	800e2be <__any_on+0x36>
 800e2b6:	2000      	movs	r0, #0
 800e2b8:	bd10      	pop	{r4, pc}
 800e2ba:	4603      	mov	r3, r0
 800e2bc:	e7f7      	b.n	800e2ae <__any_on+0x26>
 800e2be:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e2c2:	2900      	cmp	r1, #0
 800e2c4:	d0f5      	beq.n	800e2b2 <__any_on+0x2a>
 800e2c6:	2001      	movs	r0, #1
 800e2c8:	e7f6      	b.n	800e2b8 <__any_on+0x30>

0800e2ca <_calloc_r>:
 800e2ca:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e2cc:	fba1 2402 	umull	r2, r4, r1, r2
 800e2d0:	b94c      	cbnz	r4, 800e2e6 <_calloc_r+0x1c>
 800e2d2:	4611      	mov	r1, r2
 800e2d4:	9201      	str	r2, [sp, #4]
 800e2d6:	f7fd ffaf 	bl	800c238 <_malloc_r>
 800e2da:	9a01      	ldr	r2, [sp, #4]
 800e2dc:	4605      	mov	r5, r0
 800e2de:	b930      	cbnz	r0, 800e2ee <_calloc_r+0x24>
 800e2e0:	4628      	mov	r0, r5
 800e2e2:	b003      	add	sp, #12
 800e2e4:	bd30      	pop	{r4, r5, pc}
 800e2e6:	220c      	movs	r2, #12
 800e2e8:	6002      	str	r2, [r0, #0]
 800e2ea:	2500      	movs	r5, #0
 800e2ec:	e7f8      	b.n	800e2e0 <_calloc_r+0x16>
 800e2ee:	4621      	mov	r1, r4
 800e2f0:	f7fd ff2e 	bl	800c150 <memset>
 800e2f4:	e7f4      	b.n	800e2e0 <_calloc_r+0x16>

0800e2f6 <__ssputs_r>:
 800e2f6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e2fa:	688e      	ldr	r6, [r1, #8]
 800e2fc:	429e      	cmp	r6, r3
 800e2fe:	4682      	mov	sl, r0
 800e300:	460c      	mov	r4, r1
 800e302:	4690      	mov	r8, r2
 800e304:	461f      	mov	r7, r3
 800e306:	d838      	bhi.n	800e37a <__ssputs_r+0x84>
 800e308:	898a      	ldrh	r2, [r1, #12]
 800e30a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e30e:	d032      	beq.n	800e376 <__ssputs_r+0x80>
 800e310:	6825      	ldr	r5, [r4, #0]
 800e312:	6909      	ldr	r1, [r1, #16]
 800e314:	eba5 0901 	sub.w	r9, r5, r1
 800e318:	6965      	ldr	r5, [r4, #20]
 800e31a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e31e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e322:	3301      	adds	r3, #1
 800e324:	444b      	add	r3, r9
 800e326:	106d      	asrs	r5, r5, #1
 800e328:	429d      	cmp	r5, r3
 800e32a:	bf38      	it	cc
 800e32c:	461d      	movcc	r5, r3
 800e32e:	0553      	lsls	r3, r2, #21
 800e330:	d531      	bpl.n	800e396 <__ssputs_r+0xa0>
 800e332:	4629      	mov	r1, r5
 800e334:	f7fd ff80 	bl	800c238 <_malloc_r>
 800e338:	4606      	mov	r6, r0
 800e33a:	b950      	cbnz	r0, 800e352 <__ssputs_r+0x5c>
 800e33c:	230c      	movs	r3, #12
 800e33e:	f8ca 3000 	str.w	r3, [sl]
 800e342:	89a3      	ldrh	r3, [r4, #12]
 800e344:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e348:	81a3      	strh	r3, [r4, #12]
 800e34a:	f04f 30ff 	mov.w	r0, #4294967295
 800e34e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e352:	6921      	ldr	r1, [r4, #16]
 800e354:	464a      	mov	r2, r9
 800e356:	f7ff fadd 	bl	800d914 <memcpy>
 800e35a:	89a3      	ldrh	r3, [r4, #12]
 800e35c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e360:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e364:	81a3      	strh	r3, [r4, #12]
 800e366:	6126      	str	r6, [r4, #16]
 800e368:	6165      	str	r5, [r4, #20]
 800e36a:	444e      	add	r6, r9
 800e36c:	eba5 0509 	sub.w	r5, r5, r9
 800e370:	6026      	str	r6, [r4, #0]
 800e372:	60a5      	str	r5, [r4, #8]
 800e374:	463e      	mov	r6, r7
 800e376:	42be      	cmp	r6, r7
 800e378:	d900      	bls.n	800e37c <__ssputs_r+0x86>
 800e37a:	463e      	mov	r6, r7
 800e37c:	6820      	ldr	r0, [r4, #0]
 800e37e:	4632      	mov	r2, r6
 800e380:	4641      	mov	r1, r8
 800e382:	f000 fb0c 	bl	800e99e <memmove>
 800e386:	68a3      	ldr	r3, [r4, #8]
 800e388:	1b9b      	subs	r3, r3, r6
 800e38a:	60a3      	str	r3, [r4, #8]
 800e38c:	6823      	ldr	r3, [r4, #0]
 800e38e:	4433      	add	r3, r6
 800e390:	6023      	str	r3, [r4, #0]
 800e392:	2000      	movs	r0, #0
 800e394:	e7db      	b.n	800e34e <__ssputs_r+0x58>
 800e396:	462a      	mov	r2, r5
 800e398:	f000 fb1b 	bl	800e9d2 <_realloc_r>
 800e39c:	4606      	mov	r6, r0
 800e39e:	2800      	cmp	r0, #0
 800e3a0:	d1e1      	bne.n	800e366 <__ssputs_r+0x70>
 800e3a2:	6921      	ldr	r1, [r4, #16]
 800e3a4:	4650      	mov	r0, sl
 800e3a6:	f7fd fedb 	bl	800c160 <_free_r>
 800e3aa:	e7c7      	b.n	800e33c <__ssputs_r+0x46>

0800e3ac <_svfiprintf_r>:
 800e3ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3b0:	4698      	mov	r8, r3
 800e3b2:	898b      	ldrh	r3, [r1, #12]
 800e3b4:	061b      	lsls	r3, r3, #24
 800e3b6:	b09d      	sub	sp, #116	; 0x74
 800e3b8:	4607      	mov	r7, r0
 800e3ba:	460d      	mov	r5, r1
 800e3bc:	4614      	mov	r4, r2
 800e3be:	d50e      	bpl.n	800e3de <_svfiprintf_r+0x32>
 800e3c0:	690b      	ldr	r3, [r1, #16]
 800e3c2:	b963      	cbnz	r3, 800e3de <_svfiprintf_r+0x32>
 800e3c4:	2140      	movs	r1, #64	; 0x40
 800e3c6:	f7fd ff37 	bl	800c238 <_malloc_r>
 800e3ca:	6028      	str	r0, [r5, #0]
 800e3cc:	6128      	str	r0, [r5, #16]
 800e3ce:	b920      	cbnz	r0, 800e3da <_svfiprintf_r+0x2e>
 800e3d0:	230c      	movs	r3, #12
 800e3d2:	603b      	str	r3, [r7, #0]
 800e3d4:	f04f 30ff 	mov.w	r0, #4294967295
 800e3d8:	e0d1      	b.n	800e57e <_svfiprintf_r+0x1d2>
 800e3da:	2340      	movs	r3, #64	; 0x40
 800e3dc:	616b      	str	r3, [r5, #20]
 800e3de:	2300      	movs	r3, #0
 800e3e0:	9309      	str	r3, [sp, #36]	; 0x24
 800e3e2:	2320      	movs	r3, #32
 800e3e4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e3e8:	f8cd 800c 	str.w	r8, [sp, #12]
 800e3ec:	2330      	movs	r3, #48	; 0x30
 800e3ee:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e598 <_svfiprintf_r+0x1ec>
 800e3f2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e3f6:	f04f 0901 	mov.w	r9, #1
 800e3fa:	4623      	mov	r3, r4
 800e3fc:	469a      	mov	sl, r3
 800e3fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e402:	b10a      	cbz	r2, 800e408 <_svfiprintf_r+0x5c>
 800e404:	2a25      	cmp	r2, #37	; 0x25
 800e406:	d1f9      	bne.n	800e3fc <_svfiprintf_r+0x50>
 800e408:	ebba 0b04 	subs.w	fp, sl, r4
 800e40c:	d00b      	beq.n	800e426 <_svfiprintf_r+0x7a>
 800e40e:	465b      	mov	r3, fp
 800e410:	4622      	mov	r2, r4
 800e412:	4629      	mov	r1, r5
 800e414:	4638      	mov	r0, r7
 800e416:	f7ff ff6e 	bl	800e2f6 <__ssputs_r>
 800e41a:	3001      	adds	r0, #1
 800e41c:	f000 80aa 	beq.w	800e574 <_svfiprintf_r+0x1c8>
 800e420:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e422:	445a      	add	r2, fp
 800e424:	9209      	str	r2, [sp, #36]	; 0x24
 800e426:	f89a 3000 	ldrb.w	r3, [sl]
 800e42a:	2b00      	cmp	r3, #0
 800e42c:	f000 80a2 	beq.w	800e574 <_svfiprintf_r+0x1c8>
 800e430:	2300      	movs	r3, #0
 800e432:	f04f 32ff 	mov.w	r2, #4294967295
 800e436:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e43a:	f10a 0a01 	add.w	sl, sl, #1
 800e43e:	9304      	str	r3, [sp, #16]
 800e440:	9307      	str	r3, [sp, #28]
 800e442:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e446:	931a      	str	r3, [sp, #104]	; 0x68
 800e448:	4654      	mov	r4, sl
 800e44a:	2205      	movs	r2, #5
 800e44c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e450:	4851      	ldr	r0, [pc, #324]	; (800e598 <_svfiprintf_r+0x1ec>)
 800e452:	f7f1 fef5 	bl	8000240 <memchr>
 800e456:	9a04      	ldr	r2, [sp, #16]
 800e458:	b9d8      	cbnz	r0, 800e492 <_svfiprintf_r+0xe6>
 800e45a:	06d0      	lsls	r0, r2, #27
 800e45c:	bf44      	itt	mi
 800e45e:	2320      	movmi	r3, #32
 800e460:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e464:	0711      	lsls	r1, r2, #28
 800e466:	bf44      	itt	mi
 800e468:	232b      	movmi	r3, #43	; 0x2b
 800e46a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e46e:	f89a 3000 	ldrb.w	r3, [sl]
 800e472:	2b2a      	cmp	r3, #42	; 0x2a
 800e474:	d015      	beq.n	800e4a2 <_svfiprintf_r+0xf6>
 800e476:	9a07      	ldr	r2, [sp, #28]
 800e478:	4654      	mov	r4, sl
 800e47a:	2000      	movs	r0, #0
 800e47c:	f04f 0c0a 	mov.w	ip, #10
 800e480:	4621      	mov	r1, r4
 800e482:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e486:	3b30      	subs	r3, #48	; 0x30
 800e488:	2b09      	cmp	r3, #9
 800e48a:	d94e      	bls.n	800e52a <_svfiprintf_r+0x17e>
 800e48c:	b1b0      	cbz	r0, 800e4bc <_svfiprintf_r+0x110>
 800e48e:	9207      	str	r2, [sp, #28]
 800e490:	e014      	b.n	800e4bc <_svfiprintf_r+0x110>
 800e492:	eba0 0308 	sub.w	r3, r0, r8
 800e496:	fa09 f303 	lsl.w	r3, r9, r3
 800e49a:	4313      	orrs	r3, r2
 800e49c:	9304      	str	r3, [sp, #16]
 800e49e:	46a2      	mov	sl, r4
 800e4a0:	e7d2      	b.n	800e448 <_svfiprintf_r+0x9c>
 800e4a2:	9b03      	ldr	r3, [sp, #12]
 800e4a4:	1d19      	adds	r1, r3, #4
 800e4a6:	681b      	ldr	r3, [r3, #0]
 800e4a8:	9103      	str	r1, [sp, #12]
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	bfbb      	ittet	lt
 800e4ae:	425b      	neglt	r3, r3
 800e4b0:	f042 0202 	orrlt.w	r2, r2, #2
 800e4b4:	9307      	strge	r3, [sp, #28]
 800e4b6:	9307      	strlt	r3, [sp, #28]
 800e4b8:	bfb8      	it	lt
 800e4ba:	9204      	strlt	r2, [sp, #16]
 800e4bc:	7823      	ldrb	r3, [r4, #0]
 800e4be:	2b2e      	cmp	r3, #46	; 0x2e
 800e4c0:	d10c      	bne.n	800e4dc <_svfiprintf_r+0x130>
 800e4c2:	7863      	ldrb	r3, [r4, #1]
 800e4c4:	2b2a      	cmp	r3, #42	; 0x2a
 800e4c6:	d135      	bne.n	800e534 <_svfiprintf_r+0x188>
 800e4c8:	9b03      	ldr	r3, [sp, #12]
 800e4ca:	1d1a      	adds	r2, r3, #4
 800e4cc:	681b      	ldr	r3, [r3, #0]
 800e4ce:	9203      	str	r2, [sp, #12]
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	bfb8      	it	lt
 800e4d4:	f04f 33ff 	movlt.w	r3, #4294967295
 800e4d8:	3402      	adds	r4, #2
 800e4da:	9305      	str	r3, [sp, #20]
 800e4dc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e5a8 <_svfiprintf_r+0x1fc>
 800e4e0:	7821      	ldrb	r1, [r4, #0]
 800e4e2:	2203      	movs	r2, #3
 800e4e4:	4650      	mov	r0, sl
 800e4e6:	f7f1 feab 	bl	8000240 <memchr>
 800e4ea:	b140      	cbz	r0, 800e4fe <_svfiprintf_r+0x152>
 800e4ec:	2340      	movs	r3, #64	; 0x40
 800e4ee:	eba0 000a 	sub.w	r0, r0, sl
 800e4f2:	fa03 f000 	lsl.w	r0, r3, r0
 800e4f6:	9b04      	ldr	r3, [sp, #16]
 800e4f8:	4303      	orrs	r3, r0
 800e4fa:	3401      	adds	r4, #1
 800e4fc:	9304      	str	r3, [sp, #16]
 800e4fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e502:	4826      	ldr	r0, [pc, #152]	; (800e59c <_svfiprintf_r+0x1f0>)
 800e504:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e508:	2206      	movs	r2, #6
 800e50a:	f7f1 fe99 	bl	8000240 <memchr>
 800e50e:	2800      	cmp	r0, #0
 800e510:	d038      	beq.n	800e584 <_svfiprintf_r+0x1d8>
 800e512:	4b23      	ldr	r3, [pc, #140]	; (800e5a0 <_svfiprintf_r+0x1f4>)
 800e514:	bb1b      	cbnz	r3, 800e55e <_svfiprintf_r+0x1b2>
 800e516:	9b03      	ldr	r3, [sp, #12]
 800e518:	3307      	adds	r3, #7
 800e51a:	f023 0307 	bic.w	r3, r3, #7
 800e51e:	3308      	adds	r3, #8
 800e520:	9303      	str	r3, [sp, #12]
 800e522:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e524:	4433      	add	r3, r6
 800e526:	9309      	str	r3, [sp, #36]	; 0x24
 800e528:	e767      	b.n	800e3fa <_svfiprintf_r+0x4e>
 800e52a:	fb0c 3202 	mla	r2, ip, r2, r3
 800e52e:	460c      	mov	r4, r1
 800e530:	2001      	movs	r0, #1
 800e532:	e7a5      	b.n	800e480 <_svfiprintf_r+0xd4>
 800e534:	2300      	movs	r3, #0
 800e536:	3401      	adds	r4, #1
 800e538:	9305      	str	r3, [sp, #20]
 800e53a:	4619      	mov	r1, r3
 800e53c:	f04f 0c0a 	mov.w	ip, #10
 800e540:	4620      	mov	r0, r4
 800e542:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e546:	3a30      	subs	r2, #48	; 0x30
 800e548:	2a09      	cmp	r2, #9
 800e54a:	d903      	bls.n	800e554 <_svfiprintf_r+0x1a8>
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d0c5      	beq.n	800e4dc <_svfiprintf_r+0x130>
 800e550:	9105      	str	r1, [sp, #20]
 800e552:	e7c3      	b.n	800e4dc <_svfiprintf_r+0x130>
 800e554:	fb0c 2101 	mla	r1, ip, r1, r2
 800e558:	4604      	mov	r4, r0
 800e55a:	2301      	movs	r3, #1
 800e55c:	e7f0      	b.n	800e540 <_svfiprintf_r+0x194>
 800e55e:	ab03      	add	r3, sp, #12
 800e560:	9300      	str	r3, [sp, #0]
 800e562:	462a      	mov	r2, r5
 800e564:	4b0f      	ldr	r3, [pc, #60]	; (800e5a4 <_svfiprintf_r+0x1f8>)
 800e566:	a904      	add	r1, sp, #16
 800e568:	4638      	mov	r0, r7
 800e56a:	f3af 8000 	nop.w
 800e56e:	1c42      	adds	r2, r0, #1
 800e570:	4606      	mov	r6, r0
 800e572:	d1d6      	bne.n	800e522 <_svfiprintf_r+0x176>
 800e574:	89ab      	ldrh	r3, [r5, #12]
 800e576:	065b      	lsls	r3, r3, #25
 800e578:	f53f af2c 	bmi.w	800e3d4 <_svfiprintf_r+0x28>
 800e57c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e57e:	b01d      	add	sp, #116	; 0x74
 800e580:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e584:	ab03      	add	r3, sp, #12
 800e586:	9300      	str	r3, [sp, #0]
 800e588:	462a      	mov	r2, r5
 800e58a:	4b06      	ldr	r3, [pc, #24]	; (800e5a4 <_svfiprintf_r+0x1f8>)
 800e58c:	a904      	add	r1, sp, #16
 800e58e:	4638      	mov	r0, r7
 800e590:	f000 f87a 	bl	800e688 <_printf_i>
 800e594:	e7eb      	b.n	800e56e <_svfiprintf_r+0x1c2>
 800e596:	bf00      	nop
 800e598:	0800fbc4 	.word	0x0800fbc4
 800e59c:	0800fbce 	.word	0x0800fbce
 800e5a0:	00000000 	.word	0x00000000
 800e5a4:	0800e2f7 	.word	0x0800e2f7
 800e5a8:	0800fbca 	.word	0x0800fbca

0800e5ac <_printf_common>:
 800e5ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e5b0:	4616      	mov	r6, r2
 800e5b2:	4699      	mov	r9, r3
 800e5b4:	688a      	ldr	r2, [r1, #8]
 800e5b6:	690b      	ldr	r3, [r1, #16]
 800e5b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e5bc:	4293      	cmp	r3, r2
 800e5be:	bfb8      	it	lt
 800e5c0:	4613      	movlt	r3, r2
 800e5c2:	6033      	str	r3, [r6, #0]
 800e5c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e5c8:	4607      	mov	r7, r0
 800e5ca:	460c      	mov	r4, r1
 800e5cc:	b10a      	cbz	r2, 800e5d2 <_printf_common+0x26>
 800e5ce:	3301      	adds	r3, #1
 800e5d0:	6033      	str	r3, [r6, #0]
 800e5d2:	6823      	ldr	r3, [r4, #0]
 800e5d4:	0699      	lsls	r1, r3, #26
 800e5d6:	bf42      	ittt	mi
 800e5d8:	6833      	ldrmi	r3, [r6, #0]
 800e5da:	3302      	addmi	r3, #2
 800e5dc:	6033      	strmi	r3, [r6, #0]
 800e5de:	6825      	ldr	r5, [r4, #0]
 800e5e0:	f015 0506 	ands.w	r5, r5, #6
 800e5e4:	d106      	bne.n	800e5f4 <_printf_common+0x48>
 800e5e6:	f104 0a19 	add.w	sl, r4, #25
 800e5ea:	68e3      	ldr	r3, [r4, #12]
 800e5ec:	6832      	ldr	r2, [r6, #0]
 800e5ee:	1a9b      	subs	r3, r3, r2
 800e5f0:	42ab      	cmp	r3, r5
 800e5f2:	dc26      	bgt.n	800e642 <_printf_common+0x96>
 800e5f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e5f8:	1e13      	subs	r3, r2, #0
 800e5fa:	6822      	ldr	r2, [r4, #0]
 800e5fc:	bf18      	it	ne
 800e5fe:	2301      	movne	r3, #1
 800e600:	0692      	lsls	r2, r2, #26
 800e602:	d42b      	bmi.n	800e65c <_printf_common+0xb0>
 800e604:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e608:	4649      	mov	r1, r9
 800e60a:	4638      	mov	r0, r7
 800e60c:	47c0      	blx	r8
 800e60e:	3001      	adds	r0, #1
 800e610:	d01e      	beq.n	800e650 <_printf_common+0xa4>
 800e612:	6823      	ldr	r3, [r4, #0]
 800e614:	68e5      	ldr	r5, [r4, #12]
 800e616:	6832      	ldr	r2, [r6, #0]
 800e618:	f003 0306 	and.w	r3, r3, #6
 800e61c:	2b04      	cmp	r3, #4
 800e61e:	bf08      	it	eq
 800e620:	1aad      	subeq	r5, r5, r2
 800e622:	68a3      	ldr	r3, [r4, #8]
 800e624:	6922      	ldr	r2, [r4, #16]
 800e626:	bf0c      	ite	eq
 800e628:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e62c:	2500      	movne	r5, #0
 800e62e:	4293      	cmp	r3, r2
 800e630:	bfc4      	itt	gt
 800e632:	1a9b      	subgt	r3, r3, r2
 800e634:	18ed      	addgt	r5, r5, r3
 800e636:	2600      	movs	r6, #0
 800e638:	341a      	adds	r4, #26
 800e63a:	42b5      	cmp	r5, r6
 800e63c:	d11a      	bne.n	800e674 <_printf_common+0xc8>
 800e63e:	2000      	movs	r0, #0
 800e640:	e008      	b.n	800e654 <_printf_common+0xa8>
 800e642:	2301      	movs	r3, #1
 800e644:	4652      	mov	r2, sl
 800e646:	4649      	mov	r1, r9
 800e648:	4638      	mov	r0, r7
 800e64a:	47c0      	blx	r8
 800e64c:	3001      	adds	r0, #1
 800e64e:	d103      	bne.n	800e658 <_printf_common+0xac>
 800e650:	f04f 30ff 	mov.w	r0, #4294967295
 800e654:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e658:	3501      	adds	r5, #1
 800e65a:	e7c6      	b.n	800e5ea <_printf_common+0x3e>
 800e65c:	18e1      	adds	r1, r4, r3
 800e65e:	1c5a      	adds	r2, r3, #1
 800e660:	2030      	movs	r0, #48	; 0x30
 800e662:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e666:	4422      	add	r2, r4
 800e668:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e66c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e670:	3302      	adds	r3, #2
 800e672:	e7c7      	b.n	800e604 <_printf_common+0x58>
 800e674:	2301      	movs	r3, #1
 800e676:	4622      	mov	r2, r4
 800e678:	4649      	mov	r1, r9
 800e67a:	4638      	mov	r0, r7
 800e67c:	47c0      	blx	r8
 800e67e:	3001      	adds	r0, #1
 800e680:	d0e6      	beq.n	800e650 <_printf_common+0xa4>
 800e682:	3601      	adds	r6, #1
 800e684:	e7d9      	b.n	800e63a <_printf_common+0x8e>
	...

0800e688 <_printf_i>:
 800e688:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e68c:	7e0f      	ldrb	r7, [r1, #24]
 800e68e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e690:	2f78      	cmp	r7, #120	; 0x78
 800e692:	4691      	mov	r9, r2
 800e694:	4680      	mov	r8, r0
 800e696:	460c      	mov	r4, r1
 800e698:	469a      	mov	sl, r3
 800e69a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e69e:	d807      	bhi.n	800e6b0 <_printf_i+0x28>
 800e6a0:	2f62      	cmp	r7, #98	; 0x62
 800e6a2:	d80a      	bhi.n	800e6ba <_printf_i+0x32>
 800e6a4:	2f00      	cmp	r7, #0
 800e6a6:	f000 80d8 	beq.w	800e85a <_printf_i+0x1d2>
 800e6aa:	2f58      	cmp	r7, #88	; 0x58
 800e6ac:	f000 80a3 	beq.w	800e7f6 <_printf_i+0x16e>
 800e6b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e6b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e6b8:	e03a      	b.n	800e730 <_printf_i+0xa8>
 800e6ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e6be:	2b15      	cmp	r3, #21
 800e6c0:	d8f6      	bhi.n	800e6b0 <_printf_i+0x28>
 800e6c2:	a101      	add	r1, pc, #4	; (adr r1, 800e6c8 <_printf_i+0x40>)
 800e6c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e6c8:	0800e721 	.word	0x0800e721
 800e6cc:	0800e735 	.word	0x0800e735
 800e6d0:	0800e6b1 	.word	0x0800e6b1
 800e6d4:	0800e6b1 	.word	0x0800e6b1
 800e6d8:	0800e6b1 	.word	0x0800e6b1
 800e6dc:	0800e6b1 	.word	0x0800e6b1
 800e6e0:	0800e735 	.word	0x0800e735
 800e6e4:	0800e6b1 	.word	0x0800e6b1
 800e6e8:	0800e6b1 	.word	0x0800e6b1
 800e6ec:	0800e6b1 	.word	0x0800e6b1
 800e6f0:	0800e6b1 	.word	0x0800e6b1
 800e6f4:	0800e841 	.word	0x0800e841
 800e6f8:	0800e765 	.word	0x0800e765
 800e6fc:	0800e823 	.word	0x0800e823
 800e700:	0800e6b1 	.word	0x0800e6b1
 800e704:	0800e6b1 	.word	0x0800e6b1
 800e708:	0800e863 	.word	0x0800e863
 800e70c:	0800e6b1 	.word	0x0800e6b1
 800e710:	0800e765 	.word	0x0800e765
 800e714:	0800e6b1 	.word	0x0800e6b1
 800e718:	0800e6b1 	.word	0x0800e6b1
 800e71c:	0800e82b 	.word	0x0800e82b
 800e720:	682b      	ldr	r3, [r5, #0]
 800e722:	1d1a      	adds	r2, r3, #4
 800e724:	681b      	ldr	r3, [r3, #0]
 800e726:	602a      	str	r2, [r5, #0]
 800e728:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e72c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e730:	2301      	movs	r3, #1
 800e732:	e0a3      	b.n	800e87c <_printf_i+0x1f4>
 800e734:	6820      	ldr	r0, [r4, #0]
 800e736:	6829      	ldr	r1, [r5, #0]
 800e738:	0606      	lsls	r6, r0, #24
 800e73a:	f101 0304 	add.w	r3, r1, #4
 800e73e:	d50a      	bpl.n	800e756 <_printf_i+0xce>
 800e740:	680e      	ldr	r6, [r1, #0]
 800e742:	602b      	str	r3, [r5, #0]
 800e744:	2e00      	cmp	r6, #0
 800e746:	da03      	bge.n	800e750 <_printf_i+0xc8>
 800e748:	232d      	movs	r3, #45	; 0x2d
 800e74a:	4276      	negs	r6, r6
 800e74c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e750:	485e      	ldr	r0, [pc, #376]	; (800e8cc <_printf_i+0x244>)
 800e752:	230a      	movs	r3, #10
 800e754:	e019      	b.n	800e78a <_printf_i+0x102>
 800e756:	680e      	ldr	r6, [r1, #0]
 800e758:	602b      	str	r3, [r5, #0]
 800e75a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e75e:	bf18      	it	ne
 800e760:	b236      	sxthne	r6, r6
 800e762:	e7ef      	b.n	800e744 <_printf_i+0xbc>
 800e764:	682b      	ldr	r3, [r5, #0]
 800e766:	6820      	ldr	r0, [r4, #0]
 800e768:	1d19      	adds	r1, r3, #4
 800e76a:	6029      	str	r1, [r5, #0]
 800e76c:	0601      	lsls	r1, r0, #24
 800e76e:	d501      	bpl.n	800e774 <_printf_i+0xec>
 800e770:	681e      	ldr	r6, [r3, #0]
 800e772:	e002      	b.n	800e77a <_printf_i+0xf2>
 800e774:	0646      	lsls	r6, r0, #25
 800e776:	d5fb      	bpl.n	800e770 <_printf_i+0xe8>
 800e778:	881e      	ldrh	r6, [r3, #0]
 800e77a:	4854      	ldr	r0, [pc, #336]	; (800e8cc <_printf_i+0x244>)
 800e77c:	2f6f      	cmp	r7, #111	; 0x6f
 800e77e:	bf0c      	ite	eq
 800e780:	2308      	moveq	r3, #8
 800e782:	230a      	movne	r3, #10
 800e784:	2100      	movs	r1, #0
 800e786:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e78a:	6865      	ldr	r5, [r4, #4]
 800e78c:	60a5      	str	r5, [r4, #8]
 800e78e:	2d00      	cmp	r5, #0
 800e790:	bfa2      	ittt	ge
 800e792:	6821      	ldrge	r1, [r4, #0]
 800e794:	f021 0104 	bicge.w	r1, r1, #4
 800e798:	6021      	strge	r1, [r4, #0]
 800e79a:	b90e      	cbnz	r6, 800e7a0 <_printf_i+0x118>
 800e79c:	2d00      	cmp	r5, #0
 800e79e:	d04d      	beq.n	800e83c <_printf_i+0x1b4>
 800e7a0:	4615      	mov	r5, r2
 800e7a2:	fbb6 f1f3 	udiv	r1, r6, r3
 800e7a6:	fb03 6711 	mls	r7, r3, r1, r6
 800e7aa:	5dc7      	ldrb	r7, [r0, r7]
 800e7ac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e7b0:	4637      	mov	r7, r6
 800e7b2:	42bb      	cmp	r3, r7
 800e7b4:	460e      	mov	r6, r1
 800e7b6:	d9f4      	bls.n	800e7a2 <_printf_i+0x11a>
 800e7b8:	2b08      	cmp	r3, #8
 800e7ba:	d10b      	bne.n	800e7d4 <_printf_i+0x14c>
 800e7bc:	6823      	ldr	r3, [r4, #0]
 800e7be:	07de      	lsls	r6, r3, #31
 800e7c0:	d508      	bpl.n	800e7d4 <_printf_i+0x14c>
 800e7c2:	6923      	ldr	r3, [r4, #16]
 800e7c4:	6861      	ldr	r1, [r4, #4]
 800e7c6:	4299      	cmp	r1, r3
 800e7c8:	bfde      	ittt	le
 800e7ca:	2330      	movle	r3, #48	; 0x30
 800e7cc:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e7d0:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e7d4:	1b52      	subs	r2, r2, r5
 800e7d6:	6122      	str	r2, [r4, #16]
 800e7d8:	f8cd a000 	str.w	sl, [sp]
 800e7dc:	464b      	mov	r3, r9
 800e7de:	aa03      	add	r2, sp, #12
 800e7e0:	4621      	mov	r1, r4
 800e7e2:	4640      	mov	r0, r8
 800e7e4:	f7ff fee2 	bl	800e5ac <_printf_common>
 800e7e8:	3001      	adds	r0, #1
 800e7ea:	d14c      	bne.n	800e886 <_printf_i+0x1fe>
 800e7ec:	f04f 30ff 	mov.w	r0, #4294967295
 800e7f0:	b004      	add	sp, #16
 800e7f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e7f6:	4835      	ldr	r0, [pc, #212]	; (800e8cc <_printf_i+0x244>)
 800e7f8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800e7fc:	6829      	ldr	r1, [r5, #0]
 800e7fe:	6823      	ldr	r3, [r4, #0]
 800e800:	f851 6b04 	ldr.w	r6, [r1], #4
 800e804:	6029      	str	r1, [r5, #0]
 800e806:	061d      	lsls	r5, r3, #24
 800e808:	d514      	bpl.n	800e834 <_printf_i+0x1ac>
 800e80a:	07df      	lsls	r7, r3, #31
 800e80c:	bf44      	itt	mi
 800e80e:	f043 0320 	orrmi.w	r3, r3, #32
 800e812:	6023      	strmi	r3, [r4, #0]
 800e814:	b91e      	cbnz	r6, 800e81e <_printf_i+0x196>
 800e816:	6823      	ldr	r3, [r4, #0]
 800e818:	f023 0320 	bic.w	r3, r3, #32
 800e81c:	6023      	str	r3, [r4, #0]
 800e81e:	2310      	movs	r3, #16
 800e820:	e7b0      	b.n	800e784 <_printf_i+0xfc>
 800e822:	6823      	ldr	r3, [r4, #0]
 800e824:	f043 0320 	orr.w	r3, r3, #32
 800e828:	6023      	str	r3, [r4, #0]
 800e82a:	2378      	movs	r3, #120	; 0x78
 800e82c:	4828      	ldr	r0, [pc, #160]	; (800e8d0 <_printf_i+0x248>)
 800e82e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e832:	e7e3      	b.n	800e7fc <_printf_i+0x174>
 800e834:	0659      	lsls	r1, r3, #25
 800e836:	bf48      	it	mi
 800e838:	b2b6      	uxthmi	r6, r6
 800e83a:	e7e6      	b.n	800e80a <_printf_i+0x182>
 800e83c:	4615      	mov	r5, r2
 800e83e:	e7bb      	b.n	800e7b8 <_printf_i+0x130>
 800e840:	682b      	ldr	r3, [r5, #0]
 800e842:	6826      	ldr	r6, [r4, #0]
 800e844:	6961      	ldr	r1, [r4, #20]
 800e846:	1d18      	adds	r0, r3, #4
 800e848:	6028      	str	r0, [r5, #0]
 800e84a:	0635      	lsls	r5, r6, #24
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	d501      	bpl.n	800e854 <_printf_i+0x1cc>
 800e850:	6019      	str	r1, [r3, #0]
 800e852:	e002      	b.n	800e85a <_printf_i+0x1d2>
 800e854:	0670      	lsls	r0, r6, #25
 800e856:	d5fb      	bpl.n	800e850 <_printf_i+0x1c8>
 800e858:	8019      	strh	r1, [r3, #0]
 800e85a:	2300      	movs	r3, #0
 800e85c:	6123      	str	r3, [r4, #16]
 800e85e:	4615      	mov	r5, r2
 800e860:	e7ba      	b.n	800e7d8 <_printf_i+0x150>
 800e862:	682b      	ldr	r3, [r5, #0]
 800e864:	1d1a      	adds	r2, r3, #4
 800e866:	602a      	str	r2, [r5, #0]
 800e868:	681d      	ldr	r5, [r3, #0]
 800e86a:	6862      	ldr	r2, [r4, #4]
 800e86c:	2100      	movs	r1, #0
 800e86e:	4628      	mov	r0, r5
 800e870:	f7f1 fce6 	bl	8000240 <memchr>
 800e874:	b108      	cbz	r0, 800e87a <_printf_i+0x1f2>
 800e876:	1b40      	subs	r0, r0, r5
 800e878:	6060      	str	r0, [r4, #4]
 800e87a:	6863      	ldr	r3, [r4, #4]
 800e87c:	6123      	str	r3, [r4, #16]
 800e87e:	2300      	movs	r3, #0
 800e880:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e884:	e7a8      	b.n	800e7d8 <_printf_i+0x150>
 800e886:	6923      	ldr	r3, [r4, #16]
 800e888:	462a      	mov	r2, r5
 800e88a:	4649      	mov	r1, r9
 800e88c:	4640      	mov	r0, r8
 800e88e:	47d0      	blx	sl
 800e890:	3001      	adds	r0, #1
 800e892:	d0ab      	beq.n	800e7ec <_printf_i+0x164>
 800e894:	6823      	ldr	r3, [r4, #0]
 800e896:	079b      	lsls	r3, r3, #30
 800e898:	d413      	bmi.n	800e8c2 <_printf_i+0x23a>
 800e89a:	68e0      	ldr	r0, [r4, #12]
 800e89c:	9b03      	ldr	r3, [sp, #12]
 800e89e:	4298      	cmp	r0, r3
 800e8a0:	bfb8      	it	lt
 800e8a2:	4618      	movlt	r0, r3
 800e8a4:	e7a4      	b.n	800e7f0 <_printf_i+0x168>
 800e8a6:	2301      	movs	r3, #1
 800e8a8:	4632      	mov	r2, r6
 800e8aa:	4649      	mov	r1, r9
 800e8ac:	4640      	mov	r0, r8
 800e8ae:	47d0      	blx	sl
 800e8b0:	3001      	adds	r0, #1
 800e8b2:	d09b      	beq.n	800e7ec <_printf_i+0x164>
 800e8b4:	3501      	adds	r5, #1
 800e8b6:	68e3      	ldr	r3, [r4, #12]
 800e8b8:	9903      	ldr	r1, [sp, #12]
 800e8ba:	1a5b      	subs	r3, r3, r1
 800e8bc:	42ab      	cmp	r3, r5
 800e8be:	dcf2      	bgt.n	800e8a6 <_printf_i+0x21e>
 800e8c0:	e7eb      	b.n	800e89a <_printf_i+0x212>
 800e8c2:	2500      	movs	r5, #0
 800e8c4:	f104 0619 	add.w	r6, r4, #25
 800e8c8:	e7f5      	b.n	800e8b6 <_printf_i+0x22e>
 800e8ca:	bf00      	nop
 800e8cc:	0800fbd5 	.word	0x0800fbd5
 800e8d0:	0800fbe6 	.word	0x0800fbe6
 800e8d4:	00000000 	.word	0x00000000

0800e8d8 <nan>:
 800e8d8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800e8e0 <nan+0x8>
 800e8dc:	4770      	bx	lr
 800e8de:	bf00      	nop
 800e8e0:	00000000 	.word	0x00000000
 800e8e4:	7ff80000 	.word	0x7ff80000

0800e8e8 <nanf>:
 800e8e8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800e8f0 <nanf+0x8>
 800e8ec:	4770      	bx	lr
 800e8ee:	bf00      	nop
 800e8f0:	7fc00000 	.word	0x7fc00000

0800e8f4 <strncmp>:
 800e8f4:	b510      	push	{r4, lr}
 800e8f6:	b17a      	cbz	r2, 800e918 <strncmp+0x24>
 800e8f8:	4603      	mov	r3, r0
 800e8fa:	3901      	subs	r1, #1
 800e8fc:	1884      	adds	r4, r0, r2
 800e8fe:	f813 0b01 	ldrb.w	r0, [r3], #1
 800e902:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800e906:	4290      	cmp	r0, r2
 800e908:	d101      	bne.n	800e90e <strncmp+0x1a>
 800e90a:	42a3      	cmp	r3, r4
 800e90c:	d101      	bne.n	800e912 <strncmp+0x1e>
 800e90e:	1a80      	subs	r0, r0, r2
 800e910:	bd10      	pop	{r4, pc}
 800e912:	2800      	cmp	r0, #0
 800e914:	d1f3      	bne.n	800e8fe <strncmp+0xa>
 800e916:	e7fa      	b.n	800e90e <strncmp+0x1a>
 800e918:	4610      	mov	r0, r2
 800e91a:	e7f9      	b.n	800e910 <strncmp+0x1c>

0800e91c <__ascii_wctomb>:
 800e91c:	b149      	cbz	r1, 800e932 <__ascii_wctomb+0x16>
 800e91e:	2aff      	cmp	r2, #255	; 0xff
 800e920:	bf85      	ittet	hi
 800e922:	238a      	movhi	r3, #138	; 0x8a
 800e924:	6003      	strhi	r3, [r0, #0]
 800e926:	700a      	strbls	r2, [r1, #0]
 800e928:	f04f 30ff 	movhi.w	r0, #4294967295
 800e92c:	bf98      	it	ls
 800e92e:	2001      	movls	r0, #1
 800e930:	4770      	bx	lr
 800e932:	4608      	mov	r0, r1
 800e934:	4770      	bx	lr
	...

0800e938 <__assert_func>:
 800e938:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e93a:	4614      	mov	r4, r2
 800e93c:	461a      	mov	r2, r3
 800e93e:	4b09      	ldr	r3, [pc, #36]	; (800e964 <__assert_func+0x2c>)
 800e940:	681b      	ldr	r3, [r3, #0]
 800e942:	4605      	mov	r5, r0
 800e944:	68d8      	ldr	r0, [r3, #12]
 800e946:	b14c      	cbz	r4, 800e95c <__assert_func+0x24>
 800e948:	4b07      	ldr	r3, [pc, #28]	; (800e968 <__assert_func+0x30>)
 800e94a:	9100      	str	r1, [sp, #0]
 800e94c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e950:	4906      	ldr	r1, [pc, #24]	; (800e96c <__assert_func+0x34>)
 800e952:	462b      	mov	r3, r5
 800e954:	f000 f80e 	bl	800e974 <fiprintf>
 800e958:	f000 fa84 	bl	800ee64 <abort>
 800e95c:	4b04      	ldr	r3, [pc, #16]	; (800e970 <__assert_func+0x38>)
 800e95e:	461c      	mov	r4, r3
 800e960:	e7f3      	b.n	800e94a <__assert_func+0x12>
 800e962:	bf00      	nop
 800e964:	20000140 	.word	0x20000140
 800e968:	0800fbf7 	.word	0x0800fbf7
 800e96c:	0800fc04 	.word	0x0800fc04
 800e970:	0800fc32 	.word	0x0800fc32

0800e974 <fiprintf>:
 800e974:	b40e      	push	{r1, r2, r3}
 800e976:	b503      	push	{r0, r1, lr}
 800e978:	4601      	mov	r1, r0
 800e97a:	ab03      	add	r3, sp, #12
 800e97c:	4805      	ldr	r0, [pc, #20]	; (800e994 <fiprintf+0x20>)
 800e97e:	f853 2b04 	ldr.w	r2, [r3], #4
 800e982:	6800      	ldr	r0, [r0, #0]
 800e984:	9301      	str	r3, [sp, #4]
 800e986:	f000 f87d 	bl	800ea84 <_vfiprintf_r>
 800e98a:	b002      	add	sp, #8
 800e98c:	f85d eb04 	ldr.w	lr, [sp], #4
 800e990:	b003      	add	sp, #12
 800e992:	4770      	bx	lr
 800e994:	20000140 	.word	0x20000140

0800e998 <__retarget_lock_init_recursive>:
 800e998:	4770      	bx	lr

0800e99a <__retarget_lock_acquire_recursive>:
 800e99a:	4770      	bx	lr

0800e99c <__retarget_lock_release_recursive>:
 800e99c:	4770      	bx	lr

0800e99e <memmove>:
 800e99e:	4288      	cmp	r0, r1
 800e9a0:	b510      	push	{r4, lr}
 800e9a2:	eb01 0402 	add.w	r4, r1, r2
 800e9a6:	d902      	bls.n	800e9ae <memmove+0x10>
 800e9a8:	4284      	cmp	r4, r0
 800e9aa:	4623      	mov	r3, r4
 800e9ac:	d807      	bhi.n	800e9be <memmove+0x20>
 800e9ae:	1e43      	subs	r3, r0, #1
 800e9b0:	42a1      	cmp	r1, r4
 800e9b2:	d008      	beq.n	800e9c6 <memmove+0x28>
 800e9b4:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e9b8:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e9bc:	e7f8      	b.n	800e9b0 <memmove+0x12>
 800e9be:	4402      	add	r2, r0
 800e9c0:	4601      	mov	r1, r0
 800e9c2:	428a      	cmp	r2, r1
 800e9c4:	d100      	bne.n	800e9c8 <memmove+0x2a>
 800e9c6:	bd10      	pop	{r4, pc}
 800e9c8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e9cc:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e9d0:	e7f7      	b.n	800e9c2 <memmove+0x24>

0800e9d2 <_realloc_r>:
 800e9d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e9d6:	4680      	mov	r8, r0
 800e9d8:	4614      	mov	r4, r2
 800e9da:	460e      	mov	r6, r1
 800e9dc:	b921      	cbnz	r1, 800e9e8 <_realloc_r+0x16>
 800e9de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e9e2:	4611      	mov	r1, r2
 800e9e4:	f7fd bc28 	b.w	800c238 <_malloc_r>
 800e9e8:	b92a      	cbnz	r2, 800e9f6 <_realloc_r+0x24>
 800e9ea:	f7fd fbb9 	bl	800c160 <_free_r>
 800e9ee:	4625      	mov	r5, r4
 800e9f0:	4628      	mov	r0, r5
 800e9f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e9f6:	f000 fc59 	bl	800f2ac <_malloc_usable_size_r>
 800e9fa:	4284      	cmp	r4, r0
 800e9fc:	4607      	mov	r7, r0
 800e9fe:	d802      	bhi.n	800ea06 <_realloc_r+0x34>
 800ea00:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ea04:	d812      	bhi.n	800ea2c <_realloc_r+0x5a>
 800ea06:	4621      	mov	r1, r4
 800ea08:	4640      	mov	r0, r8
 800ea0a:	f7fd fc15 	bl	800c238 <_malloc_r>
 800ea0e:	4605      	mov	r5, r0
 800ea10:	2800      	cmp	r0, #0
 800ea12:	d0ed      	beq.n	800e9f0 <_realloc_r+0x1e>
 800ea14:	42bc      	cmp	r4, r7
 800ea16:	4622      	mov	r2, r4
 800ea18:	4631      	mov	r1, r6
 800ea1a:	bf28      	it	cs
 800ea1c:	463a      	movcs	r2, r7
 800ea1e:	f7fe ff79 	bl	800d914 <memcpy>
 800ea22:	4631      	mov	r1, r6
 800ea24:	4640      	mov	r0, r8
 800ea26:	f7fd fb9b 	bl	800c160 <_free_r>
 800ea2a:	e7e1      	b.n	800e9f0 <_realloc_r+0x1e>
 800ea2c:	4635      	mov	r5, r6
 800ea2e:	e7df      	b.n	800e9f0 <_realloc_r+0x1e>

0800ea30 <__sfputc_r>:
 800ea30:	6893      	ldr	r3, [r2, #8]
 800ea32:	3b01      	subs	r3, #1
 800ea34:	2b00      	cmp	r3, #0
 800ea36:	b410      	push	{r4}
 800ea38:	6093      	str	r3, [r2, #8]
 800ea3a:	da08      	bge.n	800ea4e <__sfputc_r+0x1e>
 800ea3c:	6994      	ldr	r4, [r2, #24]
 800ea3e:	42a3      	cmp	r3, r4
 800ea40:	db01      	blt.n	800ea46 <__sfputc_r+0x16>
 800ea42:	290a      	cmp	r1, #10
 800ea44:	d103      	bne.n	800ea4e <__sfputc_r+0x1e>
 800ea46:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ea4a:	f000 b94b 	b.w	800ece4 <__swbuf_r>
 800ea4e:	6813      	ldr	r3, [r2, #0]
 800ea50:	1c58      	adds	r0, r3, #1
 800ea52:	6010      	str	r0, [r2, #0]
 800ea54:	7019      	strb	r1, [r3, #0]
 800ea56:	4608      	mov	r0, r1
 800ea58:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ea5c:	4770      	bx	lr

0800ea5e <__sfputs_r>:
 800ea5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea60:	4606      	mov	r6, r0
 800ea62:	460f      	mov	r7, r1
 800ea64:	4614      	mov	r4, r2
 800ea66:	18d5      	adds	r5, r2, r3
 800ea68:	42ac      	cmp	r4, r5
 800ea6a:	d101      	bne.n	800ea70 <__sfputs_r+0x12>
 800ea6c:	2000      	movs	r0, #0
 800ea6e:	e007      	b.n	800ea80 <__sfputs_r+0x22>
 800ea70:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ea74:	463a      	mov	r2, r7
 800ea76:	4630      	mov	r0, r6
 800ea78:	f7ff ffda 	bl	800ea30 <__sfputc_r>
 800ea7c:	1c43      	adds	r3, r0, #1
 800ea7e:	d1f3      	bne.n	800ea68 <__sfputs_r+0xa>
 800ea80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ea84 <_vfiprintf_r>:
 800ea84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea88:	460d      	mov	r5, r1
 800ea8a:	b09d      	sub	sp, #116	; 0x74
 800ea8c:	4614      	mov	r4, r2
 800ea8e:	4698      	mov	r8, r3
 800ea90:	4606      	mov	r6, r0
 800ea92:	b118      	cbz	r0, 800ea9c <_vfiprintf_r+0x18>
 800ea94:	6983      	ldr	r3, [r0, #24]
 800ea96:	b90b      	cbnz	r3, 800ea9c <_vfiprintf_r+0x18>
 800ea98:	f000 fb06 	bl	800f0a8 <__sinit>
 800ea9c:	4b89      	ldr	r3, [pc, #548]	; (800ecc4 <_vfiprintf_r+0x240>)
 800ea9e:	429d      	cmp	r5, r3
 800eaa0:	d11b      	bne.n	800eada <_vfiprintf_r+0x56>
 800eaa2:	6875      	ldr	r5, [r6, #4]
 800eaa4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800eaa6:	07d9      	lsls	r1, r3, #31
 800eaa8:	d405      	bmi.n	800eab6 <_vfiprintf_r+0x32>
 800eaaa:	89ab      	ldrh	r3, [r5, #12]
 800eaac:	059a      	lsls	r2, r3, #22
 800eaae:	d402      	bmi.n	800eab6 <_vfiprintf_r+0x32>
 800eab0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800eab2:	f7ff ff72 	bl	800e99a <__retarget_lock_acquire_recursive>
 800eab6:	89ab      	ldrh	r3, [r5, #12]
 800eab8:	071b      	lsls	r3, r3, #28
 800eaba:	d501      	bpl.n	800eac0 <_vfiprintf_r+0x3c>
 800eabc:	692b      	ldr	r3, [r5, #16]
 800eabe:	b9eb      	cbnz	r3, 800eafc <_vfiprintf_r+0x78>
 800eac0:	4629      	mov	r1, r5
 800eac2:	4630      	mov	r0, r6
 800eac4:	f000 f960 	bl	800ed88 <__swsetup_r>
 800eac8:	b1c0      	cbz	r0, 800eafc <_vfiprintf_r+0x78>
 800eaca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800eacc:	07dc      	lsls	r4, r3, #31
 800eace:	d50e      	bpl.n	800eaee <_vfiprintf_r+0x6a>
 800ead0:	f04f 30ff 	mov.w	r0, #4294967295
 800ead4:	b01d      	add	sp, #116	; 0x74
 800ead6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eada:	4b7b      	ldr	r3, [pc, #492]	; (800ecc8 <_vfiprintf_r+0x244>)
 800eadc:	429d      	cmp	r5, r3
 800eade:	d101      	bne.n	800eae4 <_vfiprintf_r+0x60>
 800eae0:	68b5      	ldr	r5, [r6, #8]
 800eae2:	e7df      	b.n	800eaa4 <_vfiprintf_r+0x20>
 800eae4:	4b79      	ldr	r3, [pc, #484]	; (800eccc <_vfiprintf_r+0x248>)
 800eae6:	429d      	cmp	r5, r3
 800eae8:	bf08      	it	eq
 800eaea:	68f5      	ldreq	r5, [r6, #12]
 800eaec:	e7da      	b.n	800eaa4 <_vfiprintf_r+0x20>
 800eaee:	89ab      	ldrh	r3, [r5, #12]
 800eaf0:	0598      	lsls	r0, r3, #22
 800eaf2:	d4ed      	bmi.n	800ead0 <_vfiprintf_r+0x4c>
 800eaf4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800eaf6:	f7ff ff51 	bl	800e99c <__retarget_lock_release_recursive>
 800eafa:	e7e9      	b.n	800ead0 <_vfiprintf_r+0x4c>
 800eafc:	2300      	movs	r3, #0
 800eafe:	9309      	str	r3, [sp, #36]	; 0x24
 800eb00:	2320      	movs	r3, #32
 800eb02:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800eb06:	f8cd 800c 	str.w	r8, [sp, #12]
 800eb0a:	2330      	movs	r3, #48	; 0x30
 800eb0c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ecd0 <_vfiprintf_r+0x24c>
 800eb10:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800eb14:	f04f 0901 	mov.w	r9, #1
 800eb18:	4623      	mov	r3, r4
 800eb1a:	469a      	mov	sl, r3
 800eb1c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800eb20:	b10a      	cbz	r2, 800eb26 <_vfiprintf_r+0xa2>
 800eb22:	2a25      	cmp	r2, #37	; 0x25
 800eb24:	d1f9      	bne.n	800eb1a <_vfiprintf_r+0x96>
 800eb26:	ebba 0b04 	subs.w	fp, sl, r4
 800eb2a:	d00b      	beq.n	800eb44 <_vfiprintf_r+0xc0>
 800eb2c:	465b      	mov	r3, fp
 800eb2e:	4622      	mov	r2, r4
 800eb30:	4629      	mov	r1, r5
 800eb32:	4630      	mov	r0, r6
 800eb34:	f7ff ff93 	bl	800ea5e <__sfputs_r>
 800eb38:	3001      	adds	r0, #1
 800eb3a:	f000 80aa 	beq.w	800ec92 <_vfiprintf_r+0x20e>
 800eb3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800eb40:	445a      	add	r2, fp
 800eb42:	9209      	str	r2, [sp, #36]	; 0x24
 800eb44:	f89a 3000 	ldrb.w	r3, [sl]
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	f000 80a2 	beq.w	800ec92 <_vfiprintf_r+0x20e>
 800eb4e:	2300      	movs	r3, #0
 800eb50:	f04f 32ff 	mov.w	r2, #4294967295
 800eb54:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800eb58:	f10a 0a01 	add.w	sl, sl, #1
 800eb5c:	9304      	str	r3, [sp, #16]
 800eb5e:	9307      	str	r3, [sp, #28]
 800eb60:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800eb64:	931a      	str	r3, [sp, #104]	; 0x68
 800eb66:	4654      	mov	r4, sl
 800eb68:	2205      	movs	r2, #5
 800eb6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eb6e:	4858      	ldr	r0, [pc, #352]	; (800ecd0 <_vfiprintf_r+0x24c>)
 800eb70:	f7f1 fb66 	bl	8000240 <memchr>
 800eb74:	9a04      	ldr	r2, [sp, #16]
 800eb76:	b9d8      	cbnz	r0, 800ebb0 <_vfiprintf_r+0x12c>
 800eb78:	06d1      	lsls	r1, r2, #27
 800eb7a:	bf44      	itt	mi
 800eb7c:	2320      	movmi	r3, #32
 800eb7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eb82:	0713      	lsls	r3, r2, #28
 800eb84:	bf44      	itt	mi
 800eb86:	232b      	movmi	r3, #43	; 0x2b
 800eb88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eb8c:	f89a 3000 	ldrb.w	r3, [sl]
 800eb90:	2b2a      	cmp	r3, #42	; 0x2a
 800eb92:	d015      	beq.n	800ebc0 <_vfiprintf_r+0x13c>
 800eb94:	9a07      	ldr	r2, [sp, #28]
 800eb96:	4654      	mov	r4, sl
 800eb98:	2000      	movs	r0, #0
 800eb9a:	f04f 0c0a 	mov.w	ip, #10
 800eb9e:	4621      	mov	r1, r4
 800eba0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800eba4:	3b30      	subs	r3, #48	; 0x30
 800eba6:	2b09      	cmp	r3, #9
 800eba8:	d94e      	bls.n	800ec48 <_vfiprintf_r+0x1c4>
 800ebaa:	b1b0      	cbz	r0, 800ebda <_vfiprintf_r+0x156>
 800ebac:	9207      	str	r2, [sp, #28]
 800ebae:	e014      	b.n	800ebda <_vfiprintf_r+0x156>
 800ebb0:	eba0 0308 	sub.w	r3, r0, r8
 800ebb4:	fa09 f303 	lsl.w	r3, r9, r3
 800ebb8:	4313      	orrs	r3, r2
 800ebba:	9304      	str	r3, [sp, #16]
 800ebbc:	46a2      	mov	sl, r4
 800ebbe:	e7d2      	b.n	800eb66 <_vfiprintf_r+0xe2>
 800ebc0:	9b03      	ldr	r3, [sp, #12]
 800ebc2:	1d19      	adds	r1, r3, #4
 800ebc4:	681b      	ldr	r3, [r3, #0]
 800ebc6:	9103      	str	r1, [sp, #12]
 800ebc8:	2b00      	cmp	r3, #0
 800ebca:	bfbb      	ittet	lt
 800ebcc:	425b      	neglt	r3, r3
 800ebce:	f042 0202 	orrlt.w	r2, r2, #2
 800ebd2:	9307      	strge	r3, [sp, #28]
 800ebd4:	9307      	strlt	r3, [sp, #28]
 800ebd6:	bfb8      	it	lt
 800ebd8:	9204      	strlt	r2, [sp, #16]
 800ebda:	7823      	ldrb	r3, [r4, #0]
 800ebdc:	2b2e      	cmp	r3, #46	; 0x2e
 800ebde:	d10c      	bne.n	800ebfa <_vfiprintf_r+0x176>
 800ebe0:	7863      	ldrb	r3, [r4, #1]
 800ebe2:	2b2a      	cmp	r3, #42	; 0x2a
 800ebe4:	d135      	bne.n	800ec52 <_vfiprintf_r+0x1ce>
 800ebe6:	9b03      	ldr	r3, [sp, #12]
 800ebe8:	1d1a      	adds	r2, r3, #4
 800ebea:	681b      	ldr	r3, [r3, #0]
 800ebec:	9203      	str	r2, [sp, #12]
 800ebee:	2b00      	cmp	r3, #0
 800ebf0:	bfb8      	it	lt
 800ebf2:	f04f 33ff 	movlt.w	r3, #4294967295
 800ebf6:	3402      	adds	r4, #2
 800ebf8:	9305      	str	r3, [sp, #20]
 800ebfa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ece0 <_vfiprintf_r+0x25c>
 800ebfe:	7821      	ldrb	r1, [r4, #0]
 800ec00:	2203      	movs	r2, #3
 800ec02:	4650      	mov	r0, sl
 800ec04:	f7f1 fb1c 	bl	8000240 <memchr>
 800ec08:	b140      	cbz	r0, 800ec1c <_vfiprintf_r+0x198>
 800ec0a:	2340      	movs	r3, #64	; 0x40
 800ec0c:	eba0 000a 	sub.w	r0, r0, sl
 800ec10:	fa03 f000 	lsl.w	r0, r3, r0
 800ec14:	9b04      	ldr	r3, [sp, #16]
 800ec16:	4303      	orrs	r3, r0
 800ec18:	3401      	adds	r4, #1
 800ec1a:	9304      	str	r3, [sp, #16]
 800ec1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ec20:	482c      	ldr	r0, [pc, #176]	; (800ecd4 <_vfiprintf_r+0x250>)
 800ec22:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ec26:	2206      	movs	r2, #6
 800ec28:	f7f1 fb0a 	bl	8000240 <memchr>
 800ec2c:	2800      	cmp	r0, #0
 800ec2e:	d03f      	beq.n	800ecb0 <_vfiprintf_r+0x22c>
 800ec30:	4b29      	ldr	r3, [pc, #164]	; (800ecd8 <_vfiprintf_r+0x254>)
 800ec32:	bb1b      	cbnz	r3, 800ec7c <_vfiprintf_r+0x1f8>
 800ec34:	9b03      	ldr	r3, [sp, #12]
 800ec36:	3307      	adds	r3, #7
 800ec38:	f023 0307 	bic.w	r3, r3, #7
 800ec3c:	3308      	adds	r3, #8
 800ec3e:	9303      	str	r3, [sp, #12]
 800ec40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ec42:	443b      	add	r3, r7
 800ec44:	9309      	str	r3, [sp, #36]	; 0x24
 800ec46:	e767      	b.n	800eb18 <_vfiprintf_r+0x94>
 800ec48:	fb0c 3202 	mla	r2, ip, r2, r3
 800ec4c:	460c      	mov	r4, r1
 800ec4e:	2001      	movs	r0, #1
 800ec50:	e7a5      	b.n	800eb9e <_vfiprintf_r+0x11a>
 800ec52:	2300      	movs	r3, #0
 800ec54:	3401      	adds	r4, #1
 800ec56:	9305      	str	r3, [sp, #20]
 800ec58:	4619      	mov	r1, r3
 800ec5a:	f04f 0c0a 	mov.w	ip, #10
 800ec5e:	4620      	mov	r0, r4
 800ec60:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ec64:	3a30      	subs	r2, #48	; 0x30
 800ec66:	2a09      	cmp	r2, #9
 800ec68:	d903      	bls.n	800ec72 <_vfiprintf_r+0x1ee>
 800ec6a:	2b00      	cmp	r3, #0
 800ec6c:	d0c5      	beq.n	800ebfa <_vfiprintf_r+0x176>
 800ec6e:	9105      	str	r1, [sp, #20]
 800ec70:	e7c3      	b.n	800ebfa <_vfiprintf_r+0x176>
 800ec72:	fb0c 2101 	mla	r1, ip, r1, r2
 800ec76:	4604      	mov	r4, r0
 800ec78:	2301      	movs	r3, #1
 800ec7a:	e7f0      	b.n	800ec5e <_vfiprintf_r+0x1da>
 800ec7c:	ab03      	add	r3, sp, #12
 800ec7e:	9300      	str	r3, [sp, #0]
 800ec80:	462a      	mov	r2, r5
 800ec82:	4b16      	ldr	r3, [pc, #88]	; (800ecdc <_vfiprintf_r+0x258>)
 800ec84:	a904      	add	r1, sp, #16
 800ec86:	4630      	mov	r0, r6
 800ec88:	f3af 8000 	nop.w
 800ec8c:	4607      	mov	r7, r0
 800ec8e:	1c78      	adds	r0, r7, #1
 800ec90:	d1d6      	bne.n	800ec40 <_vfiprintf_r+0x1bc>
 800ec92:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ec94:	07d9      	lsls	r1, r3, #31
 800ec96:	d405      	bmi.n	800eca4 <_vfiprintf_r+0x220>
 800ec98:	89ab      	ldrh	r3, [r5, #12]
 800ec9a:	059a      	lsls	r2, r3, #22
 800ec9c:	d402      	bmi.n	800eca4 <_vfiprintf_r+0x220>
 800ec9e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800eca0:	f7ff fe7c 	bl	800e99c <__retarget_lock_release_recursive>
 800eca4:	89ab      	ldrh	r3, [r5, #12]
 800eca6:	065b      	lsls	r3, r3, #25
 800eca8:	f53f af12 	bmi.w	800ead0 <_vfiprintf_r+0x4c>
 800ecac:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ecae:	e711      	b.n	800ead4 <_vfiprintf_r+0x50>
 800ecb0:	ab03      	add	r3, sp, #12
 800ecb2:	9300      	str	r3, [sp, #0]
 800ecb4:	462a      	mov	r2, r5
 800ecb6:	4b09      	ldr	r3, [pc, #36]	; (800ecdc <_vfiprintf_r+0x258>)
 800ecb8:	a904      	add	r1, sp, #16
 800ecba:	4630      	mov	r0, r6
 800ecbc:	f7ff fce4 	bl	800e688 <_printf_i>
 800ecc0:	e7e4      	b.n	800ec8c <_vfiprintf_r+0x208>
 800ecc2:	bf00      	nop
 800ecc4:	0800fc54 	.word	0x0800fc54
 800ecc8:	0800fc74 	.word	0x0800fc74
 800eccc:	0800fc34 	.word	0x0800fc34
 800ecd0:	0800fbc4 	.word	0x0800fbc4
 800ecd4:	0800fbce 	.word	0x0800fbce
 800ecd8:	00000000 	.word	0x00000000
 800ecdc:	0800ea5f 	.word	0x0800ea5f
 800ece0:	0800fbca 	.word	0x0800fbca

0800ece4 <__swbuf_r>:
 800ece4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ece6:	460e      	mov	r6, r1
 800ece8:	4614      	mov	r4, r2
 800ecea:	4605      	mov	r5, r0
 800ecec:	b118      	cbz	r0, 800ecf6 <__swbuf_r+0x12>
 800ecee:	6983      	ldr	r3, [r0, #24]
 800ecf0:	b90b      	cbnz	r3, 800ecf6 <__swbuf_r+0x12>
 800ecf2:	f000 f9d9 	bl	800f0a8 <__sinit>
 800ecf6:	4b21      	ldr	r3, [pc, #132]	; (800ed7c <__swbuf_r+0x98>)
 800ecf8:	429c      	cmp	r4, r3
 800ecfa:	d12b      	bne.n	800ed54 <__swbuf_r+0x70>
 800ecfc:	686c      	ldr	r4, [r5, #4]
 800ecfe:	69a3      	ldr	r3, [r4, #24]
 800ed00:	60a3      	str	r3, [r4, #8]
 800ed02:	89a3      	ldrh	r3, [r4, #12]
 800ed04:	071a      	lsls	r2, r3, #28
 800ed06:	d52f      	bpl.n	800ed68 <__swbuf_r+0x84>
 800ed08:	6923      	ldr	r3, [r4, #16]
 800ed0a:	b36b      	cbz	r3, 800ed68 <__swbuf_r+0x84>
 800ed0c:	6923      	ldr	r3, [r4, #16]
 800ed0e:	6820      	ldr	r0, [r4, #0]
 800ed10:	1ac0      	subs	r0, r0, r3
 800ed12:	6963      	ldr	r3, [r4, #20]
 800ed14:	b2f6      	uxtb	r6, r6
 800ed16:	4283      	cmp	r3, r0
 800ed18:	4637      	mov	r7, r6
 800ed1a:	dc04      	bgt.n	800ed26 <__swbuf_r+0x42>
 800ed1c:	4621      	mov	r1, r4
 800ed1e:	4628      	mov	r0, r5
 800ed20:	f000 f92e 	bl	800ef80 <_fflush_r>
 800ed24:	bb30      	cbnz	r0, 800ed74 <__swbuf_r+0x90>
 800ed26:	68a3      	ldr	r3, [r4, #8]
 800ed28:	3b01      	subs	r3, #1
 800ed2a:	60a3      	str	r3, [r4, #8]
 800ed2c:	6823      	ldr	r3, [r4, #0]
 800ed2e:	1c5a      	adds	r2, r3, #1
 800ed30:	6022      	str	r2, [r4, #0]
 800ed32:	701e      	strb	r6, [r3, #0]
 800ed34:	6963      	ldr	r3, [r4, #20]
 800ed36:	3001      	adds	r0, #1
 800ed38:	4283      	cmp	r3, r0
 800ed3a:	d004      	beq.n	800ed46 <__swbuf_r+0x62>
 800ed3c:	89a3      	ldrh	r3, [r4, #12]
 800ed3e:	07db      	lsls	r3, r3, #31
 800ed40:	d506      	bpl.n	800ed50 <__swbuf_r+0x6c>
 800ed42:	2e0a      	cmp	r6, #10
 800ed44:	d104      	bne.n	800ed50 <__swbuf_r+0x6c>
 800ed46:	4621      	mov	r1, r4
 800ed48:	4628      	mov	r0, r5
 800ed4a:	f000 f919 	bl	800ef80 <_fflush_r>
 800ed4e:	b988      	cbnz	r0, 800ed74 <__swbuf_r+0x90>
 800ed50:	4638      	mov	r0, r7
 800ed52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ed54:	4b0a      	ldr	r3, [pc, #40]	; (800ed80 <__swbuf_r+0x9c>)
 800ed56:	429c      	cmp	r4, r3
 800ed58:	d101      	bne.n	800ed5e <__swbuf_r+0x7a>
 800ed5a:	68ac      	ldr	r4, [r5, #8]
 800ed5c:	e7cf      	b.n	800ecfe <__swbuf_r+0x1a>
 800ed5e:	4b09      	ldr	r3, [pc, #36]	; (800ed84 <__swbuf_r+0xa0>)
 800ed60:	429c      	cmp	r4, r3
 800ed62:	bf08      	it	eq
 800ed64:	68ec      	ldreq	r4, [r5, #12]
 800ed66:	e7ca      	b.n	800ecfe <__swbuf_r+0x1a>
 800ed68:	4621      	mov	r1, r4
 800ed6a:	4628      	mov	r0, r5
 800ed6c:	f000 f80c 	bl	800ed88 <__swsetup_r>
 800ed70:	2800      	cmp	r0, #0
 800ed72:	d0cb      	beq.n	800ed0c <__swbuf_r+0x28>
 800ed74:	f04f 37ff 	mov.w	r7, #4294967295
 800ed78:	e7ea      	b.n	800ed50 <__swbuf_r+0x6c>
 800ed7a:	bf00      	nop
 800ed7c:	0800fc54 	.word	0x0800fc54
 800ed80:	0800fc74 	.word	0x0800fc74
 800ed84:	0800fc34 	.word	0x0800fc34

0800ed88 <__swsetup_r>:
 800ed88:	4b32      	ldr	r3, [pc, #200]	; (800ee54 <__swsetup_r+0xcc>)
 800ed8a:	b570      	push	{r4, r5, r6, lr}
 800ed8c:	681d      	ldr	r5, [r3, #0]
 800ed8e:	4606      	mov	r6, r0
 800ed90:	460c      	mov	r4, r1
 800ed92:	b125      	cbz	r5, 800ed9e <__swsetup_r+0x16>
 800ed94:	69ab      	ldr	r3, [r5, #24]
 800ed96:	b913      	cbnz	r3, 800ed9e <__swsetup_r+0x16>
 800ed98:	4628      	mov	r0, r5
 800ed9a:	f000 f985 	bl	800f0a8 <__sinit>
 800ed9e:	4b2e      	ldr	r3, [pc, #184]	; (800ee58 <__swsetup_r+0xd0>)
 800eda0:	429c      	cmp	r4, r3
 800eda2:	d10f      	bne.n	800edc4 <__swsetup_r+0x3c>
 800eda4:	686c      	ldr	r4, [r5, #4]
 800eda6:	89a3      	ldrh	r3, [r4, #12]
 800eda8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800edac:	0719      	lsls	r1, r3, #28
 800edae:	d42c      	bmi.n	800ee0a <__swsetup_r+0x82>
 800edb0:	06dd      	lsls	r5, r3, #27
 800edb2:	d411      	bmi.n	800edd8 <__swsetup_r+0x50>
 800edb4:	2309      	movs	r3, #9
 800edb6:	6033      	str	r3, [r6, #0]
 800edb8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800edbc:	81a3      	strh	r3, [r4, #12]
 800edbe:	f04f 30ff 	mov.w	r0, #4294967295
 800edc2:	e03e      	b.n	800ee42 <__swsetup_r+0xba>
 800edc4:	4b25      	ldr	r3, [pc, #148]	; (800ee5c <__swsetup_r+0xd4>)
 800edc6:	429c      	cmp	r4, r3
 800edc8:	d101      	bne.n	800edce <__swsetup_r+0x46>
 800edca:	68ac      	ldr	r4, [r5, #8]
 800edcc:	e7eb      	b.n	800eda6 <__swsetup_r+0x1e>
 800edce:	4b24      	ldr	r3, [pc, #144]	; (800ee60 <__swsetup_r+0xd8>)
 800edd0:	429c      	cmp	r4, r3
 800edd2:	bf08      	it	eq
 800edd4:	68ec      	ldreq	r4, [r5, #12]
 800edd6:	e7e6      	b.n	800eda6 <__swsetup_r+0x1e>
 800edd8:	0758      	lsls	r0, r3, #29
 800edda:	d512      	bpl.n	800ee02 <__swsetup_r+0x7a>
 800eddc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800edde:	b141      	cbz	r1, 800edf2 <__swsetup_r+0x6a>
 800ede0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ede4:	4299      	cmp	r1, r3
 800ede6:	d002      	beq.n	800edee <__swsetup_r+0x66>
 800ede8:	4630      	mov	r0, r6
 800edea:	f7fd f9b9 	bl	800c160 <_free_r>
 800edee:	2300      	movs	r3, #0
 800edf0:	6363      	str	r3, [r4, #52]	; 0x34
 800edf2:	89a3      	ldrh	r3, [r4, #12]
 800edf4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800edf8:	81a3      	strh	r3, [r4, #12]
 800edfa:	2300      	movs	r3, #0
 800edfc:	6063      	str	r3, [r4, #4]
 800edfe:	6923      	ldr	r3, [r4, #16]
 800ee00:	6023      	str	r3, [r4, #0]
 800ee02:	89a3      	ldrh	r3, [r4, #12]
 800ee04:	f043 0308 	orr.w	r3, r3, #8
 800ee08:	81a3      	strh	r3, [r4, #12]
 800ee0a:	6923      	ldr	r3, [r4, #16]
 800ee0c:	b94b      	cbnz	r3, 800ee22 <__swsetup_r+0x9a>
 800ee0e:	89a3      	ldrh	r3, [r4, #12]
 800ee10:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ee14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ee18:	d003      	beq.n	800ee22 <__swsetup_r+0x9a>
 800ee1a:	4621      	mov	r1, r4
 800ee1c:	4630      	mov	r0, r6
 800ee1e:	f000 fa05 	bl	800f22c <__smakebuf_r>
 800ee22:	89a0      	ldrh	r0, [r4, #12]
 800ee24:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ee28:	f010 0301 	ands.w	r3, r0, #1
 800ee2c:	d00a      	beq.n	800ee44 <__swsetup_r+0xbc>
 800ee2e:	2300      	movs	r3, #0
 800ee30:	60a3      	str	r3, [r4, #8]
 800ee32:	6963      	ldr	r3, [r4, #20]
 800ee34:	425b      	negs	r3, r3
 800ee36:	61a3      	str	r3, [r4, #24]
 800ee38:	6923      	ldr	r3, [r4, #16]
 800ee3a:	b943      	cbnz	r3, 800ee4e <__swsetup_r+0xc6>
 800ee3c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ee40:	d1ba      	bne.n	800edb8 <__swsetup_r+0x30>
 800ee42:	bd70      	pop	{r4, r5, r6, pc}
 800ee44:	0781      	lsls	r1, r0, #30
 800ee46:	bf58      	it	pl
 800ee48:	6963      	ldrpl	r3, [r4, #20]
 800ee4a:	60a3      	str	r3, [r4, #8]
 800ee4c:	e7f4      	b.n	800ee38 <__swsetup_r+0xb0>
 800ee4e:	2000      	movs	r0, #0
 800ee50:	e7f7      	b.n	800ee42 <__swsetup_r+0xba>
 800ee52:	bf00      	nop
 800ee54:	20000140 	.word	0x20000140
 800ee58:	0800fc54 	.word	0x0800fc54
 800ee5c:	0800fc74 	.word	0x0800fc74
 800ee60:	0800fc34 	.word	0x0800fc34

0800ee64 <abort>:
 800ee64:	b508      	push	{r3, lr}
 800ee66:	2006      	movs	r0, #6
 800ee68:	f000 fa50 	bl	800f30c <raise>
 800ee6c:	2001      	movs	r0, #1
 800ee6e:	f7f2 fa91 	bl	8001394 <_exit>
	...

0800ee74 <__sflush_r>:
 800ee74:	898a      	ldrh	r2, [r1, #12]
 800ee76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee7a:	4605      	mov	r5, r0
 800ee7c:	0710      	lsls	r0, r2, #28
 800ee7e:	460c      	mov	r4, r1
 800ee80:	d458      	bmi.n	800ef34 <__sflush_r+0xc0>
 800ee82:	684b      	ldr	r3, [r1, #4]
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	dc05      	bgt.n	800ee94 <__sflush_r+0x20>
 800ee88:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	dc02      	bgt.n	800ee94 <__sflush_r+0x20>
 800ee8e:	2000      	movs	r0, #0
 800ee90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee94:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ee96:	2e00      	cmp	r6, #0
 800ee98:	d0f9      	beq.n	800ee8e <__sflush_r+0x1a>
 800ee9a:	2300      	movs	r3, #0
 800ee9c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800eea0:	682f      	ldr	r7, [r5, #0]
 800eea2:	602b      	str	r3, [r5, #0]
 800eea4:	d032      	beq.n	800ef0c <__sflush_r+0x98>
 800eea6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800eea8:	89a3      	ldrh	r3, [r4, #12]
 800eeaa:	075a      	lsls	r2, r3, #29
 800eeac:	d505      	bpl.n	800eeba <__sflush_r+0x46>
 800eeae:	6863      	ldr	r3, [r4, #4]
 800eeb0:	1ac0      	subs	r0, r0, r3
 800eeb2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800eeb4:	b10b      	cbz	r3, 800eeba <__sflush_r+0x46>
 800eeb6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800eeb8:	1ac0      	subs	r0, r0, r3
 800eeba:	2300      	movs	r3, #0
 800eebc:	4602      	mov	r2, r0
 800eebe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800eec0:	6a21      	ldr	r1, [r4, #32]
 800eec2:	4628      	mov	r0, r5
 800eec4:	47b0      	blx	r6
 800eec6:	1c43      	adds	r3, r0, #1
 800eec8:	89a3      	ldrh	r3, [r4, #12]
 800eeca:	d106      	bne.n	800eeda <__sflush_r+0x66>
 800eecc:	6829      	ldr	r1, [r5, #0]
 800eece:	291d      	cmp	r1, #29
 800eed0:	d82c      	bhi.n	800ef2c <__sflush_r+0xb8>
 800eed2:	4a2a      	ldr	r2, [pc, #168]	; (800ef7c <__sflush_r+0x108>)
 800eed4:	40ca      	lsrs	r2, r1
 800eed6:	07d6      	lsls	r6, r2, #31
 800eed8:	d528      	bpl.n	800ef2c <__sflush_r+0xb8>
 800eeda:	2200      	movs	r2, #0
 800eedc:	6062      	str	r2, [r4, #4]
 800eede:	04d9      	lsls	r1, r3, #19
 800eee0:	6922      	ldr	r2, [r4, #16]
 800eee2:	6022      	str	r2, [r4, #0]
 800eee4:	d504      	bpl.n	800eef0 <__sflush_r+0x7c>
 800eee6:	1c42      	adds	r2, r0, #1
 800eee8:	d101      	bne.n	800eeee <__sflush_r+0x7a>
 800eeea:	682b      	ldr	r3, [r5, #0]
 800eeec:	b903      	cbnz	r3, 800eef0 <__sflush_r+0x7c>
 800eeee:	6560      	str	r0, [r4, #84]	; 0x54
 800eef0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800eef2:	602f      	str	r7, [r5, #0]
 800eef4:	2900      	cmp	r1, #0
 800eef6:	d0ca      	beq.n	800ee8e <__sflush_r+0x1a>
 800eef8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800eefc:	4299      	cmp	r1, r3
 800eefe:	d002      	beq.n	800ef06 <__sflush_r+0x92>
 800ef00:	4628      	mov	r0, r5
 800ef02:	f7fd f92d 	bl	800c160 <_free_r>
 800ef06:	2000      	movs	r0, #0
 800ef08:	6360      	str	r0, [r4, #52]	; 0x34
 800ef0a:	e7c1      	b.n	800ee90 <__sflush_r+0x1c>
 800ef0c:	6a21      	ldr	r1, [r4, #32]
 800ef0e:	2301      	movs	r3, #1
 800ef10:	4628      	mov	r0, r5
 800ef12:	47b0      	blx	r6
 800ef14:	1c41      	adds	r1, r0, #1
 800ef16:	d1c7      	bne.n	800eea8 <__sflush_r+0x34>
 800ef18:	682b      	ldr	r3, [r5, #0]
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	d0c4      	beq.n	800eea8 <__sflush_r+0x34>
 800ef1e:	2b1d      	cmp	r3, #29
 800ef20:	d001      	beq.n	800ef26 <__sflush_r+0xb2>
 800ef22:	2b16      	cmp	r3, #22
 800ef24:	d101      	bne.n	800ef2a <__sflush_r+0xb6>
 800ef26:	602f      	str	r7, [r5, #0]
 800ef28:	e7b1      	b.n	800ee8e <__sflush_r+0x1a>
 800ef2a:	89a3      	ldrh	r3, [r4, #12]
 800ef2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ef30:	81a3      	strh	r3, [r4, #12]
 800ef32:	e7ad      	b.n	800ee90 <__sflush_r+0x1c>
 800ef34:	690f      	ldr	r7, [r1, #16]
 800ef36:	2f00      	cmp	r7, #0
 800ef38:	d0a9      	beq.n	800ee8e <__sflush_r+0x1a>
 800ef3a:	0793      	lsls	r3, r2, #30
 800ef3c:	680e      	ldr	r6, [r1, #0]
 800ef3e:	bf08      	it	eq
 800ef40:	694b      	ldreq	r3, [r1, #20]
 800ef42:	600f      	str	r7, [r1, #0]
 800ef44:	bf18      	it	ne
 800ef46:	2300      	movne	r3, #0
 800ef48:	eba6 0807 	sub.w	r8, r6, r7
 800ef4c:	608b      	str	r3, [r1, #8]
 800ef4e:	f1b8 0f00 	cmp.w	r8, #0
 800ef52:	dd9c      	ble.n	800ee8e <__sflush_r+0x1a>
 800ef54:	6a21      	ldr	r1, [r4, #32]
 800ef56:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ef58:	4643      	mov	r3, r8
 800ef5a:	463a      	mov	r2, r7
 800ef5c:	4628      	mov	r0, r5
 800ef5e:	47b0      	blx	r6
 800ef60:	2800      	cmp	r0, #0
 800ef62:	dc06      	bgt.n	800ef72 <__sflush_r+0xfe>
 800ef64:	89a3      	ldrh	r3, [r4, #12]
 800ef66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ef6a:	81a3      	strh	r3, [r4, #12]
 800ef6c:	f04f 30ff 	mov.w	r0, #4294967295
 800ef70:	e78e      	b.n	800ee90 <__sflush_r+0x1c>
 800ef72:	4407      	add	r7, r0
 800ef74:	eba8 0800 	sub.w	r8, r8, r0
 800ef78:	e7e9      	b.n	800ef4e <__sflush_r+0xda>
 800ef7a:	bf00      	nop
 800ef7c:	20400001 	.word	0x20400001

0800ef80 <_fflush_r>:
 800ef80:	b538      	push	{r3, r4, r5, lr}
 800ef82:	690b      	ldr	r3, [r1, #16]
 800ef84:	4605      	mov	r5, r0
 800ef86:	460c      	mov	r4, r1
 800ef88:	b913      	cbnz	r3, 800ef90 <_fflush_r+0x10>
 800ef8a:	2500      	movs	r5, #0
 800ef8c:	4628      	mov	r0, r5
 800ef8e:	bd38      	pop	{r3, r4, r5, pc}
 800ef90:	b118      	cbz	r0, 800ef9a <_fflush_r+0x1a>
 800ef92:	6983      	ldr	r3, [r0, #24]
 800ef94:	b90b      	cbnz	r3, 800ef9a <_fflush_r+0x1a>
 800ef96:	f000 f887 	bl	800f0a8 <__sinit>
 800ef9a:	4b14      	ldr	r3, [pc, #80]	; (800efec <_fflush_r+0x6c>)
 800ef9c:	429c      	cmp	r4, r3
 800ef9e:	d11b      	bne.n	800efd8 <_fflush_r+0x58>
 800efa0:	686c      	ldr	r4, [r5, #4]
 800efa2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800efa6:	2b00      	cmp	r3, #0
 800efa8:	d0ef      	beq.n	800ef8a <_fflush_r+0xa>
 800efaa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800efac:	07d0      	lsls	r0, r2, #31
 800efae:	d404      	bmi.n	800efba <_fflush_r+0x3a>
 800efb0:	0599      	lsls	r1, r3, #22
 800efb2:	d402      	bmi.n	800efba <_fflush_r+0x3a>
 800efb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800efb6:	f7ff fcf0 	bl	800e99a <__retarget_lock_acquire_recursive>
 800efba:	4628      	mov	r0, r5
 800efbc:	4621      	mov	r1, r4
 800efbe:	f7ff ff59 	bl	800ee74 <__sflush_r>
 800efc2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800efc4:	07da      	lsls	r2, r3, #31
 800efc6:	4605      	mov	r5, r0
 800efc8:	d4e0      	bmi.n	800ef8c <_fflush_r+0xc>
 800efca:	89a3      	ldrh	r3, [r4, #12]
 800efcc:	059b      	lsls	r3, r3, #22
 800efce:	d4dd      	bmi.n	800ef8c <_fflush_r+0xc>
 800efd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800efd2:	f7ff fce3 	bl	800e99c <__retarget_lock_release_recursive>
 800efd6:	e7d9      	b.n	800ef8c <_fflush_r+0xc>
 800efd8:	4b05      	ldr	r3, [pc, #20]	; (800eff0 <_fflush_r+0x70>)
 800efda:	429c      	cmp	r4, r3
 800efdc:	d101      	bne.n	800efe2 <_fflush_r+0x62>
 800efde:	68ac      	ldr	r4, [r5, #8]
 800efe0:	e7df      	b.n	800efa2 <_fflush_r+0x22>
 800efe2:	4b04      	ldr	r3, [pc, #16]	; (800eff4 <_fflush_r+0x74>)
 800efe4:	429c      	cmp	r4, r3
 800efe6:	bf08      	it	eq
 800efe8:	68ec      	ldreq	r4, [r5, #12]
 800efea:	e7da      	b.n	800efa2 <_fflush_r+0x22>
 800efec:	0800fc54 	.word	0x0800fc54
 800eff0:	0800fc74 	.word	0x0800fc74
 800eff4:	0800fc34 	.word	0x0800fc34

0800eff8 <std>:
 800eff8:	2300      	movs	r3, #0
 800effa:	b510      	push	{r4, lr}
 800effc:	4604      	mov	r4, r0
 800effe:	e9c0 3300 	strd	r3, r3, [r0]
 800f002:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f006:	6083      	str	r3, [r0, #8]
 800f008:	8181      	strh	r1, [r0, #12]
 800f00a:	6643      	str	r3, [r0, #100]	; 0x64
 800f00c:	81c2      	strh	r2, [r0, #14]
 800f00e:	6183      	str	r3, [r0, #24]
 800f010:	4619      	mov	r1, r3
 800f012:	2208      	movs	r2, #8
 800f014:	305c      	adds	r0, #92	; 0x5c
 800f016:	f7fd f89b 	bl	800c150 <memset>
 800f01a:	4b05      	ldr	r3, [pc, #20]	; (800f030 <std+0x38>)
 800f01c:	6263      	str	r3, [r4, #36]	; 0x24
 800f01e:	4b05      	ldr	r3, [pc, #20]	; (800f034 <std+0x3c>)
 800f020:	62a3      	str	r3, [r4, #40]	; 0x28
 800f022:	4b05      	ldr	r3, [pc, #20]	; (800f038 <std+0x40>)
 800f024:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f026:	4b05      	ldr	r3, [pc, #20]	; (800f03c <std+0x44>)
 800f028:	6224      	str	r4, [r4, #32]
 800f02a:	6323      	str	r3, [r4, #48]	; 0x30
 800f02c:	bd10      	pop	{r4, pc}
 800f02e:	bf00      	nop
 800f030:	0800f345 	.word	0x0800f345
 800f034:	0800f367 	.word	0x0800f367
 800f038:	0800f39f 	.word	0x0800f39f
 800f03c:	0800f3c3 	.word	0x0800f3c3

0800f040 <_cleanup_r>:
 800f040:	4901      	ldr	r1, [pc, #4]	; (800f048 <_cleanup_r+0x8>)
 800f042:	f000 b8af 	b.w	800f1a4 <_fwalk_reent>
 800f046:	bf00      	nop
 800f048:	0800ef81 	.word	0x0800ef81

0800f04c <__sfmoreglue>:
 800f04c:	b570      	push	{r4, r5, r6, lr}
 800f04e:	2268      	movs	r2, #104	; 0x68
 800f050:	1e4d      	subs	r5, r1, #1
 800f052:	4355      	muls	r5, r2
 800f054:	460e      	mov	r6, r1
 800f056:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f05a:	f7fd f8ed 	bl	800c238 <_malloc_r>
 800f05e:	4604      	mov	r4, r0
 800f060:	b140      	cbz	r0, 800f074 <__sfmoreglue+0x28>
 800f062:	2100      	movs	r1, #0
 800f064:	e9c0 1600 	strd	r1, r6, [r0]
 800f068:	300c      	adds	r0, #12
 800f06a:	60a0      	str	r0, [r4, #8]
 800f06c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f070:	f7fd f86e 	bl	800c150 <memset>
 800f074:	4620      	mov	r0, r4
 800f076:	bd70      	pop	{r4, r5, r6, pc}

0800f078 <__sfp_lock_acquire>:
 800f078:	4801      	ldr	r0, [pc, #4]	; (800f080 <__sfp_lock_acquire+0x8>)
 800f07a:	f7ff bc8e 	b.w	800e99a <__retarget_lock_acquire_recursive>
 800f07e:	bf00      	nop
 800f080:	20001d3d 	.word	0x20001d3d

0800f084 <__sfp_lock_release>:
 800f084:	4801      	ldr	r0, [pc, #4]	; (800f08c <__sfp_lock_release+0x8>)
 800f086:	f7ff bc89 	b.w	800e99c <__retarget_lock_release_recursive>
 800f08a:	bf00      	nop
 800f08c:	20001d3d 	.word	0x20001d3d

0800f090 <__sinit_lock_acquire>:
 800f090:	4801      	ldr	r0, [pc, #4]	; (800f098 <__sinit_lock_acquire+0x8>)
 800f092:	f7ff bc82 	b.w	800e99a <__retarget_lock_acquire_recursive>
 800f096:	bf00      	nop
 800f098:	20001d3e 	.word	0x20001d3e

0800f09c <__sinit_lock_release>:
 800f09c:	4801      	ldr	r0, [pc, #4]	; (800f0a4 <__sinit_lock_release+0x8>)
 800f09e:	f7ff bc7d 	b.w	800e99c <__retarget_lock_release_recursive>
 800f0a2:	bf00      	nop
 800f0a4:	20001d3e 	.word	0x20001d3e

0800f0a8 <__sinit>:
 800f0a8:	b510      	push	{r4, lr}
 800f0aa:	4604      	mov	r4, r0
 800f0ac:	f7ff fff0 	bl	800f090 <__sinit_lock_acquire>
 800f0b0:	69a3      	ldr	r3, [r4, #24]
 800f0b2:	b11b      	cbz	r3, 800f0bc <__sinit+0x14>
 800f0b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f0b8:	f7ff bff0 	b.w	800f09c <__sinit_lock_release>
 800f0bc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800f0c0:	6523      	str	r3, [r4, #80]	; 0x50
 800f0c2:	4b13      	ldr	r3, [pc, #76]	; (800f110 <__sinit+0x68>)
 800f0c4:	4a13      	ldr	r2, [pc, #76]	; (800f114 <__sinit+0x6c>)
 800f0c6:	681b      	ldr	r3, [r3, #0]
 800f0c8:	62a2      	str	r2, [r4, #40]	; 0x28
 800f0ca:	42a3      	cmp	r3, r4
 800f0cc:	bf04      	itt	eq
 800f0ce:	2301      	moveq	r3, #1
 800f0d0:	61a3      	streq	r3, [r4, #24]
 800f0d2:	4620      	mov	r0, r4
 800f0d4:	f000 f820 	bl	800f118 <__sfp>
 800f0d8:	6060      	str	r0, [r4, #4]
 800f0da:	4620      	mov	r0, r4
 800f0dc:	f000 f81c 	bl	800f118 <__sfp>
 800f0e0:	60a0      	str	r0, [r4, #8]
 800f0e2:	4620      	mov	r0, r4
 800f0e4:	f000 f818 	bl	800f118 <__sfp>
 800f0e8:	2200      	movs	r2, #0
 800f0ea:	60e0      	str	r0, [r4, #12]
 800f0ec:	2104      	movs	r1, #4
 800f0ee:	6860      	ldr	r0, [r4, #4]
 800f0f0:	f7ff ff82 	bl	800eff8 <std>
 800f0f4:	68a0      	ldr	r0, [r4, #8]
 800f0f6:	2201      	movs	r2, #1
 800f0f8:	2109      	movs	r1, #9
 800f0fa:	f7ff ff7d 	bl	800eff8 <std>
 800f0fe:	68e0      	ldr	r0, [r4, #12]
 800f100:	2202      	movs	r2, #2
 800f102:	2112      	movs	r1, #18
 800f104:	f7ff ff78 	bl	800eff8 <std>
 800f108:	2301      	movs	r3, #1
 800f10a:	61a3      	str	r3, [r4, #24]
 800f10c:	e7d2      	b.n	800f0b4 <__sinit+0xc>
 800f10e:	bf00      	nop
 800f110:	0800f868 	.word	0x0800f868
 800f114:	0800f041 	.word	0x0800f041

0800f118 <__sfp>:
 800f118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f11a:	4607      	mov	r7, r0
 800f11c:	f7ff ffac 	bl	800f078 <__sfp_lock_acquire>
 800f120:	4b1e      	ldr	r3, [pc, #120]	; (800f19c <__sfp+0x84>)
 800f122:	681e      	ldr	r6, [r3, #0]
 800f124:	69b3      	ldr	r3, [r6, #24]
 800f126:	b913      	cbnz	r3, 800f12e <__sfp+0x16>
 800f128:	4630      	mov	r0, r6
 800f12a:	f7ff ffbd 	bl	800f0a8 <__sinit>
 800f12e:	3648      	adds	r6, #72	; 0x48
 800f130:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f134:	3b01      	subs	r3, #1
 800f136:	d503      	bpl.n	800f140 <__sfp+0x28>
 800f138:	6833      	ldr	r3, [r6, #0]
 800f13a:	b30b      	cbz	r3, 800f180 <__sfp+0x68>
 800f13c:	6836      	ldr	r6, [r6, #0]
 800f13e:	e7f7      	b.n	800f130 <__sfp+0x18>
 800f140:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f144:	b9d5      	cbnz	r5, 800f17c <__sfp+0x64>
 800f146:	4b16      	ldr	r3, [pc, #88]	; (800f1a0 <__sfp+0x88>)
 800f148:	60e3      	str	r3, [r4, #12]
 800f14a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f14e:	6665      	str	r5, [r4, #100]	; 0x64
 800f150:	f7ff fc22 	bl	800e998 <__retarget_lock_init_recursive>
 800f154:	f7ff ff96 	bl	800f084 <__sfp_lock_release>
 800f158:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800f15c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800f160:	6025      	str	r5, [r4, #0]
 800f162:	61a5      	str	r5, [r4, #24]
 800f164:	2208      	movs	r2, #8
 800f166:	4629      	mov	r1, r5
 800f168:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f16c:	f7fc fff0 	bl	800c150 <memset>
 800f170:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f174:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f178:	4620      	mov	r0, r4
 800f17a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f17c:	3468      	adds	r4, #104	; 0x68
 800f17e:	e7d9      	b.n	800f134 <__sfp+0x1c>
 800f180:	2104      	movs	r1, #4
 800f182:	4638      	mov	r0, r7
 800f184:	f7ff ff62 	bl	800f04c <__sfmoreglue>
 800f188:	4604      	mov	r4, r0
 800f18a:	6030      	str	r0, [r6, #0]
 800f18c:	2800      	cmp	r0, #0
 800f18e:	d1d5      	bne.n	800f13c <__sfp+0x24>
 800f190:	f7ff ff78 	bl	800f084 <__sfp_lock_release>
 800f194:	230c      	movs	r3, #12
 800f196:	603b      	str	r3, [r7, #0]
 800f198:	e7ee      	b.n	800f178 <__sfp+0x60>
 800f19a:	bf00      	nop
 800f19c:	0800f868 	.word	0x0800f868
 800f1a0:	ffff0001 	.word	0xffff0001

0800f1a4 <_fwalk_reent>:
 800f1a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f1a8:	4606      	mov	r6, r0
 800f1aa:	4688      	mov	r8, r1
 800f1ac:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f1b0:	2700      	movs	r7, #0
 800f1b2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f1b6:	f1b9 0901 	subs.w	r9, r9, #1
 800f1ba:	d505      	bpl.n	800f1c8 <_fwalk_reent+0x24>
 800f1bc:	6824      	ldr	r4, [r4, #0]
 800f1be:	2c00      	cmp	r4, #0
 800f1c0:	d1f7      	bne.n	800f1b2 <_fwalk_reent+0xe>
 800f1c2:	4638      	mov	r0, r7
 800f1c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f1c8:	89ab      	ldrh	r3, [r5, #12]
 800f1ca:	2b01      	cmp	r3, #1
 800f1cc:	d907      	bls.n	800f1de <_fwalk_reent+0x3a>
 800f1ce:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f1d2:	3301      	adds	r3, #1
 800f1d4:	d003      	beq.n	800f1de <_fwalk_reent+0x3a>
 800f1d6:	4629      	mov	r1, r5
 800f1d8:	4630      	mov	r0, r6
 800f1da:	47c0      	blx	r8
 800f1dc:	4307      	orrs	r7, r0
 800f1de:	3568      	adds	r5, #104	; 0x68
 800f1e0:	e7e9      	b.n	800f1b6 <_fwalk_reent+0x12>

0800f1e2 <__swhatbuf_r>:
 800f1e2:	b570      	push	{r4, r5, r6, lr}
 800f1e4:	460e      	mov	r6, r1
 800f1e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f1ea:	2900      	cmp	r1, #0
 800f1ec:	b096      	sub	sp, #88	; 0x58
 800f1ee:	4614      	mov	r4, r2
 800f1f0:	461d      	mov	r5, r3
 800f1f2:	da08      	bge.n	800f206 <__swhatbuf_r+0x24>
 800f1f4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800f1f8:	2200      	movs	r2, #0
 800f1fa:	602a      	str	r2, [r5, #0]
 800f1fc:	061a      	lsls	r2, r3, #24
 800f1fe:	d410      	bmi.n	800f222 <__swhatbuf_r+0x40>
 800f200:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f204:	e00e      	b.n	800f224 <__swhatbuf_r+0x42>
 800f206:	466a      	mov	r2, sp
 800f208:	f000 f902 	bl	800f410 <_fstat_r>
 800f20c:	2800      	cmp	r0, #0
 800f20e:	dbf1      	blt.n	800f1f4 <__swhatbuf_r+0x12>
 800f210:	9a01      	ldr	r2, [sp, #4]
 800f212:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f216:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f21a:	425a      	negs	r2, r3
 800f21c:	415a      	adcs	r2, r3
 800f21e:	602a      	str	r2, [r5, #0]
 800f220:	e7ee      	b.n	800f200 <__swhatbuf_r+0x1e>
 800f222:	2340      	movs	r3, #64	; 0x40
 800f224:	2000      	movs	r0, #0
 800f226:	6023      	str	r3, [r4, #0]
 800f228:	b016      	add	sp, #88	; 0x58
 800f22a:	bd70      	pop	{r4, r5, r6, pc}

0800f22c <__smakebuf_r>:
 800f22c:	898b      	ldrh	r3, [r1, #12]
 800f22e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f230:	079d      	lsls	r5, r3, #30
 800f232:	4606      	mov	r6, r0
 800f234:	460c      	mov	r4, r1
 800f236:	d507      	bpl.n	800f248 <__smakebuf_r+0x1c>
 800f238:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f23c:	6023      	str	r3, [r4, #0]
 800f23e:	6123      	str	r3, [r4, #16]
 800f240:	2301      	movs	r3, #1
 800f242:	6163      	str	r3, [r4, #20]
 800f244:	b002      	add	sp, #8
 800f246:	bd70      	pop	{r4, r5, r6, pc}
 800f248:	ab01      	add	r3, sp, #4
 800f24a:	466a      	mov	r2, sp
 800f24c:	f7ff ffc9 	bl	800f1e2 <__swhatbuf_r>
 800f250:	9900      	ldr	r1, [sp, #0]
 800f252:	4605      	mov	r5, r0
 800f254:	4630      	mov	r0, r6
 800f256:	f7fc ffef 	bl	800c238 <_malloc_r>
 800f25a:	b948      	cbnz	r0, 800f270 <__smakebuf_r+0x44>
 800f25c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f260:	059a      	lsls	r2, r3, #22
 800f262:	d4ef      	bmi.n	800f244 <__smakebuf_r+0x18>
 800f264:	f023 0303 	bic.w	r3, r3, #3
 800f268:	f043 0302 	orr.w	r3, r3, #2
 800f26c:	81a3      	strh	r3, [r4, #12]
 800f26e:	e7e3      	b.n	800f238 <__smakebuf_r+0xc>
 800f270:	4b0d      	ldr	r3, [pc, #52]	; (800f2a8 <__smakebuf_r+0x7c>)
 800f272:	62b3      	str	r3, [r6, #40]	; 0x28
 800f274:	89a3      	ldrh	r3, [r4, #12]
 800f276:	6020      	str	r0, [r4, #0]
 800f278:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f27c:	81a3      	strh	r3, [r4, #12]
 800f27e:	9b00      	ldr	r3, [sp, #0]
 800f280:	6163      	str	r3, [r4, #20]
 800f282:	9b01      	ldr	r3, [sp, #4]
 800f284:	6120      	str	r0, [r4, #16]
 800f286:	b15b      	cbz	r3, 800f2a0 <__smakebuf_r+0x74>
 800f288:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f28c:	4630      	mov	r0, r6
 800f28e:	f000 f8d1 	bl	800f434 <_isatty_r>
 800f292:	b128      	cbz	r0, 800f2a0 <__smakebuf_r+0x74>
 800f294:	89a3      	ldrh	r3, [r4, #12]
 800f296:	f023 0303 	bic.w	r3, r3, #3
 800f29a:	f043 0301 	orr.w	r3, r3, #1
 800f29e:	81a3      	strh	r3, [r4, #12]
 800f2a0:	89a0      	ldrh	r0, [r4, #12]
 800f2a2:	4305      	orrs	r5, r0
 800f2a4:	81a5      	strh	r5, [r4, #12]
 800f2a6:	e7cd      	b.n	800f244 <__smakebuf_r+0x18>
 800f2a8:	0800f041 	.word	0x0800f041

0800f2ac <_malloc_usable_size_r>:
 800f2ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f2b0:	1f18      	subs	r0, r3, #4
 800f2b2:	2b00      	cmp	r3, #0
 800f2b4:	bfbc      	itt	lt
 800f2b6:	580b      	ldrlt	r3, [r1, r0]
 800f2b8:	18c0      	addlt	r0, r0, r3
 800f2ba:	4770      	bx	lr

0800f2bc <_raise_r>:
 800f2bc:	291f      	cmp	r1, #31
 800f2be:	b538      	push	{r3, r4, r5, lr}
 800f2c0:	4604      	mov	r4, r0
 800f2c2:	460d      	mov	r5, r1
 800f2c4:	d904      	bls.n	800f2d0 <_raise_r+0x14>
 800f2c6:	2316      	movs	r3, #22
 800f2c8:	6003      	str	r3, [r0, #0]
 800f2ca:	f04f 30ff 	mov.w	r0, #4294967295
 800f2ce:	bd38      	pop	{r3, r4, r5, pc}
 800f2d0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f2d2:	b112      	cbz	r2, 800f2da <_raise_r+0x1e>
 800f2d4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f2d8:	b94b      	cbnz	r3, 800f2ee <_raise_r+0x32>
 800f2da:	4620      	mov	r0, r4
 800f2dc:	f000 f830 	bl	800f340 <_getpid_r>
 800f2e0:	462a      	mov	r2, r5
 800f2e2:	4601      	mov	r1, r0
 800f2e4:	4620      	mov	r0, r4
 800f2e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f2ea:	f000 b817 	b.w	800f31c <_kill_r>
 800f2ee:	2b01      	cmp	r3, #1
 800f2f0:	d00a      	beq.n	800f308 <_raise_r+0x4c>
 800f2f2:	1c59      	adds	r1, r3, #1
 800f2f4:	d103      	bne.n	800f2fe <_raise_r+0x42>
 800f2f6:	2316      	movs	r3, #22
 800f2f8:	6003      	str	r3, [r0, #0]
 800f2fa:	2001      	movs	r0, #1
 800f2fc:	e7e7      	b.n	800f2ce <_raise_r+0x12>
 800f2fe:	2400      	movs	r4, #0
 800f300:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f304:	4628      	mov	r0, r5
 800f306:	4798      	blx	r3
 800f308:	2000      	movs	r0, #0
 800f30a:	e7e0      	b.n	800f2ce <_raise_r+0x12>

0800f30c <raise>:
 800f30c:	4b02      	ldr	r3, [pc, #8]	; (800f318 <raise+0xc>)
 800f30e:	4601      	mov	r1, r0
 800f310:	6818      	ldr	r0, [r3, #0]
 800f312:	f7ff bfd3 	b.w	800f2bc <_raise_r>
 800f316:	bf00      	nop
 800f318:	20000140 	.word	0x20000140

0800f31c <_kill_r>:
 800f31c:	b538      	push	{r3, r4, r5, lr}
 800f31e:	4d07      	ldr	r5, [pc, #28]	; (800f33c <_kill_r+0x20>)
 800f320:	2300      	movs	r3, #0
 800f322:	4604      	mov	r4, r0
 800f324:	4608      	mov	r0, r1
 800f326:	4611      	mov	r1, r2
 800f328:	602b      	str	r3, [r5, #0]
 800f32a:	f7f2 f823 	bl	8001374 <_kill>
 800f32e:	1c43      	adds	r3, r0, #1
 800f330:	d102      	bne.n	800f338 <_kill_r+0x1c>
 800f332:	682b      	ldr	r3, [r5, #0]
 800f334:	b103      	cbz	r3, 800f338 <_kill_r+0x1c>
 800f336:	6023      	str	r3, [r4, #0]
 800f338:	bd38      	pop	{r3, r4, r5, pc}
 800f33a:	bf00      	nop
 800f33c:	20001d38 	.word	0x20001d38

0800f340 <_getpid_r>:
 800f340:	f7f2 b810 	b.w	8001364 <_getpid>

0800f344 <__sread>:
 800f344:	b510      	push	{r4, lr}
 800f346:	460c      	mov	r4, r1
 800f348:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f34c:	f000 f894 	bl	800f478 <_read_r>
 800f350:	2800      	cmp	r0, #0
 800f352:	bfab      	itete	ge
 800f354:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f356:	89a3      	ldrhlt	r3, [r4, #12]
 800f358:	181b      	addge	r3, r3, r0
 800f35a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f35e:	bfac      	ite	ge
 800f360:	6563      	strge	r3, [r4, #84]	; 0x54
 800f362:	81a3      	strhlt	r3, [r4, #12]
 800f364:	bd10      	pop	{r4, pc}

0800f366 <__swrite>:
 800f366:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f36a:	461f      	mov	r7, r3
 800f36c:	898b      	ldrh	r3, [r1, #12]
 800f36e:	05db      	lsls	r3, r3, #23
 800f370:	4605      	mov	r5, r0
 800f372:	460c      	mov	r4, r1
 800f374:	4616      	mov	r6, r2
 800f376:	d505      	bpl.n	800f384 <__swrite+0x1e>
 800f378:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f37c:	2302      	movs	r3, #2
 800f37e:	2200      	movs	r2, #0
 800f380:	f000 f868 	bl	800f454 <_lseek_r>
 800f384:	89a3      	ldrh	r3, [r4, #12]
 800f386:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f38a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f38e:	81a3      	strh	r3, [r4, #12]
 800f390:	4632      	mov	r2, r6
 800f392:	463b      	mov	r3, r7
 800f394:	4628      	mov	r0, r5
 800f396:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f39a:	f000 b817 	b.w	800f3cc <_write_r>

0800f39e <__sseek>:
 800f39e:	b510      	push	{r4, lr}
 800f3a0:	460c      	mov	r4, r1
 800f3a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f3a6:	f000 f855 	bl	800f454 <_lseek_r>
 800f3aa:	1c43      	adds	r3, r0, #1
 800f3ac:	89a3      	ldrh	r3, [r4, #12]
 800f3ae:	bf15      	itete	ne
 800f3b0:	6560      	strne	r0, [r4, #84]	; 0x54
 800f3b2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f3b6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f3ba:	81a3      	strheq	r3, [r4, #12]
 800f3bc:	bf18      	it	ne
 800f3be:	81a3      	strhne	r3, [r4, #12]
 800f3c0:	bd10      	pop	{r4, pc}

0800f3c2 <__sclose>:
 800f3c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f3c6:	f000 b813 	b.w	800f3f0 <_close_r>
	...

0800f3cc <_write_r>:
 800f3cc:	b538      	push	{r3, r4, r5, lr}
 800f3ce:	4d07      	ldr	r5, [pc, #28]	; (800f3ec <_write_r+0x20>)
 800f3d0:	4604      	mov	r4, r0
 800f3d2:	4608      	mov	r0, r1
 800f3d4:	4611      	mov	r1, r2
 800f3d6:	2200      	movs	r2, #0
 800f3d8:	602a      	str	r2, [r5, #0]
 800f3da:	461a      	mov	r2, r3
 800f3dc:	f7f2 f801 	bl	80013e2 <_write>
 800f3e0:	1c43      	adds	r3, r0, #1
 800f3e2:	d102      	bne.n	800f3ea <_write_r+0x1e>
 800f3e4:	682b      	ldr	r3, [r5, #0]
 800f3e6:	b103      	cbz	r3, 800f3ea <_write_r+0x1e>
 800f3e8:	6023      	str	r3, [r4, #0]
 800f3ea:	bd38      	pop	{r3, r4, r5, pc}
 800f3ec:	20001d38 	.word	0x20001d38

0800f3f0 <_close_r>:
 800f3f0:	b538      	push	{r3, r4, r5, lr}
 800f3f2:	4d06      	ldr	r5, [pc, #24]	; (800f40c <_close_r+0x1c>)
 800f3f4:	2300      	movs	r3, #0
 800f3f6:	4604      	mov	r4, r0
 800f3f8:	4608      	mov	r0, r1
 800f3fa:	602b      	str	r3, [r5, #0]
 800f3fc:	f7f2 f80d 	bl	800141a <_close>
 800f400:	1c43      	adds	r3, r0, #1
 800f402:	d102      	bne.n	800f40a <_close_r+0x1a>
 800f404:	682b      	ldr	r3, [r5, #0]
 800f406:	b103      	cbz	r3, 800f40a <_close_r+0x1a>
 800f408:	6023      	str	r3, [r4, #0]
 800f40a:	bd38      	pop	{r3, r4, r5, pc}
 800f40c:	20001d38 	.word	0x20001d38

0800f410 <_fstat_r>:
 800f410:	b538      	push	{r3, r4, r5, lr}
 800f412:	4d07      	ldr	r5, [pc, #28]	; (800f430 <_fstat_r+0x20>)
 800f414:	2300      	movs	r3, #0
 800f416:	4604      	mov	r4, r0
 800f418:	4608      	mov	r0, r1
 800f41a:	4611      	mov	r1, r2
 800f41c:	602b      	str	r3, [r5, #0]
 800f41e:	f7f2 f808 	bl	8001432 <_fstat>
 800f422:	1c43      	adds	r3, r0, #1
 800f424:	d102      	bne.n	800f42c <_fstat_r+0x1c>
 800f426:	682b      	ldr	r3, [r5, #0]
 800f428:	b103      	cbz	r3, 800f42c <_fstat_r+0x1c>
 800f42a:	6023      	str	r3, [r4, #0]
 800f42c:	bd38      	pop	{r3, r4, r5, pc}
 800f42e:	bf00      	nop
 800f430:	20001d38 	.word	0x20001d38

0800f434 <_isatty_r>:
 800f434:	b538      	push	{r3, r4, r5, lr}
 800f436:	4d06      	ldr	r5, [pc, #24]	; (800f450 <_isatty_r+0x1c>)
 800f438:	2300      	movs	r3, #0
 800f43a:	4604      	mov	r4, r0
 800f43c:	4608      	mov	r0, r1
 800f43e:	602b      	str	r3, [r5, #0]
 800f440:	f7f2 f807 	bl	8001452 <_isatty>
 800f444:	1c43      	adds	r3, r0, #1
 800f446:	d102      	bne.n	800f44e <_isatty_r+0x1a>
 800f448:	682b      	ldr	r3, [r5, #0]
 800f44a:	b103      	cbz	r3, 800f44e <_isatty_r+0x1a>
 800f44c:	6023      	str	r3, [r4, #0]
 800f44e:	bd38      	pop	{r3, r4, r5, pc}
 800f450:	20001d38 	.word	0x20001d38

0800f454 <_lseek_r>:
 800f454:	b538      	push	{r3, r4, r5, lr}
 800f456:	4d07      	ldr	r5, [pc, #28]	; (800f474 <_lseek_r+0x20>)
 800f458:	4604      	mov	r4, r0
 800f45a:	4608      	mov	r0, r1
 800f45c:	4611      	mov	r1, r2
 800f45e:	2200      	movs	r2, #0
 800f460:	602a      	str	r2, [r5, #0]
 800f462:	461a      	mov	r2, r3
 800f464:	f7f2 f800 	bl	8001468 <_lseek>
 800f468:	1c43      	adds	r3, r0, #1
 800f46a:	d102      	bne.n	800f472 <_lseek_r+0x1e>
 800f46c:	682b      	ldr	r3, [r5, #0]
 800f46e:	b103      	cbz	r3, 800f472 <_lseek_r+0x1e>
 800f470:	6023      	str	r3, [r4, #0]
 800f472:	bd38      	pop	{r3, r4, r5, pc}
 800f474:	20001d38 	.word	0x20001d38

0800f478 <_read_r>:
 800f478:	b538      	push	{r3, r4, r5, lr}
 800f47a:	4d07      	ldr	r5, [pc, #28]	; (800f498 <_read_r+0x20>)
 800f47c:	4604      	mov	r4, r0
 800f47e:	4608      	mov	r0, r1
 800f480:	4611      	mov	r1, r2
 800f482:	2200      	movs	r2, #0
 800f484:	602a      	str	r2, [r5, #0]
 800f486:	461a      	mov	r2, r3
 800f488:	f7f1 ff8e 	bl	80013a8 <_read>
 800f48c:	1c43      	adds	r3, r0, #1
 800f48e:	d102      	bne.n	800f496 <_read_r+0x1e>
 800f490:	682b      	ldr	r3, [r5, #0]
 800f492:	b103      	cbz	r3, 800f496 <_read_r+0x1e>
 800f494:	6023      	str	r3, [r4, #0]
 800f496:	bd38      	pop	{r3, r4, r5, pc}
 800f498:	20001d38 	.word	0x20001d38

0800f49c <_init>:
 800f49c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f49e:	bf00      	nop
 800f4a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f4a2:	bc08      	pop	{r3}
 800f4a4:	469e      	mov	lr, r3
 800f4a6:	4770      	bx	lr

0800f4a8 <_fini>:
 800f4a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f4aa:	bf00      	nop
 800f4ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f4ae:	bc08      	pop	{r3}
 800f4b0:	469e      	mov	lr, r3
 800f4b2:	4770      	bx	lr
